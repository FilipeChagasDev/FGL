
STM32H743VI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08004b60  08004b60  00014b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08004d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000bc  20000010  08004d20  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200000cc  08004d20  000200cc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000169b9  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000028f8  00000000  00000000  000369f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000009e8  00000000  00000000  000392f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000008f0  00000000  00000000  00039cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035883  00000000  00000000  0003a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e810  00000000  00000000  0006fe4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00152784  00000000  00000000  0007e65b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001d0ddf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002624  00000000  00000000  001d0e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004b48 	.word	0x08004b48

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08004b48 	.word	0x08004b48

080002d8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2224      	movs	r2, #36	; 0x24
 80002e2:	2100      	movs	r1, #0
 80002e4:	4618      	mov	r0, r3
 80002e6:	f004 fc27 	bl	8004b38 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80002ea:	4b12      	ldr	r3, [pc, #72]	; (8000334 <MX_DAC1_Init+0x5c>)
 80002ec:	4a12      	ldr	r2, [pc, #72]	; (8000338 <MX_DAC1_Init+0x60>)
 80002ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80002f0:	4810      	ldr	r0, [pc, #64]	; (8000334 <MX_DAC1_Init+0x5c>)
 80002f2:	f000 fd3d 	bl	8000d70 <HAL_DAC_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80002fc:	f000 f95c 	bl	80005b8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000300:	2300      	movs	r3, #0
 8000302:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000304:	2300      	movs	r3, #0
 8000306:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000308:	2302      	movs	r3, #2
 800030a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 800030c:	2302      	movs	r3, #2
 800030e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000310:	2300      	movs	r3, #0
 8000312:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2210      	movs	r2, #16
 8000318:	4619      	mov	r1, r3
 800031a:	4806      	ldr	r0, [pc, #24]	; (8000334 <MX_DAC1_Init+0x5c>)
 800031c:	f000 fd58 	bl	8000dd0 <HAL_DAC_ConfigChannel>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000326:	f000 f947 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800032a:	bf00      	nop
 800032c:	3728      	adds	r7, #40	; 0x28
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	2000002c 	.word	0x2000002c
 8000338:	40007400 	.word	0x40007400

0800033c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a0b      	ldr	r2, [pc, #44]	; (8000378 <HAL_DAC_MspInit+0x3c>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d10e      	bne.n	800036c <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <HAL_DAC_MspInit+0x40>)
 8000350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000354:	4a09      	ldr	r2, [pc, #36]	; (800037c <HAL_DAC_MspInit+0x40>)
 8000356:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800035a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800035e:	4b07      	ldr	r3, [pc, #28]	; (800037c <HAL_DAC_MspInit+0x40>)
 8000360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800036c:	bf00      	nop
 800036e:	3714      	adds	r7, #20
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	40007400 	.word	0x40007400
 800037c:	58024400 	.word	0x58024400

08000380 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000396:	4b3d      	ldr	r3, [pc, #244]	; (800048c <MX_GPIO_Init+0x10c>)
 8000398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039c:	4a3b      	ldr	r2, [pc, #236]	; (800048c <MX_GPIO_Init+0x10c>)
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003a6:	4b39      	ldr	r3, [pc, #228]	; (800048c <MX_GPIO_Init+0x10c>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ac:	f003 0301 	and.w	r3, r3, #1
 80003b0:	60bb      	str	r3, [r7, #8]
 80003b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	4b35      	ldr	r3, [pc, #212]	; (800048c <MX_GPIO_Init+0x10c>)
 80003b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ba:	4a34      	ldr	r2, [pc, #208]	; (800048c <MX_GPIO_Init+0x10c>)
 80003bc:	f043 0304 	orr.w	r3, r3, #4
 80003c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003c4:	4b31      	ldr	r3, [pc, #196]	; (800048c <MX_GPIO_Init+0x10c>)
 80003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ca:	f003 0304 	and.w	r3, r3, #4
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d2:	4b2e      	ldr	r3, [pc, #184]	; (800048c <MX_GPIO_Init+0x10c>)
 80003d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003d8:	4a2c      	ldr	r2, [pc, #176]	; (800048c <MX_GPIO_Init+0x10c>)
 80003da:	f043 0308 	orr.w	r3, r3, #8
 80003de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003e2:	4b2a      	ldr	r3, [pc, #168]	; (800048c <MX_GPIO_Init+0x10c>)
 80003e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e8:	f003 0308 	and.w	r3, r3, #8
 80003ec:	603b      	str	r3, [r7, #0]
 80003ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_RST_Pin|TFT_A0_Pin, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2150      	movs	r1, #80	; 0x50
 80003f4:	4826      	ldr	r0, [pc, #152]	; (8000490 <MX_GPIO_Init+0x110>)
 80003f6:	f001 f97f 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2110      	movs	r1, #16
 80003fe:	4825      	ldr	r0, [pc, #148]	; (8000494 <MX_GPIO_Init+0x114>)
 8000400:	f001 f97a 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin|TFT_A0_Pin;
 8000404:	2350      	movs	r3, #80	; 0x50
 8000406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000408:	2301      	movs	r3, #1
 800040a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000410:	2302      	movs	r3, #2
 8000412:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000414:	f107 030c 	add.w	r3, r7, #12
 8000418:	4619      	mov	r1, r3
 800041a:	481d      	ldr	r0, [pc, #116]	; (8000490 <MX_GPIO_Init+0x110>)
 800041c:	f000 febc 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_CS_Pin;
 8000420:	2310      	movs	r3, #16
 8000422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000424:	2301      	movs	r3, #1
 8000426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800042c:	2302      	movs	r3, #2
 800042e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TFT_CS_GPIO_Port, &GPIO_InitStruct);
 8000430:	f107 030c 	add.w	r3, r7, #12
 8000434:	4619      	mov	r1, r3
 8000436:	4817      	ldr	r0, [pc, #92]	; (8000494 <MX_GPIO_Init+0x114>)
 8000438:	f000 feae 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_EXTI1_ENC_A_Pin|GPIO_EXT2_ENC_B_Pin|GPIO_EXTI3_ENC_SW_Pin;
 800043c:	230e      	movs	r3, #14
 800043e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000440:	4b15      	ldr	r3, [pc, #84]	; (8000498 <MX_GPIO_Init+0x118>)
 8000442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000448:	f107 030c 	add.w	r3, r7, #12
 800044c:	4619      	mov	r1, r3
 800044e:	4813      	ldr	r0, [pc, #76]	; (800049c <MX_GPIO_Init+0x11c>)
 8000450:	f000 fea2 	bl	8001198 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000454:	2200      	movs	r2, #0
 8000456:	2100      	movs	r1, #0
 8000458:	2007      	movs	r0, #7
 800045a:	f000 fc3b 	bl	8000cd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800045e:	2007      	movs	r0, #7
 8000460:	f000 fc62 	bl	8000d28 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000464:	2200      	movs	r2, #0
 8000466:	2100      	movs	r1, #0
 8000468:	2008      	movs	r0, #8
 800046a:	f000 fc33 	bl	8000cd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800046e:	2008      	movs	r0, #8
 8000470:	f000 fc5a 	bl	8000d28 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000474:	2200      	movs	r2, #0
 8000476:	2100      	movs	r1, #0
 8000478:	2009      	movs	r0, #9
 800047a:	f000 fc2b 	bl	8000cd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800047e:	2009      	movs	r0, #9
 8000480:	f000 fc52 	bl	8000d28 <HAL_NVIC_EnableIRQ>

}
 8000484:	bf00      	nop
 8000486:	3720      	adds	r7, #32
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	58024400 	.word	0x58024400
 8000490:	58020000 	.word	0x58020000
 8000494:	58020800 	.word	0x58020800
 8000498:	11110000 	.word	0x11110000
 800049c:	58020c00 	.word	0x58020c00

080004a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a4:	f000 fa64 	bl	8000970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a8:	f000 f808 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ac:	f7ff ff68 	bl	8000380 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004b0:	f000 f892 	bl	80005d8 <MX_SPI1_Init>
  MX_DAC1_Init();
 80004b4:	f7ff ff10 	bl	80002d8 <MX_DAC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <main+0x18>
	...

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b09c      	sub	sp, #112	; 0x70
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c6:	224c      	movs	r2, #76	; 0x4c
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f004 fb34 	bl	8004b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2220      	movs	r2, #32
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f004 fb2e 	bl	8004b38 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004dc:	2002      	movs	r0, #2
 80004de:	f001 f965 	bl	80017ac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004e2:	2300      	movs	r3, #0
 80004e4:	603b      	str	r3, [r7, #0]
 80004e6:	4b32      	ldr	r3, [pc, #200]	; (80005b0 <SystemClock_Config+0xf4>)
 80004e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ea:	4a31      	ldr	r2, [pc, #196]	; (80005b0 <SystemClock_Config+0xf4>)
 80004ec:	f023 0301 	bic.w	r3, r3, #1
 80004f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004f2:	4b2f      	ldr	r3, [pc, #188]	; (80005b0 <SystemClock_Config+0xf4>)
 80004f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	603b      	str	r3, [r7, #0]
 80004fc:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <SystemClock_Config+0xf8>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000504:	4a2b      	ldr	r2, [pc, #172]	; (80005b4 <SystemClock_Config+0xf8>)
 8000506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b29      	ldr	r3, [pc, #164]	; (80005b4 <SystemClock_Config+0xf8>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000514:	603b      	str	r3, [r7, #0]
 8000516:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000518:	bf00      	nop
 800051a:	4b26      	ldr	r3, [pc, #152]	; (80005b4 <SystemClock_Config+0xf8>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000526:	d1f8      	bne.n	800051a <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000528:	2302      	movs	r3, #2
 800052a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800052c:	2301      	movs	r3, #1
 800052e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000530:	2340      	movs	r3, #64	; 0x40
 8000532:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000534:	2302      	movs	r3, #2
 8000536:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000538:	2300      	movs	r3, #0
 800053a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800053c:	2304      	movs	r3, #4
 800053e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000540:	230c      	movs	r3, #12
 8000542:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000544:	2302      	movs	r3, #2
 8000546:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000548:	2302      	movs	r3, #2
 800054a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800054c:	2302      	movs	r3, #2
 800054e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000550:	230c      	movs	r3, #12
 8000552:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000554:	2300      	movs	r3, #0
 8000556:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800055c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000562:	4618      	mov	r0, r3
 8000564:	f001 f968 	bl	8001838 <HAL_RCC_OscConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800056e:	f000 f823 	bl	80005b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000572:	233f      	movs	r3, #63	; 0x3f
 8000574:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000576:	2303      	movs	r3, #3
 8000578:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2102      	movs	r1, #2
 8000596:	4618      	mov	r0, r3
 8000598:	f001 fea6 	bl	80022e8 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80005a2:	f000 f809 	bl	80005b8 <Error_Handler>
  }
}
 80005a6:	bf00      	nop
 80005a8:	3770      	adds	r7, #112	; 0x70
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	58000400 	.word	0x58000400
 80005b4:	58024800 	.word	0x58024800

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
}
 80005be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <Error_Handler+0x8>

080005c2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <MX_SPI1_Init+0xa8>)
 80005de:	4a29      	ldr	r2, [pc, #164]	; (8000684 <MX_SPI1_Init+0xac>)
 80005e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005e2:	4b27      	ldr	r3, [pc, #156]	; (8000680 <MX_SPI1_Init+0xa8>)
 80005e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80005ea:	4b25      	ldr	r3, [pc, #148]	; (8000680 <MX_SPI1_Init+0xa8>)
 80005ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f2:	4b23      	ldr	r3, [pc, #140]	; (8000680 <MX_SPI1_Init+0xa8>)
 80005f4:	2207      	movs	r2, #7
 80005f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_SPI1_Init+0xa8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005fe:	4b20      	ldr	r3, [pc, #128]	; (8000680 <MX_SPI1_Init+0xa8>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000604:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <MX_SPI1_Init+0xa8>)
 8000606:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800060a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800060c:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_SPI1_Init+0xa8>)
 800060e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000612:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_SPI1_Init+0xa8>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_SPI1_Init+0xa8>)
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_SPI1_Init+0xa8>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <MX_SPI1_Init+0xa8>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_SPI1_Init+0xa8>)
 800062e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000632:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_SPI1_Init+0xa8>)
 8000636:	2200      	movs	r2, #0
 8000638:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_SPI1_Init+0xa8>)
 800063c:	2200      	movs	r2, #0
 800063e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_SPI1_Init+0xa8>)
 8000642:	2200      	movs	r2, #0
 8000644:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_SPI1_Init+0xa8>)
 8000648:	2200      	movs	r2, #0
 800064a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_SPI1_Init+0xa8>)
 800064e:	2200      	movs	r2, #0
 8000650:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_SPI1_Init+0xa8>)
 8000654:	2200      	movs	r2, #0
 8000656:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_SPI1_Init+0xa8>)
 800065a:	2200      	movs	r2, #0
 800065c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_SPI1_Init+0xa8>)
 8000660:	2200      	movs	r2, #0
 8000662:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_SPI1_Init+0xa8>)
 8000666:	2200      	movs	r2, #0
 8000668:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_SPI1_Init+0xa8>)
 800066c:	f003 ff7a 	bl	8004564 <HAL_SPI_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000676:	f7ff ff9f 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000040 	.word	0x20000040
 8000684:	40013000 	.word	0x40013000

08000688 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b0b8      	sub	sp, #224	; 0xe0
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	22bc      	movs	r2, #188	; 0xbc
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f004 fa45 	bl	8004b38 <memset>
  if(spiHandle->Instance==SPI1)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a24      	ldr	r2, [pc, #144]	; (8000744 <HAL_SPI_MspInit+0xbc>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d141      	bne.n	800073c <HAL_SPI_MspInit+0xb4>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80006be:	2300      	movs	r3, #0
 80006c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 faf8 	bl	8002cbc <HAL_RCCEx_PeriphCLKConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80006d2:	f7ff ff71 	bl	80005b8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <HAL_SPI_MspInit+0xc0>)
 80006d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80006dc:	4a1a      	ldr	r2, [pc, #104]	; (8000748 <HAL_SPI_MspInit+0xc0>)
 80006de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <HAL_SPI_MspInit+0xc0>)
 80006e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80006ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <HAL_SPI_MspInit+0xc0>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fa:	4a13      	ldr	r2, [pc, #76]	; (8000748 <HAL_SPI_MspInit+0xc0>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000704:	4b10      	ldr	r3, [pc, #64]	; (8000748 <HAL_SPI_MspInit+0xc0>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000712:	23a0      	movs	r3, #160	; 0xa0
 8000714:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800072a:	2305      	movs	r3, #5
 800072c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000734:	4619      	mov	r1, r3
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <HAL_SPI_MspInit+0xc4>)
 8000738:	f000 fd2e 	bl	8001198 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800073c:	bf00      	nop
 800073e:	37e0      	adds	r7, #224	; 0xe0
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40013000 	.word	0x40013000
 8000748:	58024400 	.word	0x58024400
 800074c:	58020000 	.word	0x58020000

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <HAL_MspInit+0x30>)
 8000758:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800075c:	4a08      	ldr	r2, [pc, #32]	; (8000780 <HAL_MspInit+0x30>)
 800075e:	f043 0302 	orr.w	r3, r3, #2
 8000762:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_MspInit+0x30>)
 8000768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	58024400 	.word	0x58024400

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <NMI_Handler+0x4>

0800078a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <HardFault_Handler+0x4>

08000790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <MemManage_Handler+0x4>

08000796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <BusFault_Handler+0x4>

0800079c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <UsageFault_Handler+0x4>

080007a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d0:	f000 f940 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80007dc:	2002      	movs	r0, #2
 80007de:	f000 ffbf 	bl	8001760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80007ea:	2004      	movs	r0, #4
 80007ec:	f000 ffb8 	bl	8001760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80007f8:	2008      	movs	r0, #8
 80007fa:	f000 ffb1 	bl	8001760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000808:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <SystemInit+0xec>)
 800080a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800080e:	4a38      	ldr	r2, [pc, #224]	; (80008f0 <SystemInit+0xec>)
 8000810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000818:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <SystemInit+0xf0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f003 030f 	and.w	r3, r3, #15
 8000820:	2b06      	cmp	r3, #6
 8000822:	d807      	bhi.n	8000834 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000824:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <SystemInit+0xf0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f023 030f 	bic.w	r3, r3, #15
 800082c:	4a31      	ldr	r2, [pc, #196]	; (80008f4 <SystemInit+0xf0>)
 800082e:	f043 0307 	orr.w	r3, r3, #7
 8000832:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000834:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <SystemInit+0xf4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a2f      	ldr	r2, [pc, #188]	; (80008f8 <SystemInit+0xf4>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000840:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <SystemInit+0xf4>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <SystemInit+0xf4>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	492b      	ldr	r1, [pc, #172]	; (80008f8 <SystemInit+0xf4>)
 800084c:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <SystemInit+0xf8>)
 800084e:	4013      	ands	r3, r2
 8000850:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000852:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <SystemInit+0xf0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	2b00      	cmp	r3, #0
 800085c:	d007      	beq.n	800086e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800085e:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <SystemInit+0xf0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f023 030f 	bic.w	r3, r3, #15
 8000866:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <SystemInit+0xf0>)
 8000868:	f043 0307 	orr.w	r3, r3, #7
 800086c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <SystemInit+0xf4>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <SystemInit+0xf4>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <SystemInit+0xf4>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <SystemInit+0xf4>)
 8000882:	4a1f      	ldr	r2, [pc, #124]	; (8000900 <SystemInit+0xfc>)
 8000884:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <SystemInit+0xf4>)
 8000888:	4a1e      	ldr	r2, [pc, #120]	; (8000904 <SystemInit+0x100>)
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <SystemInit+0xf4>)
 800088e:	4a1e      	ldr	r2, [pc, #120]	; (8000908 <SystemInit+0x104>)
 8000890:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <SystemInit+0xf4>)
 8000894:	2200      	movs	r2, #0
 8000896:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <SystemInit+0xf4>)
 800089a:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <SystemInit+0x104>)
 800089c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <SystemInit+0xf4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <SystemInit+0xf4>)
 80008a6:	4a18      	ldr	r2, [pc, #96]	; (8000908 <SystemInit+0x104>)
 80008a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <SystemInit+0xf4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <SystemInit+0xf4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <SystemInit+0xf4>)
 80008b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <SystemInit+0xf4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <SystemInit+0x108>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <SystemInit+0x10c>)
 80008c8:	4013      	ands	r3, r2
 80008ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008ce:	d202      	bcs.n	80008d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <SystemInit+0x110>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <SystemInit+0x114>)
 80008d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80008dc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <SystemInit+0xec>)
 80008e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008e4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	e000ed00 	.word	0xe000ed00
 80008f4:	52002000 	.word	0x52002000
 80008f8:	58024400 	.word	0x58024400
 80008fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000900:	02020200 	.word	0x02020200
 8000904:	01ff0000 	.word	0x01ff0000
 8000908:	01010280 	.word	0x01010280
 800090c:	5c001000 	.word	0x5c001000
 8000910:	ffff0000 	.word	0xffff0000
 8000914:	51008108 	.word	0x51008108
 8000918:	52004000 	.word	0x52004000

0800091c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800091c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000954 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000920:	f7ff ff70 	bl	8000804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000926:	490d      	ldr	r1, [pc, #52]	; (800095c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800093c:	4c0a      	ldr	r4, [pc, #40]	; (8000968 <LoopFillZerobss+0x22>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094a:	f004 f8d1 	bl	8004af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094e:	f7ff fda7 	bl	80004a0 <main>
  bx  lr
 8000952:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000960:	08004d10 	.word	0x08004d10
  ldr r2, =_sbss
 8000964:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000968:	200000cc 	.word	0x200000cc

0800096c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC3_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000976:	2003      	movs	r0, #3
 8000978:	f000 f98c 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800097c:	f002 f824 	bl	80029c8 <HAL_RCC_GetSysClockFreq>
 8000980:	4602      	mov	r2, r0
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <HAL_Init+0x68>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	0a1b      	lsrs	r3, r3, #8
 8000988:	f003 030f 	and.w	r3, r3, #15
 800098c:	4913      	ldr	r1, [pc, #76]	; (80009dc <HAL_Init+0x6c>)
 800098e:	5ccb      	ldrb	r3, [r1, r3]
 8000990:	f003 031f 	and.w	r3, r3, #31
 8000994:	fa22 f303 	lsr.w	r3, r2, r3
 8000998:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <HAL_Init+0x68>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <HAL_Init+0x6c>)
 80009a4:	5cd3      	ldrb	r3, [r2, r3]
 80009a6:	f003 031f 	and.w	r3, r3, #31
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	fa22 f303 	lsr.w	r3, r2, r3
 80009b0:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <HAL_Init+0x70>)
 80009b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009b4:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <HAL_Init+0x74>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009ba:	2000      	movs	r0, #0
 80009bc:	f000 f814 	bl	80009e8 <HAL_InitTick>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e002      	b.n	80009d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009ca:	f7ff fec1 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	58024400 	.word	0x58024400
 80009dc:	08004cf8 	.word	0x08004cf8
 80009e0:	20000004 	.word	0x20000004
 80009e4:	20000000 	.word	0x20000000

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_InitTick+0x60>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d101      	bne.n	80009fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	e021      	b.n	8000a40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <HAL_InitTick+0x64>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_InitTick+0x60>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f9a0 	bl	8000d58 <HAL_SYSTICK_Config>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00e      	b.n	8000a40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d80a      	bhi.n	8000a3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a30:	f000 f950 	bl	8000cd4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a34:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <HAL_InitTick+0x68>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2000000c 	.word	0x2000000c
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000008 	.word	0x20000008

08000a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_IncTick+0x20>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x24>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_IncTick+0x24>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	2000000c 	.word	0x2000000c
 8000a78:	200000c8 	.word	0x200000c8

08000a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <HAL_GetTick+0x14>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	200000c8 	.word	0x200000c8

08000a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a9c:	f7ff ffee 	bl	8000a7c <HAL_GetTick>
 8000aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000aac:	d005      	beq.n	8000aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_Delay+0x44>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aba:	bf00      	nop
 8000abc:	f7ff ffde 	bl	8000a7c <HAL_GetTick>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d8f7      	bhi.n	8000abc <HAL_Delay+0x28>
  {
  }
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000000c 	.word	0x2000000c

08000adc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_GetREVID+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	0c1b      	lsrs	r3, r3, #16
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	5c001000 	.word	0x5c001000

08000af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <__NVIC_SetPriorityGrouping+0x40>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b22:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <__NVIC_SetPriorityGrouping+0x40>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	60d3      	str	r3, [r2, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00
 8000b38:	05fa0000 	.word	0x05fa0000

08000b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <__NVIC_GetPriorityGrouping+0x18>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	f003 0307 	and.w	r3, r3, #7
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db0b      	blt.n	8000b82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	f003 021f 	and.w	r2, r3, #31
 8000b70:	4907      	ldr	r1, [pc, #28]	; (8000b90 <__NVIC_EnableIRQ+0x38>)
 8000b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b76:	095b      	lsrs	r3, r3, #5
 8000b78:	2001      	movs	r0, #1
 8000b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	; (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f1c3 0307 	rsb	r3, r3, #7
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf28      	it	cs
 8000c06:	2304      	movcs	r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d902      	bls.n	8000c18 <NVIC_EncodePriority+0x30>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b03      	subs	r3, #3
 8000c16:	e000      	b.n	8000c1a <NVIC_EncodePriority+0x32>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43da      	mvns	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	43d9      	mvns	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	4313      	orrs	r3, r2
         );
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3724      	adds	r7, #36	; 0x24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c74:	f7ff ff8e 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b07      	cmp	r3, #7
 8000ca0:	d00f      	beq.n	8000cc2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b06      	cmp	r3, #6
 8000ca6:	d00c      	beq.n	8000cc2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b05      	cmp	r3, #5
 8000cac:	d009      	beq.n	8000cc2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b04      	cmp	r3, #4
 8000cb2:	d006      	beq.n	8000cc2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d003      	beq.n	8000cc2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cba:	2192      	movs	r1, #146	; 0x92
 8000cbc:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000cbe:	f7ff fc80 	bl	80005c2 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ff16 	bl	8000af4 <__NVIC_SetPriorityGrouping>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	08004b60 	.word	0x08004b60

08000cd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
 8000ce0:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d903      	bls.n	8000cf0 <HAL_NVIC_SetPriority+0x1c>
 8000ce8:	21aa      	movs	r1, #170	; 0xaa
 8000cea:	480e      	ldr	r0, [pc, #56]	; (8000d24 <HAL_NVIC_SetPriority+0x50>)
 8000cec:	f7ff fc69 	bl	80005c2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	2b0f      	cmp	r3, #15
 8000cf4:	d903      	bls.n	8000cfe <HAL_NVIC_SetPriority+0x2a>
 8000cf6:	21ab      	movs	r1, #171	; 0xab
 8000cf8:	480a      	ldr	r0, [pc, #40]	; (8000d24 <HAL_NVIC_SetPriority+0x50>)
 8000cfa:	f7ff fc62 	bl	80005c2 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfe:	f7ff ff1d 	bl	8000b3c <__NVIC_GetPriorityGrouping>
 8000d02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	6978      	ldr	r0, [r7, #20]
 8000d0a:	f7ff ff6d 	bl	8000be8 <NVIC_EncodePriority>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff3c 	bl	8000b94 <__NVIC_SetPriority>
}
 8000d1c:	bf00      	nop
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	08004b60 	.word	0x08004b60

08000d28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	da03      	bge.n	8000d42 <HAL_NVIC_EnableIRQ+0x1a>
 8000d3a:	21be      	movs	r1, #190	; 0xbe
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_NVIC_EnableIRQ+0x2c>)
 8000d3e:	f7ff fc40 	bl	80005c2 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff06 	bl	8000b58 <__NVIC_EnableIRQ>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	08004b60 	.word	0x08004b60

08000d58 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff75 	bl	8000c50 <SysTick_Config>
 8000d66:	4603      	mov	r3, r0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e01e      	b.n	8000dc0 <HAL_DAC_Init+0x50>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <HAL_DAC_Init+0x58>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d004      	beq.n	8000d96 <HAL_DAC_Init+0x26>
 8000d8c:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8000d90:	480e      	ldr	r0, [pc, #56]	; (8000dcc <HAL_DAC_Init+0x5c>)
 8000d92:	f7ff fc16 	bl	80005c2 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	791b      	ldrb	r3, [r3, #4]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d105      	bne.n	8000dac <HAL_DAC_Init+0x3c>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fac8 	bl	800033c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2202      	movs	r2, #2
 8000db0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40007400 	.word	0x40007400
 8000dcc:	08004b9c 	.word	0x08004b9c

08000dd0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d03c      	beq.n	8000e5e <HAL_DAC_ConfigChannel+0x8e>
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b06      	cmp	r3, #6
 8000dea:	d038      	beq.n	8000e5e <HAL_DAC_ConfigChannel+0x8e>
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b0a      	cmp	r3, #10
 8000df2:	d034      	beq.n	8000e5e <HAL_DAC_ConfigChannel+0x8e>
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b0e      	cmp	r3, #14
 8000dfa:	d030      	beq.n	8000e5e <HAL_DAC_ConfigChannel+0x8e>
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2b12      	cmp	r3, #18
 8000e02:	d02c      	beq.n	8000e5e <HAL_DAC_ConfigChannel+0x8e>
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b16      	cmp	r3, #22
 8000e0a:	d028      	beq.n	8000e5e <HAL_DAC_ConfigChannel+0x8e>
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b1a      	cmp	r3, #26
 8000e12:	d024      	beq.n	8000e5e <HAL_DAC_ConfigChannel+0x8e>
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b1e      	cmp	r3, #30
 8000e1a:	d020      	beq.n	8000e5e <HAL_DAC_ConfigChannel+0x8e>
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b22      	cmp	r3, #34	; 0x22
 8000e22:	d01c      	beq.n	8000e5e <HAL_DAC_ConfigChannel+0x8e>
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b26      	cmp	r3, #38	; 0x26
 8000e2a:	d018      	beq.n	8000e5e <HAL_DAC_ConfigChannel+0x8e>
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b2a      	cmp	r3, #42	; 0x2a
 8000e32:	d014      	beq.n	8000e5e <HAL_DAC_ConfigChannel+0x8e>
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b2e      	cmp	r3, #46	; 0x2e
 8000e3a:	d010      	beq.n	8000e5e <HAL_DAC_ConfigChannel+0x8e>
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b32      	cmp	r3, #50	; 0x32
 8000e42:	d00c      	beq.n	8000e5e <HAL_DAC_ConfigChannel+0x8e>
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b36      	cmp	r3, #54	; 0x36
 8000e4a:	d008      	beq.n	8000e5e <HAL_DAC_ConfigChannel+0x8e>
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d004      	beq.n	8000e5e <HAL_DAC_ConfigChannel+0x8e>
 8000e54:	f240 31ee 	movw	r1, #1006	; 0x3ee
 8000e58:	489e      	ldr	r0, [pc, #632]	; (80010d4 <HAL_DAC_ConfigChannel+0x304>)
 8000e5a:	f7ff fbb2 	bl	80005c2 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d008      	beq.n	8000e78 <HAL_DAC_ConfigChannel+0xa8>
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d004      	beq.n	8000e78 <HAL_DAC_ConfigChannel+0xa8>
 8000e6e:	f240 31ef 	movw	r1, #1007	; 0x3ef
 8000e72:	4898      	ldr	r0, [pc, #608]	; (80010d4 <HAL_DAC_ConfigChannel+0x304>)
 8000e74:	f7ff fba5 	bl	80005c2 <assert_failed>
  assert_param(IS_DAC_CHIP_CONNECTION(sConfig->DAC_ConnectOnChipPeripheral));
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d00c      	beq.n	8000e9a <HAL_DAC_ConfigChannel+0xca>
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d008      	beq.n	8000e9a <HAL_DAC_ConfigChannel+0xca>
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	d004      	beq.n	8000e9a <HAL_DAC_ConfigChannel+0xca>
 8000e90:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8000e94:	488f      	ldr	r0, [pc, #572]	; (80010d4 <HAL_DAC_ConfigChannel+0x304>)
 8000e96:	f7ff fb94 	bl	80005c2 <assert_failed>
  assert_param(IS_DAC_TRIMMING(sConfig->DAC_UserTrimming));
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d008      	beq.n	8000eb4 <HAL_DAC_ConfigChannel+0xe4>
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d004      	beq.n	8000eb4 <HAL_DAC_ConfigChannel+0xe4>
 8000eaa:	f240 31f1 	movw	r1, #1009	; 0x3f1
 8000eae:	4889      	ldr	r0, [pc, #548]	; (80010d4 <HAL_DAC_ConfigChannel+0x304>)
 8000eb0:	f7ff fb87 	bl	80005c2 <assert_failed>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d108      	bne.n	8000ece <HAL_DAC_ConfigChannel+0xfe>
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	2b1f      	cmp	r3, #31
 8000ec2:	d904      	bls.n	8000ece <HAL_DAC_ConfigChannel+0xfe>
 8000ec4:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8000ec8:	4882      	ldr	r0, [pc, #520]	; (80010d4 <HAL_DAC_ConfigChannel+0x304>)
 8000eca:	f7ff fb7a 	bl	80005c2 <assert_failed>
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d008      	beq.n	8000ee8 <HAL_DAC_ConfigChannel+0x118>
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	d004      	beq.n	8000ee8 <HAL_DAC_ConfigChannel+0x118>
 8000ede:	f240 31f6 	movw	r1, #1014	; 0x3f6
 8000ee2:	487c      	ldr	r0, [pc, #496]	; (80010d4 <HAL_DAC_ConfigChannel+0x304>)
 8000ee4:	f7ff fb6d 	bl	80005c2 <assert_failed>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d11c      	bne.n	8000f2a <HAL_DAC_ConfigChannel+0x15a>
  {
    assert_param(IS_DAC_SAMPLETIME(sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime));
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef8:	d304      	bcc.n	8000f04 <HAL_DAC_ConfigChannel+0x134>
 8000efa:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8000efe:	4875      	ldr	r0, [pc, #468]	; (80010d4 <HAL_DAC_ConfigChannel+0x304>)
 8000f00:	f7ff fb5f 	bl	80005c2 <assert_failed>
    assert_param(IS_DAC_HOLDTIME(sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime));
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	69db      	ldr	r3, [r3, #28]
 8000f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f0c:	d304      	bcc.n	8000f18 <HAL_DAC_ConfigChannel+0x148>
 8000f0e:	f240 31fa 	movw	r1, #1018	; 0x3fa
 8000f12:	4870      	ldr	r0, [pc, #448]	; (80010d4 <HAL_DAC_ConfigChannel+0x304>)
 8000f14:	f7ff fb55 	bl	80005c2 <assert_failed>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	2bff      	cmp	r3, #255	; 0xff
 8000f1e:	d904      	bls.n	8000f2a <HAL_DAC_ConfigChannel+0x15a>
 8000f20:	f240 31fb 	movw	r1, #1019	; 0x3fb
 8000f24:	486b      	ldr	r0, [pc, #428]	; (80010d4 <HAL_DAC_ConfigChannel+0x304>)
 8000f26:	f7ff fb4c 	bl	80005c2 <assert_failed>
  }
  assert_param(IS_DAC_CHANNEL(Channel));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d007      	beq.n	8000f40 <HAL_DAC_ConfigChannel+0x170>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b10      	cmp	r3, #16
 8000f34:	d004      	beq.n	8000f40 <HAL_DAC_ConfigChannel+0x170>
 8000f36:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8000f3a:	4866      	ldr	r0, [pc, #408]	; (80010d4 <HAL_DAC_ConfigChannel+0x304>)
 8000f3c:	f7ff fb41 	bl	80005c2 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	795b      	ldrb	r3, [r3, #5]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d101      	bne.n	8000f4c <HAL_DAC_ConfigChannel+0x17c>
 8000f48:	2302      	movs	r3, #2
 8000f4a:	e121      	b.n	8001190 <HAL_DAC_ConfigChannel+0x3c0>
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2202      	movs	r2, #2
 8000f56:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	d174      	bne.n	800104a <HAL_DAC_ConfigChannel+0x27a>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000f60:	f7ff fd8c 	bl	8000a7c <HAL_GetTick>
 8000f64:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d134      	bne.n	8000fd6 <HAL_DAC_ConfigChannel+0x206>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f6c:	e011      	b.n	8000f92 <HAL_DAC_ConfigChannel+0x1c2>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f6e:	f7ff fd85 	bl	8000a7c <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d90a      	bls.n	8000f92 <HAL_DAC_ConfigChannel+0x1c2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	f043 0208 	orr.w	r2, r3, #8
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e0fe      	b.n	8001190 <HAL_DAC_ConfigChannel+0x3c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f98:	4b4f      	ldr	r3, [pc, #316]	; (80010d8 <HAL_DAC_ConfigChannel+0x308>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1e6      	bne.n	8000f6e <HAL_DAC_ConfigChannel+0x19e>
        }
      }
      HAL_Delay(1);
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f7ff fd77 	bl	8000a94 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	6992      	ldr	r2, [r2, #24]
 8000fae:	641a      	str	r2, [r3, #64]	; 0x40
 8000fb0:	e01e      	b.n	8000ff0 <HAL_DAC_ConfigChannel+0x220>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000fb2:	f7ff fd63 	bl	8000a7c <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d90a      	bls.n	8000fd6 <HAL_DAC_ConfigChannel+0x206>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	f043 0208 	orr.w	r2, r3, #8
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2203      	movs	r2, #3
 8000fd0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e0dc      	b.n	8001190 <HAL_DAC_ConfigChannel+0x3c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	dbe8      	blt.n	8000fb2 <HAL_DAC_ConfigChannel+0x1e2>
        }
      }
      HAL_Delay(1U);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f7ff fd57 	bl	8000a94 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	6992      	ldr	r2, [r2, #24]
 8000fee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f003 0310 	and.w	r3, r3, #16
 8000ffc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001000:	fa01 f303 	lsl.w	r3, r1, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	ea02 0103 	and.w	r1, r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	69da      	ldr	r2, [r3, #28]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	409a      	lsls	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	430a      	orrs	r2, r1
 800101c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	21ff      	movs	r1, #255	; 0xff
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	ea02 0103 	and.w	r1, r2, r3
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	6a1a      	ldr	r2, [r3, #32]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f003 0310 	and.w	r3, r3, #16
 8001040:	409a      	lsls	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	430a      	orrs	r2, r1
 8001048:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d11d      	bne.n	800108e <HAL_DAC_ConfigChannel+0x2be>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001058:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f003 0310 	and.w	r3, r3, #16
 8001060:	221f      	movs	r2, #31
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	4013      	ands	r3, r2
 800106c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	4313      	orrs	r3, r2
 8001084:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001094:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f003 0310 	and.w	r3, r3, #16
 800109c:	2207      	movs	r2, #7
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	4013      	ands	r3, r2
 80010a8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d102      	bne.n	80010b8 <HAL_DAC_ConfigChannel+0x2e8>
  {
    connectOnChip = 0x00000000UL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	e013      	b.n	80010e0 <HAL_DAC_ConfigChannel+0x310>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d102      	bne.n	80010c6 <HAL_DAC_ConfigChannel+0x2f6>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	e00c      	b.n	80010e0 <HAL_DAC_ConfigChannel+0x310>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d106      	bne.n	80010dc <HAL_DAC_ConfigChannel+0x30c>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80010ce:	2301      	movs	r3, #1
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	e005      	b.n	80010e0 <HAL_DAC_ConfigChannel+0x310>
 80010d4:	08004b9c 	.word	0x08004b9c
 80010d8:	20008000 	.word	0x20008000
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	69fa      	ldr	r2, [r7, #28]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	4313      	orrs	r3, r2
 8001100:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	400a      	ands	r2, r1
 8001126:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	f640 72fe 	movw	r2, #4094	; 0xffe
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	4013      	ands	r3, r2
 8001144:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	4313      	orrs	r3, r2
 800115c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6819      	ldr	r1, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	22c0      	movs	r2, #192	; 0xc0
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43da      	mvns	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	400a      	ands	r2, r1
 8001180:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2201      	movs	r2, #1
 8001186:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2200      	movs	r2, #0
 800118c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011a6:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <HAL_GPIO_Init+0x12c>)
 80011a8:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a46      	ldr	r2, [pc, #280]	; (80012c8 <HAL_GPIO_Init+0x130>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d02b      	beq.n	800120a <HAL_GPIO_Init+0x72>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a45      	ldr	r2, [pc, #276]	; (80012cc <HAL_GPIO_Init+0x134>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d027      	beq.n	800120a <HAL_GPIO_Init+0x72>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a44      	ldr	r2, [pc, #272]	; (80012d0 <HAL_GPIO_Init+0x138>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d023      	beq.n	800120a <HAL_GPIO_Init+0x72>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a43      	ldr	r2, [pc, #268]	; (80012d4 <HAL_GPIO_Init+0x13c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d01f      	beq.n	800120a <HAL_GPIO_Init+0x72>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a42      	ldr	r2, [pc, #264]	; (80012d8 <HAL_GPIO_Init+0x140>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d01b      	beq.n	800120a <HAL_GPIO_Init+0x72>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a41      	ldr	r2, [pc, #260]	; (80012dc <HAL_GPIO_Init+0x144>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d017      	beq.n	800120a <HAL_GPIO_Init+0x72>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a40      	ldr	r2, [pc, #256]	; (80012e0 <HAL_GPIO_Init+0x148>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d013      	beq.n	800120a <HAL_GPIO_Init+0x72>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a3f      	ldr	r2, [pc, #252]	; (80012e4 <HAL_GPIO_Init+0x14c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00f      	beq.n	800120a <HAL_GPIO_Init+0x72>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a3e      	ldr	r2, [pc, #248]	; (80012e8 <HAL_GPIO_Init+0x150>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00b      	beq.n	800120a <HAL_GPIO_Init+0x72>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a3d      	ldr	r2, [pc, #244]	; (80012ec <HAL_GPIO_Init+0x154>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x72>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a3c      	ldr	r2, [pc, #240]	; (80012f0 <HAL_GPIO_Init+0x158>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x72>
 8001202:	21bb      	movs	r1, #187	; 0xbb
 8001204:	483b      	ldr	r0, [pc, #236]	; (80012f4 <HAL_GPIO_Init+0x15c>)
 8001206:	f7ff f9dc 	bl	80005c2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	b29b      	uxth	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_GPIO_Init+0x88>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <HAL_GPIO_Init+0x160>)
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x90>
 8001220:	21bc      	movs	r1, #188	; 0xbc
 8001222:	4834      	ldr	r0, [pc, #208]	; (80012f4 <HAL_GPIO_Init+0x15c>)
 8001224:	f7ff f9cd 	bl	80005c2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d035      	beq.n	800129c <HAL_GPIO_Init+0x104>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d031      	beq.n	800129c <HAL_GPIO_Init+0x104>
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b11      	cmp	r3, #17
 800123e:	d02d      	beq.n	800129c <HAL_GPIO_Init+0x104>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d029      	beq.n	800129c <HAL_GPIO_Init+0x104>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b12      	cmp	r3, #18
 800124e:	d025      	beq.n	800129c <HAL_GPIO_Init+0x104>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4a29      	ldr	r2, [pc, #164]	; (80012fc <HAL_GPIO_Init+0x164>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d020      	beq.n	800129c <HAL_GPIO_Init+0x104>
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4a28      	ldr	r2, [pc, #160]	; (8001300 <HAL_GPIO_Init+0x168>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d01b      	beq.n	800129c <HAL_GPIO_Init+0x104>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	4a26      	ldr	r2, [pc, #152]	; (8001304 <HAL_GPIO_Init+0x16c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d016      	beq.n	800129c <HAL_GPIO_Init+0x104>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4a25      	ldr	r2, [pc, #148]	; (8001308 <HAL_GPIO_Init+0x170>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d011      	beq.n	800129c <HAL_GPIO_Init+0x104>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a23      	ldr	r2, [pc, #140]	; (800130c <HAL_GPIO_Init+0x174>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00c      	beq.n	800129c <HAL_GPIO_Init+0x104>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4a22      	ldr	r2, [pc, #136]	; (8001310 <HAL_GPIO_Init+0x178>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d007      	beq.n	800129c <HAL_GPIO_Init+0x104>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b03      	cmp	r3, #3
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x104>
 8001294:	21bd      	movs	r1, #189	; 0xbd
 8001296:	4817      	ldr	r0, [pc, #92]	; (80012f4 <HAL_GPIO_Init+0x15c>)
 8001298:	f7ff f993 	bl	80005c2 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 821a 	beq.w	80016da <HAL_GPIO_Init+0x542>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	f000 8215 	beq.w	80016da <HAL_GPIO_Init+0x542>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	f000 8210 	beq.w	80016da <HAL_GPIO_Init+0x542>
 80012ba:	21be      	movs	r1, #190	; 0xbe
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <HAL_GPIO_Init+0x15c>)
 80012be:	f7ff f980 	bl	80005c2 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012c2:	e20a      	b.n	80016da <HAL_GPIO_Init+0x542>
 80012c4:	58000080 	.word	0x58000080
 80012c8:	58020000 	.word	0x58020000
 80012cc:	58020400 	.word	0x58020400
 80012d0:	58020800 	.word	0x58020800
 80012d4:	58020c00 	.word	0x58020c00
 80012d8:	58021000 	.word	0x58021000
 80012dc:	58021400 	.word	0x58021400
 80012e0:	58021800 	.word	0x58021800
 80012e4:	58021c00 	.word	0x58021c00
 80012e8:	58022000 	.word	0x58022000
 80012ec:	58022400 	.word	0x58022400
 80012f0:	58022800 	.word	0x58022800
 80012f4:	08004bd4 	.word	0x08004bd4
 80012f8:	ffff0000 	.word	0xffff0000
 80012fc:	11110000 	.word	0x11110000
 8001300:	11210000 	.word	0x11210000
 8001304:	11310000 	.word	0x11310000
 8001308:	11120000 	.word	0x11120000
 800130c:	11220000 	.word	0x11220000
 8001310:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	2101      	movs	r1, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 81d4 	beq.w	80016d4 <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d00b      	beq.n	800134c <HAL_GPIO_Init+0x1b4>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d007      	beq.n	800134c <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001340:	2b11      	cmp	r3, #17
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b12      	cmp	r3, #18
 800134a:	d144      	bne.n	80013d6 <HAL_GPIO_Init+0x23e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00f      	beq.n	8001374 <HAL_GPIO_Init+0x1dc>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d00b      	beq.n	8001374 <HAL_GPIO_Init+0x1dc>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d007      	beq.n	8001374 <HAL_GPIO_Init+0x1dc>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b03      	cmp	r3, #3
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x1dc>
 800136c:	21ce      	movs	r1, #206	; 0xce
 800136e:	4897      	ldr	r0, [pc, #604]	; (80015cc <HAL_GPIO_Init+0x434>)
 8001370:	f7ff f927 	bl	80005c2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013aa:	2201      	movs	r2, #1
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	f003 0201 	and.w	r2, r3, #1
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x27e>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b12      	cmp	r3, #18
 8001414:	d15b      	bne.n	80014ce <HAL_GPIO_Init+0x336>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a6d      	ldr	r2, [pc, #436]	; (80015d0 <HAL_GPIO_Init+0x438>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d02b      	beq.n	8001476 <HAL_GPIO_Init+0x2de>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a6c      	ldr	r2, [pc, #432]	; (80015d4 <HAL_GPIO_Init+0x43c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d027      	beq.n	8001476 <HAL_GPIO_Init+0x2de>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a6b      	ldr	r2, [pc, #428]	; (80015d8 <HAL_GPIO_Init+0x440>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d023      	beq.n	8001476 <HAL_GPIO_Init+0x2de>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a6a      	ldr	r2, [pc, #424]	; (80015dc <HAL_GPIO_Init+0x444>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01f      	beq.n	8001476 <HAL_GPIO_Init+0x2de>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a69      	ldr	r2, [pc, #420]	; (80015e0 <HAL_GPIO_Init+0x448>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d01b      	beq.n	8001476 <HAL_GPIO_Init+0x2de>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a68      	ldr	r2, [pc, #416]	; (80015e4 <HAL_GPIO_Init+0x44c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d017      	beq.n	8001476 <HAL_GPIO_Init+0x2de>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a67      	ldr	r2, [pc, #412]	; (80015e8 <HAL_GPIO_Init+0x450>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d013      	beq.n	8001476 <HAL_GPIO_Init+0x2de>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a66      	ldr	r2, [pc, #408]	; (80015ec <HAL_GPIO_Init+0x454>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d00f      	beq.n	8001476 <HAL_GPIO_Init+0x2de>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a65      	ldr	r2, [pc, #404]	; (80015f0 <HAL_GPIO_Init+0x458>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00b      	beq.n	8001476 <HAL_GPIO_Init+0x2de>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a64      	ldr	r2, [pc, #400]	; (80015f4 <HAL_GPIO_Init+0x45c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d007      	beq.n	8001476 <HAL_GPIO_Init+0x2de>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a63      	ldr	r2, [pc, #396]	; (80015f8 <HAL_GPIO_Init+0x460>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x2de>
 800146e:	21e6      	movs	r1, #230	; 0xe6
 8001470:	4856      	ldr	r0, [pc, #344]	; (80015cc <HAL_GPIO_Init+0x434>)
 8001472:	f7ff f8a6 	bl	80005c2 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	2b0f      	cmp	r3, #15
 800147c:	d903      	bls.n	8001486 <HAL_GPIO_Init+0x2ee>
 800147e:	21e7      	movs	r1, #231	; 0xe7
 8001480:	4852      	ldr	r0, [pc, #328]	; (80015cc <HAL_GPIO_Init+0x434>)
 8001482:	f7ff f89e 	bl	80005c2 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	69b9      	ldr	r1, [r7, #24]
 80014ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0203 	and.w	r2, r3, #3
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 80e2 	beq.w	80016d4 <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001510:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <HAL_GPIO_Init+0x464>)
 8001512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001516:	4a39      	ldr	r2, [pc, #228]	; (80015fc <HAL_GPIO_Init+0x464>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001520:	4b36      	ldr	r3, [pc, #216]	; (80015fc <HAL_GPIO_Init+0x464>)
 8001522:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152e:	4a34      	ldr	r2, [pc, #208]	; (8001600 <HAL_GPIO_Init+0x468>)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <HAL_GPIO_Init+0x438>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d054      	beq.n	8001604 <HAL_GPIO_Init+0x46c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <HAL_GPIO_Init+0x43c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d031      	beq.n	80015c6 <HAL_GPIO_Init+0x42e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <HAL_GPIO_Init+0x440>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d02b      	beq.n	80015c2 <HAL_GPIO_Init+0x42a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <HAL_GPIO_Init+0x444>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d025      	beq.n	80015be <HAL_GPIO_Init+0x426>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a1a      	ldr	r2, [pc, #104]	; (80015e0 <HAL_GPIO_Init+0x448>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d01f      	beq.n	80015ba <HAL_GPIO_Init+0x422>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <HAL_GPIO_Init+0x44c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d019      	beq.n	80015b6 <HAL_GPIO_Init+0x41e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <HAL_GPIO_Init+0x450>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0x41a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a17      	ldr	r2, [pc, #92]	; (80015ec <HAL_GPIO_Init+0x454>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d00d      	beq.n	80015ae <HAL_GPIO_Init+0x416>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a16      	ldr	r2, [pc, #88]	; (80015f0 <HAL_GPIO_Init+0x458>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d007      	beq.n	80015aa <HAL_GPIO_Init+0x412>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <HAL_GPIO_Init+0x45c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_GPIO_Init+0x40e>
 80015a2:	2309      	movs	r3, #9
 80015a4:	e02f      	b.n	8001606 <HAL_GPIO_Init+0x46e>
 80015a6:	230a      	movs	r3, #10
 80015a8:	e02d      	b.n	8001606 <HAL_GPIO_Init+0x46e>
 80015aa:	2308      	movs	r3, #8
 80015ac:	e02b      	b.n	8001606 <HAL_GPIO_Init+0x46e>
 80015ae:	2307      	movs	r3, #7
 80015b0:	e029      	b.n	8001606 <HAL_GPIO_Init+0x46e>
 80015b2:	2306      	movs	r3, #6
 80015b4:	e027      	b.n	8001606 <HAL_GPIO_Init+0x46e>
 80015b6:	2305      	movs	r3, #5
 80015b8:	e025      	b.n	8001606 <HAL_GPIO_Init+0x46e>
 80015ba:	2304      	movs	r3, #4
 80015bc:	e023      	b.n	8001606 <HAL_GPIO_Init+0x46e>
 80015be:	2303      	movs	r3, #3
 80015c0:	e021      	b.n	8001606 <HAL_GPIO_Init+0x46e>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e01f      	b.n	8001606 <HAL_GPIO_Init+0x46e>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e01d      	b.n	8001606 <HAL_GPIO_Init+0x46e>
 80015ca:	bf00      	nop
 80015cc:	08004bd4 	.word	0x08004bd4
 80015d0:	58020000 	.word	0x58020000
 80015d4:	58020400 	.word	0x58020400
 80015d8:	58020800 	.word	0x58020800
 80015dc:	58020c00 	.word	0x58020c00
 80015e0:	58021000 	.word	0x58021000
 80015e4:	58021400 	.word	0x58021400
 80015e8:	58021800 	.word	0x58021800
 80015ec:	58021c00 	.word	0x58021c00
 80015f0:	58022000 	.word	0x58022000
 80015f4:	58022400 	.word	0x58022400
 80015f8:	58022800 	.word	0x58022800
 80015fc:	58024400 	.word	0x58024400
 8001600:	58000400 	.word	0x58000400
 8001604:	2300      	movs	r3, #0
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	f002 0203 	and.w	r2, r2, #3
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	4093      	lsls	r3, r2
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001616:	4937      	ldr	r1, [pc, #220]	; (80016f4 <HAL_GPIO_Init+0x55c>)
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3302      	adds	r3, #2
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800169e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	3301      	adds	r3, #1
 80016d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f47f ae15 	bne.w	8001314 <HAL_GPIO_Init+0x17c>
  }
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	3720      	adds	r7, #32
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	58000400 	.word	0x58000400

080016f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
 8001704:	4613      	mov	r3, r2
 8001706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d004      	beq.n	8001718 <HAL_GPIO_WritePin+0x20>
 800170e:	887a      	ldrh	r2, [r7, #2]
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_GPIO_WritePin+0x60>)
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d004      	beq.n	8001722 <HAL_GPIO_WritePin+0x2a>
 8001718:	f240 11ad 	movw	r1, #429	; 0x1ad
 800171c:	480f      	ldr	r0, [pc, #60]	; (800175c <HAL_GPIO_WritePin+0x64>)
 800171e:	f7fe ff50 	bl	80005c2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001722:	787b      	ldrb	r3, [r7, #1]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d007      	beq.n	8001738 <HAL_GPIO_WritePin+0x40>
 8001728:	787b      	ldrb	r3, [r7, #1]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d004      	beq.n	8001738 <HAL_GPIO_WritePin+0x40>
 800172e:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8001732:	480a      	ldr	r0, [pc, #40]	; (800175c <HAL_GPIO_WritePin+0x64>)
 8001734:	f7fe ff45 	bl	80005c2 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001738:	787b      	ldrb	r3, [r7, #1]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001744:	e003      	b.n	800174e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	041a      	lsls	r2, r3, #16
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	619a      	str	r2, [r3, #24]
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	ffff0000 	.word	0xffff0000
 800175c:	08004bd4 	.word	0x08004bd4

08001760 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800176a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	4013      	ands	r3, r2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d008      	beq.n	800178c <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800177a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f804 	bl	8001794 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d007      	beq.n	80017ca <HAL_PWREx_ConfigSupply+0x1e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d004      	beq.n	80017ca <HAL_PWREx_ConfigSupply+0x1e>
 80017c0:	f240 113f 	movw	r1, #319	; 0x13f
 80017c4:	481a      	ldr	r0, [pc, #104]	; (8001830 <HAL_PWREx_ConfigSupply+0x84>)
 80017c6:	f7fe fefc 	bl	80005c2 <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <HAL_PWREx_ConfigSupply+0x88>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d00a      	beq.n	80017ec <HAL_PWREx_ConfigSupply+0x40>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_PWREx_ConfigSupply+0x88>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_PWREx_ConfigSupply+0x3c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e01f      	b.n	8001828 <HAL_PWREx_ConfigSupply+0x7c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	e01d      	b.n	8001828 <HAL_PWREx_ConfigSupply+0x7c>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_PWREx_ConfigSupply+0x88>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f023 0207 	bic.w	r2, r3, #7
 80017f4:	490f      	ldr	r1, [pc, #60]	; (8001834 <HAL_PWREx_ConfigSupply+0x88>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80017fc:	f7ff f93e 	bl	8000a7c <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001802:	e009      	b.n	8001818 <HAL_PWREx_ConfigSupply+0x6c>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001804:	f7ff f93a 	bl	8000a7c <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001812:	d901      	bls.n	8001818 <HAL_PWREx_ConfigSupply+0x6c>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e007      	b.n	8001828 <HAL_PWREx_ConfigSupply+0x7c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_PWREx_ConfigSupply+0x88>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001824:	d1ee      	bne.n	8001804 <HAL_PWREx_ConfigSupply+0x58>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	08004c10 	.word	0x08004c10
 8001834:	58024800 	.word	0x58024800

08001838 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08c      	sub	sp, #48	; 0x30
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	f000 bd47 	b.w	80022da <HAL_RCC_OscConfig+0xaa2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d028      	beq.n	80018a6 <HAL_RCC_OscConfig+0x6e>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b00      	cmp	r3, #0
 800185e:	d122      	bne.n	80018a6 <HAL_RCC_OscConfig+0x6e>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d11c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x6e>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b00      	cmp	r3, #0
 8001876:	d116      	bne.n	80018a6 <HAL_RCC_OscConfig+0x6e>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d110      	bne.n	80018a6 <HAL_RCC_OscConfig+0x6e>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10a      	bne.n	80018a6 <HAL_RCC_OscConfig+0x6e>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	2b00      	cmp	r3, #0
 800189a:	d104      	bne.n	80018a6 <HAL_RCC_OscConfig+0x6e>
 800189c:	f240 11a3 	movw	r1, #419	; 0x1a3
 80018a0:	489b      	ldr	r0, [pc, #620]	; (8001b10 <HAL_RCC_OscConfig+0x2d8>)
 80018a2:	f7fe fe8e 	bl	80005c2 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 809d 	beq.w	80019ee <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00e      	beq.n	80018da <HAL_RCC_OscConfig+0xa2>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c4:	d009      	beq.n	80018da <HAL_RCC_OscConfig+0xa2>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ce:	d004      	beq.n	80018da <HAL_RCC_OscConfig+0xa2>
 80018d0:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 80018d4:	488e      	ldr	r0, [pc, #568]	; (8001b10 <HAL_RCC_OscConfig+0x2d8>)
 80018d6:	f7fe fe74 	bl	80005c2 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018da:	4b8e      	ldr	r3, [pc, #568]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018e4:	4b8b      	ldr	r3, [pc, #556]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80018ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ec:	2b10      	cmp	r3, #16
 80018ee:	d007      	beq.n	8001900 <HAL_RCC_OscConfig+0xc8>
 80018f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f2:	2b18      	cmp	r3, #24
 80018f4:	d111      	bne.n	800191a <HAL_RCC_OscConfig+0xe2>
 80018f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d10c      	bne.n	800191a <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	4b84      	ldr	r3, [pc, #528]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d06f      	beq.n	80019ec <HAL_RCC_OscConfig+0x1b4>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d16b      	bne.n	80019ec <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	f000 bce0 	b.w	80022da <HAL_RCC_OscConfig+0xaa2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001922:	d106      	bne.n	8001932 <HAL_RCC_OscConfig+0xfa>
 8001924:	4b7b      	ldr	r3, [pc, #492]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a7a      	ldr	r2, [pc, #488]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 800192a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	e02e      	b.n	8001990 <HAL_RCC_OscConfig+0x158>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0x11c>
 800193a:	4b76      	ldr	r3, [pc, #472]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a75      	ldr	r2, [pc, #468]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a72      	ldr	r2, [pc, #456]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 800194c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e01d      	b.n	8001990 <HAL_RCC_OscConfig+0x158>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x140>
 800195e:	4b6d      	ldr	r3, [pc, #436]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a6c      	ldr	r2, [pc, #432]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a69      	ldr	r2, [pc, #420]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e00b      	b.n	8001990 <HAL_RCC_OscConfig+0x158>
 8001978:	4b66      	ldr	r3, [pc, #408]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a65      	ldr	r2, [pc, #404]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 800197e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	4b63      	ldr	r3, [pc, #396]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a62      	ldr	r2, [pc, #392]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 800198a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d014      	beq.n	80019c2 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff f870 	bl	8000a7c <HAL_GetTick>
 800199c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800199e:	e009      	b.n	80019b4 <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff f86c 	bl	8000a7c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d902      	bls.n	80019b4 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	f000 bc93 	b.w	80022da <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019b4:	4b57      	ldr	r3, [pc, #348]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0ef      	beq.n	80019a0 <HAL_RCC_OscConfig+0x168>
 80019c0:	e015      	b.n	80019ee <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff f85b 	bl	8000a7c <HAL_GetTick>
 80019c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019c8:	e009      	b.n	80019de <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ca:	f7ff f857 	bl	8000a7c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b64      	cmp	r3, #100	; 0x64
 80019d6:	d902      	bls.n	80019de <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	f000 bc7e 	b.w	80022da <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019de:	4b4d      	ldr	r3, [pc, #308]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ef      	bne.n	80019ca <HAL_RCC_OscConfig+0x192>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80d7 	beq.w	8001baa <HAL_RCC_OscConfig+0x372>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d018      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1fe>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d014      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1fe>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d010      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1fe>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b09      	cmp	r3, #9
 8001a1a:	d00c      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1fe>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b11      	cmp	r3, #17
 8001a22:	d008      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1fe>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b19      	cmp	r3, #25
 8001a2a:	d004      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1fe>
 8001a2c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001a30:	4837      	ldr	r0, [pc, #220]	; (8001b10 <HAL_RCC_OscConfig+0x2d8>)
 8001a32:	f7fe fdc6 	bl	80005c2 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a3c:	d904      	bls.n	8001a48 <HAL_RCC_OscConfig+0x210>
 8001a3e:	f240 11dd 	movw	r1, #477	; 0x1dd
 8001a42:	4833      	ldr	r0, [pc, #204]	; (8001b10 <HAL_RCC_OscConfig+0x2d8>)
 8001a44:	f7fe fdbd 	bl	80005c2 <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a48:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a52:	4b30      	ldr	r3, [pc, #192]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <HAL_RCC_OscConfig+0x236>
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	2b18      	cmp	r3, #24
 8001a62:	d13b      	bne.n	8001adc <HAL_RCC_OscConfig+0x2a4>
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d136      	bne.n	8001adc <HAL_RCC_OscConfig+0x2a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <HAL_RCC_OscConfig+0x250>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HAL_RCC_OscConfig+0x250>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f000 bc29 	b.w	80022da <HAL_RCC_OscConfig+0xaa2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a88:	f7ff f828 	bl	8000adc <HAL_GetREVID>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d817      	bhi.n	8001ac6 <HAL_RCC_OscConfig+0x28e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	2b40      	cmp	r3, #64	; 0x40
 8001a9c:	d108      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x278>
 8001a9e:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001aa6:	4a1b      	ldr	r2, [pc, #108]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aae:	e07c      	b.n	8001baa <HAL_RCC_OscConfig+0x372>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	031b      	lsls	r3, r3, #12
 8001abe:	4915      	ldr	r1, [pc, #84]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac4:	e071      	b.n	8001baa <HAL_RCC_OscConfig+0x372>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	061b      	lsls	r3, r3, #24
 8001ad4:	490f      	ldr	r1, [pc, #60]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ada:	e066      	b.n	8001baa <HAL_RCC_OscConfig+0x372>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d049      	beq.n	8001b78 <HAL_RCC_OscConfig+0x340>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f023 0219 	bic.w	r2, r3, #25
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4908      	ldr	r1, [pc, #32]	; (8001b14 <HAL_RCC_OscConfig+0x2dc>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7fe ffc1 	bl	8000a7c <HAL_GetTick>
 8001afa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001afc:	e00c      	b.n	8001b18 <HAL_RCC_OscConfig+0x2e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001afe:	f7fe ffbd 	bl	8000a7c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d905      	bls.n	8001b18 <HAL_RCC_OscConfig+0x2e0>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e3e4      	b.n	80022da <HAL_RCC_OscConfig+0xaa2>
 8001b10:	08004c4c 	.word	0x08004c4c
 8001b14:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b18:	4ba4      	ldr	r3, [pc, #656]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0ec      	beq.n	8001afe <HAL_RCC_OscConfig+0x2c6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	f7fe ffda 	bl	8000adc <HAL_GetREVID>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d817      	bhi.n	8001b62 <HAL_RCC_OscConfig+0x32a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	2b40      	cmp	r3, #64	; 0x40
 8001b38:	d108      	bne.n	8001b4c <HAL_RCC_OscConfig+0x314>
 8001b3a:	4b9c      	ldr	r3, [pc, #624]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b42:	4a9a      	ldr	r2, [pc, #616]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	6053      	str	r3, [r2, #4]
 8001b4a:	e02e      	b.n	8001baa <HAL_RCC_OscConfig+0x372>
 8001b4c:	4b97      	ldr	r3, [pc, #604]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	031b      	lsls	r3, r3, #12
 8001b5a:	4994      	ldr	r1, [pc, #592]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
 8001b60:	e023      	b.n	8001baa <HAL_RCC_OscConfig+0x372>
 8001b62:	4b92      	ldr	r3, [pc, #584]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	061b      	lsls	r3, r3, #24
 8001b70:	498e      	ldr	r1, [pc, #568]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]
 8001b76:	e018      	b.n	8001baa <HAL_RCC_OscConfig+0x372>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b78:	4b8c      	ldr	r3, [pc, #560]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a8b      	ldr	r2, [pc, #556]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001b7e:	f023 0301 	bic.w	r3, r3, #1
 8001b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7fe ff7a 	bl	8000a7c <HAL_GetTick>
 8001b88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8c:	f7fe ff76 	bl	8000a7c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e39d      	b.n	80022da <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b9e:	4b83      	ldr	r3, [pc, #524]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x354>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80bf 	beq.w	8001d36 <HAL_RCC_OscConfig+0x4fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x39a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b80      	cmp	r3, #128	; 0x80
 8001bc6:	d004      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x39a>
 8001bc8:	f240 211f 	movw	r1, #543	; 0x21f
 8001bcc:	4878      	ldr	r0, [pc, #480]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001bce:	f7fe fcf8 	bl	80005c2 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	2b3f      	cmp	r3, #63	; 0x3f
 8001bd8:	d904      	bls.n	8001be4 <HAL_RCC_OscConfig+0x3ac>
 8001bda:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001bde:	4874      	ldr	r0, [pc, #464]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001be0:	f7fe fcef 	bl	80005c2 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be4:	4b71      	ldr	r3, [pc, #452]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bec:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bee:	4b6f      	ldr	r3, [pc, #444]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d007      	beq.n	8001c0a <HAL_RCC_OscConfig+0x3d2>
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	2b18      	cmp	r3, #24
 8001bfe:	d13a      	bne.n	8001c76 <HAL_RCC_OscConfig+0x43e>
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d135      	bne.n	8001c76 <HAL_RCC_OscConfig+0x43e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c0a:	4b68      	ldr	r3, [pc, #416]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d005      	beq.n	8001c22 <HAL_RCC_OscConfig+0x3ea>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	2b80      	cmp	r3, #128	; 0x80
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_OscConfig+0x3ea>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e35b      	b.n	80022da <HAL_RCC_OscConfig+0xaa2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c22:	f7fe ff5b 	bl	8000adc <HAL_GetREVID>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d817      	bhi.n	8001c60 <HAL_RCC_OscConfig+0x428>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	2b20      	cmp	r3, #32
 8001c36:	d108      	bne.n	8001c4a <HAL_RCC_OscConfig+0x412>
 8001c38:	4b5c      	ldr	r3, [pc, #368]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c40:	4a5a      	ldr	r2, [pc, #360]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001c42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c46:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c48:	e075      	b.n	8001d36 <HAL_RCC_OscConfig+0x4fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c4a:	4b58      	ldr	r3, [pc, #352]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	069b      	lsls	r3, r3, #26
 8001c58:	4954      	ldr	r1, [pc, #336]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c5e:	e06a      	b.n	8001d36 <HAL_RCC_OscConfig+0x4fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c60:	4b52      	ldr	r3, [pc, #328]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	061b      	lsls	r3, r3, #24
 8001c6e:	494f      	ldr	r1, [pc, #316]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c74:	e05f      	b.n	8001d36 <HAL_RCC_OscConfig+0x4fe>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d042      	beq.n	8001d04 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c7e:	4b4b      	ldr	r3, [pc, #300]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a4a      	ldr	r2, [pc, #296]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8a:	f7fe fef7 	bl	8000a7c <HAL_GetTick>
 8001c8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x46c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c92:	f7fe fef3 	bl	8000a7c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e31a      	b.n	80022da <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ca4:	4b41      	ldr	r3, [pc, #260]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x45a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cb0:	f7fe ff14 	bl	8000adc <HAL_GetREVID>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f241 0203 	movw	r2, #4099	; 0x1003
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d817      	bhi.n	8001cee <HAL_RCC_OscConfig+0x4b6>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d108      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x4a0>
 8001cc6:	4b39      	ldr	r3, [pc, #228]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001cce:	4a37      	ldr	r2, [pc, #220]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001cd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cd4:	6053      	str	r3, [r2, #4]
 8001cd6:	e02e      	b.n	8001d36 <HAL_RCC_OscConfig+0x4fe>
 8001cd8:	4b34      	ldr	r3, [pc, #208]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	069b      	lsls	r3, r3, #26
 8001ce6:	4931      	ldr	r1, [pc, #196]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
 8001cec:	e023      	b.n	8001d36 <HAL_RCC_OscConfig+0x4fe>
 8001cee:	4b2f      	ldr	r3, [pc, #188]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	061b      	lsls	r3, r3, #24
 8001cfc:	492b      	ldr	r1, [pc, #172]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	60cb      	str	r3, [r1, #12]
 8001d02:	e018      	b.n	8001d36 <HAL_RCC_OscConfig+0x4fe>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d04:	4b29      	ldr	r3, [pc, #164]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a28      	ldr	r2, [pc, #160]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7fe feb4 	bl	8000a7c <HAL_GetTick>
 8001d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x4f2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d18:	f7fe feb0 	bl	8000a7c <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x4f2>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e2d7      	b.n	80022da <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d047      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d008      	beq.n	8001d5c <HAL_RCC_OscConfig+0x524>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d004      	beq.n	8001d5c <HAL_RCC_OscConfig+0x524>
 8001d52:	f240 2161 	movw	r1, #609	; 0x261
 8001d56:	4816      	ldr	r0, [pc, #88]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001d58:	f7fe fc33 	bl	80005c2 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d019      	beq.n	8001d98 <HAL_RCC_OscConfig+0x560>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d68:	4a10      	ldr	r2, [pc, #64]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7fe fe84 	bl	8000a7c <HAL_GetTick>
 8001d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d78:	f7fe fe80 	bl	8000a7c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e2a7      	b.n	80022da <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x540>
 8001d96:	e01c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x59a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d9c:	4a03      	ldr	r2, [pc, #12]	; (8001dac <HAL_RCC_OscConfig+0x574>)
 8001d9e:	f023 0301 	bic.w	r3, r3, #1
 8001da2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da4:	f7fe fe6a 	bl	8000a7c <HAL_GetTick>
 8001da8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001daa:	e00c      	b.n	8001dc6 <HAL_RCC_OscConfig+0x58e>
 8001dac:	58024400 	.word	0x58024400
 8001db0:	08004c4c 	.word	0x08004c4c
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db4:	f7fe fe62 	bl	8000a7c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x58e>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e289      	b.n	80022da <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dc6:	4b71      	ldr	r3, [pc, #452]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x57c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d043      	beq.n	8001e66 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d008      	beq.n	8001df8 <HAL_RCC_OscConfig+0x5c0>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d004      	beq.n	8001df8 <HAL_RCC_OscConfig+0x5c0>
 8001dee:	f44f 7123 	mov.w	r1, #652	; 0x28c
 8001df2:	4867      	ldr	r0, [pc, #412]	; (8001f90 <HAL_RCC_OscConfig+0x758>)
 8001df4:	f7fe fbe5 	bl	80005c2 <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d019      	beq.n	8001e34 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e00:	4b62      	ldr	r3, [pc, #392]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a61      	ldr	r2, [pc, #388]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001e06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e0c:	f7fe fe36 	bl	8000a7c <HAL_GetTick>
 8001e10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x5ee>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e14:	f7fe fe32 	bl	8000a7c <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e259      	b.n	80022da <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e26:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0x5dc>
 8001e32:	e018      	b.n	8001e66 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e34:	4b55      	ldr	r3, [pc, #340]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a54      	ldr	r2, [pc, #336]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e40:	f7fe fe1c 	bl	8000a7c <HAL_GetTick>
 8001e44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e48:	f7fe fe18 	bl	8000a7c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e23f      	b.n	80022da <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e5a:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8098 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x76c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00c      	beq.n	8001e96 <HAL_RCC_OscConfig+0x65e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d008      	beq.n	8001e96 <HAL_RCC_OscConfig+0x65e>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	d004      	beq.n	8001e96 <HAL_RCC_OscConfig+0x65e>
 8001e8c:	f240 21b6 	movw	r1, #694	; 0x2b6
 8001e90:	483f      	ldr	r0, [pc, #252]	; (8001f90 <HAL_RCC_OscConfig+0x758>)
 8001e92:	f7fe fb96 	bl	80005c2 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e96:	4b3f      	ldr	r3, [pc, #252]	; (8001f94 <HAL_RCC_OscConfig+0x75c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a3e      	ldr	r2, [pc, #248]	; (8001f94 <HAL_RCC_OscConfig+0x75c>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ea2:	f7fe fdeb 	bl	8000a7c <HAL_GetTick>
 8001ea6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x684>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7fe fde7 	bl	8000a7c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b64      	cmp	r3, #100	; 0x64
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x684>
      {
        return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e20e      	b.n	80022da <HAL_RCC_OscConfig+0xaa2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ebc:	4b35      	ldr	r3, [pc, #212]	; (8001f94 <HAL_RCC_OscConfig+0x75c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x672>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x6a6>
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed4:	4a2d      	ldr	r2, [pc, #180]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6713      	str	r3, [r2, #112]	; 0x70
 8001edc:	e02d      	b.n	8001f3a <HAL_RCC_OscConfig+0x702>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x6c8>
 8001ee6:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	4a28      	ldr	r2, [pc, #160]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef6:	4a25      	ldr	r2, [pc, #148]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	6713      	str	r3, [r2, #112]	; 0x70
 8001efe:	e01c      	b.n	8001f3a <HAL_RCC_OscConfig+0x702>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d10c      	bne.n	8001f22 <HAL_RCC_OscConfig+0x6ea>
 8001f08:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0c:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	6713      	str	r3, [r2, #112]	; 0x70
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f18:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f20:	e00b      	b.n	8001f3a <HAL_RCC_OscConfig+0x702>
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f26:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f32:	4a16      	ldr	r2, [pc, #88]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d015      	beq.n	8001f6e <HAL_RCC_OscConfig+0x736>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7fe fd9b 	bl	8000a7c <HAL_GetTick>
 8001f46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x728>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7fe fd97 	bl	8000a7c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e1bc      	b.n	80022da <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RCC_OscConfig+0x754>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ee      	beq.n	8001f4a <HAL_RCC_OscConfig+0x712>
 8001f6c:	e01a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x76c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6e:	f7fe fd85 	bl	8000a7c <HAL_GetTick>
 8001f72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f74:	e010      	b.n	8001f98 <HAL_RCC_OscConfig+0x760>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7fe fd81 	bl	8000a7c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d907      	bls.n	8001f98 <HAL_RCC_OscConfig+0x760>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e1a6      	b.n	80022da <HAL_RCC_OscConfig+0xaa2>
 8001f8c:	58024400 	.word	0x58024400
 8001f90:	08004c4c 	.word	0x08004c4c
 8001f94:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f98:	4b9f      	ldr	r3, [pc, #636]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1e8      	bne.n	8001f76 <HAL_RCC_OscConfig+0x73e>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00c      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x78e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d008      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x78e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d004      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x78e>
 8001fbc:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 8001fc0:	4896      	ldr	r0, [pc, #600]	; (800221c <HAL_RCC_OscConfig+0x9e4>)
 8001fc2:	f7fe fafe 	bl	80005c2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8184 	beq.w	80022d8 <HAL_RCC_OscConfig+0xaa0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001fd0:	4b91      	ldr	r3, [pc, #580]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fd8:	2b18      	cmp	r3, #24
 8001fda:	f000 813f 	beq.w	800225c <HAL_RCC_OscConfig+0xa24>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	f040 8120 	bne.w	8002228 <HAL_RCC_OscConfig+0x9f0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d010      	beq.n	8002012 <HAL_RCC_OscConfig+0x7da>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00c      	beq.n	8002012 <HAL_RCC_OscConfig+0x7da>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d008      	beq.n	8002012 <HAL_RCC_OscConfig+0x7da>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	2b02      	cmp	r3, #2
 8002006:	d004      	beq.n	8002012 <HAL_RCC_OscConfig+0x7da>
 8002008:	f240 21f1 	movw	r1, #753	; 0x2f1
 800200c:	4883      	ldr	r0, [pc, #524]	; (800221c <HAL_RCC_OscConfig+0x9e4>)
 800200e:	f7fe fad8 	bl	80005c2 <assert_failed>
        assert_param(IS_RCC_PLLRGE_VALUE(RCC_OscInitStruct->PLL.PLLRGE));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d010      	beq.n	800203c <HAL_RCC_OscConfig+0x804>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	2b04      	cmp	r3, #4
 8002020:	d00c      	beq.n	800203c <HAL_RCC_OscConfig+0x804>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	2b08      	cmp	r3, #8
 8002028:	d008      	beq.n	800203c <HAL_RCC_OscConfig+0x804>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	2b0c      	cmp	r3, #12
 8002030:	d004      	beq.n	800203c <HAL_RCC_OscConfig+0x804>
 8002032:	f240 21f2 	movw	r1, #754	; 0x2f2
 8002036:	4879      	ldr	r0, [pc, #484]	; (800221c <HAL_RCC_OscConfig+0x9e4>)
 8002038:	f7fe fac3 	bl	80005c2 <assert_failed>
        assert_param(IS_RCC_PLLVCO_VALUE(RCC_OscInitStruct->PLL.PLLVCOSEL));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <HAL_RCC_OscConfig+0x81e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002048:	2b02      	cmp	r3, #2
 800204a:	d004      	beq.n	8002056 <HAL_RCC_OscConfig+0x81e>
 800204c:	f240 21f3 	movw	r1, #755	; 0x2f3
 8002050:	4872      	ldr	r0, [pc, #456]	; (800221c <HAL_RCC_OscConfig+0x9e4>)
 8002052:	f7fe fab6 	bl	80005c2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_RCC_OscConfig+0x82e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002062:	2b3f      	cmp	r3, #63	; 0x3f
 8002064:	d904      	bls.n	8002070 <HAL_RCC_OscConfig+0x838>
 8002066:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800206a:	486c      	ldr	r0, [pc, #432]	; (800221c <HAL_RCC_OscConfig+0x9e4>)
 800206c:	f7fe faa9 	bl	80005c2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	2b03      	cmp	r3, #3
 8002076:	d904      	bls.n	8002082 <HAL_RCC_OscConfig+0x84a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002080:	d904      	bls.n	800208c <HAL_RCC_OscConfig+0x854>
 8002082:	f240 21f5 	movw	r1, #757	; 0x2f5
 8002086:	4865      	ldr	r0, [pc, #404]	; (800221c <HAL_RCC_OscConfig+0x9e4>)
 8002088:	f7fe fa9b 	bl	80005c2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_RCC_OscConfig+0x864>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002098:	2b80      	cmp	r3, #128	; 0x80
 800209a:	d904      	bls.n	80020a6 <HAL_RCC_OscConfig+0x86e>
 800209c:	f240 21f6 	movw	r1, #758	; 0x2f6
 80020a0:	485e      	ldr	r0, [pc, #376]	; (800221c <HAL_RCC_OscConfig+0x9e4>)
 80020a2:	f7fe fa8e 	bl	80005c2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_OscConfig+0x87e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	2b80      	cmp	r3, #128	; 0x80
 80020b4:	d904      	bls.n	80020c0 <HAL_RCC_OscConfig+0x888>
 80020b6:	f240 21f7 	movw	r1, #759	; 0x2f7
 80020ba:	4858      	ldr	r0, [pc, #352]	; (800221c <HAL_RCC_OscConfig+0x9e4>)
 80020bc:	f7fe fa81 	bl	80005c2 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_RCC_OscConfig+0x898>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020cc:	2b80      	cmp	r3, #128	; 0x80
 80020ce:	d904      	bls.n	80020da <HAL_RCC_OscConfig+0x8a2>
 80020d0:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 80020d4:	4851      	ldr	r0, [pc, #324]	; (800221c <HAL_RCC_OscConfig+0x9e4>)
 80020d6:	f7fe fa74 	bl	80005c2 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e2:	d304      	bcc.n	80020ee <HAL_RCC_OscConfig+0x8b6>
 80020e4:	f240 21f9 	movw	r1, #761	; 0x2f9
 80020e8:	484c      	ldr	r0, [pc, #304]	; (800221c <HAL_RCC_OscConfig+0x9e4>)
 80020ea:	f7fe fa6a 	bl	80005c2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ee:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a49      	ldr	r2, [pc, #292]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 80020f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7fe fcbf 	bl	8000a7c <HAL_GetTick>
 80020fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x8dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002102:	f7fe fcbb 	bl	8000a7c <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x8dc>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e0e2      	b.n	80022da <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002114:	4b40      	ldr	r3, [pc, #256]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x8ca>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002120:	4b3d      	ldr	r3, [pc, #244]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 8002122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002124:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <HAL_RCC_OscConfig+0x9e8>)
 8002126:	4013      	ands	r3, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002130:	0112      	lsls	r2, r2, #4
 8002132:	430a      	orrs	r2, r1
 8002134:	4938      	ldr	r1, [pc, #224]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 8002136:	4313      	orrs	r3, r2
 8002138:	628b      	str	r3, [r1, #40]	; 0x28
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	3b01      	subs	r3, #1
 8002140:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002148:	3b01      	subs	r3, #1
 800214a:	025b      	lsls	r3, r3, #9
 800214c:	b29b      	uxth	r3, r3
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002154:	3b01      	subs	r3, #1
 8002156:	041b      	lsls	r3, r3, #16
 8002158:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	3b01      	subs	r3, #1
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800216a:	492b      	ldr	r1, [pc, #172]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 800216c:	4313      	orrs	r3, r2
 800216e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002170:	4b29      	ldr	r3, [pc, #164]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	4a28      	ldr	r2, [pc, #160]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800217c:	4b26      	ldr	r3, [pc, #152]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 800217e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002180:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_RCC_OscConfig+0x9ec>)
 8002182:	4013      	ands	r3, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002188:	00d2      	lsls	r2, r2, #3
 800218a:	4923      	ldr	r1, [pc, #140]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 800218c:	4313      	orrs	r3, r2
 800218e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002190:	4b21      	ldr	r3, [pc, #132]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	f023 020c 	bic.w	r2, r3, #12
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	491e      	ldr	r1, [pc, #120]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 80021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a6:	f023 0202 	bic.w	r2, r3, #2
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	491a      	ldr	r1, [pc, #104]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80021b4:	4b18      	ldr	r3, [pc, #96]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	4a17      	ldr	r2, [pc, #92]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 80021ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021c0:	4b15      	ldr	r3, [pc, #84]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	4a14      	ldr	r2, [pc, #80]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 80021c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	4a11      	ldr	r2, [pc, #68]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 80021d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 80021ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7fe fc44 	bl	8000a7c <HAL_GetTick>
 80021f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f8:	f7fe fc40 	bl	8000a7c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e067      	b.n	80022da <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800220a:	4b03      	ldr	r3, [pc, #12]	; (8002218 <HAL_RCC_OscConfig+0x9e0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0x9c0>
 8002216:	e05f      	b.n	80022d8 <HAL_RCC_OscConfig+0xaa0>
 8002218:	58024400 	.word	0x58024400
 800221c:	08004c4c 	.word	0x08004c4c
 8002220:	fffffc0c 	.word	0xfffffc0c
 8002224:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002228:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <HAL_RCC_OscConfig+0xaac>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <HAL_RCC_OscConfig+0xaac>)
 800222e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fc22 	bl	8000a7c <HAL_GetTick>
 8002238:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xa16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe fc1e 	bl	8000a7c <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xa16>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e045      	b.n	80022da <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_RCC_OscConfig+0xaac>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0xa04>
 800225a:	e03d      	b.n	80022d8 <HAL_RCC_OscConfig+0xaa0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800225c:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <HAL_RCC_OscConfig+0xaac>)
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_RCC_OscConfig+0xaac>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	2b01      	cmp	r3, #1
 800226e:	d031      	beq.n	80022d4 <HAL_RCC_OscConfig+0xa9c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	f003 0203 	and.w	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d12a      	bne.n	80022d4 <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d122      	bne.n	80022d4 <HAL_RCC_OscConfig+0xa9c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d11a      	bne.n	80022d4 <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	0a5b      	lsrs	r3, r3, #9
 80022a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022aa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d111      	bne.n	80022d4 <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	0c1b      	lsrs	r3, r3, #16
 80022b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d108      	bne.n	80022d4 <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	0e1b      	lsrs	r3, r3, #24
 80022c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_OscConfig+0xaa0>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0xaa2>
      }
    }
  }
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3730      	adds	r7, #48	; 0x30
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	58024400 	.word	0x58024400

080022e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e354      	b.n	80029a6 <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_RCC_ClockConfig+0x24>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b3f      	cmp	r3, #63	; 0x3f
 800230a:	d904      	bls.n	8002316 <HAL_RCC_ClockConfig+0x2e>
 800230c:	f240 3186 	movw	r1, #902	; 0x386
 8002310:	4827      	ldr	r0, [pc, #156]	; (80023b0 <HAL_RCC_ClockConfig+0xc8>)
 8002312:	f7fe f956 	bl	80005c2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d031      	beq.n	8002380 <HAL_RCC_ClockConfig+0x98>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d02e      	beq.n	8002380 <HAL_RCC_ClockConfig+0x98>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d02b      	beq.n	8002380 <HAL_RCC_ClockConfig+0x98>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d028      	beq.n	8002380 <HAL_RCC_ClockConfig+0x98>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b04      	cmp	r3, #4
 8002332:	d025      	beq.n	8002380 <HAL_RCC_ClockConfig+0x98>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2b05      	cmp	r3, #5
 8002338:	d022      	beq.n	8002380 <HAL_RCC_ClockConfig+0x98>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b06      	cmp	r3, #6
 800233e:	d01f      	beq.n	8002380 <HAL_RCC_ClockConfig+0x98>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b07      	cmp	r3, #7
 8002344:	d01c      	beq.n	8002380 <HAL_RCC_ClockConfig+0x98>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b08      	cmp	r3, #8
 800234a:	d019      	beq.n	8002380 <HAL_RCC_ClockConfig+0x98>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2b09      	cmp	r3, #9
 8002350:	d016      	beq.n	8002380 <HAL_RCC_ClockConfig+0x98>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b0a      	cmp	r3, #10
 8002356:	d013      	beq.n	8002380 <HAL_RCC_ClockConfig+0x98>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b0b      	cmp	r3, #11
 800235c:	d010      	beq.n	8002380 <HAL_RCC_ClockConfig+0x98>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b0c      	cmp	r3, #12
 8002362:	d00d      	beq.n	8002380 <HAL_RCC_ClockConfig+0x98>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b0d      	cmp	r3, #13
 8002368:	d00a      	beq.n	8002380 <HAL_RCC_ClockConfig+0x98>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b0e      	cmp	r3, #14
 800236e:	d007      	beq.n	8002380 <HAL_RCC_ClockConfig+0x98>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	d004      	beq.n	8002380 <HAL_RCC_ClockConfig+0x98>
 8002376:	f240 3187 	movw	r1, #903	; 0x387
 800237a:	480d      	ldr	r0, [pc, #52]	; (80023b0 <HAL_RCC_ClockConfig+0xc8>)
 800237c:	f7fe f921 	bl	80005c2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <HAL_RCC_ClockConfig+0xcc>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d914      	bls.n	80023b8 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0xcc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 020f 	bic.w	r2, r3, #15
 8002396:	4907      	ldr	r1, [pc, #28]	; (80023b4 <HAL_RCC_ClockConfig+0xcc>)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_RCC_ClockConfig+0xcc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e2fa      	b.n	80029a6 <HAL_RCC_ClockConfig+0x6be>
 80023b0:	08004c4c 	.word	0x08004c4c
 80023b4:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d029      	beq.n	8002418 <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	4b9a      	ldr	r3, [pc, #616]	; (8002634 <HAL_RCC_ClockConfig+0x34c>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d921      	bls.n	8002418 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d014      	beq.n	8002406 <HAL_RCC_ClockConfig+0x11e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d010      	beq.n	8002406 <HAL_RCC_ClockConfig+0x11e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b50      	cmp	r3, #80	; 0x50
 80023ea:	d00c      	beq.n	8002406 <HAL_RCC_ClockConfig+0x11e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	2b60      	cmp	r3, #96	; 0x60
 80023f2:	d008      	beq.n	8002406 <HAL_RCC_ClockConfig+0x11e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b70      	cmp	r3, #112	; 0x70
 80023fa:	d004      	beq.n	8002406 <HAL_RCC_ClockConfig+0x11e>
 80023fc:	f240 31a3 	movw	r1, #931	; 0x3a3
 8002400:	488d      	ldr	r0, [pc, #564]	; (8002638 <HAL_RCC_ClockConfig+0x350>)
 8002402:	f7fe f8de 	bl	80005c2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002406:	4b8b      	ldr	r3, [pc, #556]	; (8002634 <HAL_RCC_ClockConfig+0x34c>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	4988      	ldr	r1, [pc, #544]	; (8002634 <HAL_RCC_ClockConfig+0x34c>)
 8002414:	4313      	orrs	r3, r2
 8002416:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	2b00      	cmp	r3, #0
 8002422:	d029      	beq.n	8002478 <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695a      	ldr	r2, [r3, #20]
 8002428:	4b82      	ldr	r3, [pc, #520]	; (8002634 <HAL_RCC_ClockConfig+0x34c>)
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002430:	429a      	cmp	r2, r3
 8002432:	d921      	bls.n	8002478 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d014      	beq.n	8002466 <HAL_RCC_ClockConfig+0x17e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	2b40      	cmp	r3, #64	; 0x40
 8002442:	d010      	beq.n	8002466 <HAL_RCC_ClockConfig+0x17e>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	2b50      	cmp	r3, #80	; 0x50
 800244a:	d00c      	beq.n	8002466 <HAL_RCC_ClockConfig+0x17e>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	2b60      	cmp	r3, #96	; 0x60
 8002452:	d008      	beq.n	8002466 <HAL_RCC_ClockConfig+0x17e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	2b70      	cmp	r3, #112	; 0x70
 800245a:	d004      	beq.n	8002466 <HAL_RCC_ClockConfig+0x17e>
 800245c:	f240 31b5 	movw	r1, #949	; 0x3b5
 8002460:	4875      	ldr	r0, [pc, #468]	; (8002638 <HAL_RCC_ClockConfig+0x350>)
 8002462:	f7fe f8ae 	bl	80005c2 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002466:	4b73      	ldr	r3, [pc, #460]	; (8002634 <HAL_RCC_ClockConfig+0x34c>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	4970      	ldr	r1, [pc, #448]	; (8002634 <HAL_RCC_ClockConfig+0x34c>)
 8002474:	4313      	orrs	r3, r2
 8002476:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	d02d      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699a      	ldr	r2, [r3, #24]
 8002488:	4b6a      	ldr	r3, [pc, #424]	; (8002634 <HAL_RCC_ClockConfig+0x34c>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002490:	429a      	cmp	r2, r3
 8002492:	d925      	bls.n	80024e0 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d018      	beq.n	80024ce <HAL_RCC_ClockConfig+0x1e6>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a4:	d013      	beq.n	80024ce <HAL_RCC_ClockConfig+0x1e6>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80024ae:	d00e      	beq.n	80024ce <HAL_RCC_ClockConfig+0x1e6>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80024b8:	d009      	beq.n	80024ce <HAL_RCC_ClockConfig+0x1e6>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024c2:	d004      	beq.n	80024ce <HAL_RCC_ClockConfig+0x1e6>
 80024c4:	f240 31c6 	movw	r1, #966	; 0x3c6
 80024c8:	485b      	ldr	r0, [pc, #364]	; (8002638 <HAL_RCC_ClockConfig+0x350>)
 80024ca:	f7fe f87a 	bl	80005c2 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024ce:	4b59      	ldr	r3, [pc, #356]	; (8002634 <HAL_RCC_ClockConfig+0x34c>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	4956      	ldr	r1, [pc, #344]	; (8002634 <HAL_RCC_ClockConfig+0x34c>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d029      	beq.n	8002540 <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	4b50      	ldr	r3, [pc, #320]	; (8002634 <HAL_RCC_ClockConfig+0x34c>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d921      	bls.n	8002540 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d014      	beq.n	800252e <HAL_RCC_ClockConfig+0x246>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b40      	cmp	r3, #64	; 0x40
 800250a:	d010      	beq.n	800252e <HAL_RCC_ClockConfig+0x246>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	2b50      	cmp	r3, #80	; 0x50
 8002512:	d00c      	beq.n	800252e <HAL_RCC_ClockConfig+0x246>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2b60      	cmp	r3, #96	; 0x60
 800251a:	d008      	beq.n	800252e <HAL_RCC_ClockConfig+0x246>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	2b70      	cmp	r3, #112	; 0x70
 8002522:	d004      	beq.n	800252e <HAL_RCC_ClockConfig+0x246>
 8002524:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 8002528:	4843      	ldr	r0, [pc, #268]	; (8002638 <HAL_RCC_ClockConfig+0x350>)
 800252a:	f7fe f84a 	bl	80005c2 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800252e:	4b41      	ldr	r3, [pc, #260]	; (8002634 <HAL_RCC_ClockConfig+0x34c>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	493e      	ldr	r1, [pc, #248]	; (8002634 <HAL_RCC_ClockConfig+0x34c>)
 800253c:	4313      	orrs	r3, r2
 800253e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d039      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x2d8>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	4b38      	ldr	r3, [pc, #224]	; (8002634 <HAL_RCC_ClockConfig+0x34c>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	429a      	cmp	r2, r3
 800255a:	d931      	bls.n	80025c0 <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d024      	beq.n	80025ae <HAL_RCC_ClockConfig+0x2c6>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b08      	cmp	r3, #8
 800256a:	d020      	beq.n	80025ae <HAL_RCC_ClockConfig+0x2c6>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b09      	cmp	r3, #9
 8002572:	d01c      	beq.n	80025ae <HAL_RCC_ClockConfig+0x2c6>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b0a      	cmp	r3, #10
 800257a:	d018      	beq.n	80025ae <HAL_RCC_ClockConfig+0x2c6>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b0b      	cmp	r3, #11
 8002582:	d014      	beq.n	80025ae <HAL_RCC_ClockConfig+0x2c6>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b0c      	cmp	r3, #12
 800258a:	d010      	beq.n	80025ae <HAL_RCC_ClockConfig+0x2c6>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2b0d      	cmp	r3, #13
 8002592:	d00c      	beq.n	80025ae <HAL_RCC_ClockConfig+0x2c6>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b0e      	cmp	r3, #14
 800259a:	d008      	beq.n	80025ae <HAL_RCC_ClockConfig+0x2c6>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b0f      	cmp	r3, #15
 80025a2:	d004      	beq.n	80025ae <HAL_RCC_ClockConfig+0x2c6>
 80025a4:	f240 31eb 	movw	r1, #1003	; 0x3eb
 80025a8:	4823      	ldr	r0, [pc, #140]	; (8002638 <HAL_RCC_ClockConfig+0x350>)
 80025aa:	f7fe f80a 	bl	80005c2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ae:	4b21      	ldr	r3, [pc, #132]	; (8002634 <HAL_RCC_ClockConfig+0x34c>)
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f023 020f 	bic.w	r2, r3, #15
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	491e      	ldr	r1, [pc, #120]	; (8002634 <HAL_RCC_ClockConfig+0x34c>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80a2 	beq.w	8002712 <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d032      	beq.n	800263c <HAL_RCC_ClockConfig+0x354>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025de:	d02d      	beq.n	800263c <HAL_RCC_ClockConfig+0x354>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80025e8:	d028      	beq.n	800263c <HAL_RCC_ClockConfig+0x354>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80025f2:	d023      	beq.n	800263c <HAL_RCC_ClockConfig+0x354>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 80025fc:	d01e      	beq.n	800263c <HAL_RCC_ClockConfig+0x354>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002606:	d019      	beq.n	800263c <HAL_RCC_ClockConfig+0x354>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8002610:	d014      	beq.n	800263c <HAL_RCC_ClockConfig+0x354>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800261a:	d00f      	beq.n	800263c <HAL_RCC_ClockConfig+0x354>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002624:	d00a      	beq.n	800263c <HAL_RCC_ClockConfig+0x354>
 8002626:	f240 31fb 	movw	r1, #1019	; 0x3fb
 800262a:	4803      	ldr	r0, [pc, #12]	; (8002638 <HAL_RCC_ClockConfig+0x350>)
 800262c:	f7fd ffc9 	bl	80005c2 <assert_failed>
 8002630:	e004      	b.n	800263c <HAL_RCC_ClockConfig+0x354>
 8002632:	bf00      	nop
 8002634:	58024400 	.word	0x58024400
 8002638:	08004c4c 	.word	0x08004c4c
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d010      	beq.n	8002666 <HAL_RCC_ClockConfig+0x37e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00c      	beq.n	8002666 <HAL_RCC_ClockConfig+0x37e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d008      	beq.n	8002666 <HAL_RCC_ClockConfig+0x37e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d004      	beq.n	8002666 <HAL_RCC_ClockConfig+0x37e>
 800265c:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8002660:	4858      	ldr	r0, [pc, #352]	; (80027c4 <HAL_RCC_ClockConfig+0x4dc>)
 8002662:	f7fd ffae 	bl	80005c2 <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002666:	4b58      	ldr	r3, [pc, #352]	; (80027c8 <HAL_RCC_ClockConfig+0x4e0>)
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4955      	ldr	r1, [pc, #340]	; (80027c8 <HAL_RCC_ClockConfig+0x4e0>)
 8002674:	4313      	orrs	r3, r2
 8002676:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d107      	bne.n	8002690 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002680:	4b51      	ldr	r3, [pc, #324]	; (80027c8 <HAL_RCC_ClockConfig+0x4e0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d121      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e18a      	b.n	80029a6 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d107      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002698:	4b4b      	ldr	r3, [pc, #300]	; (80027c8 <HAL_RCC_ClockConfig+0x4e0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d115      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e17e      	b.n	80029a6 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d107      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026b0:	4b45      	ldr	r3, [pc, #276]	; (80027c8 <HAL_RCC_ClockConfig+0x4e0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d109      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e172      	b.n	80029a6 <HAL_RCC_ClockConfig+0x6be>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026c0:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <HAL_RCC_ClockConfig+0x4e0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e16a      	b.n	80029a6 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026d0:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <HAL_RCC_ClockConfig+0x4e0>)
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f023 0207 	bic.w	r2, r3, #7
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	493a      	ldr	r1, [pc, #232]	; (80027c8 <HAL_RCC_ClockConfig+0x4e0>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7fe f9cb 	bl	8000a7c <HAL_GetTick>
 80026e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ea:	f7fe f9c7 	bl	8000a7c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e152      	b.n	80029a6 <HAL_RCC_ClockConfig+0x6be>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002700:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <HAL_RCC_ClockConfig+0x4e0>)
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	429a      	cmp	r2, r3
 8002710:	d1eb      	bne.n	80026ea <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d039      	beq.n	8002792 <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <HAL_RCC_ClockConfig+0x4e0>)
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	429a      	cmp	r2, r3
 800272c:	d231      	bcs.n	8002792 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d024      	beq.n	8002780 <HAL_RCC_ClockConfig+0x498>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b08      	cmp	r3, #8
 800273c:	d020      	beq.n	8002780 <HAL_RCC_ClockConfig+0x498>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b09      	cmp	r3, #9
 8002744:	d01c      	beq.n	8002780 <HAL_RCC_ClockConfig+0x498>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b0a      	cmp	r3, #10
 800274c:	d018      	beq.n	8002780 <HAL_RCC_ClockConfig+0x498>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b0b      	cmp	r3, #11
 8002754:	d014      	beq.n	8002780 <HAL_RCC_ClockConfig+0x498>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d010      	beq.n	8002780 <HAL_RCC_ClockConfig+0x498>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b0d      	cmp	r3, #13
 8002764:	d00c      	beq.n	8002780 <HAL_RCC_ClockConfig+0x498>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b0e      	cmp	r3, #14
 800276c:	d008      	beq.n	8002780 <HAL_RCC_ClockConfig+0x498>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b0f      	cmp	r3, #15
 8002774:	d004      	beq.n	8002780 <HAL_RCC_ClockConfig+0x498>
 8002776:	f240 413d 	movw	r1, #1085	; 0x43d
 800277a:	4812      	ldr	r0, [pc, #72]	; (80027c4 <HAL_RCC_ClockConfig+0x4dc>)
 800277c:	f7fd ff21 	bl	80005c2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <HAL_RCC_ClockConfig+0x4e0>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f023 020f 	bic.w	r2, r3, #15
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	490e      	ldr	r1, [pc, #56]	; (80027c8 <HAL_RCC_ClockConfig+0x4e0>)
 800278e:	4313      	orrs	r3, r2
 8002790:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_RCC_ClockConfig+0x4e4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d217      	bcs.n	80027d0 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_RCC_ClockConfig+0x4e4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f023 020f 	bic.w	r2, r3, #15
 80027a8:	4908      	ldr	r1, [pc, #32]	; (80027cc <HAL_RCC_ClockConfig+0x4e4>)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_RCC_ClockConfig+0x4e4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d008      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e0f1      	b.n	80029a6 <HAL_RCC_ClockConfig+0x6be>
 80027c2:	bf00      	nop
 80027c4:	08004c4c 	.word	0x08004c4c
 80027c8:	58024400 	.word	0x58024400
 80027cc:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d029      	beq.n	8002830 <HAL_RCC_ClockConfig+0x548>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	4b73      	ldr	r3, [pc, #460]	; (80029b0 <HAL_RCC_ClockConfig+0x6c8>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d221      	bcs.n	8002830 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d014      	beq.n	800281e <HAL_RCC_ClockConfig+0x536>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d010      	beq.n	800281e <HAL_RCC_ClockConfig+0x536>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	2b50      	cmp	r3, #80	; 0x50
 8002802:	d00c      	beq.n	800281e <HAL_RCC_ClockConfig+0x536>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b60      	cmp	r3, #96	; 0x60
 800280a:	d008      	beq.n	800281e <HAL_RCC_ClockConfig+0x536>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2b70      	cmp	r3, #112	; 0x70
 8002812:	d004      	beq.n	800281e <HAL_RCC_ClockConfig+0x536>
 8002814:	f240 415e 	movw	r1, #1118	; 0x45e
 8002818:	4866      	ldr	r0, [pc, #408]	; (80029b4 <HAL_RCC_ClockConfig+0x6cc>)
 800281a:	f7fd fed2 	bl	80005c2 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800281e:	4b64      	ldr	r3, [pc, #400]	; (80029b0 <HAL_RCC_ClockConfig+0x6c8>)
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	4961      	ldr	r1, [pc, #388]	; (80029b0 <HAL_RCC_ClockConfig+0x6c8>)
 800282c:	4313      	orrs	r3, r2
 800282e:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d029      	beq.n	8002890 <HAL_RCC_ClockConfig+0x5a8>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <HAL_RCC_ClockConfig+0x6c8>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002848:	429a      	cmp	r2, r3
 800284a:	d221      	bcs.n	8002890 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d014      	beq.n	800287e <HAL_RCC_ClockConfig+0x596>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d010      	beq.n	800287e <HAL_RCC_ClockConfig+0x596>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	2b50      	cmp	r3, #80	; 0x50
 8002862:	d00c      	beq.n	800287e <HAL_RCC_ClockConfig+0x596>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	2b60      	cmp	r3, #96	; 0x60
 800286a:	d008      	beq.n	800287e <HAL_RCC_ClockConfig+0x596>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	2b70      	cmp	r3, #112	; 0x70
 8002872:	d004      	beq.n	800287e <HAL_RCC_ClockConfig+0x596>
 8002874:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8002878:	484e      	ldr	r0, [pc, #312]	; (80029b4 <HAL_RCC_ClockConfig+0x6cc>)
 800287a:	f7fd fea2 	bl	80005c2 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800287e:	4b4c      	ldr	r3, [pc, #304]	; (80029b0 <HAL_RCC_ClockConfig+0x6c8>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	4949      	ldr	r1, [pc, #292]	; (80029b0 <HAL_RCC_ClockConfig+0x6c8>)
 800288c:	4313      	orrs	r3, r2
 800288e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	d02d      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x610>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699a      	ldr	r2, [r3, #24]
 80028a0:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <HAL_RCC_ClockConfig+0x6c8>)
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d225      	bcs.n	80028f8 <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d018      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x5fe>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028bc:	d013      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x5fe>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80028c6:	d00e      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x5fe>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028d0:	d009      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x5fe>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028da:	d004      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x5fe>
 80028dc:	f240 4182 	movw	r1, #1154	; 0x482
 80028e0:	4834      	ldr	r0, [pc, #208]	; (80029b4 <HAL_RCC_ClockConfig+0x6cc>)
 80028e2:	f7fd fe6e 	bl	80005c2 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028e6:	4b32      	ldr	r3, [pc, #200]	; (80029b0 <HAL_RCC_ClockConfig+0x6c8>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	492f      	ldr	r1, [pc, #188]	; (80029b0 <HAL_RCC_ClockConfig+0x6c8>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d029      	beq.n	8002958 <HAL_RCC_ClockConfig+0x670>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69da      	ldr	r2, [r3, #28]
 8002908:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <HAL_RCC_ClockConfig+0x6c8>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002910:	429a      	cmp	r2, r3
 8002912:	d221      	bcs.n	8002958 <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d014      	beq.n	8002946 <HAL_RCC_ClockConfig+0x65e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d010      	beq.n	8002946 <HAL_RCC_ClockConfig+0x65e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	2b50      	cmp	r3, #80	; 0x50
 800292a:	d00c      	beq.n	8002946 <HAL_RCC_ClockConfig+0x65e>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	2b60      	cmp	r3, #96	; 0x60
 8002932:	d008      	beq.n	8002946 <HAL_RCC_ClockConfig+0x65e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	2b70      	cmp	r3, #112	; 0x70
 800293a:	d004      	beq.n	8002946 <HAL_RCC_ClockConfig+0x65e>
 800293c:	f240 4194 	movw	r1, #1172	; 0x494
 8002940:	481c      	ldr	r0, [pc, #112]	; (80029b4 <HAL_RCC_ClockConfig+0x6cc>)
 8002942:	f7fd fe3e 	bl	80005c2 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002946:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <HAL_RCC_ClockConfig+0x6c8>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	4917      	ldr	r1, [pc, #92]	; (80029b0 <HAL_RCC_ClockConfig+0x6c8>)
 8002954:	4313      	orrs	r3, r2
 8002956:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002958:	f000 f836 	bl	80029c8 <HAL_RCC_GetSysClockFreq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <HAL_RCC_ClockConfig+0x6c8>)
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	4913      	ldr	r1, [pc, #76]	; (80029b8 <HAL_RCC_ClockConfig+0x6d0>)
 800296a:	5ccb      	ldrb	r3, [r1, r3]
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
 8002974:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <HAL_RCC_ClockConfig+0x6c8>)
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	4a0e      	ldr	r2, [pc, #56]	; (80029b8 <HAL_RCC_ClockConfig+0x6d0>)
 8002980:	5cd3      	ldrb	r3, [r2, r3]
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
 800298c:	4a0b      	ldr	r2, [pc, #44]	; (80029bc <HAL_RCC_ClockConfig+0x6d4>)
 800298e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002990:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <HAL_RCC_ClockConfig+0x6d8>)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_ClockConfig+0x6dc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe f824 	bl	80009e8 <HAL_InitTick>
 80029a0:	4603      	mov	r3, r0
 80029a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	58024400 	.word	0x58024400
 80029b4:	08004c4c 	.word	0x08004c4c
 80029b8:	08004cf8 	.word	0x08004cf8
 80029bc:	20000004 	.word	0x20000004
 80029c0:	20000000 	.word	0x20000000
 80029c4:	20000008 	.word	0x20000008

080029c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	; 0x24
 80029cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ce:	4bb3      	ldr	r3, [pc, #716]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029d6:	2b18      	cmp	r3, #24
 80029d8:	f200 8155 	bhi.w	8002c86 <HAL_RCC_GetSysClockFreq+0x2be>
 80029dc:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80029de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e2:	bf00      	nop
 80029e4:	08002a49 	.word	0x08002a49
 80029e8:	08002c87 	.word	0x08002c87
 80029ec:	08002c87 	.word	0x08002c87
 80029f0:	08002c87 	.word	0x08002c87
 80029f4:	08002c87 	.word	0x08002c87
 80029f8:	08002c87 	.word	0x08002c87
 80029fc:	08002c87 	.word	0x08002c87
 8002a00:	08002c87 	.word	0x08002c87
 8002a04:	08002a6f 	.word	0x08002a6f
 8002a08:	08002c87 	.word	0x08002c87
 8002a0c:	08002c87 	.word	0x08002c87
 8002a10:	08002c87 	.word	0x08002c87
 8002a14:	08002c87 	.word	0x08002c87
 8002a18:	08002c87 	.word	0x08002c87
 8002a1c:	08002c87 	.word	0x08002c87
 8002a20:	08002c87 	.word	0x08002c87
 8002a24:	08002a75 	.word	0x08002a75
 8002a28:	08002c87 	.word	0x08002c87
 8002a2c:	08002c87 	.word	0x08002c87
 8002a30:	08002c87 	.word	0x08002c87
 8002a34:	08002c87 	.word	0x08002c87
 8002a38:	08002c87 	.word	0x08002c87
 8002a3c:	08002c87 	.word	0x08002c87
 8002a40:	08002c87 	.word	0x08002c87
 8002a44:	08002a7b 	.word	0x08002a7b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a48:	4b94      	ldr	r3, [pc, #592]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d009      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a54:	4b91      	ldr	r3, [pc, #580]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	08db      	lsrs	r3, r3, #3
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	4a90      	ldr	r2, [pc, #576]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
 8002a64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002a66:	e111      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a68:	4b8d      	ldr	r3, [pc, #564]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a6a:	61bb      	str	r3, [r7, #24]
    break;
 8002a6c:	e10e      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002a6e:	4b8d      	ldr	r3, [pc, #564]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a70:	61bb      	str	r3, [r7, #24]
    break;
 8002a72:	e10b      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002a74:	4b8c      	ldr	r3, [pc, #560]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a76:	61bb      	str	r3, [r7, #24]
    break;
 8002a78:	e108      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a7a:	4b88      	ldr	r3, [pc, #544]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002a84:	4b85      	ldr	r3, [pc, #532]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a8e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a90:	4b82      	ldr	r3, [pc, #520]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002a9a:	4b80      	ldr	r3, [pc, #512]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9e:	08db      	lsrs	r3, r3, #3
 8002aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	fb02 f303 	mul.w	r3, r2, r3
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80e1 	beq.w	8002c80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	f000 8083 	beq.w	8002bcc <HAL_RCC_GetSysClockFreq+0x204>
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	f200 80a1 	bhi.w	8002c10 <HAL_RCC_GetSysClockFreq+0x248>
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x114>
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d056      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002ada:	e099      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002adc:	4b6f      	ldr	r3, [pc, #444]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d02d      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ae8:	4b6c      	ldr	r3, [pc, #432]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	08db      	lsrs	r3, r3, #3
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	4a6b      	ldr	r2, [pc, #428]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
 8002af8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	ee07 3a90 	vmov	s15, r3
 8002b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b12:	4b62      	ldr	r3, [pc, #392]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1a:	ee07 3a90 	vmov	s15, r3
 8002b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b26:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002b42:	e087      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	ee07 3a90 	vmov	s15, r3
 8002b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002cb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b56:	4b51      	ldr	r3, [pc, #324]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b86:	e065      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b92:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002cb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b9a:	4b40      	ldr	r3, [pc, #256]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba2:	ee07 3a90 	vmov	s15, r3
 8002ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bca:	e043      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002cb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bde:	4b2f      	ldr	r3, [pc, #188]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be6:	ee07 3a90 	vmov	s15, r3
 8002bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bf2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c0e:	e021      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002cb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c22:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c32:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c52:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	0a5b      	lsrs	r3, r3, #9
 8002c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c5e:	3301      	adds	r3, #1
 8002c60:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	ee07 3a90 	vmov	s15, r3
 8002c68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c78:	ee17 3a90 	vmov	r3, s15
 8002c7c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002c7e:	e005      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61bb      	str	r3, [r7, #24]
    break;
 8002c84:	e002      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002c86:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c88:	61bb      	str	r3, [r7, #24]
    break;
 8002c8a:	bf00      	nop
  }

  return sysclockfreq;
 8002c8c:	69bb      	ldr	r3, [r7, #24]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3724      	adds	r7, #36	; 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	58024400 	.word	0x58024400
 8002ca0:	03d09000 	.word	0x03d09000
 8002ca4:	003d0900 	.word	0x003d0900
 8002ca8:	017d7840 	.word	0x017d7840
 8002cac:	46000000 	.word	0x46000000
 8002cb0:	4c742400 	.word	0x4c742400
 8002cb4:	4a742400 	.word	0x4a742400
 8002cb8:	4bbebc20 	.word	0x4bbebc20

08002cbc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cc8:	2300      	movs	r3, #0
 8002cca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d03f      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cdc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ce0:	d02a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ce2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ce6:	d824      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ce8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cec:	d018      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002cee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cf2:	d81e      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cfc:	d007      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002cfe:	e018      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d00:	4bab      	ldr	r3, [pc, #684]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	4aaa      	ldr	r2, [pc, #680]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d0c:	e015      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2102      	movs	r1, #2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f001 f9dd 	bl	80040d4 <RCCEx_PLL2_Config>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d1e:	e00c      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3324      	adds	r3, #36	; 0x24
 8002d24:	2102      	movs	r1, #2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f001 faf6 	bl	8004318 <RCCEx_PLL3_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d30:	e003      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	75fb      	strb	r3, [r7, #23]
      break;
 8002d36:	e000      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d40:	4b9b      	ldr	r3, [pc, #620]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d4c:	4998      	ldr	r1, [pc, #608]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	650b      	str	r3, [r1, #80]	; 0x50
 8002d52:	e001      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d03d      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d826      	bhi.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002d6c:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d72:	bf00      	nop
 8002d74:	08002d89 	.word	0x08002d89
 8002d78:	08002d97 	.word	0x08002d97
 8002d7c:	08002da9 	.word	0x08002da9
 8002d80:	08002dc1 	.word	0x08002dc1
 8002d84:	08002dc1 	.word	0x08002dc1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d88:	4b89      	ldr	r3, [pc, #548]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	4a88      	ldr	r2, [pc, #544]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d94:	e015      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 f999 	bl	80040d4 <RCCEx_PLL2_Config>
 8002da2:	4603      	mov	r3, r0
 8002da4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002da6:	e00c      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3324      	adds	r3, #36	; 0x24
 8002dac:	2100      	movs	r1, #0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f001 fab2 	bl	8004318 <RCCEx_PLL3_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002db8:	e003      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dc8:	4b79      	ldr	r3, [pc, #484]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dcc:	f023 0207 	bic.w	r2, r3, #7
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	4976      	ldr	r1, [pc, #472]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	650b      	str	r3, [r1, #80]	; 0x50
 8002dda:	e001      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d042      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df4:	d02b      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfa:	d825      	bhi.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002dfc:	2bc0      	cmp	r3, #192	; 0xc0
 8002dfe:	d028      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002e00:	2bc0      	cmp	r3, #192	; 0xc0
 8002e02:	d821      	bhi.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002e04:	2b80      	cmp	r3, #128	; 0x80
 8002e06:	d016      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002e08:	2b80      	cmp	r3, #128	; 0x80
 8002e0a:	d81d      	bhi.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d007      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002e14:	e018      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e16:	4b66      	ldr	r3, [pc, #408]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	4a65      	ldr	r2, [pc, #404]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e22:	e017      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3304      	adds	r3, #4
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f001 f952 	bl	80040d4 <RCCEx_PLL2_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e34:	e00e      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3324      	adds	r3, #36	; 0x24
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f001 fa6b 	bl	8004318 <RCCEx_PLL3_Config>
 8002e42:	4603      	mov	r3, r0
 8002e44:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e46:	e005      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e4c:	e002      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e000      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002e5a:	4b55      	ldr	r3, [pc, #340]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	4952      	ldr	r1, [pc, #328]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	650b      	str	r3, [r1, #80]	; 0x50
 8002e6c:	e001      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d049      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e88:	d030      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002e8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e8e:	d82a      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002e90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e94:	d02c      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002e96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e9a:	d824      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea0:	d018      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea6:	d81e      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eb0:	d007      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002eb2:	e018      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eb4:	4b3e      	ldr	r3, [pc, #248]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	4a3d      	ldr	r2, [pc, #244]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ec0:	e017      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f001 f903 	bl	80040d4 <RCCEx_PLL2_Config>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002ed2:	e00e      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3324      	adds	r3, #36	; 0x24
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f001 fa1c 	bl	8004318 <RCCEx_PLL3_Config>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ee4:	e005      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8002eea:	e002      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002eec:	bf00      	nop
 8002eee:	e000      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f06:	492a      	ldr	r1, [pc, #168]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	658b      	str	r3, [r1, #88]	; 0x58
 8002f0c:	e001      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
 8002f10:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d04c      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f28:	d030      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002f2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f2e:	d82a      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f34:	d02c      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002f36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f3a:	d824      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f40:	d018      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002f42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f46:	d81e      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f50:	d007      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002f52:	e018      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f54:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	4a15      	ldr	r2, [pc, #84]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f60:	e017      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3304      	adds	r3, #4
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f001 f8b3 	bl	80040d4 <RCCEx_PLL2_Config>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002f72:	e00e      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3324      	adds	r3, #36	; 0x24
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f001 f9cc 	bl	8004318 <RCCEx_PLL3_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f84:	e005      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	75fb      	strb	r3, [r7, #23]
      break;
 8002f8a:	e002      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10d      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002fa6:	4902      	ldr	r1, [pc, #8]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	658b      	str	r3, [r1, #88]	; 0x58
 8002fac:	e004      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002fae:	bf00      	nop
 8002fb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d032      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc8:	2b30      	cmp	r3, #48	; 0x30
 8002fca:	d01c      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002fcc:	2b30      	cmp	r3, #48	; 0x30
 8002fce:	d817      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d00c      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d813      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d016      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d10f      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fe0:	4baf      	ldr	r3, [pc, #700]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	4aae      	ldr	r2, [pc, #696]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002fec:	e00e      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 f86d 	bl	80040d4 <RCCEx_PLL2_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002ffe:	e005      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	75fb      	strb	r3, [r7, #23]
      break;
 8003004:	e002      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003006:	bf00      	nop
 8003008:	e000      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800300a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800300c:	7dfb      	ldrb	r3, [r7, #23]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003012:	4ba3      	ldr	r3, [pc, #652]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003016:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301e:	49a0      	ldr	r1, [pc, #640]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003020:	4313      	orrs	r3, r2
 8003022:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003024:	e001      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d047      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800303e:	d030      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003044:	d82a      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003046:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800304a:	d02c      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800304c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003050:	d824      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003056:	d018      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800305c:	d81e      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003066:	d007      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003068:	e018      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800306a:	4b8d      	ldr	r3, [pc, #564]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	4a8c      	ldr	r2, [pc, #560]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003074:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003076:	e017      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f001 f828 	bl	80040d4 <RCCEx_PLL2_Config>
 8003084:	4603      	mov	r3, r0
 8003086:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003088:	e00e      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3324      	adds	r3, #36	; 0x24
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f001 f941 	bl	8004318 <RCCEx_PLL3_Config>
 8003096:	4603      	mov	r3, r0
 8003098:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800309a:	e005      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	75fb      	strb	r3, [r7, #23]
      break;
 80030a0:	e002      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80030a2:	bf00      	nop
 80030a4:	e000      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80030a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80030ae:	4b7c      	ldr	r3, [pc, #496]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80030b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	4979      	ldr	r1, [pc, #484]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	650b      	str	r3, [r1, #80]	; 0x50
 80030c0:	e001      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
 80030c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d049      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030da:	d02e      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80030dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e0:	d828      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80030e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030e6:	d02a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80030e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030ec:	d822      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80030ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030f2:	d026      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80030f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030f8:	d81c      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80030fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030fe:	d010      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003104:	d816      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01d      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800310a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310e:	d111      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3304      	adds	r3, #4
 8003114:	2101      	movs	r1, #1
 8003116:	4618      	mov	r0, r3
 8003118:	f000 ffdc 	bl	80040d4 <RCCEx_PLL2_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003120:	e012      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3324      	adds	r3, #36	; 0x24
 8003126:	2101      	movs	r1, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f001 f8f5 	bl	8004318 <RCCEx_PLL3_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003132:	e009      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	75fb      	strb	r3, [r7, #23]
      break;
 8003138:	e006      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800313a:	bf00      	nop
 800313c:	e004      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800313e:	bf00      	nop
 8003140:	e002      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003142:	bf00      	nop
 8003144:	e000      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003146:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800314e:	4b54      	ldr	r3, [pc, #336]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003152:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315a:	4951      	ldr	r1, [pc, #324]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800315c:	4313      	orrs	r3, r2
 800315e:	650b      	str	r3, [r1, #80]	; 0x50
 8003160:	e001      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d04b      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800317c:	d02e      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x520>
 800317e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003182:	d828      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d02a      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d822      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003190:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003194:	d026      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003196:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800319a:	d81c      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800319c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031a0:	d010      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80031a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031a6:	d816      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01d      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80031ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031b0:	d111      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	2101      	movs	r1, #1
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 ff8b 	bl	80040d4 <RCCEx_PLL2_Config>
 80031be:	4603      	mov	r3, r0
 80031c0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80031c2:	e012      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3324      	adds	r3, #36	; 0x24
 80031c8:	2101      	movs	r1, #1
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 f8a4 	bl	8004318 <RCCEx_PLL3_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80031d4:	e009      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	75fb      	strb	r3, [r7, #23]
      break;
 80031da:	e006      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80031dc:	bf00      	nop
 80031de:	e004      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80031e0:	bf00      	nop
 80031e2:	e002      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80031e4:	bf00      	nop
 80031e6:	e000      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80031e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80031f0:	4b2b      	ldr	r3, [pc, #172]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031fe:	4928      	ldr	r1, [pc, #160]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003200:	4313      	orrs	r3, r2
 8003202:	658b      	str	r3, [r1, #88]	; 0x58
 8003204:	e001      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d02f      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800321a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800321e:	d00e      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003224:	d814      	bhi.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d015      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800322a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800322e:	d10f      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	4a1a      	ldr	r2, [pc, #104]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800323c:	e00c      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3304      	adds	r3, #4
 8003242:	2101      	movs	r1, #1
 8003244:	4618      	mov	r0, r3
 8003246:	f000 ff45 	bl	80040d4 <RCCEx_PLL2_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800324e:	e003      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	75fb      	strb	r3, [r7, #23]
      break;
 8003254:	e000      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003262:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800326a:	490d      	ldr	r1, [pc, #52]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800326c:	4313      	orrs	r3, r2
 800326e:	650b      	str	r3, [r1, #80]	; 0x50
 8003270:	e001      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003272:	7dfb      	ldrb	r3, [r7, #23]
 8003274:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d036      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x634>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	2b03      	cmp	r3, #3
 8003288:	d81c      	bhi.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800328a:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800328c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003290:	080032cb 	.word	0x080032cb
 8003294:	080032a5 	.word	0x080032a5
 8003298:	080032b3 	.word	0x080032b3
 800329c:	080032cb 	.word	0x080032cb
 80032a0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a4:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	4a0f      	ldr	r2, [pc, #60]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 80032aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80032b0:	e00c      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3304      	adds	r3, #4
 80032b6:	2102      	movs	r1, #2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 ff0b 	bl	80040d4 <RCCEx_PLL2_Config>
 80032be:	4603      	mov	r3, r0
 80032c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80032c2:	e003      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	75fb      	strb	r3, [r7, #23]
      break;
 80032c8:	e000      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80032ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10c      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x630>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 80032d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d6:	f023 0203 	bic.w	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	4902      	ldr	r1, [pc, #8]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80032e4:	e004      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80032e6:	bf00      	nop
 80032e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
 80032ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 829b 	beq.w	8003834 <HAL_RCCEx_PeriphCLKConfig+0xb78>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003308:	f000 81a9 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003316:	f000 81a2 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003320:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8003324:	f000 819b 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800332e:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8003332:	f000 8194 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800333c:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8003340:	f000 818d 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800334a:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 800334e:	f000 8186 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003358:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 800335c:	f000 817f 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003366:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 800336a:	f000 8178 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003374:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8003378:	f000 8171 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003382:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8003386:	f000 816a 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003390:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8003394:	f000 8163 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800339e:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 80033a2:	f000 815c 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033ac:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 80033b0:	f000 8155 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033ba:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 80033be:	f000 814e 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033c8:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 80033cc:	f000 8147 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033d6:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 80033da:	f000 8140 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033e4:	4aa8      	ldr	r2, [pc, #672]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	f000 8139 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033f2:	4aa6      	ldr	r2, [pc, #664]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	f000 8132 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003400:	4aa3      	ldr	r2, [pc, #652]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	f000 812b 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800340e:	4aa1      	ldr	r2, [pc, #644]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	f000 8124 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800341c:	4a9e      	ldr	r2, [pc, #632]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	f000 811d 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800342a:	4a9c      	ldr	r2, [pc, #624]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	f000 8116 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003438:	4a99      	ldr	r2, [pc, #612]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	f000 810f 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003446:	4a97      	ldr	r2, [pc, #604]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	f000 8108 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003454:	4a94      	ldr	r2, [pc, #592]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003456:	4293      	cmp	r3, r2
 8003458:	f000 8101 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003462:	4a92      	ldr	r2, [pc, #584]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	f000 80fa 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003470:	4a8f      	ldr	r2, [pc, #572]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	f000 80f3 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800347e:	4a8d      	ldr	r2, [pc, #564]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	f000 80ec 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800348c:	4a8a      	ldr	r2, [pc, #552]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 800348e:	4293      	cmp	r3, r2
 8003490:	f000 80e5 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800349a:	4a88      	ldr	r2, [pc, #544]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 800349c:	4293      	cmp	r3, r2
 800349e:	f000 80de 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034a8:	4a85      	ldr	r2, [pc, #532]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	f000 80d7 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034b6:	4a83      	ldr	r2, [pc, #524]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	f000 80d0 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034c4:	4a80      	ldr	r2, [pc, #512]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	f000 80c9 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034d2:	4a7e      	ldr	r2, [pc, #504]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	f000 80c2 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034e0:	4a7b      	ldr	r2, [pc, #492]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	f000 80bb 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034ee:	4a79      	ldr	r2, [pc, #484]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	f000 80b4 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034fc:	4a76      	ldr	r2, [pc, #472]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	f000 80ad 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800350a:	4a74      	ldr	r2, [pc, #464]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 800350c:	4293      	cmp	r3, r2
 800350e:	f000 80a6 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003518:	4a71      	ldr	r2, [pc, #452]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800351a:	4293      	cmp	r3, r2
 800351c:	f000 809f 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003526:	4a6f      	ldr	r2, [pc, #444]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8003528:	4293      	cmp	r3, r2
 800352a:	f000 8098 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003534:	4a6c      	ldr	r2, [pc, #432]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	f000 8091 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003542:	4a6a      	ldr	r2, [pc, #424]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8003544:	4293      	cmp	r3, r2
 8003546:	f000 808a 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003550:	4a67      	ldr	r2, [pc, #412]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8003552:	4293      	cmp	r3, r2
 8003554:	f000 8083 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800355e:	4a65      	ldr	r2, [pc, #404]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d07c      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800356a:	4a63      	ldr	r2, [pc, #396]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d076      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003576:	4a61      	ldr	r2, [pc, #388]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d070      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003582:	4a5f      	ldr	r2, [pc, #380]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d06a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800358e:	4a5d      	ldr	r2, [pc, #372]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d064      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800359a:	4a5b      	ldr	r2, [pc, #364]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d05e      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035a6:	4a59      	ldr	r2, [pc, #356]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xa50>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d058      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035b2:	4a57      	ldr	r2, [pc, #348]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0xa54>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d052      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035be:	4a55      	ldr	r2, [pc, #340]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d04c      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035ca:	4a53      	ldr	r2, [pc, #332]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0xa5c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d046      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035d6:	4a51      	ldr	r2, [pc, #324]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d040      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035e2:	4a4f      	ldr	r2, [pc, #316]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xa64>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d03a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035ee:	4a4d      	ldr	r2, [pc, #308]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0xa68>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d034      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035fa:	4a4b      	ldr	r2, [pc, #300]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xa6c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d02e      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003606:	4a49      	ldr	r2, [pc, #292]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xa70>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d028      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003612:	4a47      	ldr	r2, [pc, #284]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d022      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800361e:	4a45      	ldr	r2, [pc, #276]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d01c      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800362a:	4a43      	ldr	r2, [pc, #268]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d016      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003636:	4a41      	ldr	r2, [pc, #260]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d010      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003642:	4a3f      	ldr	r2, [pc, #252]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0xa84>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800364e:	4a3d      	ldr	r2, [pc, #244]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003654:	f240 317f 	movw	r1, #895	; 0x37f
 8003658:	483b      	ldr	r0, [pc, #236]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 800365a:	f7fc ffb2 	bl	80005c2 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800365e:	4b3b      	ldr	r3, [pc, #236]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a3a      	ldr	r2, [pc, #232]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 8003664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003668:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800366a:	f7fd fa07 	bl	8000a7c <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003670:	e06e      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xa94>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003672:	f7fd fa03 	bl	8000a7c <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b64      	cmp	r3, #100	; 0x64
 800367e:	d967      	bls.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xa94>
      {
        ret = HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	75fb      	strb	r3, [r7, #23]
        break;
 8003684:	e06a      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8003686:	bf00      	nop
 8003688:	00010300 	.word	0x00010300
 800368c:	00011300 	.word	0x00011300
 8003690:	00012300 	.word	0x00012300
 8003694:	00013300 	.word	0x00013300
 8003698:	00014300 	.word	0x00014300
 800369c:	00015300 	.word	0x00015300
 80036a0:	00016300 	.word	0x00016300
 80036a4:	00017300 	.word	0x00017300
 80036a8:	00018300 	.word	0x00018300
 80036ac:	00019300 	.word	0x00019300
 80036b0:	0001a300 	.word	0x0001a300
 80036b4:	0001b300 	.word	0x0001b300
 80036b8:	0001c300 	.word	0x0001c300
 80036bc:	0001d300 	.word	0x0001d300
 80036c0:	0001e300 	.word	0x0001e300
 80036c4:	0001f300 	.word	0x0001f300
 80036c8:	00020300 	.word	0x00020300
 80036cc:	00021300 	.word	0x00021300
 80036d0:	00022300 	.word	0x00022300
 80036d4:	00023300 	.word	0x00023300
 80036d8:	00024300 	.word	0x00024300
 80036dc:	00025300 	.word	0x00025300
 80036e0:	00026300 	.word	0x00026300
 80036e4:	00027300 	.word	0x00027300
 80036e8:	00028300 	.word	0x00028300
 80036ec:	00029300 	.word	0x00029300
 80036f0:	0002a300 	.word	0x0002a300
 80036f4:	0002b300 	.word	0x0002b300
 80036f8:	0002c300 	.word	0x0002c300
 80036fc:	0002d300 	.word	0x0002d300
 8003700:	0002e300 	.word	0x0002e300
 8003704:	0002f300 	.word	0x0002f300
 8003708:	00030300 	.word	0x00030300
 800370c:	00031300 	.word	0x00031300
 8003710:	00032300 	.word	0x00032300
 8003714:	00033300 	.word	0x00033300
 8003718:	00034300 	.word	0x00034300
 800371c:	00035300 	.word	0x00035300
 8003720:	00036300 	.word	0x00036300
 8003724:	00037300 	.word	0x00037300
 8003728:	00038300 	.word	0x00038300
 800372c:	00039300 	.word	0x00039300
 8003730:	0003a300 	.word	0x0003a300
 8003734:	0003b300 	.word	0x0003b300
 8003738:	0003c300 	.word	0x0003c300
 800373c:	0003d300 	.word	0x0003d300
 8003740:	0003e300 	.word	0x0003e300
 8003744:	0003f300 	.word	0x0003f300
 8003748:	08004c84 	.word	0x08004c84
 800374c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003750:	4bb9      	ldr	r3, [pc, #740]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d08a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
      }
    }

    if(ret == HAL_OK)
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d166      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003762:	4bb6      	ldr	r3, [pc, #728]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003764:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800376c:	4053      	eors	r3, r2
 800376e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003772:	2b00      	cmp	r3, #0
 8003774:	d013      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xae2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003776:	4bb1      	ldr	r3, [pc, #708]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800377e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003780:	4bae      	ldr	r3, [pc, #696]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	4aad      	ldr	r2, [pc, #692]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800378c:	4bab      	ldr	r3, [pc, #684]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	4aaa      	ldr	r2, [pc, #680]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003796:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003798:	4aa8      	ldr	r2, [pc, #672]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a8:	d115      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037aa:	f7fd f967 	bl	8000a7c <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037b0:	e00b      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xb0e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b2:	f7fd f963 	bl	8000a7c <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d902      	bls.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xb0e>
          {
            ret = HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	75fb      	strb	r3, [r7, #23]
            break;
 80037c8:	e005      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037ca:	4b9c      	ldr	r3, [pc, #624]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0ed      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
          }
        }
      }

      if(ret == HAL_OK)
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d126      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xb6e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ea:	d10d      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80037ec:	4b93      	ldr	r3, [pc, #588]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037fa:	0919      	lsrs	r1, r3, #4
 80037fc:	4b90      	ldr	r3, [pc, #576]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0xd84>)
 80037fe:	400b      	ands	r3, r1
 8003800:	498e      	ldr	r1, [pc, #568]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003802:	4313      	orrs	r3, r2
 8003804:	610b      	str	r3, [r1, #16]
 8003806:	e005      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8003808:	4b8c      	ldr	r3, [pc, #560]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	4a8b      	ldr	r2, [pc, #556]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800380e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003812:	6113      	str	r3, [r2, #16]
 8003814:	4b89      	ldr	r3, [pc, #548]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003816:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800381e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003822:	4986      	ldr	r1, [pc, #536]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003824:	4313      	orrs	r3, r2
 8003826:	670b      	str	r3, [r1, #112]	; 0x70
 8003828:	e004      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xb78>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800382a:	7dfb      	ldrb	r3, [r7, #23]
 800382c:	75bb      	strb	r3, [r7, #22]
 800382e:	e001      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xb78>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d07e      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xc82>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003844:	2b28      	cmp	r3, #40	; 0x28
 8003846:	d867      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003848:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <HAL_RCCEx_PeriphCLKConfig+0xb94>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	0800391f 	.word	0x0800391f
 8003854:	08003919 	.word	0x08003919
 8003858:	08003919 	.word	0x08003919
 800385c:	08003919 	.word	0x08003919
 8003860:	08003919 	.word	0x08003919
 8003864:	08003919 	.word	0x08003919
 8003868:	08003919 	.word	0x08003919
 800386c:	08003919 	.word	0x08003919
 8003870:	080038f5 	.word	0x080038f5
 8003874:	08003919 	.word	0x08003919
 8003878:	08003919 	.word	0x08003919
 800387c:	08003919 	.word	0x08003919
 8003880:	08003919 	.word	0x08003919
 8003884:	08003919 	.word	0x08003919
 8003888:	08003919 	.word	0x08003919
 800388c:	08003919 	.word	0x08003919
 8003890:	08003907 	.word	0x08003907
 8003894:	08003919 	.word	0x08003919
 8003898:	08003919 	.word	0x08003919
 800389c:	08003919 	.word	0x08003919
 80038a0:	08003919 	.word	0x08003919
 80038a4:	08003919 	.word	0x08003919
 80038a8:	08003919 	.word	0x08003919
 80038ac:	08003919 	.word	0x08003919
 80038b0:	0800391f 	.word	0x0800391f
 80038b4:	08003919 	.word	0x08003919
 80038b8:	08003919 	.word	0x08003919
 80038bc:	08003919 	.word	0x08003919
 80038c0:	08003919 	.word	0x08003919
 80038c4:	08003919 	.word	0x08003919
 80038c8:	08003919 	.word	0x08003919
 80038cc:	08003919 	.word	0x08003919
 80038d0:	0800391f 	.word	0x0800391f
 80038d4:	08003919 	.word	0x08003919
 80038d8:	08003919 	.word	0x08003919
 80038dc:	08003919 	.word	0x08003919
 80038e0:	08003919 	.word	0x08003919
 80038e4:	08003919 	.word	0x08003919
 80038e8:	08003919 	.word	0x08003919
 80038ec:	08003919 	.word	0x08003919
 80038f0:	0800391f 	.word	0x0800391f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3304      	adds	r3, #4
 80038f8:	2101      	movs	r1, #1
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fbea 	bl	80040d4 <RCCEx_PLL2_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003904:	e00c      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xc64>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3324      	adds	r3, #36	; 0x24
 800390a:	2101      	movs	r1, #1
 800390c:	4618      	mov	r0, r3
 800390e:	f000 fd03 	bl	8004318 <RCCEx_PLL3_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003916:	e003      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xc64>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	75fb      	strb	r3, [r7, #23]
      break;
 800391c:	e000      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xc64>
      break;
 800391e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d109      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003926:	4b45      	ldr	r3, [pc, #276]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003932:	4942      	ldr	r1, [pc, #264]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003934:	4313      	orrs	r3, r2
 8003936:	654b      	str	r3, [r1, #84]	; 0x54
 8003938:	e001      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393a:	7dfb      	ldrb	r3, [r7, #23]
 800393c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d037      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xcfe>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394e:	2b05      	cmp	r3, #5
 8003950:	d820      	bhi.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xcd8>
 8003952:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003958:	0800399b 	.word	0x0800399b
 800395c:	08003971 	.word	0x08003971
 8003960:	08003983 	.word	0x08003983
 8003964:	0800399b 	.word	0x0800399b
 8003968:	0800399b 	.word	0x0800399b
 800396c:	0800399b 	.word	0x0800399b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	2101      	movs	r1, #1
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fbac 	bl	80040d4 <RCCEx_PLL2_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003980:	e00c      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xce0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3324      	adds	r3, #36	; 0x24
 8003986:	2101      	movs	r1, #1
 8003988:	4618      	mov	r0, r3
 800398a:	f000 fcc5 	bl	8004318 <RCCEx_PLL3_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003992:	e003      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xce0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	75fb      	strb	r3, [r7, #23]
      break;
 8003998:	e000      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xce0>
      break;
 800399a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039a2:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	f023 0207 	bic.w	r2, r3, #7
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ae:	4923      	ldr	r1, [pc, #140]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	654b      	str	r3, [r1, #84]	; 0x54
 80039b4:	e001      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xcfe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b6:	7dfb      	ldrb	r3, [r7, #23]
 80039b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d040      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039cc:	2b05      	cmp	r3, #5
 80039ce:	d821      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 80039d0:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>)
 80039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d6:	bf00      	nop
 80039d8:	08003a1b 	.word	0x08003a1b
 80039dc:	080039f1 	.word	0x080039f1
 80039e0:	08003a03 	.word	0x08003a03
 80039e4:	08003a1b 	.word	0x08003a1b
 80039e8:	08003a1b 	.word	0x08003a1b
 80039ec:	08003a1b 	.word	0x08003a1b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	2101      	movs	r1, #1
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fb6c 	bl	80040d4 <RCCEx_PLL2_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a00:	e00c      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xd60>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3324      	adds	r3, #36	; 0x24
 8003a06:	2101      	movs	r1, #1
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fc85 	bl	8004318 <RCCEx_PLL3_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a12:	e003      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xd60>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	75fb      	strb	r3, [r7, #23]
      break;
 8003a18:	e000      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xd60>
      break;
 8003a1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d110      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xd88>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	f023 0207 	bic.w	r2, r3, #7
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a30:	4902      	ldr	r1, [pc, #8]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	658b      	str	r3, [r1, #88]	; 0x58
 8003a36:	e007      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003a38:	58024800 	.word	0x58024800
 8003a3c:	58024400 	.word	0x58024400
 8003a40:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
 8003a46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d04b      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a5e:	d02e      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xe02>
 8003a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a64:	d828      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 8003a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6a:	d02a      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a70:	d822      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 8003a72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a76:	d026      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
 8003a78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a7c:	d81c      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 8003a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a82:	d010      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xdea>
 8003a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a88:	d816      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01d      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 8003a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a92:	d111      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fb1a 	bl	80040d4 <RCCEx_PLL2_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003aa4:	e012      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xe10>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3324      	adds	r3, #36	; 0x24
 8003aaa:	2102      	movs	r1, #2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fc33 	bl	8004318 <RCCEx_PLL3_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ab6:	e009      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xe10>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
      break;
 8003abc:	e006      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e004      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e002      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 8003aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10a      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ad2:	4bb2      	ldr	r3, [pc, #712]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae0:	49ae      	ldr	r1, [pc, #696]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	654b      	str	r3, [r1, #84]	; 0x54
 8003ae6:	e001      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xe30>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
 8003aea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d04b      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xed4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003afe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b02:	d02e      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xea6>
 8003b04:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b08:	d828      	bhi.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0e:	d02a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
 8003b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b14:	d822      	bhi.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003b16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b1a:	d026      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xeae>
 8003b1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b20:	d81c      	bhi.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b26:	d010      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
 8003b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2c:	d816      	bhi.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d01d      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xeb2>
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	d111      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xea0>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fac8 	bl	80040d4 <RCCEx_PLL2_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b48:	e012      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xeb4>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3324      	adds	r3, #36	; 0x24
 8003b4e:	2102      	movs	r1, #2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fbe1 	bl	8004318 <RCCEx_PLL3_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b5a:	e009      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b60:	e006      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 8003b62:	bf00      	nop
 8003b64:	e004      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 8003b66:	bf00      	nop
 8003b68:	e002      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 8003b6a:	bf00      	nop
 8003b6c:	e000      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 8003b6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b70:	7dfb      	ldrb	r3, [r7, #23]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10a      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xed0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b76:	4b89      	ldr	r3, [pc, #548]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b84:	4985      	ldr	r1, [pc, #532]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	658b      	str	r3, [r1, #88]	; 0x58
 8003b8a:	e001      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d04b      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xf78>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ba2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ba6:	d02e      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8003ba8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003bac:	d828      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xf44>
 8003bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb2:	d02a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xf4e>
 8003bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb8:	d822      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xf44>
 8003bba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003bbe:	d026      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xf52>
 8003bc0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003bc4:	d81c      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xf44>
 8003bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bca:	d010      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xf32>
 8003bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bd0:	d816      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xf44>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d01d      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xf56>
 8003bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bda:	d111      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xf44>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fa76 	bl	80040d4 <RCCEx_PLL2_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003bec:	e012      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf58>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3324      	adds	r3, #36	; 0x24
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fb8f 	bl	8004318 <RCCEx_PLL3_Config>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003bfe:	e009      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	75fb      	strb	r3, [r7, #23]
      break;
 8003c04:	e006      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 8003c06:	bf00      	nop
 8003c08:	e004      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 8003c0a:	bf00      	nop
 8003c0c:	e002      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 8003c0e:	bf00      	nop
 8003c10:	e000      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 8003c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xf74>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c1a:	4b60      	ldr	r3, [pc, #384]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c28:	495c      	ldr	r1, [pc, #368]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c2e:	e001      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xf78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
 8003c32:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d036      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xff2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4a:	d015      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c56:	d00f      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c6c:	d004      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 8003c6e:	f240 510f 	movw	r1, #1295	; 0x50f
 8003c72:	484b      	ldr	r0, [pc, #300]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
 8003c74:	f7fc fca5 	bl	80005c2 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c82:	d10a      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xfde>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3324      	adds	r3, #36	; 0x24
 8003c88:	2102      	movs	r1, #2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fb44 	bl	8004318 <RCCEx_PLL3_Config>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xfde>
        {
          status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c9a:	4b40      	ldr	r3, [pc, #256]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca8:	493c      	ldr	r1, [pc, #240]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d036      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x106c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc4:	d015      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd0:	d00f      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ce6:	d004      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 8003ce8:	f240 5122 	movw	r1, #1314	; 0x522
 8003cec:	482c      	ldr	r0, [pc, #176]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
 8003cee:	f7fc fc68 	bl	80005c2 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfc:	d10a      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1058>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3324      	adds	r3, #36	; 0x24
 8003d02:	2102      	movs	r1, #2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fb07 	bl	8004318 <RCCEx_PLL3_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1058>
      {
        status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d14:	4b21      	ldr	r3, [pc, #132]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d22:	491e      	ldr	r1, [pc, #120]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d039      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x10ec>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d3e:	d01d      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d44:	d817      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x1096>
 8003d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4e:	d009      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 8003d50:	e011      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3304      	adds	r3, #4
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f9bb 	bl	80040d4 <RCCEx_PLL2_Config>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d62:	e00c      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x10c2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3324      	adds	r3, #36	; 0x24
 8003d68:	2102      	movs	r1, #2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fad4 	bl	8004318 <RCCEx_PLL3_Config>
 8003d70:	4603      	mov	r3, r0
 8003d72:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d74:	e003      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	75fb      	strb	r3, [r7, #23]
      break;
 8003d7a:	e000      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      break;
 8003d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10f      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x10e8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d92:	4902      	ldr	r1, [pc, #8]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	658b      	str	r3, [r1, #88]	; 0x58
 8003d98:	e006      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x10ec>
 8003d9a:	bf00      	nop
 8003d9c:	58024400 	.word	0x58024400
 8003da0:	08004c84 	.word	0x08004c84
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d033      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1160>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dbe:	d01c      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x113e>
 8003dc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dc4:	d816      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1138>
 8003dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dca:	d003      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1118>
 8003dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd0:	d007      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1126>
 8003dd2:	e00f      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1138>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd4:	4b53      	ldr	r3, [pc, #332]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	4a52      	ldr	r2, [pc, #328]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8003dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003de0:	e00c      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1140>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3324      	adds	r3, #36	; 0x24
 8003de6:	2101      	movs	r1, #1
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fa95 	bl	8004318 <RCCEx_PLL3_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003df2:	e003      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1140>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	75fb      	strb	r3, [r7, #23]
      break;
 8003df8:	e000      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1140>
      break;
 8003dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10a      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x115c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e02:	4b48      	ldr	r3, [pc, #288]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e10:	4944      	ldr	r1, [pc, #272]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	654b      	str	r3, [r1, #84]	; 0x54
 8003e16:	e001      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1160>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d037      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d009      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e38:	d004      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8003e3a:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 8003e3e:	483a      	ldr	r0, [pc, #232]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x126c>)
 8003e40:	f7fc fbbf 	bl	80005c2 <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1198>
 8003e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e50:	d007      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x11a6>
 8003e52:	e00f      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x11b8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e54:	4b33      	ldr	r3, [pc, #204]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	4a32      	ldr	r2, [pc, #200]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8003e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e60:	e00b      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x11be>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3304      	adds	r3, #4
 8003e66:	2102      	movs	r1, #2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f933 	bl	80040d4 <RCCEx_PLL2_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e72:	e002      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x11be>

    default:
      ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	75fb      	strb	r3, [r7, #23]
      break;
 8003e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x11d8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e80:	4b28      	ldr	r3, [pc, #160]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8003e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8c:	4925      	ldr	r1, [pc, #148]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e92:	e001      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
 8003e96:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x11fe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3324      	adds	r3, #36	; 0x24
 8003ea8:	2102      	movs	r1, #2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fa34 	bl	8004318 <RCCEx_PLL3_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x11fe>
    {
      status=HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d034      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1274>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ece:	d017      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1244>
 8003ed0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ed4:	d811      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x123e>
 8003ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eda:	d013      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1248>
 8003edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee0:	d80b      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x123e>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d010      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eea:	d106      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x123e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eec:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	4a0c      	ldr	r2, [pc, #48]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8003ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003ef8:	e007      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x124e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	75fb      	strb	r3, [r7, #23]
      break;
 8003efe:	e004      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x124e>
      break;
 8003f00:	bf00      	nop
 8003f02:	e002      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x124e>
      break;
 8003f04:	bf00      	nop
 8003f06:	e000      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x124e>
      break;
 8003f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10d      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1270>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8003f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f1c:	4901      	ldr	r1, [pc, #4]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	654b      	str	r3, [r1, #84]	; 0x54
 8003f22:	e005      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1274>
 8003f24:	58024400 	.word	0x58024400
 8003f28:	08004c84 	.word	0x08004c84
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d016      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x12ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x129c>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f4c:	d004      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x129c>
 8003f4e:	f240 51e7 	movw	r1, #1511	; 0x5e7
 8003f52:	485e      	ldr	r0, [pc, #376]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f54:	f7fc fb35 	bl	80005c2 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f58:	4b5d      	ldr	r3, [pc, #372]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8003f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	495a      	ldr	r1, [pc, #360]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d019      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x12ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x12da>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f8a:	d004      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x12da>
 8003f8c:	f240 51f1 	movw	r1, #1521	; 0x5f1
 8003f90:	484e      	ldr	r0, [pc, #312]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f92:	f7fc fb16 	bl	80005c2 <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f96:	4b4e      	ldr	r3, [pc, #312]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fa4:	494a      	ldr	r1, [pc, #296]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d016      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fc6:	d004      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8003fc8:	f240 51fb 	movw	r1, #1531	; 0x5fb
 8003fcc:	483f      	ldr	r0, [pc, #252]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fce:	f7fc faf8 	bl	80005c2 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fd2:	4b3f      	ldr	r3, [pc, #252]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8003fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fde:	493c      	ldr	r1, [pc, #240]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d01d      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x1370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x1354>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004004:	d004      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x1354>
 8004006:	f240 6111 	movw	r1, #1553	; 0x611
 800400a:	4830      	ldr	r0, [pc, #192]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800400c:	f7fc fad9 	bl	80005c2 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004010:	4b2f      	ldr	r3, [pc, #188]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	4a2e      	ldr	r2, [pc, #184]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004016:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800401a:	6113      	str	r3, [r2, #16]
 800401c:	4b2c      	ldr	r3, [pc, #176]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004026:	492a      	ldr	r1, [pc, #168]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004028:	4313      	orrs	r3, r2
 800402a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	da1b      	bge.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x13b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00e      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x139e>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004040:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004044:	d009      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x139e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800404e:	d004      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x139e>
 8004050:	f240 611b 	movw	r1, #1563	; 0x61b
 8004054:	481d      	ldr	r0, [pc, #116]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004056:	f7fc fab4 	bl	80005c2 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800405a:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800405c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004066:	491a      	ldr	r1, [pc, #104]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004068:	4313      	orrs	r3, r2
 800406a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01f      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x13fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407e:	2b00      	cmp	r3, #0
 8004080:	d010      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004094:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004098:	d004      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800409a:	f240 6125 	movw	r1, #1573	; 0x625
 800409e:	480b      	ldr	r0, [pc, #44]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040a0:	f7fc fa8f 	bl	80005c2 <assert_failed>

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80040a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	4907      	ldr	r1, [pc, #28]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80040b8:	7dbb      	ldrb	r3, [r7, #22]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1406>
  {
    return HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	e000      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1408>
  }
  return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	08004c84 	.word	0x08004c84
 80040d0:	58024400 	.word	0x58024400

080040d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <RCCEx_PLL2_Config+0x1e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b3f      	cmp	r3, #63	; 0x3f
 80040f0:	d904      	bls.n	80040fc <RCCEx_PLL2_Config+0x28>
 80040f2:	f640 51c2 	movw	r1, #3522	; 0xdc2
 80040f6:	4885      	ldr	r0, [pc, #532]	; (800430c <RCCEx_PLL2_Config+0x238>)
 80040f8:	f7fc fa63 	bl	80005c2 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b03      	cmp	r3, #3
 8004102:	d904      	bls.n	800410e <RCCEx_PLL2_Config+0x3a>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800410c:	d904      	bls.n	8004118 <RCCEx_PLL2_Config+0x44>
 800410e:	f640 51c3 	movw	r1, #3523	; 0xdc3
 8004112:	487e      	ldr	r0, [pc, #504]	; (800430c <RCCEx_PLL2_Config+0x238>)
 8004114:	f7fc fa55 	bl	80005c2 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <RCCEx_PLL2_Config+0x54>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b80      	cmp	r3, #128	; 0x80
 8004126:	d904      	bls.n	8004132 <RCCEx_PLL2_Config+0x5e>
 8004128:	f640 51c4 	movw	r1, #3524	; 0xdc4
 800412c:	4877      	ldr	r0, [pc, #476]	; (800430c <RCCEx_PLL2_Config+0x238>)
 800412e:	f7fc fa48 	bl	80005c2 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <RCCEx_PLL2_Config+0x6e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b80      	cmp	r3, #128	; 0x80
 8004140:	d904      	bls.n	800414c <RCCEx_PLL2_Config+0x78>
 8004142:	f640 51c5 	movw	r1, #3525	; 0xdc5
 8004146:	4871      	ldr	r0, [pc, #452]	; (800430c <RCCEx_PLL2_Config+0x238>)
 8004148:	f7fc fa3b 	bl	80005c2 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <RCCEx_PLL2_Config+0x88>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	2b80      	cmp	r3, #128	; 0x80
 800415a:	d904      	bls.n	8004166 <RCCEx_PLL2_Config+0x92>
 800415c:	f640 51c6 	movw	r1, #3526	; 0xdc6
 8004160:	486a      	ldr	r0, [pc, #424]	; (800430c <RCCEx_PLL2_Config+0x238>)
 8004162:	f7fc fa2e 	bl	80005c2 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d010      	beq.n	8004190 <RCCEx_PLL2_Config+0xbc>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	2b40      	cmp	r3, #64	; 0x40
 8004174:	d00c      	beq.n	8004190 <RCCEx_PLL2_Config+0xbc>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	2b80      	cmp	r3, #128	; 0x80
 800417c:	d008      	beq.n	8004190 <RCCEx_PLL2_Config+0xbc>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	2bc0      	cmp	r3, #192	; 0xc0
 8004184:	d004      	beq.n	8004190 <RCCEx_PLL2_Config+0xbc>
 8004186:	f640 51c7 	movw	r1, #3527	; 0xdc7
 800418a:	4860      	ldr	r0, [pc, #384]	; (800430c <RCCEx_PLL2_Config+0x238>)
 800418c:	f7fc fa19 	bl	80005c2 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <RCCEx_PLL2_Config+0xd6>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	2b20      	cmp	r3, #32
 800419e:	d004      	beq.n	80041aa <RCCEx_PLL2_Config+0xd6>
 80041a0:	f640 51c8 	movw	r1, #3528	; 0xdc8
 80041a4:	4859      	ldr	r0, [pc, #356]	; (800430c <RCCEx_PLL2_Config+0x238>)
 80041a6:	f7fc fa0c 	bl	80005c2 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b2:	d304      	bcc.n	80041be <RCCEx_PLL2_Config+0xea>
 80041b4:	f640 51c9 	movw	r1, #3529	; 0xdc9
 80041b8:	4854      	ldr	r0, [pc, #336]	; (800430c <RCCEx_PLL2_Config+0x238>)
 80041ba:	f7fc fa02 	bl	80005c2 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041be:	4b54      	ldr	r3, [pc, #336]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d101      	bne.n	80041ce <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e099      	b.n	8004302 <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041ce:	4b50      	ldr	r3, [pc, #320]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a4f      	ldr	r2, [pc, #316]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 80041d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041da:	f7fc fc4f 	bl	8000a7c <HAL_GetTick>
 80041de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041e0:	e008      	b.n	80041f4 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80041e2:	f7fc fc4b 	bl	8000a7c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e086      	b.n	8004302 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041f4:	4b46      	ldr	r3, [pc, #280]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f0      	bne.n	80041e2 <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004200:	4b43      	ldr	r3, [pc, #268]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	031b      	lsls	r3, r3, #12
 800420e:	4940      	ldr	r1, [pc, #256]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 8004210:	4313      	orrs	r3, r2
 8004212:	628b      	str	r3, [r1, #40]	; 0x28
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	3b01      	subs	r3, #1
 800421a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	3b01      	subs	r3, #1
 8004224:	025b      	lsls	r3, r3, #9
 8004226:	b29b      	uxth	r3, r3
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	3b01      	subs	r3, #1
 8004230:	041b      	lsls	r3, r3, #16
 8004232:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	3b01      	subs	r3, #1
 800423e:	061b      	lsls	r3, r3, #24
 8004240:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004244:	4932      	ldr	r1, [pc, #200]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 8004246:	4313      	orrs	r3, r2
 8004248:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800424a:	4b31      	ldr	r3, [pc, #196]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	492e      	ldr	r1, [pc, #184]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 8004258:	4313      	orrs	r3, r2
 800425a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800425c:	4b2c      	ldr	r3, [pc, #176]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	f023 0220 	bic.w	r2, r3, #32
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	4929      	ldr	r1, [pc, #164]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 800426a:	4313      	orrs	r3, r2
 800426c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800426e:	4b28      	ldr	r3, [pc, #160]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	4a27      	ldr	r2, [pc, #156]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 8004274:	f023 0310 	bic.w	r3, r3, #16
 8004278:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800427a:	4b25      	ldr	r3, [pc, #148]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 800427c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800427e:	4b25      	ldr	r3, [pc, #148]	; (8004314 <RCCEx_PLL2_Config+0x240>)
 8004280:	4013      	ands	r3, r2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	69d2      	ldr	r2, [r2, #28]
 8004286:	00d2      	lsls	r2, r2, #3
 8004288:	4921      	ldr	r1, [pc, #132]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 800428a:	4313      	orrs	r3, r2
 800428c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800428e:	4b20      	ldr	r3, [pc, #128]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	4a1f      	ldr	r2, [pc, #124]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 8004294:	f043 0310 	orr.w	r3, r3, #16
 8004298:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80042a0:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	4a1a      	ldr	r2, [pc, #104]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 80042a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042ac:	e00f      	b.n	80042ce <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d106      	bne.n	80042c2 <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80042b4:	4b16      	ldr	r3, [pc, #88]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	4a15      	ldr	r2, [pc, #84]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 80042ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042c0:	e005      	b.n	80042ce <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042c2:	4b13      	ldr	r3, [pc, #76]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	4a12      	ldr	r2, [pc, #72]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 80042c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042ce:	4b10      	ldr	r3, [pc, #64]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 80042d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042da:	f7fc fbcf 	bl	8000a7c <HAL_GetTick>
 80042de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042e0:	e008      	b.n	80042f4 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042e2:	f7fc fbcb 	bl	8000a7c <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e006      	b.n	8004302 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <RCCEx_PLL2_Config+0x23c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 8004300:	7bfb      	ldrb	r3, [r7, #15]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	08004c84 	.word	0x08004c84
 8004310:	58024400 	.word	0x58024400
 8004314:	ffff0007 	.word	0xffff0007

08004318 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <RCCEx_PLL3_Config+0x1e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b3f      	cmp	r3, #63	; 0x3f
 8004334:	d904      	bls.n	8004340 <RCCEx_PLL3_Config+0x28>
 8004336:	f640 612a 	movw	r1, #3626	; 0xe2a
 800433a:	4887      	ldr	r0, [pc, #540]	; (8004558 <RCCEx_PLL3_Config+0x240>)
 800433c:	f7fc f941 	bl	80005c2 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b03      	cmp	r3, #3
 8004346:	d904      	bls.n	8004352 <RCCEx_PLL3_Config+0x3a>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004350:	d904      	bls.n	800435c <RCCEx_PLL3_Config+0x44>
 8004352:	f640 612b 	movw	r1, #3627	; 0xe2b
 8004356:	4880      	ldr	r0, [pc, #512]	; (8004558 <RCCEx_PLL3_Config+0x240>)
 8004358:	f7fc f933 	bl	80005c2 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <RCCEx_PLL3_Config+0x54>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	d904      	bls.n	8004376 <RCCEx_PLL3_Config+0x5e>
 800436c:	f640 612c 	movw	r1, #3628	; 0xe2c
 8004370:	4879      	ldr	r0, [pc, #484]	; (8004558 <RCCEx_PLL3_Config+0x240>)
 8004372:	f7fc f926 	bl	80005c2 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <RCCEx_PLL3_Config+0x6e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b80      	cmp	r3, #128	; 0x80
 8004384:	d904      	bls.n	8004390 <RCCEx_PLL3_Config+0x78>
 8004386:	f640 612d 	movw	r1, #3629	; 0xe2d
 800438a:	4873      	ldr	r0, [pc, #460]	; (8004558 <RCCEx_PLL3_Config+0x240>)
 800438c:	f7fc f919 	bl	80005c2 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <RCCEx_PLL3_Config+0x88>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b80      	cmp	r3, #128	; 0x80
 800439e:	d904      	bls.n	80043aa <RCCEx_PLL3_Config+0x92>
 80043a0:	f640 612e 	movw	r1, #3630	; 0xe2e
 80043a4:	486c      	ldr	r0, [pc, #432]	; (8004558 <RCCEx_PLL3_Config+0x240>)
 80043a6:	f7fc f90c 	bl	80005c2 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d013      	beq.n	80043da <RCCEx_PLL3_Config+0xc2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ba:	d00e      	beq.n	80043da <RCCEx_PLL3_Config+0xc2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c4:	d009      	beq.n	80043da <RCCEx_PLL3_Config+0xc2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043ce:	d004      	beq.n	80043da <RCCEx_PLL3_Config+0xc2>
 80043d0:	f640 612f 	movw	r1, #3631	; 0xe2f
 80043d4:	4860      	ldr	r0, [pc, #384]	; (8004558 <RCCEx_PLL3_Config+0x240>)
 80043d6:	f7fc f8f4 	bl	80005c2 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <RCCEx_PLL3_Config+0xde>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ea:	d004      	beq.n	80043f6 <RCCEx_PLL3_Config+0xde>
 80043ec:	f44f 6163 	mov.w	r1, #3632	; 0xe30
 80043f0:	4859      	ldr	r0, [pc, #356]	; (8004558 <RCCEx_PLL3_Config+0x240>)
 80043f2:	f7fc f8e6 	bl	80005c2 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043fe:	d304      	bcc.n	800440a <RCCEx_PLL3_Config+0xf2>
 8004400:	f640 6131 	movw	r1, #3633	; 0xe31
 8004404:	4854      	ldr	r0, [pc, #336]	; (8004558 <RCCEx_PLL3_Config+0x240>)
 8004406:	f7fc f8dc 	bl	80005c2 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800440a:	4b54      	ldr	r3, [pc, #336]	; (800455c <RCCEx_PLL3_Config+0x244>)
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	2b03      	cmp	r3, #3
 8004414:	d101      	bne.n	800441a <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e099      	b.n	800454e <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800441a:	4b50      	ldr	r3, [pc, #320]	; (800455c <RCCEx_PLL3_Config+0x244>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a4f      	ldr	r2, [pc, #316]	; (800455c <RCCEx_PLL3_Config+0x244>)
 8004420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004426:	f7fc fb29 	bl	8000a7c <HAL_GetTick>
 800442a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800442c:	e008      	b.n	8004440 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800442e:	f7fc fb25 	bl	8000a7c <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e086      	b.n	800454e <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004440:	4b46      	ldr	r3, [pc, #280]	; (800455c <RCCEx_PLL3_Config+0x244>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800444c:	4b43      	ldr	r3, [pc, #268]	; (800455c <RCCEx_PLL3_Config+0x244>)
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	051b      	lsls	r3, r3, #20
 800445a:	4940      	ldr	r1, [pc, #256]	; (800455c <RCCEx_PLL3_Config+0x244>)
 800445c:	4313      	orrs	r3, r2
 800445e:	628b      	str	r3, [r1, #40]	; 0x28
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	3b01      	subs	r3, #1
 8004466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	3b01      	subs	r3, #1
 8004470:	025b      	lsls	r3, r3, #9
 8004472:	b29b      	uxth	r3, r3
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	3b01      	subs	r3, #1
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	3b01      	subs	r3, #1
 800448a:	061b      	lsls	r3, r3, #24
 800448c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004490:	4932      	ldr	r1, [pc, #200]	; (800455c <RCCEx_PLL3_Config+0x244>)
 8004492:	4313      	orrs	r3, r2
 8004494:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004496:	4b31      	ldr	r3, [pc, #196]	; (800455c <RCCEx_PLL3_Config+0x244>)
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	492e      	ldr	r1, [pc, #184]	; (800455c <RCCEx_PLL3_Config+0x244>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80044a8:	4b2c      	ldr	r3, [pc, #176]	; (800455c <RCCEx_PLL3_Config+0x244>)
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	4929      	ldr	r1, [pc, #164]	; (800455c <RCCEx_PLL3_Config+0x244>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80044ba:	4b28      	ldr	r3, [pc, #160]	; (800455c <RCCEx_PLL3_Config+0x244>)
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	4a27      	ldr	r2, [pc, #156]	; (800455c <RCCEx_PLL3_Config+0x244>)
 80044c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80044c6:	4b25      	ldr	r3, [pc, #148]	; (800455c <RCCEx_PLL3_Config+0x244>)
 80044c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ca:	4b25      	ldr	r3, [pc, #148]	; (8004560 <RCCEx_PLL3_Config+0x248>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	69d2      	ldr	r2, [r2, #28]
 80044d2:	00d2      	lsls	r2, r2, #3
 80044d4:	4921      	ldr	r1, [pc, #132]	; (800455c <RCCEx_PLL3_Config+0x244>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80044da:	4b20      	ldr	r3, [pc, #128]	; (800455c <RCCEx_PLL3_Config+0x244>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	4a1f      	ldr	r2, [pc, #124]	; (800455c <RCCEx_PLL3_Config+0x244>)
 80044e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d106      	bne.n	80044fa <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80044ec:	4b1b      	ldr	r3, [pc, #108]	; (800455c <RCCEx_PLL3_Config+0x244>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	4a1a      	ldr	r2, [pc, #104]	; (800455c <RCCEx_PLL3_Config+0x244>)
 80044f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044f8:	e00f      	b.n	800451a <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d106      	bne.n	800450e <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004500:	4b16      	ldr	r3, [pc, #88]	; (800455c <RCCEx_PLL3_Config+0x244>)
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	4a15      	ldr	r2, [pc, #84]	; (800455c <RCCEx_PLL3_Config+0x244>)
 8004506:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800450a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800450c:	e005      	b.n	800451a <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800450e:	4b13      	ldr	r3, [pc, #76]	; (800455c <RCCEx_PLL3_Config+0x244>)
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	4a12      	ldr	r2, [pc, #72]	; (800455c <RCCEx_PLL3_Config+0x244>)
 8004514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004518:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800451a:	4b10      	ldr	r3, [pc, #64]	; (800455c <RCCEx_PLL3_Config+0x244>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a0f      	ldr	r2, [pc, #60]	; (800455c <RCCEx_PLL3_Config+0x244>)
 8004520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004526:	f7fc faa9 	bl	8000a7c <HAL_GetTick>
 800452a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800452c:	e008      	b.n	8004540 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800452e:	f7fc faa5 	bl	8000a7c <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e006      	b.n	800454e <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <RCCEx_PLL3_Config+0x244>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 800454c:	7bfb      	ldrb	r3, [r7, #15]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	08004c84 	.word	0x08004c84
 800455c:	58024400 	.word	0x58024400
 8004560:	ffff0007 	.word	0xffff0007

08004564 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e292      	b.n	8004aa0 <HAL_SPI_Init+0x53c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a97      	ldr	r2, [pc, #604]	; (80047dc <HAL_SPI_Init+0x278>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d01c      	beq.n	80045be <HAL_SPI_Init+0x5a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a95      	ldr	r2, [pc, #596]	; (80047e0 <HAL_SPI_Init+0x27c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d017      	beq.n	80045be <HAL_SPI_Init+0x5a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a94      	ldr	r2, [pc, #592]	; (80047e4 <HAL_SPI_Init+0x280>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d012      	beq.n	80045be <HAL_SPI_Init+0x5a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a92      	ldr	r2, [pc, #584]	; (80047e8 <HAL_SPI_Init+0x284>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00d      	beq.n	80045be <HAL_SPI_Init+0x5a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a91      	ldr	r2, [pc, #580]	; (80047ec <HAL_SPI_Init+0x288>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d008      	beq.n	80045be <HAL_SPI_Init+0x5a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a8f      	ldr	r2, [pc, #572]	; (80047f0 <HAL_SPI_Init+0x28c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d003      	beq.n	80045be <HAL_SPI_Init+0x5a>
 80045b6:	21fb      	movs	r1, #251	; 0xfb
 80045b8:	488e      	ldr	r0, [pc, #568]	; (80047f4 <HAL_SPI_Init+0x290>)
 80045ba:	f7fc f802 	bl	80005c2 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <HAL_SPI_Init+0x74>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ce:	d003      	beq.n	80045d8 <HAL_SPI_Init+0x74>
 80045d0:	21fc      	movs	r1, #252	; 0xfc
 80045d2:	4888      	ldr	r0, [pc, #544]	; (80047f4 <HAL_SPI_Init+0x290>)
 80045d4:	f7fb fff5 	bl	80005c2 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d012      	beq.n	8004606 <HAL_SPI_Init+0xa2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045e8:	d00d      	beq.n	8004606 <HAL_SPI_Init+0xa2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80045f2:	d008      	beq.n	8004606 <HAL_SPI_Init+0xa2>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045fc:	d003      	beq.n	8004606 <HAL_SPI_Init+0xa2>
 80045fe:	21fd      	movs	r1, #253	; 0xfd
 8004600:	487c      	ldr	r0, [pc, #496]	; (80047f4 <HAL_SPI_Init+0x290>)
 8004602:	f7fb ffde 	bl	80005c2 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b1f      	cmp	r3, #31
 800460c:	d077      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b1e      	cmp	r3, #30
 8004614:	d073      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2b1d      	cmp	r3, #29
 800461c:	d06f      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b1c      	cmp	r3, #28
 8004624:	d06b      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	2b1b      	cmp	r3, #27
 800462c:	d067      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2b1a      	cmp	r3, #26
 8004634:	d063      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b19      	cmp	r3, #25
 800463c:	d05f      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	2b18      	cmp	r3, #24
 8004644:	d05b      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	2b17      	cmp	r3, #23
 800464c:	d057      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	2b16      	cmp	r3, #22
 8004654:	d053      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	2b15      	cmp	r3, #21
 800465c:	d04f      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	2b14      	cmp	r3, #20
 8004664:	d04b      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	2b13      	cmp	r3, #19
 800466c:	d047      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b15      	cmp	r3, #21
 8004674:	d043      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b12      	cmp	r3, #18
 800467c:	d03f      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	2b11      	cmp	r3, #17
 8004684:	d03b      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	2b10      	cmp	r3, #16
 800468c:	d037      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	2b0f      	cmp	r3, #15
 8004694:	d033      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	2b0e      	cmp	r3, #14
 800469c:	d02f      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2b0d      	cmp	r3, #13
 80046a4:	d02b      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b0c      	cmp	r3, #12
 80046ac:	d027      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2b0b      	cmp	r3, #11
 80046b4:	d023      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	2b0a      	cmp	r3, #10
 80046bc:	d01f      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2b09      	cmp	r3, #9
 80046c4:	d01b      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d017      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b07      	cmp	r3, #7
 80046d4:	d013      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	2b06      	cmp	r3, #6
 80046dc:	d00f      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2b05      	cmp	r3, #5
 80046e4:	d00b      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d007      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d003      	beq.n	80046fe <HAL_SPI_Init+0x19a>
 80046f6:	21fe      	movs	r1, #254	; 0xfe
 80046f8:	483e      	ldr	r0, [pc, #248]	; (80047f4 <HAL_SPI_Init+0x290>)
 80046fa:	f7fb ff62 	bl	80005c2 <assert_failed>
  assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d047      	beq.n	8004796 <HAL_SPI_Init+0x232>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470a:	2b20      	cmp	r3, #32
 800470c:	d043      	beq.n	8004796 <HAL_SPI_Init+0x232>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	2b40      	cmp	r3, #64	; 0x40
 8004714:	d03f      	beq.n	8004796 <HAL_SPI_Init+0x232>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471a:	2b60      	cmp	r3, #96	; 0x60
 800471c:	d03b      	beq.n	8004796 <HAL_SPI_Init+0x232>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004722:	2b80      	cmp	r3, #128	; 0x80
 8004724:	d037      	beq.n	8004796 <HAL_SPI_Init+0x232>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472a:	2ba0      	cmp	r3, #160	; 0xa0
 800472c:	d033      	beq.n	8004796 <HAL_SPI_Init+0x232>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	2bc0      	cmp	r3, #192	; 0xc0
 8004734:	d02f      	beq.n	8004796 <HAL_SPI_Init+0x232>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473a:	2be0      	cmp	r3, #224	; 0xe0
 800473c:	d02b      	beq.n	8004796 <HAL_SPI_Init+0x232>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004746:	d026      	beq.n	8004796 <HAL_SPI_Init+0x232>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474c:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8004750:	d021      	beq.n	8004796 <HAL_SPI_Init+0x232>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800475a:	d01c      	beq.n	8004796 <HAL_SPI_Init+0x232>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8004764:	d017      	beq.n	8004796 <HAL_SPI_Init+0x232>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800476e:	d012      	beq.n	8004796 <HAL_SPI_Init+0x232>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004774:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8004778:	d00d      	beq.n	8004796 <HAL_SPI_Init+0x232>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004782:	d008      	beq.n	8004796 <HAL_SPI_Init+0x232>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004788:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800478c:	d003      	beq.n	8004796 <HAL_SPI_Init+0x232>
 800478e:	21ff      	movs	r1, #255	; 0xff
 8004790:	4818      	ldr	r0, [pc, #96]	; (80047f4 <HAL_SPI_Init+0x290>)
 8004792:	f7fb ff16 	bl	80005c2 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800479e:	d00d      	beq.n	80047bc <HAL_SPI_Init+0x258>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <HAL_SPI_Init+0x258>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047b0:	d004      	beq.n	80047bc <HAL_SPI_Init+0x258>
 80047b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047b6:	480f      	ldr	r0, [pc, #60]	; (80047f4 <HAL_SPI_Init+0x290>)
 80047b8:	f7fb ff03 	bl	80005c2 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c4:	d018      	beq.n	80047f8 <HAL_SPI_Init+0x294>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d014      	beq.n	80047f8 <HAL_SPI_Init+0x294>
 80047ce:	f240 1101 	movw	r1, #257	; 0x101
 80047d2:	4808      	ldr	r0, [pc, #32]	; (80047f4 <HAL_SPI_Init+0x290>)
 80047d4:	f7fb fef5 	bl	80005c2 <assert_failed>
 80047d8:	e00e      	b.n	80047f8 <HAL_SPI_Init+0x294>
 80047da:	bf00      	nop
 80047dc:	40013000 	.word	0x40013000
 80047e0:	40003800 	.word	0x40003800
 80047e4:	40003c00 	.word	0x40003c00
 80047e8:	40013400 	.word	0x40013400
 80047ec:	40015000 	.word	0x40015000
 80047f0:	58001400 	.word	0x58001400
 80047f4:	08004cc0 	.word	0x08004cc0
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d027      	beq.n	8004850 <HAL_SPI_Init+0x2ec>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004808:	d022      	beq.n	8004850 <HAL_SPI_Init+0x2ec>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004812:	d01d      	beq.n	8004850 <HAL_SPI_Init+0x2ec>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800481c:	d018      	beq.n	8004850 <HAL_SPI_Init+0x2ec>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004826:	d013      	beq.n	8004850 <HAL_SPI_Init+0x2ec>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004830:	d00e      	beq.n	8004850 <HAL_SPI_Init+0x2ec>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800483a:	d009      	beq.n	8004850 <HAL_SPI_Init+0x2ec>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f1b3 4fe0 	cmp.w	r3, #1879048192	; 0x70000000
 8004844:	d004      	beq.n	8004850 <HAL_SPI_Init+0x2ec>
 8004846:	f44f 7181 	mov.w	r1, #258	; 0x102
 800484a:	4897      	ldr	r0, [pc, #604]	; (8004aa8 <HAL_SPI_Init+0x544>)
 800484c:	f7fb feb9 	bl	80005c2 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d009      	beq.n	800486c <HAL_SPI_Init+0x308>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004860:	d004      	beq.n	800486c <HAL_SPI_Init+0x308>
 8004862:	f240 1103 	movw	r1, #259	; 0x103
 8004866:	4890      	ldr	r0, [pc, #576]	; (8004aa8 <HAL_SPI_Init+0x544>)
 8004868:	f7fb feab 	bl	80005c2 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	2b00      	cmp	r3, #0
 8004872:	d009      	beq.n	8004888 <HAL_SPI_Init+0x324>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800487c:	d004      	beq.n	8004888 <HAL_SPI_Init+0x324>
 800487e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004882:	4889      	ldr	r0, [pc, #548]	; (8004aa8 <HAL_SPI_Init+0x544>)
 8004884:	f7fb fe9d 	bl	80005c2 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	2b00      	cmp	r3, #0
 800488e:	d11b      	bne.n	80048c8 <HAL_SPI_Init+0x364>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <HAL_SPI_Init+0x348>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048a0:	d004      	beq.n	80048ac <HAL_SPI_Init+0x348>
 80048a2:	f240 1107 	movw	r1, #263	; 0x107
 80048a6:	4880      	ldr	r0, [pc, #512]	; (8004aa8 <HAL_SPI_Init+0x544>)
 80048a8:	f7fb fe8b 	bl	80005c2 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d009      	beq.n	80048c8 <HAL_SPI_Init+0x364>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048bc:	d004      	beq.n	80048c8 <HAL_SPI_Init+0x364>
 80048be:	f44f 7184 	mov.w	r1, #264	; 0x108
 80048c2:	4879      	ldr	r0, [pc, #484]	; (8004aa8 <HAL_SPI_Init+0x544>)
 80048c4:	f7fb fe7d 	bl	80005c2 <assert_failed>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a76      	ldr	r2, [pc, #472]	; (8004aac <HAL_SPI_Init+0x548>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00f      	beq.n	80048f8 <HAL_SPI_Init+0x394>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a74      	ldr	r2, [pc, #464]	; (8004ab0 <HAL_SPI_Init+0x54c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00a      	beq.n	80048f8 <HAL_SPI_Init+0x394>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a73      	ldr	r2, [pc, #460]	; (8004ab4 <HAL_SPI_Init+0x550>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d005      	beq.n	80048f8 <HAL_SPI_Init+0x394>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b0f      	cmp	r3, #15
 80048f2:	d901      	bls.n	80048f8 <HAL_SPI_Init+0x394>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0d3      	b.n	8004aa0 <HAL_SPI_Init+0x53c>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f8dd 	bl	8004ab8 <SPI_GetPacketSize>
 80048fe:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a69      	ldr	r2, [pc, #420]	; (8004aac <HAL_SPI_Init+0x548>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00c      	beq.n	8004924 <HAL_SPI_Init+0x3c0>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a68      	ldr	r2, [pc, #416]	; (8004ab0 <HAL_SPI_Init+0x54c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d007      	beq.n	8004924 <HAL_SPI_Init+0x3c0>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a66      	ldr	r2, [pc, #408]	; (8004ab4 <HAL_SPI_Init+0x550>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d002      	beq.n	8004924 <HAL_SPI_Init+0x3c0>
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b08      	cmp	r3, #8
 8004922:	d811      	bhi.n	8004948 <HAL_SPI_Init+0x3e4>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004928:	4a60      	ldr	r2, [pc, #384]	; (8004aac <HAL_SPI_Init+0x548>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d009      	beq.n	8004942 <HAL_SPI_Init+0x3de>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a5f      	ldr	r2, [pc, #380]	; (8004ab0 <HAL_SPI_Init+0x54c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d004      	beq.n	8004942 <HAL_SPI_Init+0x3de>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a5d      	ldr	r2, [pc, #372]	; (8004ab4 <HAL_SPI_Init+0x550>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d104      	bne.n	800494c <HAL_SPI_Init+0x3e8>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b10      	cmp	r3, #16
 8004946:	d901      	bls.n	800494c <HAL_SPI_Init+0x3e8>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0a9      	b.n	8004aa0 <HAL_SPI_Init+0x53c>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d106      	bne.n	8004966 <HAL_SPI_Init+0x402>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7fb fe91 	bl	8000688 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2202      	movs	r2, #2
 800496a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0201 	bic.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004986:	d119      	bne.n	80049bc <HAL_SPI_Init+0x458>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004990:	d103      	bne.n	800499a <HAL_SPI_Init+0x436>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	2b00      	cmp	r3, #0
 8004998:	d008      	beq.n	80049ac <HAL_SPI_Init+0x448>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10c      	bne.n	80049bc <HAL_SPI_Init+0x458>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049aa:	d107      	bne.n	80049bc <HAL_SPI_Init+0x458>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049ba:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69da      	ldr	r2, [r3, #28]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	431a      	orrs	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	ea42 0103 	orr.w	r1, r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1c:	ea42 0103 	orr.w	r1, r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d113      	bne.n	8004a5c <HAL_SPI_Init+0x4f8>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a46:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a5a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0201 	bic.w	r2, r2, #1
 8004a6a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_SPI_Init+0x52a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	08004cc0 	.word	0x08004cc0
 8004aac:	40013000 	.word	0x40013000
 8004ab0:	40003800 	.word	0x40003800
 8004ab4:	40003c00 	.word	0x40003c00

08004ab8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac4:	095b      	lsrs	r3, r3, #5
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	3307      	adds	r3, #7
 8004ad6:	08db      	lsrs	r3, r3, #3
 8004ad8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	fb02 f303 	mul.w	r3, r2, r3
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
	...

08004af0 <__libc_init_array>:
 8004af0:	b570      	push	{r4, r5, r6, lr}
 8004af2:	4d0d      	ldr	r5, [pc, #52]	; (8004b28 <__libc_init_array+0x38>)
 8004af4:	4c0d      	ldr	r4, [pc, #52]	; (8004b2c <__libc_init_array+0x3c>)
 8004af6:	1b64      	subs	r4, r4, r5
 8004af8:	10a4      	asrs	r4, r4, #2
 8004afa:	2600      	movs	r6, #0
 8004afc:	42a6      	cmp	r6, r4
 8004afe:	d109      	bne.n	8004b14 <__libc_init_array+0x24>
 8004b00:	4d0b      	ldr	r5, [pc, #44]	; (8004b30 <__libc_init_array+0x40>)
 8004b02:	4c0c      	ldr	r4, [pc, #48]	; (8004b34 <__libc_init_array+0x44>)
 8004b04:	f000 f820 	bl	8004b48 <_init>
 8004b08:	1b64      	subs	r4, r4, r5
 8004b0a:	10a4      	asrs	r4, r4, #2
 8004b0c:	2600      	movs	r6, #0
 8004b0e:	42a6      	cmp	r6, r4
 8004b10:	d105      	bne.n	8004b1e <__libc_init_array+0x2e>
 8004b12:	bd70      	pop	{r4, r5, r6, pc}
 8004b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b18:	4798      	blx	r3
 8004b1a:	3601      	adds	r6, #1
 8004b1c:	e7ee      	b.n	8004afc <__libc_init_array+0xc>
 8004b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b22:	4798      	blx	r3
 8004b24:	3601      	adds	r6, #1
 8004b26:	e7f2      	b.n	8004b0e <__libc_init_array+0x1e>
 8004b28:	08004d08 	.word	0x08004d08
 8004b2c:	08004d08 	.word	0x08004d08
 8004b30:	08004d08 	.word	0x08004d08
 8004b34:	08004d0c 	.word	0x08004d0c

08004b38 <memset>:
 8004b38:	4402      	add	r2, r0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d100      	bne.n	8004b42 <memset+0xa>
 8004b40:	4770      	bx	lr
 8004b42:	f803 1b01 	strb.w	r1, [r3], #1
 8004b46:	e7f9      	b.n	8004b3c <memset+0x4>

08004b48 <_init>:
 8004b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4a:	bf00      	nop
 8004b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b4e:	bc08      	pop	{r3}
 8004b50:	469e      	mov	lr, r3
 8004b52:	4770      	bx	lr

08004b54 <_fini>:
 8004b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b56:	bf00      	nop
 8004b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5a:	bc08      	pop	{r3}
 8004b5c:	469e      	mov	lr, r3
 8004b5e:	4770      	bx	lr
