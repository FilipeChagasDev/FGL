
STM32H743VI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f34  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080064a8  080064a8  000164a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080064ac  080064ac  000164ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  080064b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000dc  20000078  08006528  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000154  08006528  00020154  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001fbab  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003943  00000000  00000000  0003fc51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000c60  00000000  00000000  00043598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000b08  00000000  00000000  000441f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a601  00000000  00000000  00044d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00011ba4  00000000  00000000  0007f301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00158845  00000000  00000000  00090ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001e96ea  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003434  00000000  00000000  001e9740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000078 	.word	0x20000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080061b4 	.word	0x080061b4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000007c 	.word	0x2000007c
 80002d4:	080061b4 	.word	0x080061b4

080002d8 <_Z7cppMainv>:
#include <stm32h7_st7735.hpp>
#include <main.h>
#include <spi.h>

void cppMain()
{
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	b087      	sub	sp, #28
 80002dc:	af04      	add	r7, sp, #16
											TFT_RST_Pin,
											TFT_A0_GPIO_Port,
											TFT_A0_Pin,
											TFT_CS_GPIO_Port,
											TFT_CS_Pin,
											&hspi1);
 80002de:	2038      	movs	r0, #56	; 0x38
 80002e0:	f005 fde2 	bl	8005ea8 <_Znwj>
 80002e4:	4603      	mov	r3, r0
 80002e6:	461c      	mov	r4, r3
 80002e8:	4b5c      	ldr	r3, [pc, #368]	; (800045c <_Z7cppMainv+0x184>)
 80002ea:	9303      	str	r3, [sp, #12]
 80002ec:	2310      	movs	r3, #16
 80002ee:	9302      	str	r3, [sp, #8]
 80002f0:	4b5b      	ldr	r3, [pc, #364]	; (8000460 <_Z7cppMainv+0x188>)
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	2340      	movs	r3, #64	; 0x40
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	4b5a      	ldr	r3, [pc, #360]	; (8000464 <_Z7cppMainv+0x18c>)
 80002fa:	2210      	movs	r2, #16
 80002fc:	4959      	ldr	r1, [pc, #356]	; (8000464 <_Z7cppMainv+0x18c>)
 80002fe:	4620      	mov	r0, r4
 8000300:	f000 faf8 	bl	80008f4 <_ZN14STM32H7_ST7735C1EP12GPIO_TypeDeftS1_tS1_tP19__SPI_HandleTypeDef>
 8000304:	607c      	str	r4, [r7, #4]

	tft->init();
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	3324      	adds	r3, #36	; 0x24
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4610      	mov	r0, r2
 8000312:	4798      	blx	r3
	tft->select();
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	332c      	adds	r3, #44	; 0x2c
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4610      	mov	r0, r2
 8000320:	4798      	blx	r3
	tft->drawArea(0,0, tft->getWidth()-1, tft->getHeight()-1, 0,0,0);
 8000322:	687d      	ldr	r5, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	3338      	adds	r3, #56	; 0x38
 800032a:	681c      	ldr	r4, [r3, #0]
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	3304      	adds	r3, #4
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4610      	mov	r0, r2
 8000338:	4798      	blx	r3
 800033a:	4603      	mov	r3, r0
 800033c:	3b01      	subs	r3, #1
 800033e:	461e      	mov	r6, r3
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	3308      	adds	r3, #8
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4610      	mov	r0, r2
 800034c:	4798      	blx	r3
 800034e:	4603      	mov	r3, r0
 8000350:	3b01      	subs	r3, #1
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8000468 <_Z7cppMainv+0x190>
 8000358:	eddf 0a43 	vldr	s1, [pc, #268]	; 8000468 <_Z7cppMainv+0x190>
 800035c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8000468 <_Z7cppMainv+0x190>
 8000360:	4633      	mov	r3, r6
 8000362:	2200      	movs	r2, #0
 8000364:	2100      	movs	r1, #0
 8000366:	4628      	mov	r0, r5
 8000368:	47a0      	blx	r4
	tft->drawArea(10, 10, tft->getWidth()-10, 20, 1, 0, 0);
 800036a:	687d      	ldr	r5, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	3338      	adds	r3, #56	; 0x38
 8000372:	681c      	ldr	r4, [r3, #0]
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	3304      	adds	r3, #4
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4610      	mov	r0, r2
 8000380:	4798      	blx	r3
 8000382:	4603      	mov	r3, r0
 8000384:	3b0a      	subs	r3, #10
 8000386:	461a      	mov	r2, r3
 8000388:	2314      	movs	r3, #20
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	ed9f 1a36 	vldr	s2, [pc, #216]	; 8000468 <_Z7cppMainv+0x190>
 8000390:	eddf 0a35 	vldr	s1, [pc, #212]	; 8000468 <_Z7cppMainv+0x190>
 8000394:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000398:	4613      	mov	r3, r2
 800039a:	220a      	movs	r2, #10
 800039c:	210a      	movs	r1, #10
 800039e:	4628      	mov	r0, r5
 80003a0:	47a0      	blx	r4
	tft->drawArea(10, 30, tft->getWidth()-10, 40, 0, 1, 0);
 80003a2:	687d      	ldr	r5, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	3338      	adds	r3, #56	; 0x38
 80003aa:	681c      	ldr	r4, [r3, #0]
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	3304      	adds	r3, #4
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4610      	mov	r0, r2
 80003b8:	4798      	blx	r3
 80003ba:	4603      	mov	r3, r0
 80003bc:	3b0a      	subs	r3, #10
 80003be:	461a      	mov	r2, r3
 80003c0:	2328      	movs	r3, #40	; 0x28
 80003c2:	9300      	str	r3, [sp, #0]
 80003c4:	ed9f 1a28 	vldr	s2, [pc, #160]	; 8000468 <_Z7cppMainv+0x190>
 80003c8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80003cc:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8000468 <_Z7cppMainv+0x190>
 80003d0:	4613      	mov	r3, r2
 80003d2:	221e      	movs	r2, #30
 80003d4:	210a      	movs	r1, #10
 80003d6:	4628      	mov	r0, r5
 80003d8:	47a0      	blx	r4
	tft->drawArea(10, 50, tft->getWidth()-10, 60, 0, 0, 1);
 80003da:	687d      	ldr	r5, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	3338      	adds	r3, #56	; 0x38
 80003e2:	681c      	ldr	r4, [r3, #0]
 80003e4:	687a      	ldr	r2, [r7, #4]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	3304      	adds	r3, #4
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4610      	mov	r0, r2
 80003f0:	4798      	blx	r3
 80003f2:	4603      	mov	r3, r0
 80003f4:	3b0a      	subs	r3, #10
 80003f6:	461a      	mov	r2, r3
 80003f8:	233c      	movs	r3, #60	; 0x3c
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000400:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000468 <_Z7cppMainv+0x190>
 8000404:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8000468 <_Z7cppMainv+0x190>
 8000408:	4613      	mov	r3, r2
 800040a:	2232      	movs	r2, #50	; 0x32
 800040c:	210a      	movs	r1, #10
 800040e:	4628      	mov	r0, r5
 8000410:	47a0      	blx	r4
	tft->drawArea(10, 70, tft->getWidth()-10, 80, 1, 1, 1);
 8000412:	687d      	ldr	r5, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	3338      	adds	r3, #56	; 0x38
 800041a:	681c      	ldr	r4, [r3, #0]
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	3304      	adds	r3, #4
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4610      	mov	r0, r2
 8000428:	4798      	blx	r3
 800042a:	4603      	mov	r3, r0
 800042c:	3b0a      	subs	r3, #10
 800042e:	461a      	mov	r2, r3
 8000430:	2350      	movs	r3, #80	; 0x50
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000438:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800043c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000440:	4613      	mov	r3, r2
 8000442:	2246      	movs	r2, #70	; 0x46
 8000444:	210a      	movs	r1, #10
 8000446:	4628      	mov	r0, r5
 8000448:	47a0      	blx	r4
	tft->unselect();
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	3330      	adds	r3, #48	; 0x30
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4610      	mov	r0, r2
 8000456:	4798      	blx	r3

	while(true)
 8000458:	e7fe      	b.n	8000458 <_Z7cppMainv+0x180>
 800045a:	bf00      	nop
 800045c:	200000b8 	.word	0x200000b8
 8000460:	58020800 	.word	0x58020800
 8000464:	58020000 	.word	0x58020000
 8000468:	00000000 	.word	0x00000000

0800046c <jumpToCPP>:

	}
}

extern "C" void jumpToCPP()
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	cppMain();
 8000470:	f7ff ff32 	bl	80002d8 <_Z7cppMainv>
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}

08000478 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	; 0x28
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2224      	movs	r2, #36	; 0x24
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f005 fd81 	bl	8005f8c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800048a:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <MX_DAC1_Init+0x5c>)
 800048c:	4a12      	ldr	r2, [pc, #72]	; (80004d8 <MX_DAC1_Init+0x60>)
 800048e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000490:	4810      	ldr	r0, [pc, #64]	; (80004d4 <MX_DAC1_Init+0x5c>)
 8000492:	f000 fe71 	bl	8001178 <HAL_DAC_Init>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800049c:	f000 f95e 	bl	800075c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80004a8:	2302      	movs	r3, #2
 80004aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80004ac:	2302      	movs	r3, #2
 80004ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2210      	movs	r2, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	4806      	ldr	r0, [pc, #24]	; (80004d4 <MX_DAC1_Init+0x5c>)
 80004bc:	f000 fe8c 	bl	80011d8 <HAL_DAC_ConfigChannel>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80004c6:	f000 f949 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	3728      	adds	r7, #40	; 0x28
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	200000a4 	.word	0x200000a4
 80004d8:	40007400 	.word	0x40007400

080004dc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <HAL_DAC_MspInit+0x3c>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d10e      	bne.n	800050c <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <HAL_DAC_MspInit+0x40>)
 80004f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80004f4:	4a09      	ldr	r2, [pc, #36]	; (800051c <HAL_DAC_MspInit+0x40>)
 80004f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80004fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80004fe:	4b07      	ldr	r3, [pc, #28]	; (800051c <HAL_DAC_MspInit+0x40>)
 8000500:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40007400 	.word	0x40007400
 800051c:	58024400 	.word	0x58024400

08000520 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000526:	f107 030c 	add.w	r3, r7, #12
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b3d      	ldr	r3, [pc, #244]	; (800062c <MX_GPIO_Init+0x10c>)
 8000538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800053c:	4a3b      	ldr	r2, [pc, #236]	; (800062c <MX_GPIO_Init+0x10c>)
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000546:	4b39      	ldr	r3, [pc, #228]	; (800062c <MX_GPIO_Init+0x10c>)
 8000548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800054c:	f003 0301 	and.w	r3, r3, #1
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000554:	4b35      	ldr	r3, [pc, #212]	; (800062c <MX_GPIO_Init+0x10c>)
 8000556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800055a:	4a34      	ldr	r2, [pc, #208]	; (800062c <MX_GPIO_Init+0x10c>)
 800055c:	f043 0304 	orr.w	r3, r3, #4
 8000560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000564:	4b31      	ldr	r3, [pc, #196]	; (800062c <MX_GPIO_Init+0x10c>)
 8000566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000572:	4b2e      	ldr	r3, [pc, #184]	; (800062c <MX_GPIO_Init+0x10c>)
 8000574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000578:	4a2c      	ldr	r2, [pc, #176]	; (800062c <MX_GPIO_Init+0x10c>)
 800057a:	f043 0308 	orr.w	r3, r3, #8
 800057e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000582:	4b2a      	ldr	r3, [pc, #168]	; (800062c <MX_GPIO_Init+0x10c>)
 8000584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000588:	f003 0308 	and.w	r3, r3, #8
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_RST_Pin|TFT_A0_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2150      	movs	r1, #80	; 0x50
 8000594:	4826      	ldr	r0, [pc, #152]	; (8000630 <MX_GPIO_Init+0x110>)
 8000596:	f001 fab3 	bl	8001b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2110      	movs	r1, #16
 800059e:	4825      	ldr	r0, [pc, #148]	; (8000634 <MX_GPIO_Init+0x114>)
 80005a0:	f001 faae 	bl	8001b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin|TFT_A0_Pin;
 80005a4:	2350      	movs	r3, #80	; 0x50
 80005a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	4619      	mov	r1, r3
 80005ba:	481d      	ldr	r0, [pc, #116]	; (8000630 <MX_GPIO_Init+0x110>)
 80005bc:	f000 fff0 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_CS_Pin;
 80005c0:	2310      	movs	r3, #16
 80005c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005cc:	2302      	movs	r3, #2
 80005ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TFT_CS_GPIO_Port, &GPIO_InitStruct);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	4619      	mov	r1, r3
 80005d6:	4817      	ldr	r0, [pc, #92]	; (8000634 <MX_GPIO_Init+0x114>)
 80005d8:	f000 ffe2 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_EXTI1_ENC_A_Pin|GPIO_EXT2_ENC_B_Pin|GPIO_EXTI3_ENC_SW_Pin;
 80005dc:	230e      	movs	r3, #14
 80005de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_GPIO_Init+0x118>)
 80005e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	4619      	mov	r1, r3
 80005ee:	4813      	ldr	r0, [pc, #76]	; (800063c <MX_GPIO_Init+0x11c>)
 80005f0:	f000 ffd6 	bl	80015a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2100      	movs	r1, #0
 80005f8:	2007      	movs	r0, #7
 80005fa:	f000 fd6f 	bl	80010dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80005fe:	2007      	movs	r0, #7
 8000600:	f000 fd96 	bl	8001130 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2100      	movs	r1, #0
 8000608:	2008      	movs	r0, #8
 800060a:	f000 fd67 	bl	80010dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800060e:	2008      	movs	r0, #8
 8000610:	f000 fd8e 	bl	8001130 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2100      	movs	r1, #0
 8000618:	2009      	movs	r0, #9
 800061a:	f000 fd5f 	bl	80010dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800061e:	2009      	movs	r0, #9
 8000620:	f000 fd86 	bl	8001130 <HAL_NVIC_EnableIRQ>

}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	58024400 	.word	0x58024400
 8000630:	58020000 	.word	0x58020000
 8000634:	58020800 	.word	0x58020800
 8000638:	11110000 	.word	0x11110000
 800063c:	58020c00 	.word	0x58020c00

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fb98 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f80a 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f7ff ff68 	bl	8000520 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000650:	f000 f894 	bl	800077c <MX_SPI1_Init>
  MX_DAC1_Init();
 8000654:	f7ff ff10 	bl	8000478 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  jumpToCPP();
 8000658:	f7ff ff08 	bl	800046c <jumpToCPP>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	e7fe      	b.n	800065c <main+0x1c>
	...

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b09c      	sub	sp, #112	; 0x70
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066a:	224c      	movs	r2, #76	; 0x4c
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f005 fc8c 	bl	8005f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2220      	movs	r2, #32
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f005 fc86 	bl	8005f8c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000680:	2002      	movs	r0, #2
 8000682:	f001 fa97 	bl	8001bb4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000686:	2300      	movs	r3, #0
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	4b32      	ldr	r3, [pc, #200]	; (8000754 <SystemClock_Config+0xf4>)
 800068c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068e:	4a31      	ldr	r2, [pc, #196]	; (8000754 <SystemClock_Config+0xf4>)
 8000690:	f023 0301 	bic.w	r3, r3, #1
 8000694:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000696:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <SystemClock_Config+0xf4>)
 8000698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <SystemClock_Config+0xf8>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a8:	4a2b      	ldr	r2, [pc, #172]	; (8000758 <SystemClock_Config+0xf8>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemClock_Config+0xf8>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006bc:	bf00      	nop
 80006be:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemClock_Config+0xf8>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006ca:	d1f8      	bne.n	80006be <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2340      	movs	r3, #64	; 0x40
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80006e4:	230c      	movs	r3, #12
 80006e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006f4:	230c      	movs	r3, #12
 80006f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fa9a 	bl	8001c40 <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000712:	f000 f823 	bl	800075c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	233f      	movs	r3, #63	; 0x3f
 8000718:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2303      	movs	r3, #3
 800071c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2102      	movs	r1, #2
 800073a:	4618      	mov	r0, r3
 800073c:	f001 ffd8 	bl	80026f0 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000746:	f000 f809 	bl	800075c <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3770      	adds	r7, #112	; 0x70
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	58000400 	.word	0x58000400
 8000758:	58024800 	.word	0x58024800

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>

08000766 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000780:	4b28      	ldr	r3, [pc, #160]	; (8000824 <MX_SPI1_Init+0xa8>)
 8000782:	4a29      	ldr	r2, [pc, #164]	; (8000828 <MX_SPI1_Init+0xac>)
 8000784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000786:	4b27      	ldr	r3, [pc, #156]	; (8000824 <MX_SPI1_Init+0xa8>)
 8000788:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800078c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800078e:	4b25      	ldr	r3, [pc, #148]	; (8000824 <MX_SPI1_Init+0xa8>)
 8000790:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000794:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000796:	4b23      	ldr	r3, [pc, #140]	; (8000824 <MX_SPI1_Init+0xa8>)
 8000798:	2207      	movs	r2, #7
 800079a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079c:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_SPI1_Init+0xa8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <MX_SPI1_Init+0xa8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_SPI1_Init+0xa8>)
 80007aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_SPI1_Init+0xa8>)
 80007b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80007b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_SPI1_Init+0xa8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_SPI1_Init+0xa8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_SPI1_Init+0xa8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_SPI1_Init+0xa8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_SPI1_Init+0xa8>)
 80007d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_SPI1_Init+0xa8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_SPI1_Init+0xa8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_SPI1_Init+0xa8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_SPI1_Init+0xa8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_SPI1_Init+0xa8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_SPI1_Init+0xa8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_SPI1_Init+0xa8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_SPI1_Init+0xa8>)
 8000804:	2200      	movs	r2, #0
 8000806:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_SPI1_Init+0xa8>)
 800080a:	2200      	movs	r2, #0
 800080c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_SPI1_Init+0xa8>)
 8000810:	f004 f8ac 	bl	800496c <HAL_SPI_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800081a:	f7ff ff9f 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000b8 	.word	0x200000b8
 8000828:	40013000 	.word	0x40013000

0800082c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b0b8      	sub	sp, #224	; 0xe0
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	22bc      	movs	r2, #188	; 0xbc
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f005 fb9d 	bl	8005f8c <memset>
  if(spiHandle->Instance==SPI1)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a24      	ldr	r2, [pc, #144]	; (80008e8 <HAL_SPI_MspInit+0xbc>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d141      	bne.n	80008e0 <HAL_SPI_MspInit+0xb4>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000862:	2300      	movs	r3, #0
 8000864:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	4618      	mov	r0, r3
 800086c:	f002 fc2a 	bl	80030c4 <HAL_RCCEx_PeriphCLKConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000876:	f7ff ff71 	bl	800075c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <HAL_SPI_MspInit+0xc0>)
 800087c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000880:	4a1a      	ldr	r2, [pc, #104]	; (80008ec <HAL_SPI_MspInit+0xc0>)
 8000882:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000886:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <HAL_SPI_MspInit+0xc0>)
 800088c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_SPI_MspInit+0xc0>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	4a13      	ldr	r2, [pc, #76]	; (80008ec <HAL_SPI_MspInit+0xc0>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <HAL_SPI_MspInit+0xc0>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008b6:	23a0      	movs	r3, #160	; 0xa0
 80008b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ce:	2305      	movs	r3, #5
 80008d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008d8:	4619      	mov	r1, r3
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <HAL_SPI_MspInit+0xc4>)
 80008dc:	f000 fe60 	bl	80015a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008e0:	bf00      	nop
 80008e2:	37e0      	adds	r7, #224	; 0xe0
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40013000 	.word	0x40013000
 80008ec:	58024400 	.word	0x58024400
 80008f0:	58020000 	.word	0x58020000

080008f4 <_ZN14STM32H7_ST7735C1EP12GPIO_TypeDeftS1_tS1_tP19__SPI_HandleTypeDef>:
 *      Author: filipe
 */

#include <stm32h7_st7735.hpp>

STM32H7_ST7735::STM32H7_ST7735(GPIO_TypeDef *rst_port,
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	4613      	mov	r3, r2
 8000902:	80fb      	strh	r3, [r7, #6]
		uint16_t rst_pin,
		GPIO_TypeDef *dc_port,
		uint16_t dc_pin,
		GPIO_TypeDef *cs_port,
		uint16_t cs_pin,
		SPI_HandleTypeDef *hspi) : ST7735()
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4618      	mov	r0, r3
 8000908:	f004 fdda 	bl	80054c0 <_ZN6ST7735C1Ev>
 800090c:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <_ZN14STM32H7_ST7735C1EP12GPIO_TypeDeftS1_tS1_tP19__SPI_HandleTypeDef+0x54>)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	601a      	str	r2, [r3, #0]
{
	this->rst_port = rst_port;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	68ba      	ldr	r2, [r7, #8]
 8000916:	61da      	str	r2, [r3, #28]
	this->rst_pin = rst_pin;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	88fa      	ldrh	r2, [r7, #6]
 800091c:	841a      	strh	r2, [r3, #32]
	this->dc_port = dc_port;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	683a      	ldr	r2, [r7, #0]
 8000922:	625a      	str	r2, [r3, #36]	; 0x24
	this->dc_pin = dc_pin;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	8b3a      	ldrh	r2, [r7, #24]
 8000928:	851a      	strh	r2, [r3, #40]	; 0x28
	this->cs_port = cs_port;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	69fa      	ldr	r2, [r7, #28]
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
	this->cs_pin = cs_pin;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	8c3a      	ldrh	r2, [r7, #32]
 8000934:	861a      	strh	r2, [r3, #48]	; 0x30
	this->hspi = hspi;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800093a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4618      	mov	r0, r3
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	08006374 	.word	0x08006374

0800094c <_ZN14STM32H7_ST7735D1Ev>:

STM32H7_ST7735::~STM32H7_ST7735()
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	4a05      	ldr	r2, [pc, #20]	; (800096c <_ZN14STM32H7_ST7735D1Ev+0x20>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4618      	mov	r0, r3
 800095e:	f004 fdd5 	bl	800550c <_ZN6ST7735D1Ev>
{
	// TODO Auto-generated destructor stub
}
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	08006374 	.word	0x08006374

08000970 <_ZN14STM32H7_ST7735D0Ev>:
STM32H7_ST7735::~STM32H7_ST7735()
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
}
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ffe7 	bl	800094c <_ZN14STM32H7_ST7735D1Ev>
 800097e:	2138      	movs	r1, #56	; 0x38
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f005 fa8f 	bl	8005ea4 <_ZdlPvj>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <_ZN14STM32H7_ST77356initIOEv>:

void STM32H7_ST7735::initIO()
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	HAL_SPI_Init(this->hspi);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099c:	4618      	mov	r0, r3
 800099e:	f003 ffe5 	bl	800496c <HAL_SPI_Init>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_ZN14STM32H7_ST77359rstPinSetEv>:

void STM32H7_ST7735::rstPinSet()
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->rst_port, this->rst_pin, GPIO_PIN_SET);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	69d8      	ldr	r0, [r3, #28]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	8c1b      	ldrh	r3, [r3, #32]
 80009ba:	2201      	movs	r2, #1
 80009bc:	4619      	mov	r1, r3
 80009be:	f001 f89f 	bl	8001b00 <HAL_GPIO_WritePin>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <_ZN14STM32H7_ST773511rstPinResetEv>:

void STM32H7_ST7735::rstPinReset()
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->rst_port, this->rst_pin, GPIO_PIN_RESET);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	69d8      	ldr	r0, [r3, #28]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	8c1b      	ldrh	r3, [r3, #32]
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	f001 f88f 	bl	8001b00 <HAL_GPIO_WritePin>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <_ZN14STM32H7_ST77358dcPinSetEv>:

void STM32H7_ST7735::dcPinSet()
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->dc_port, this->dc_pin, GPIO_PIN_SET);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009fa:	2201      	movs	r2, #1
 80009fc:	4619      	mov	r1, r3
 80009fe:	f001 f87f 	bl	8001b00 <HAL_GPIO_WritePin>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <_ZN14STM32H7_ST773510dcPinResetEv>:

void STM32H7_ST7735::dcPinReset()
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->dc_port, this->dc_pin, GPIO_PIN_RESET);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f001 f86f 	bl	8001b00 <HAL_GPIO_WritePin>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_ZN14STM32H7_ST77358csPinSetEv>:

void STM32H7_ST7735::csPinSet()
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->cs_port, this->cs_pin, GPIO_PIN_SET);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f001 f85f 	bl	8001b00 <HAL_GPIO_WritePin>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_ZN14STM32H7_ST773510csPinResetEv>:

void STM32H7_ST7735::csPinReset()
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->cs_port, this->cs_pin, GPIO_PIN_RESET);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f001 f84f 	bl	8001b00 <HAL_GPIO_WritePin>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <_ZN14STM32H7_ST77358sendByteEh>:

void STM32H7_ST7735::sendByte(uint8_t data)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	460b      	mov	r3, r1
 8000a74:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(this->hspi, &data, 1, 0x1);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000a7a:	1cf9      	adds	r1, r7, #3
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f004 fa1e 	bl	8004ec0 <HAL_SPI_Transmit>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_ZN14STM32H7_ST77355delayEh>:

void STM32H7_ST7735::delay(uint8_t ms)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	70fb      	strb	r3, [r7, #3]
	HAL_Delay(ms);
 8000a98:	78fb      	ldrb	r3, [r7, #3]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f9fe 	bl	8000e9c <HAL_Delay>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_MspInit+0x30>)
 8000ab0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab4:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_MspInit+0x30>)
 8000ab6:	f043 0302 	orr.w	r3, r3, #2
 8000aba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_MspInit+0x30>)
 8000ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	58024400 	.word	0x58024400

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <MemManage_Handler+0x4>

08000aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b28:	f000 f998 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b34:	2002      	movs	r0, #2
 8000b36:	f001 f817 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000b42:	2004      	movs	r0, #4
 8000b44:	f001 f810 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000b50:	2008      	movs	r0, #8
 8000b52:	f001 f809 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
	return 1;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <_kill>:

int _kill(int pid, int sig)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b74:	f005 f9d0 	bl	8005f18 <__errno>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2216      	movs	r2, #22
 8000b7c:	601a      	str	r2, [r3, #0]
	return -1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_exit>:

void _exit (int status)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ffe7 	bl	8000b6a <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b9c:	e7fe      	b.n	8000b9c <_exit+0x12>
	...

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f005 f9a2 	bl	8005f18 <__errno>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20020000 	.word	0x20020000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	20000094 	.word	0x20000094
 8000c08:	20000158 	.word	0x20000158

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c10:	4b39      	ldr	r3, [pc, #228]	; (8000cf8 <SystemInit+0xec>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a38      	ldr	r2, [pc, #224]	; (8000cf8 <SystemInit+0xec>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c20:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <SystemInit+0xf0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f003 030f 	and.w	r3, r3, #15
 8000c28:	2b06      	cmp	r3, #6
 8000c2a:	d807      	bhi.n	8000c3c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c2c:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <SystemInit+0xf0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f023 030f 	bic.w	r3, r3, #15
 8000c34:	4a31      	ldr	r2, [pc, #196]	; (8000cfc <SystemInit+0xf0>)
 8000c36:	f043 0307 	orr.w	r3, r3, #7
 8000c3a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c3c:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <SystemInit+0xf4>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a2f      	ldr	r2, [pc, #188]	; (8000d00 <SystemInit+0xf4>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c48:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <SystemInit+0xf4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c4e:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <SystemInit+0xf4>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	492b      	ldr	r1, [pc, #172]	; (8000d00 <SystemInit+0xf4>)
 8000c54:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <SystemInit+0xf8>)
 8000c56:	4013      	ands	r3, r2
 8000c58:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c5a:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <SystemInit+0xf0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d007      	beq.n	8000c76 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c66:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <SystemInit+0xf0>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f023 030f 	bic.w	r3, r3, #15
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <SystemInit+0xf0>)
 8000c70:	f043 0307 	orr.w	r3, r3, #7
 8000c74:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c76:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <SystemInit+0xf4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c7c:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <SystemInit+0xf4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <SystemInit+0xf4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <SystemInit+0xf4>)
 8000c8a:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <SystemInit+0xfc>)
 8000c8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <SystemInit+0xf4>)
 8000c90:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <SystemInit+0x100>)
 8000c92:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <SystemInit+0xf4>)
 8000c96:	4a1e      	ldr	r2, [pc, #120]	; (8000d10 <SystemInit+0x104>)
 8000c98:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <SystemInit+0xf4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <SystemInit+0xf4>)
 8000ca2:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <SystemInit+0x104>)
 8000ca4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <SystemInit+0xf4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <SystemInit+0xf4>)
 8000cae:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <SystemInit+0x104>)
 8000cb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <SystemInit+0xf4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <SystemInit+0xf4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <SystemInit+0xf4>)
 8000cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <SystemInit+0xf4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <SystemInit+0x108>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <SystemInit+0x10c>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cd6:	d202      	bcs.n	8000cde <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <SystemInit+0x110>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <SystemInit+0x114>)
 8000ce0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ce4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SystemInit+0xec>)
 8000ce8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cec:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00
 8000cfc:	52002000 	.word	0x52002000
 8000d00:	58024400 	.word	0x58024400
 8000d04:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d08:	02020200 	.word	0x02020200
 8000d0c:	01ff0000 	.word	0x01ff0000
 8000d10:	01010280 	.word	0x01010280
 8000d14:	5c001000 	.word	0x5c001000
 8000d18:	ffff0000 	.word	0xffff0000
 8000d1c:	51008108 	.word	0x51008108
 8000d20:	52004000 	.word	0x52004000

08000d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d28:	f7ff ff70 	bl	8000c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d2e:	490d      	ldr	r1, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d44:	4c0a      	ldr	r4, [pc, #40]	; (8000d70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d52:	f005 f8e7 	bl	8005f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d56:	f7ff fc73 	bl	8000640 <main>
  bx  lr
 8000d5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d68:	080064b0 	.word	0x080064b0
  ldr r2, =_sbss
 8000d6c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d70:	20000154 	.word	0x20000154

08000d74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC3_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7e:	2003      	movs	r0, #3
 8000d80:	f000 f98c 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d84:	f002 f824 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_Init+0x68>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	0a1b      	lsrs	r3, r3, #8
 8000d90:	f003 030f 	and.w	r3, r3, #15
 8000d94:	4913      	ldr	r1, [pc, #76]	; (8000de4 <HAL_Init+0x6c>)
 8000d96:	5ccb      	ldrb	r3, [r1, r3]
 8000d98:	f003 031f 	and.w	r3, r3, #31
 8000d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000da0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_Init+0x68>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_Init+0x6c>)
 8000dac:	5cd3      	ldrb	r3, [r2, r3]
 8000dae:	f003 031f 	and.w	r3, r3, #31
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	fa22 f303 	lsr.w	r3, r2, r3
 8000db8:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <HAL_Init+0x70>)
 8000dba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000dbc:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <HAL_Init+0x74>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f000 f814 	bl	8000df0 <HAL_InitTick>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e002      	b.n	8000dd8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd2:	f7ff fe69 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	58024400 	.word	0x58024400
 8000de4:	080063dc 	.word	0x080063dc
 8000de8:	20000004 	.word	0x20000004
 8000dec:	20000000 	.word	0x20000000

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_InitTick+0x60>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d101      	bne.n	8000e04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e021      	b.n	8000e48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <HAL_InitTick+0x64>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_InitTick+0x60>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f9a0 	bl	8001160 <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e38:	f000 f950 	bl	80010dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_InitTick+0x68>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	2000000c 	.word	0x2000000c
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000008 	.word	0x20000008

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	2000000c 	.word	0x2000000c
 8000e80:	20000140 	.word	0x20000140

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000140 	.word	0x20000140

08000e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff ffee 	bl	8000e84 <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000eb4:	d005      	beq.n	8000ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_Delay+0x44>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ec2:	bf00      	nop
 8000ec4:	f7ff ffde 	bl	8000e84 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d8f7      	bhi.n	8000ec4 <HAL_Delay+0x28>
  {
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000000c 	.word	0x2000000c

08000ee4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_GetREVID+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	0c1b      	lsrs	r3, r3, #16
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	5c001000 	.word	0x5c001000

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <__NVIC_SetPriorityGrouping+0x40>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	4313      	orrs	r3, r2
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x40>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00
 8000f40:	05fa0000 	.word	0x05fa0000

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	; (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800107c:	f7ff ff8e 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b07      	cmp	r3, #7
 80010a8:	d00f      	beq.n	80010ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b06      	cmp	r3, #6
 80010ae:	d00c      	beq.n	80010ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b05      	cmp	r3, #5
 80010b4:	d009      	beq.n	80010ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d006      	beq.n	80010ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d003      	beq.n	80010ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010c2:	2192      	movs	r1, #146	; 0x92
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80010c6:	f7ff fb4e 	bl	8000766 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ff16 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	080061cc 	.word	0x080061cc

080010dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d903      	bls.n	80010f8 <HAL_NVIC_SetPriority+0x1c>
 80010f0:	21aa      	movs	r1, #170	; 0xaa
 80010f2:	480e      	ldr	r0, [pc, #56]	; (800112c <HAL_NVIC_SetPriority+0x50>)
 80010f4:	f7ff fb37 	bl	8000766 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2b0f      	cmp	r3, #15
 80010fc:	d903      	bls.n	8001106 <HAL_NVIC_SetPriority+0x2a>
 80010fe:	21ab      	movs	r1, #171	; 0xab
 8001100:	480a      	ldr	r0, [pc, #40]	; (800112c <HAL_NVIC_SetPriority+0x50>)
 8001102:	f7ff fb30 	bl	8000766 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8001106:	f7ff ff1d 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 800110a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	6978      	ldr	r0, [r7, #20]
 8001112:	f7ff ff6d 	bl	8000ff0 <NVIC_EncodePriority>
 8001116:	4602      	mov	r2, r0
 8001118:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff3c 	bl	8000f9c <__NVIC_SetPriority>
}
 8001124:	bf00      	nop
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	080061cc 	.word	0x080061cc

08001130 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800113a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113e:	2b00      	cmp	r3, #0
 8001140:	da03      	bge.n	800114a <HAL_NVIC_EnableIRQ+0x1a>
 8001142:	21be      	movs	r1, #190	; 0xbe
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_NVIC_EnableIRQ+0x2c>)
 8001146:	f7ff fb0e 	bl	8000766 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff06 	bl	8000f60 <__NVIC_EnableIRQ>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	080061cc 	.word	0x080061cc

08001160 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff75 	bl	8001058 <SysTick_Config>
 800116e:	4603      	mov	r3, r0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e01e      	b.n	80011c8 <HAL_DAC_Init+0x50>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <HAL_DAC_Init+0x58>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d004      	beq.n	800119e <HAL_DAC_Init+0x26>
 8001194:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8001198:	480e      	ldr	r0, [pc, #56]	; (80011d4 <HAL_DAC_Init+0x5c>)
 800119a:	f7ff fae4 	bl	8000766 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	791b      	ldrb	r3, [r3, #4]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d105      	bne.n	80011b4 <HAL_DAC_Init+0x3c>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff f994 	bl	80004dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2202      	movs	r2, #2
 80011b8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40007400 	.word	0x40007400
 80011d4:	08006208 	.word	0x08006208

080011d8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d03c      	beq.n	8001266 <HAL_DAC_ConfigChannel+0x8e>
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b06      	cmp	r3, #6
 80011f2:	d038      	beq.n	8001266 <HAL_DAC_ConfigChannel+0x8e>
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b0a      	cmp	r3, #10
 80011fa:	d034      	beq.n	8001266 <HAL_DAC_ConfigChannel+0x8e>
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b0e      	cmp	r3, #14
 8001202:	d030      	beq.n	8001266 <HAL_DAC_ConfigChannel+0x8e>
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b12      	cmp	r3, #18
 800120a:	d02c      	beq.n	8001266 <HAL_DAC_ConfigChannel+0x8e>
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b16      	cmp	r3, #22
 8001212:	d028      	beq.n	8001266 <HAL_DAC_ConfigChannel+0x8e>
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b1a      	cmp	r3, #26
 800121a:	d024      	beq.n	8001266 <HAL_DAC_ConfigChannel+0x8e>
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b1e      	cmp	r3, #30
 8001222:	d020      	beq.n	8001266 <HAL_DAC_ConfigChannel+0x8e>
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b22      	cmp	r3, #34	; 0x22
 800122a:	d01c      	beq.n	8001266 <HAL_DAC_ConfigChannel+0x8e>
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b26      	cmp	r3, #38	; 0x26
 8001232:	d018      	beq.n	8001266 <HAL_DAC_ConfigChannel+0x8e>
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b2a      	cmp	r3, #42	; 0x2a
 800123a:	d014      	beq.n	8001266 <HAL_DAC_ConfigChannel+0x8e>
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b2e      	cmp	r3, #46	; 0x2e
 8001242:	d010      	beq.n	8001266 <HAL_DAC_ConfigChannel+0x8e>
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b32      	cmp	r3, #50	; 0x32
 800124a:	d00c      	beq.n	8001266 <HAL_DAC_ConfigChannel+0x8e>
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b36      	cmp	r3, #54	; 0x36
 8001252:	d008      	beq.n	8001266 <HAL_DAC_ConfigChannel+0x8e>
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d004      	beq.n	8001266 <HAL_DAC_ConfigChannel+0x8e>
 800125c:	f240 31ee 	movw	r1, #1006	; 0x3ee
 8001260:	489e      	ldr	r0, [pc, #632]	; (80014dc <HAL_DAC_ConfigChannel+0x304>)
 8001262:	f7ff fa80 	bl	8000766 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d008      	beq.n	8001280 <HAL_DAC_ConfigChannel+0xa8>
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d004      	beq.n	8001280 <HAL_DAC_ConfigChannel+0xa8>
 8001276:	f240 31ef 	movw	r1, #1007	; 0x3ef
 800127a:	4898      	ldr	r0, [pc, #608]	; (80014dc <HAL_DAC_ConfigChannel+0x304>)
 800127c:	f7ff fa73 	bl	8000766 <assert_failed>
  assert_param(IS_DAC_CHIP_CONNECTION(sConfig->DAC_ConnectOnChipPeripheral));
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d00c      	beq.n	80012a2 <HAL_DAC_ConfigChannel+0xca>
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b02      	cmp	r3, #2
 800128e:	d008      	beq.n	80012a2 <HAL_DAC_ConfigChannel+0xca>
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	2b04      	cmp	r3, #4
 8001296:	d004      	beq.n	80012a2 <HAL_DAC_ConfigChannel+0xca>
 8001298:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800129c:	488f      	ldr	r0, [pc, #572]	; (80014dc <HAL_DAC_ConfigChannel+0x304>)
 800129e:	f7ff fa62 	bl	8000766 <assert_failed>
  assert_param(IS_DAC_TRIMMING(sConfig->DAC_UserTrimming));
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d008      	beq.n	80012bc <HAL_DAC_ConfigChannel+0xe4>
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d004      	beq.n	80012bc <HAL_DAC_ConfigChannel+0xe4>
 80012b2:	f240 31f1 	movw	r1, #1009	; 0x3f1
 80012b6:	4889      	ldr	r0, [pc, #548]	; (80014dc <HAL_DAC_ConfigChannel+0x304>)
 80012b8:	f7ff fa55 	bl	8000766 <assert_failed>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d108      	bne.n	80012d6 <HAL_DAC_ConfigChannel+0xfe>
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	2b1f      	cmp	r3, #31
 80012ca:	d904      	bls.n	80012d6 <HAL_DAC_ConfigChannel+0xfe>
 80012cc:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 80012d0:	4882      	ldr	r0, [pc, #520]	; (80014dc <HAL_DAC_ConfigChannel+0x304>)
 80012d2:	f7ff fa48 	bl	8000766 <assert_failed>
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d008      	beq.n	80012f0 <HAL_DAC_ConfigChannel+0x118>
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d004      	beq.n	80012f0 <HAL_DAC_ConfigChannel+0x118>
 80012e6:	f240 31f6 	movw	r1, #1014	; 0x3f6
 80012ea:	487c      	ldr	r0, [pc, #496]	; (80014dc <HAL_DAC_ConfigChannel+0x304>)
 80012ec:	f7ff fa3b 	bl	8000766 <assert_failed>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d11c      	bne.n	8001332 <HAL_DAC_ConfigChannel+0x15a>
  {
    assert_param(IS_DAC_SAMPLETIME(sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime));
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001300:	d304      	bcc.n	800130c <HAL_DAC_ConfigChannel+0x134>
 8001302:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8001306:	4875      	ldr	r0, [pc, #468]	; (80014dc <HAL_DAC_ConfigChannel+0x304>)
 8001308:	f7ff fa2d 	bl	8000766 <assert_failed>
    assert_param(IS_DAC_HOLDTIME(sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime));
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001314:	d304      	bcc.n	8001320 <HAL_DAC_ConfigChannel+0x148>
 8001316:	f240 31fa 	movw	r1, #1018	; 0x3fa
 800131a:	4870      	ldr	r0, [pc, #448]	; (80014dc <HAL_DAC_ConfigChannel+0x304>)
 800131c:	f7ff fa23 	bl	8000766 <assert_failed>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	2bff      	cmp	r3, #255	; 0xff
 8001326:	d904      	bls.n	8001332 <HAL_DAC_ConfigChannel+0x15a>
 8001328:	f240 31fb 	movw	r1, #1019	; 0x3fb
 800132c:	486b      	ldr	r0, [pc, #428]	; (80014dc <HAL_DAC_ConfigChannel+0x304>)
 800132e:	f7ff fa1a 	bl	8000766 <assert_failed>
  }
  assert_param(IS_DAC_CHANNEL(Channel));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d007      	beq.n	8001348 <HAL_DAC_ConfigChannel+0x170>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b10      	cmp	r3, #16
 800133c:	d004      	beq.n	8001348 <HAL_DAC_ConfigChannel+0x170>
 800133e:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8001342:	4866      	ldr	r0, [pc, #408]	; (80014dc <HAL_DAC_ConfigChannel+0x304>)
 8001344:	f7ff fa0f 	bl	8000766 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	795b      	ldrb	r3, [r3, #5]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_DAC_ConfigChannel+0x17c>
 8001350:	2302      	movs	r3, #2
 8001352:	e121      	b.n	8001598 <HAL_DAC_ConfigChannel+0x3c0>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2201      	movs	r2, #1
 8001358:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2202      	movs	r2, #2
 800135e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b04      	cmp	r3, #4
 8001366:	d174      	bne.n	8001452 <HAL_DAC_ConfigChannel+0x27a>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001368:	f7ff fd8c 	bl	8000e84 <HAL_GetTick>
 800136c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d134      	bne.n	80013de <HAL_DAC_ConfigChannel+0x206>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001374:	e011      	b.n	800139a <HAL_DAC_ConfigChannel+0x1c2>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001376:	f7ff fd85 	bl	8000e84 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b01      	cmp	r3, #1
 8001382:	d90a      	bls.n	800139a <HAL_DAC_ConfigChannel+0x1c2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	f043 0208 	orr.w	r2, r3, #8
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2203      	movs	r2, #3
 8001394:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e0fe      	b.n	8001598 <HAL_DAC_ConfigChannel+0x3c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013a0:	4b4f      	ldr	r3, [pc, #316]	; (80014e0 <HAL_DAC_ConfigChannel+0x308>)
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1e6      	bne.n	8001376 <HAL_DAC_ConfigChannel+0x19e>
        }
      }
      HAL_Delay(1);
 80013a8:	2001      	movs	r0, #1
 80013aa:	f7ff fd77 	bl	8000e9c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	6992      	ldr	r2, [r2, #24]
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40
 80013b8:	e01e      	b.n	80013f8 <HAL_DAC_ConfigChannel+0x220>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80013ba:	f7ff fd63 	bl	8000e84 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d90a      	bls.n	80013de <HAL_DAC_ConfigChannel+0x206>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	f043 0208 	orr.w	r2, r3, #8
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2203      	movs	r2, #3
 80013d8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e0dc      	b.n	8001598 <HAL_DAC_ConfigChannel+0x3c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	dbe8      	blt.n	80013ba <HAL_DAC_ConfigChannel+0x1e2>
        }
      }
      HAL_Delay(1U);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f7ff fd57 	bl	8000e9c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	6992      	ldr	r2, [r2, #24]
 80013f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f003 0310 	and.w	r3, r3, #16
 8001404:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	ea02 0103 	and.w	r1, r2, r3
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	69da      	ldr	r2, [r3, #28]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	409a      	lsls	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	21ff      	movs	r1, #255	; 0xff
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	ea02 0103 	and.w	r1, r2, r3
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	6a1a      	ldr	r2, [r3, #32]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	409a      	lsls	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d11d      	bne.n	8001496 <HAL_DAC_ConfigChannel+0x2be>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001460:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	221f      	movs	r2, #31
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	4013      	ands	r3, r2
 8001474:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	4313      	orrs	r3, r2
 800148c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	2207      	movs	r2, #7
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	4013      	ands	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d102      	bne.n	80014c0 <HAL_DAC_ConfigChannel+0x2e8>
  {
    connectOnChip = 0x00000000UL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	e013      	b.n	80014e8 <HAL_DAC_ConfigChannel+0x310>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d102      	bne.n	80014ce <HAL_DAC_ConfigChannel+0x2f6>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	e00c      	b.n	80014e8 <HAL_DAC_ConfigChannel+0x310>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d106      	bne.n	80014e4 <HAL_DAC_ConfigChannel+0x30c>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	e005      	b.n	80014e8 <HAL_DAC_ConfigChannel+0x310>
 80014dc:	08006208 	.word	0x08006208
 80014e0:	20008000 	.word	0x20008000
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	4313      	orrs	r3, r2
 8001508:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6819      	ldr	r1, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	400a      	ands	r2, r1
 800152e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	4013      	ands	r3, r2
 800154c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	4313      	orrs	r3, r2
 8001564:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6819      	ldr	r1, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	22c0      	movs	r2, #192	; 0xc0
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43da      	mvns	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	400a      	ands	r2, r1
 8001588:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2201      	movs	r2, #1
 800158e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015ae:	4b47      	ldr	r3, [pc, #284]	; (80016cc <HAL_GPIO_Init+0x12c>)
 80015b0:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a46      	ldr	r2, [pc, #280]	; (80016d0 <HAL_GPIO_Init+0x130>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d02b      	beq.n	8001612 <HAL_GPIO_Init+0x72>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a45      	ldr	r2, [pc, #276]	; (80016d4 <HAL_GPIO_Init+0x134>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d027      	beq.n	8001612 <HAL_GPIO_Init+0x72>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a44      	ldr	r2, [pc, #272]	; (80016d8 <HAL_GPIO_Init+0x138>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d023      	beq.n	8001612 <HAL_GPIO_Init+0x72>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a43      	ldr	r2, [pc, #268]	; (80016dc <HAL_GPIO_Init+0x13c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d01f      	beq.n	8001612 <HAL_GPIO_Init+0x72>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a42      	ldr	r2, [pc, #264]	; (80016e0 <HAL_GPIO_Init+0x140>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01b      	beq.n	8001612 <HAL_GPIO_Init+0x72>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a41      	ldr	r2, [pc, #260]	; (80016e4 <HAL_GPIO_Init+0x144>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d017      	beq.n	8001612 <HAL_GPIO_Init+0x72>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a40      	ldr	r2, [pc, #256]	; (80016e8 <HAL_GPIO_Init+0x148>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <HAL_GPIO_Init+0x72>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a3f      	ldr	r2, [pc, #252]	; (80016ec <HAL_GPIO_Init+0x14c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00f      	beq.n	8001612 <HAL_GPIO_Init+0x72>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a3e      	ldr	r2, [pc, #248]	; (80016f0 <HAL_GPIO_Init+0x150>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00b      	beq.n	8001612 <HAL_GPIO_Init+0x72>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a3d      	ldr	r2, [pc, #244]	; (80016f4 <HAL_GPIO_Init+0x154>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x72>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a3c      	ldr	r2, [pc, #240]	; (80016f8 <HAL_GPIO_Init+0x158>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x72>
 800160a:	21bb      	movs	r1, #187	; 0xbb
 800160c:	483b      	ldr	r0, [pc, #236]	; (80016fc <HAL_GPIO_Init+0x15c>)
 800160e:	f7ff f8aa 	bl	8000766 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	b29b      	uxth	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_GPIO_Init+0x88>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b37      	ldr	r3, [pc, #220]	; (8001700 <HAL_GPIO_Init+0x160>)
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x90>
 8001628:	21bc      	movs	r1, #188	; 0xbc
 800162a:	4834      	ldr	r0, [pc, #208]	; (80016fc <HAL_GPIO_Init+0x15c>)
 800162c:	f7ff f89b 	bl	8000766 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d035      	beq.n	80016a4 <HAL_GPIO_Init+0x104>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d031      	beq.n	80016a4 <HAL_GPIO_Init+0x104>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b11      	cmp	r3, #17
 8001646:	d02d      	beq.n	80016a4 <HAL_GPIO_Init+0x104>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d029      	beq.n	80016a4 <HAL_GPIO_Init+0x104>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b12      	cmp	r3, #18
 8001656:	d025      	beq.n	80016a4 <HAL_GPIO_Init+0x104>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	4a29      	ldr	r2, [pc, #164]	; (8001704 <HAL_GPIO_Init+0x164>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d020      	beq.n	80016a4 <HAL_GPIO_Init+0x104>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4a28      	ldr	r2, [pc, #160]	; (8001708 <HAL_GPIO_Init+0x168>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d01b      	beq.n	80016a4 <HAL_GPIO_Init+0x104>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4a26      	ldr	r2, [pc, #152]	; (800170c <HAL_GPIO_Init+0x16c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d016      	beq.n	80016a4 <HAL_GPIO_Init+0x104>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4a25      	ldr	r2, [pc, #148]	; (8001710 <HAL_GPIO_Init+0x170>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d011      	beq.n	80016a4 <HAL_GPIO_Init+0x104>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4a23      	ldr	r2, [pc, #140]	; (8001714 <HAL_GPIO_Init+0x174>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d00c      	beq.n	80016a4 <HAL_GPIO_Init+0x104>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4a22      	ldr	r2, [pc, #136]	; (8001718 <HAL_GPIO_Init+0x178>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d007      	beq.n	80016a4 <HAL_GPIO_Init+0x104>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b03      	cmp	r3, #3
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x104>
 800169c:	21bd      	movs	r1, #189	; 0xbd
 800169e:	4817      	ldr	r0, [pc, #92]	; (80016fc <HAL_GPIO_Init+0x15c>)
 80016a0:	f7ff f861 	bl	8000766 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 821a 	beq.w	8001ae2 <HAL_GPIO_Init+0x542>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	f000 8215 	beq.w	8001ae2 <HAL_GPIO_Init+0x542>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	f000 8210 	beq.w	8001ae2 <HAL_GPIO_Init+0x542>
 80016c2:	21be      	movs	r1, #190	; 0xbe
 80016c4:	480d      	ldr	r0, [pc, #52]	; (80016fc <HAL_GPIO_Init+0x15c>)
 80016c6:	f7ff f84e 	bl	8000766 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016ca:	e20a      	b.n	8001ae2 <HAL_GPIO_Init+0x542>
 80016cc:	58000080 	.word	0x58000080
 80016d0:	58020000 	.word	0x58020000
 80016d4:	58020400 	.word	0x58020400
 80016d8:	58020800 	.word	0x58020800
 80016dc:	58020c00 	.word	0x58020c00
 80016e0:	58021000 	.word	0x58021000
 80016e4:	58021400 	.word	0x58021400
 80016e8:	58021800 	.word	0x58021800
 80016ec:	58021c00 	.word	0x58021c00
 80016f0:	58022000 	.word	0x58022000
 80016f4:	58022400 	.word	0x58022400
 80016f8:	58022800 	.word	0x58022800
 80016fc:	08006240 	.word	0x08006240
 8001700:	ffff0000 	.word	0xffff0000
 8001704:	11110000 	.word	0x11110000
 8001708:	11210000 	.word	0x11210000
 800170c:	11310000 	.word	0x11310000
 8001710:	11120000 	.word	0x11120000
 8001714:	11220000 	.word	0x11220000
 8001718:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2101      	movs	r1, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 81d4 	beq.w	8001adc <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d00b      	beq.n	8001754 <HAL_GPIO_Init+0x1b4>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d007      	beq.n	8001754 <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001748:	2b11      	cmp	r3, #17
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b12      	cmp	r3, #18
 8001752:	d144      	bne.n	80017de <HAL_GPIO_Init+0x23e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00f      	beq.n	800177c <HAL_GPIO_Init+0x1dc>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d00b      	beq.n	800177c <HAL_GPIO_Init+0x1dc>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d007      	beq.n	800177c <HAL_GPIO_Init+0x1dc>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x1dc>
 8001774:	21ce      	movs	r1, #206	; 0xce
 8001776:	4897      	ldr	r0, [pc, #604]	; (80019d4 <HAL_GPIO_Init+0x434>)
 8001778:	f7fe fff5 	bl	8000766 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017b2:	2201      	movs	r2, #1
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	f003 0201 	and.w	r2, r3, #1
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	2203      	movs	r2, #3
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x27e>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b12      	cmp	r3, #18
 800181c:	d15b      	bne.n	80018d6 <HAL_GPIO_Init+0x336>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a6d      	ldr	r2, [pc, #436]	; (80019d8 <HAL_GPIO_Init+0x438>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d02b      	beq.n	800187e <HAL_GPIO_Init+0x2de>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a6c      	ldr	r2, [pc, #432]	; (80019dc <HAL_GPIO_Init+0x43c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d027      	beq.n	800187e <HAL_GPIO_Init+0x2de>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a6b      	ldr	r2, [pc, #428]	; (80019e0 <HAL_GPIO_Init+0x440>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d023      	beq.n	800187e <HAL_GPIO_Init+0x2de>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a6a      	ldr	r2, [pc, #424]	; (80019e4 <HAL_GPIO_Init+0x444>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d01f      	beq.n	800187e <HAL_GPIO_Init+0x2de>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a69      	ldr	r2, [pc, #420]	; (80019e8 <HAL_GPIO_Init+0x448>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d01b      	beq.n	800187e <HAL_GPIO_Init+0x2de>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a68      	ldr	r2, [pc, #416]	; (80019ec <HAL_GPIO_Init+0x44c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d017      	beq.n	800187e <HAL_GPIO_Init+0x2de>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a67      	ldr	r2, [pc, #412]	; (80019f0 <HAL_GPIO_Init+0x450>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d013      	beq.n	800187e <HAL_GPIO_Init+0x2de>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a66      	ldr	r2, [pc, #408]	; (80019f4 <HAL_GPIO_Init+0x454>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d00f      	beq.n	800187e <HAL_GPIO_Init+0x2de>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a65      	ldr	r2, [pc, #404]	; (80019f8 <HAL_GPIO_Init+0x458>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00b      	beq.n	800187e <HAL_GPIO_Init+0x2de>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a64      	ldr	r2, [pc, #400]	; (80019fc <HAL_GPIO_Init+0x45c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <HAL_GPIO_Init+0x2de>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a63      	ldr	r2, [pc, #396]	; (8001a00 <HAL_GPIO_Init+0x460>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x2de>
 8001876:	21e6      	movs	r1, #230	; 0xe6
 8001878:	4856      	ldr	r0, [pc, #344]	; (80019d4 <HAL_GPIO_Init+0x434>)
 800187a:	f7fe ff74 	bl	8000766 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b0f      	cmp	r3, #15
 8001884:	d903      	bls.n	800188e <HAL_GPIO_Init+0x2ee>
 8001886:	21e7      	movs	r1, #231	; 0xe7
 8001888:	4852      	ldr	r0, [pc, #328]	; (80019d4 <HAL_GPIO_Init+0x434>)
 800188a:	f7fe ff6c 	bl	8000766 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	08da      	lsrs	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3208      	adds	r2, #8
 8001896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	220f      	movs	r2, #15
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	08da      	lsrs	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3208      	adds	r2, #8
 80018d0:	69b9      	ldr	r1, [r7, #24]
 80018d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0203 	and.w	r2, r3, #3
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80e2 	beq.w	8001adc <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001918:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <HAL_GPIO_Init+0x464>)
 800191a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800191e:	4a39      	ldr	r2, [pc, #228]	; (8001a04 <HAL_GPIO_Init+0x464>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001928:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <HAL_GPIO_Init+0x464>)
 800192a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001936:	4a34      	ldr	r2, [pc, #208]	; (8001a08 <HAL_GPIO_Init+0x468>)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3302      	adds	r3, #2
 800193e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	220f      	movs	r2, #15
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a1e      	ldr	r2, [pc, #120]	; (80019d8 <HAL_GPIO_Init+0x438>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d054      	beq.n	8001a0c <HAL_GPIO_Init+0x46c>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a1d      	ldr	r2, [pc, #116]	; (80019dc <HAL_GPIO_Init+0x43c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d031      	beq.n	80019ce <HAL_GPIO_Init+0x42e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <HAL_GPIO_Init+0x440>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d02b      	beq.n	80019ca <HAL_GPIO_Init+0x42a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a1b      	ldr	r2, [pc, #108]	; (80019e4 <HAL_GPIO_Init+0x444>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d025      	beq.n	80019c6 <HAL_GPIO_Init+0x426>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a1a      	ldr	r2, [pc, #104]	; (80019e8 <HAL_GPIO_Init+0x448>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01f      	beq.n	80019c2 <HAL_GPIO_Init+0x422>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a19      	ldr	r2, [pc, #100]	; (80019ec <HAL_GPIO_Init+0x44c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d019      	beq.n	80019be <HAL_GPIO_Init+0x41e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <HAL_GPIO_Init+0x450>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_Init+0x41a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <HAL_GPIO_Init+0x454>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00d      	beq.n	80019b6 <HAL_GPIO_Init+0x416>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <HAL_GPIO_Init+0x458>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d007      	beq.n	80019b2 <HAL_GPIO_Init+0x412>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a15      	ldr	r2, [pc, #84]	; (80019fc <HAL_GPIO_Init+0x45c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_GPIO_Init+0x40e>
 80019aa:	2309      	movs	r3, #9
 80019ac:	e02f      	b.n	8001a0e <HAL_GPIO_Init+0x46e>
 80019ae:	230a      	movs	r3, #10
 80019b0:	e02d      	b.n	8001a0e <HAL_GPIO_Init+0x46e>
 80019b2:	2308      	movs	r3, #8
 80019b4:	e02b      	b.n	8001a0e <HAL_GPIO_Init+0x46e>
 80019b6:	2307      	movs	r3, #7
 80019b8:	e029      	b.n	8001a0e <HAL_GPIO_Init+0x46e>
 80019ba:	2306      	movs	r3, #6
 80019bc:	e027      	b.n	8001a0e <HAL_GPIO_Init+0x46e>
 80019be:	2305      	movs	r3, #5
 80019c0:	e025      	b.n	8001a0e <HAL_GPIO_Init+0x46e>
 80019c2:	2304      	movs	r3, #4
 80019c4:	e023      	b.n	8001a0e <HAL_GPIO_Init+0x46e>
 80019c6:	2303      	movs	r3, #3
 80019c8:	e021      	b.n	8001a0e <HAL_GPIO_Init+0x46e>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e01f      	b.n	8001a0e <HAL_GPIO_Init+0x46e>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e01d      	b.n	8001a0e <HAL_GPIO_Init+0x46e>
 80019d2:	bf00      	nop
 80019d4:	08006240 	.word	0x08006240
 80019d8:	58020000 	.word	0x58020000
 80019dc:	58020400 	.word	0x58020400
 80019e0:	58020800 	.word	0x58020800
 80019e4:	58020c00 	.word	0x58020c00
 80019e8:	58021000 	.word	0x58021000
 80019ec:	58021400 	.word	0x58021400
 80019f0:	58021800 	.word	0x58021800
 80019f4:	58021c00 	.word	0x58021c00
 80019f8:	58022000 	.word	0x58022000
 80019fc:	58022400 	.word	0x58022400
 8001a00:	58022800 	.word	0x58022800
 8001a04:	58024400 	.word	0x58024400
 8001a08:	58000400 	.word	0x58000400
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	f002 0203 	and.w	r2, r2, #3
 8001a14:	0092      	lsls	r2, r2, #2
 8001a16:	4093      	lsls	r3, r2
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a1e:	4937      	ldr	r1, [pc, #220]	; (8001afc <HAL_GPIO_Init+0x55c>)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f47f ae15 	bne.w	800171c <HAL_GPIO_Init+0x17c>
  }
}
 8001af2:	bf00      	nop
 8001af4:	bf00      	nop
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	58000400 	.word	0x58000400

08001b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001b10:	887b      	ldrh	r3, [r7, #2]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d004      	beq.n	8001b20 <HAL_GPIO_WritePin+0x20>
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_GPIO_WritePin+0x60>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d004      	beq.n	8001b2a <HAL_GPIO_WritePin+0x2a>
 8001b20:	f240 11ad 	movw	r1, #429	; 0x1ad
 8001b24:	480f      	ldr	r0, [pc, #60]	; (8001b64 <HAL_GPIO_WritePin+0x64>)
 8001b26:	f7fe fe1e 	bl	8000766 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001b2a:	787b      	ldrb	r3, [r7, #1]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <HAL_GPIO_WritePin+0x40>
 8001b30:	787b      	ldrb	r3, [r7, #1]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d004      	beq.n	8001b40 <HAL_GPIO_WritePin+0x40>
 8001b36:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8001b3a:	480a      	ldr	r0, [pc, #40]	; (8001b64 <HAL_GPIO_WritePin+0x64>)
 8001b3c:	f7fe fe13 	bl	8000766 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001b40:	787b      	ldrb	r3, [r7, #1]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b4c:	e003      	b.n	8001b56 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	041a      	lsls	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	619a      	str	r2, [r3, #24]
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	ffff0000 	.word	0xffff0000
 8001b64:	08006240 	.word	0x08006240

08001b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d008      	beq.n	8001b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f804 	bl	8001b9c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d007      	beq.n	8001bd2 <HAL_PWREx_ConfigSupply+0x1e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d004      	beq.n	8001bd2 <HAL_PWREx_ConfigSupply+0x1e>
 8001bc8:	f240 113f 	movw	r1, #319	; 0x13f
 8001bcc:	481a      	ldr	r0, [pc, #104]	; (8001c38 <HAL_PWREx_ConfigSupply+0x84>)
 8001bce:	f7fe fdca 	bl	8000766 <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_PWREx_ConfigSupply+0x88>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d00a      	beq.n	8001bf4 <HAL_PWREx_ConfigSupply+0x40>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <HAL_PWREx_ConfigSupply+0x88>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_PWREx_ConfigSupply+0x3c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e01f      	b.n	8001c30 <HAL_PWREx_ConfigSupply+0x7c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e01d      	b.n	8001c30 <HAL_PWREx_ConfigSupply+0x7c>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_PWREx_ConfigSupply+0x88>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f023 0207 	bic.w	r2, r3, #7
 8001bfc:	490f      	ldr	r1, [pc, #60]	; (8001c3c <HAL_PWREx_ConfigSupply+0x88>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c04:	f7ff f93e 	bl	8000e84 <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c0a:	e009      	b.n	8001c20 <HAL_PWREx_ConfigSupply+0x6c>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c0c:	f7ff f93a 	bl	8000e84 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c1a:	d901      	bls.n	8001c20 <HAL_PWREx_ConfigSupply+0x6c>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e007      	b.n	8001c30 <HAL_PWREx_ConfigSupply+0x7c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_PWREx_ConfigSupply+0x88>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c2c:	d1ee      	bne.n	8001c0c <HAL_PWREx_ConfigSupply+0x58>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	0800627c 	.word	0x0800627c
 8001c3c:	58024800 	.word	0x58024800

08001c40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08c      	sub	sp, #48	; 0x30
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f000 bd47 	b.w	80026e2 <HAL_RCC_OscConfig+0xaa2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d028      	beq.n	8001cae <HAL_RCC_OscConfig+0x6e>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d122      	bne.n	8001cae <HAL_RCC_OscConfig+0x6e>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d11c      	bne.n	8001cae <HAL_RCC_OscConfig+0x6e>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d116      	bne.n	8001cae <HAL_RCC_OscConfig+0x6e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d110      	bne.n	8001cae <HAL_RCC_OscConfig+0x6e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10a      	bne.n	8001cae <HAL_RCC_OscConfig+0x6e>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d104      	bne.n	8001cae <HAL_RCC_OscConfig+0x6e>
 8001ca4:	f240 11a3 	movw	r1, #419	; 0x1a3
 8001ca8:	489b      	ldr	r0, [pc, #620]	; (8001f18 <HAL_RCC_OscConfig+0x2d8>)
 8001caa:	f7fe fd5c 	bl	8000766 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 809d 	beq.w	8001df6 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00e      	beq.n	8001ce2 <HAL_RCC_OscConfig+0xa2>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ccc:	d009      	beq.n	8001ce2 <HAL_RCC_OscConfig+0xa2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd6:	d004      	beq.n	8001ce2 <HAL_RCC_OscConfig+0xa2>
 8001cd8:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8001cdc:	488e      	ldr	r0, [pc, #568]	; (8001f18 <HAL_RCC_OscConfig+0x2d8>)
 8001cde:	f7fe fd42 	bl	8000766 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce2:	4b8e      	ldr	r3, [pc, #568]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cec:	4b8b      	ldr	r3, [pc, #556]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf4:	2b10      	cmp	r3, #16
 8001cf6:	d007      	beq.n	8001d08 <HAL_RCC_OscConfig+0xc8>
 8001cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfa:	2b18      	cmp	r3, #24
 8001cfc:	d111      	bne.n	8001d22 <HAL_RCC_OscConfig+0xe2>
 8001cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d10c      	bne.n	8001d22 <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	4b84      	ldr	r3, [pc, #528]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d06f      	beq.n	8001df4 <HAL_RCC_OscConfig+0x1b4>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d16b      	bne.n	8001df4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f000 bce0 	b.w	80026e2 <HAL_RCC_OscConfig+0xaa2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCC_OscConfig+0xfa>
 8001d2c:	4b7b      	ldr	r3, [pc, #492]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a7a      	ldr	r2, [pc, #488]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	e02e      	b.n	8001d98 <HAL_RCC_OscConfig+0x158>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x11c>
 8001d42:	4b76      	ldr	r3, [pc, #472]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a75      	ldr	r2, [pc, #468]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b73      	ldr	r3, [pc, #460]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a72      	ldr	r2, [pc, #456]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e01d      	b.n	8001d98 <HAL_RCC_OscConfig+0x158>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x140>
 8001d66:	4b6d      	ldr	r3, [pc, #436]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a6c      	ldr	r2, [pc, #432]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a69      	ldr	r2, [pc, #420]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e00b      	b.n	8001d98 <HAL_RCC_OscConfig+0x158>
 8001d80:	4b66      	ldr	r3, [pc, #408]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a65      	ldr	r2, [pc, #404]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b63      	ldr	r3, [pc, #396]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a62      	ldr	r2, [pc, #392]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d014      	beq.n	8001dca <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff f870 	bl	8000e84 <HAL_GetTick>
 8001da4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001da6:	e009      	b.n	8001dbc <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff f86c 	bl	8000e84 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d902      	bls.n	8001dbc <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	f000 bc93 	b.w	80026e2 <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dbc:	4b57      	ldr	r3, [pc, #348]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0ef      	beq.n	8001da8 <HAL_RCC_OscConfig+0x168>
 8001dc8:	e015      	b.n	8001df6 <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7ff f85b 	bl	8000e84 <HAL_GetTick>
 8001dce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dd0:	e009      	b.n	8001de6 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd2:	f7ff f857 	bl	8000e84 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b64      	cmp	r3, #100	; 0x64
 8001dde:	d902      	bls.n	8001de6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	f000 bc7e 	b.w	80026e2 <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001de6:	4b4d      	ldr	r3, [pc, #308]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ef      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x192>
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80d7 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x372>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d018      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1fe>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d014      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1fe>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d010      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1fe>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b09      	cmp	r3, #9
 8001e22:	d00c      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1fe>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2b11      	cmp	r3, #17
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1fe>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b19      	cmp	r3, #25
 8001e32:	d004      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1fe>
 8001e34:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001e38:	4837      	ldr	r0, [pc, #220]	; (8001f18 <HAL_RCC_OscConfig+0x2d8>)
 8001e3a:	f7fe fc94 	bl	8000766 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	2b7f      	cmp	r3, #127	; 0x7f
 8001e44:	d904      	bls.n	8001e50 <HAL_RCC_OscConfig+0x210>
 8001e46:	f240 11dd 	movw	r1, #477	; 0x1dd
 8001e4a:	4833      	ldr	r0, [pc, #204]	; (8001f18 <HAL_RCC_OscConfig+0x2d8>)
 8001e4c:	f7fe fc8b 	bl	8000766 <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e50:	4b32      	ldr	r3, [pc, #200]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e5a:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d007      	beq.n	8001e76 <HAL_RCC_OscConfig+0x236>
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	2b18      	cmp	r3, #24
 8001e6a:	d13b      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x2a4>
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d136      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x2a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e76:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <HAL_RCC_OscConfig+0x250>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <HAL_RCC_OscConfig+0x250>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f000 bc29 	b.w	80026e2 <HAL_RCC_OscConfig+0xaa2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	f7ff f828 	bl	8000ee4 <HAL_GetREVID>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d817      	bhi.n	8001ece <HAL_RCC_OscConfig+0x28e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	2b40      	cmp	r3, #64	; 0x40
 8001ea4:	d108      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x278>
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001eae:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb6:	e07c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x372>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	031b      	lsls	r3, r3, #12
 8001ec6:	4915      	ldr	r1, [pc, #84]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ecc:	e071      	b.n	8001fb2 <HAL_RCC_OscConfig+0x372>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	061b      	lsls	r3, r3, #24
 8001edc:	490f      	ldr	r1, [pc, #60]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee2:	e066      	b.n	8001fb2 <HAL_RCC_OscConfig+0x372>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d049      	beq.n	8001f80 <HAL_RCC_OscConfig+0x340>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 0219 	bic.w	r2, r3, #25
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4908      	ldr	r1, [pc, #32]	; (8001f1c <HAL_RCC_OscConfig+0x2dc>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7fe ffc1 	bl	8000e84 <HAL_GetTick>
 8001f02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f04:	e00c      	b.n	8001f20 <HAL_RCC_OscConfig+0x2e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f06:	f7fe ffbd 	bl	8000e84 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d905      	bls.n	8001f20 <HAL_RCC_OscConfig+0x2e0>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e3e4      	b.n	80026e2 <HAL_RCC_OscConfig+0xaa2>
 8001f18:	080062b8 	.word	0x080062b8
 8001f1c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f20:	4ba4      	ldr	r3, [pc, #656]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0ec      	beq.n	8001f06 <HAL_RCC_OscConfig+0x2c6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2c:	f7fe ffda 	bl	8000ee4 <HAL_GetREVID>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d817      	bhi.n	8001f6a <HAL_RCC_OscConfig+0x32a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b40      	cmp	r3, #64	; 0x40
 8001f40:	d108      	bne.n	8001f54 <HAL_RCC_OscConfig+0x314>
 8001f42:	4b9c      	ldr	r3, [pc, #624]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001f4a:	4a9a      	ldr	r2, [pc, #616]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f50:	6053      	str	r3, [r2, #4]
 8001f52:	e02e      	b.n	8001fb2 <HAL_RCC_OscConfig+0x372>
 8001f54:	4b97      	ldr	r3, [pc, #604]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	031b      	lsls	r3, r3, #12
 8001f62:	4994      	ldr	r1, [pc, #592]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
 8001f68:	e023      	b.n	8001fb2 <HAL_RCC_OscConfig+0x372>
 8001f6a:	4b92      	ldr	r3, [pc, #584]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	061b      	lsls	r3, r3, #24
 8001f78:	498e      	ldr	r1, [pc, #568]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
 8001f7e:	e018      	b.n	8001fb2 <HAL_RCC_OscConfig+0x372>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f80:	4b8c      	ldr	r3, [pc, #560]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a8b      	ldr	r2, [pc, #556]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8001f86:	f023 0301 	bic.w	r3, r3, #1
 8001f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8c:	f7fe ff7a 	bl	8000e84 <HAL_GetTick>
 8001f90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f94:	f7fe ff76 	bl	8000e84 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e39d      	b.n	80026e2 <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fa6:	4b83      	ldr	r3, [pc, #524]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x354>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80bf 	beq.w	800213e <HAL_RCC_OscConfig+0x4fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCC_OscConfig+0x39a>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	2b80      	cmp	r3, #128	; 0x80
 8001fce:	d004      	beq.n	8001fda <HAL_RCC_OscConfig+0x39a>
 8001fd0:	f240 211f 	movw	r1, #543	; 0x21f
 8001fd4:	4878      	ldr	r0, [pc, #480]	; (80021b8 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	f7fe fbc6 	bl	8000766 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	2b3f      	cmp	r3, #63	; 0x3f
 8001fe0:	d904      	bls.n	8001fec <HAL_RCC_OscConfig+0x3ac>
 8001fe2:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001fe6:	4874      	ldr	r0, [pc, #464]	; (80021b8 <HAL_RCC_OscConfig+0x578>)
 8001fe8:	f7fe fbbd 	bl	8000766 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fec:	4b71      	ldr	r3, [pc, #452]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ff4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ff6:	4b6f      	ldr	r3, [pc, #444]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d007      	beq.n	8002012 <HAL_RCC_OscConfig+0x3d2>
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b18      	cmp	r3, #24
 8002006:	d13a      	bne.n	800207e <HAL_RCC_OscConfig+0x43e>
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d135      	bne.n	800207e <HAL_RCC_OscConfig+0x43e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002012:	4b68      	ldr	r3, [pc, #416]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_RCC_OscConfig+0x3ea>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	2b80      	cmp	r3, #128	; 0x80
 8002024:	d001      	beq.n	800202a <HAL_RCC_OscConfig+0x3ea>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e35b      	b.n	80026e2 <HAL_RCC_OscConfig+0xaa2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800202a:	f7fe ff5b 	bl	8000ee4 <HAL_GetREVID>
 800202e:	4603      	mov	r3, r0
 8002030:	f241 0203 	movw	r2, #4099	; 0x1003
 8002034:	4293      	cmp	r3, r2
 8002036:	d817      	bhi.n	8002068 <HAL_RCC_OscConfig+0x428>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	2b20      	cmp	r3, #32
 800203e:	d108      	bne.n	8002052 <HAL_RCC_OscConfig+0x412>
 8002040:	4b5c      	ldr	r3, [pc, #368]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002048:	4a5a      	ldr	r2, [pc, #360]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 800204a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800204e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002050:	e075      	b.n	800213e <HAL_RCC_OscConfig+0x4fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002052:	4b58      	ldr	r3, [pc, #352]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	069b      	lsls	r3, r3, #26
 8002060:	4954      	ldr	r1, [pc, #336]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002066:	e06a      	b.n	800213e <HAL_RCC_OscConfig+0x4fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002068:	4b52      	ldr	r3, [pc, #328]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	061b      	lsls	r3, r3, #24
 8002076:	494f      	ldr	r1, [pc, #316]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8002078:	4313      	orrs	r3, r2
 800207a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800207c:	e05f      	b.n	800213e <HAL_RCC_OscConfig+0x4fe>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d042      	beq.n	800210c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002086:	4b4b      	ldr	r3, [pc, #300]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a4a      	ldr	r2, [pc, #296]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 800208c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7fe fef7 	bl	8000e84 <HAL_GetTick>
 8002096:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x46c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800209a:	f7fe fef3 	bl	8000e84 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e31a      	b.n	80026e2 <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020ac:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x45a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020b8:	f7fe ff14 	bl	8000ee4 <HAL_GetREVID>
 80020bc:	4603      	mov	r3, r0
 80020be:	f241 0203 	movw	r2, #4099	; 0x1003
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d817      	bhi.n	80020f6 <HAL_RCC_OscConfig+0x4b6>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	d108      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
 80020ce:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80020d6:	4a37      	ldr	r2, [pc, #220]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 80020d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020dc:	6053      	str	r3, [r2, #4]
 80020de:	e02e      	b.n	800213e <HAL_RCC_OscConfig+0x4fe>
 80020e0:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	069b      	lsls	r3, r3, #26
 80020ee:	4931      	ldr	r1, [pc, #196]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
 80020f4:	e023      	b.n	800213e <HAL_RCC_OscConfig+0x4fe>
 80020f6:	4b2f      	ldr	r3, [pc, #188]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	061b      	lsls	r3, r3, #24
 8002104:	492b      	ldr	r1, [pc, #172]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8002106:	4313      	orrs	r3, r2
 8002108:	60cb      	str	r3, [r1, #12]
 800210a:	e018      	b.n	800213e <HAL_RCC_OscConfig+0x4fe>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800210c:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a28      	ldr	r2, [pc, #160]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8002112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7fe feb4 	bl	8000e84 <HAL_GetTick>
 800211c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x4f2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002120:	f7fe feb0 	bl	8000e84 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x4f2>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e2d7      	b.n	80026e2 <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d047      	beq.n	80021da <HAL_RCC_OscConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d008      	beq.n	8002164 <HAL_RCC_OscConfig+0x524>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d004      	beq.n	8002164 <HAL_RCC_OscConfig+0x524>
 800215a:	f240 2161 	movw	r1, #609	; 0x261
 800215e:	4816      	ldr	r0, [pc, #88]	; (80021b8 <HAL_RCC_OscConfig+0x578>)
 8002160:	f7fe fb01 	bl	8000766 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d019      	beq.n	80021a0 <HAL_RCC_OscConfig+0x560>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 800216e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002170:	4a10      	ldr	r2, [pc, #64]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002178:	f7fe fe84 	bl	8000e84 <HAL_GetTick>
 800217c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002180:	f7fe fe80 	bl	8000e84 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e2a7      	b.n	80026e2 <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 8002194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x540>
 800219e:	e01c      	b.n	80021da <HAL_RCC_OscConfig+0x59a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 80021a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a4:	4a03      	ldr	r2, [pc, #12]	; (80021b4 <HAL_RCC_OscConfig+0x574>)
 80021a6:	f023 0301 	bic.w	r3, r3, #1
 80021aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7fe fe6a 	bl	8000e84 <HAL_GetTick>
 80021b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021b2:	e00c      	b.n	80021ce <HAL_RCC_OscConfig+0x58e>
 80021b4:	58024400 	.word	0x58024400
 80021b8:	080062b8 	.word	0x080062b8
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021bc:	f7fe fe62 	bl	8000e84 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x58e>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e289      	b.n	80026e2 <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021ce:	4b71      	ldr	r3, [pc, #452]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 80021d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x57c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d043      	beq.n	800226e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <HAL_RCC_OscConfig+0x5c0>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d004      	beq.n	8002200 <HAL_RCC_OscConfig+0x5c0>
 80021f6:	f44f 7123 	mov.w	r1, #652	; 0x28c
 80021fa:	4867      	ldr	r0, [pc, #412]	; (8002398 <HAL_RCC_OscConfig+0x758>)
 80021fc:	f7fe fab3 	bl	8000766 <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d019      	beq.n	800223c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002208:	4b62      	ldr	r3, [pc, #392]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a61      	ldr	r2, [pc, #388]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 800220e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002212:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002214:	f7fe fe36 	bl	8000e84 <HAL_GetTick>
 8002218:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x5ee>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800221c:	f7fe fe32 	bl	8000e84 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e259      	b.n	80026e2 <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800222e:	4b59      	ldr	r3, [pc, #356]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x5dc>
 800223a:	e018      	b.n	800226e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800223c:	4b55      	ldr	r3, [pc, #340]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a54      	ldr	r2, [pc, #336]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 8002242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002246:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002248:	f7fe fe1c 	bl	8000e84 <HAL_GetTick>
 800224c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002250:	f7fe fe18 	bl	8000e84 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e23f      	b.n	80026e2 <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002262:	4b4c      	ldr	r3, [pc, #304]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8098 	beq.w	80023ac <HAL_RCC_OscConfig+0x76c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00c      	beq.n	800229e <HAL_RCC_OscConfig+0x65e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d008      	beq.n	800229e <HAL_RCC_OscConfig+0x65e>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b05      	cmp	r3, #5
 8002292:	d004      	beq.n	800229e <HAL_RCC_OscConfig+0x65e>
 8002294:	f240 21b6 	movw	r1, #694	; 0x2b6
 8002298:	483f      	ldr	r0, [pc, #252]	; (8002398 <HAL_RCC_OscConfig+0x758>)
 800229a:	f7fe fa64 	bl	8000766 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800229e:	4b3f      	ldr	r3, [pc, #252]	; (800239c <HAL_RCC_OscConfig+0x75c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a3e      	ldr	r2, [pc, #248]	; (800239c <HAL_RCC_OscConfig+0x75c>)
 80022a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022aa:	f7fe fdeb 	bl	8000e84 <HAL_GetTick>
 80022ae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x684>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7fe fde7 	bl	8000e84 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	; 0x64
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x684>
      {
        return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e20e      	b.n	80026e2 <HAL_RCC_OscConfig+0xaa2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022c4:	4b35      	ldr	r3, [pc, #212]	; (800239c <HAL_RCC_OscConfig+0x75c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x672>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x6a6>
 80022d8:	4b2e      	ldr	r3, [pc, #184]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	4a2d      	ldr	r2, [pc, #180]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6713      	str	r3, [r2, #112]	; 0x70
 80022e4:	e02d      	b.n	8002342 <HAL_RCC_OscConfig+0x702>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x6c8>
 80022ee:	4b29      	ldr	r3, [pc, #164]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f2:	4a28      	ldr	r2, [pc, #160]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6713      	str	r3, [r2, #112]	; 0x70
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	4a25      	ldr	r2, [pc, #148]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 8002300:	f023 0304 	bic.w	r3, r3, #4
 8002304:	6713      	str	r3, [r2, #112]	; 0x70
 8002306:	e01c      	b.n	8002342 <HAL_RCC_OscConfig+0x702>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d10c      	bne.n	800232a <HAL_RCC_OscConfig+0x6ea>
 8002310:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 8002312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002314:	4a1f      	ldr	r2, [pc, #124]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	6713      	str	r3, [r2, #112]	; 0x70
 800231c:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6713      	str	r3, [r2, #112]	; 0x70
 8002328:	e00b      	b.n	8002342 <HAL_RCC_OscConfig+0x702>
 800232a:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 800232c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232e:	4a19      	ldr	r2, [pc, #100]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	6713      	str	r3, [r2, #112]	; 0x70
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233a:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d015      	beq.n	8002376 <HAL_RCC_OscConfig+0x736>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234a:	f7fe fd9b 	bl	8000e84 <HAL_GetTick>
 800234e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x728>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7fe fd97 	bl	8000e84 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e1bc      	b.n	80026e2 <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_RCC_OscConfig+0x754>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ee      	beq.n	8002352 <HAL_RCC_OscConfig+0x712>
 8002374:	e01a      	b.n	80023ac <HAL_RCC_OscConfig+0x76c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002376:	f7fe fd85 	bl	8000e84 <HAL_GetTick>
 800237a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800237c:	e010      	b.n	80023a0 <HAL_RCC_OscConfig+0x760>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7fe fd81 	bl	8000e84 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f241 3288 	movw	r2, #5000	; 0x1388
 800238c:	4293      	cmp	r3, r2
 800238e:	d907      	bls.n	80023a0 <HAL_RCC_OscConfig+0x760>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e1a6      	b.n	80026e2 <HAL_RCC_OscConfig+0xaa2>
 8002394:	58024400 	.word	0x58024400
 8002398:	080062b8 	.word	0x080062b8
 800239c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023a0:	4b9f      	ldr	r3, [pc, #636]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1e8      	bne.n	800237e <HAL_RCC_OscConfig+0x73e>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00c      	beq.n	80023ce <HAL_RCC_OscConfig+0x78e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d008      	beq.n	80023ce <HAL_RCC_OscConfig+0x78e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d004      	beq.n	80023ce <HAL_RCC_OscConfig+0x78e>
 80023c4:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 80023c8:	4896      	ldr	r0, [pc, #600]	; (8002624 <HAL_RCC_OscConfig+0x9e4>)
 80023ca:	f7fe f9cc 	bl	8000766 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8184 	beq.w	80026e0 <HAL_RCC_OscConfig+0xaa0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80023d8:	4b91      	ldr	r3, [pc, #580]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023e0:	2b18      	cmp	r3, #24
 80023e2:	f000 813f 	beq.w	8002664 <HAL_RCC_OscConfig+0xa24>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	f040 8120 	bne.w	8002630 <HAL_RCC_OscConfig+0x9f0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d010      	beq.n	800241a <HAL_RCC_OscConfig+0x7da>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00c      	beq.n	800241a <HAL_RCC_OscConfig+0x7da>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	2b03      	cmp	r3, #3
 8002406:	d008      	beq.n	800241a <HAL_RCC_OscConfig+0x7da>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	2b02      	cmp	r3, #2
 800240e:	d004      	beq.n	800241a <HAL_RCC_OscConfig+0x7da>
 8002410:	f240 21f1 	movw	r1, #753	; 0x2f1
 8002414:	4883      	ldr	r0, [pc, #524]	; (8002624 <HAL_RCC_OscConfig+0x9e4>)
 8002416:	f7fe f9a6 	bl	8000766 <assert_failed>
        assert_param(IS_RCC_PLLRGE_VALUE(RCC_OscInitStruct->PLL.PLLRGE));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d010      	beq.n	8002444 <HAL_RCC_OscConfig+0x804>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	2b04      	cmp	r3, #4
 8002428:	d00c      	beq.n	8002444 <HAL_RCC_OscConfig+0x804>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	2b08      	cmp	r3, #8
 8002430:	d008      	beq.n	8002444 <HAL_RCC_OscConfig+0x804>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d004      	beq.n	8002444 <HAL_RCC_OscConfig+0x804>
 800243a:	f240 21f2 	movw	r1, #754	; 0x2f2
 800243e:	4879      	ldr	r0, [pc, #484]	; (8002624 <HAL_RCC_OscConfig+0x9e4>)
 8002440:	f7fe f991 	bl	8000766 <assert_failed>
        assert_param(IS_RCC_PLLVCO_VALUE(RCC_OscInitStruct->PLL.PLLVCOSEL));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCC_OscConfig+0x81e>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002450:	2b02      	cmp	r3, #2
 8002452:	d004      	beq.n	800245e <HAL_RCC_OscConfig+0x81e>
 8002454:	f240 21f3 	movw	r1, #755	; 0x2f3
 8002458:	4872      	ldr	r0, [pc, #456]	; (8002624 <HAL_RCC_OscConfig+0x9e4>)
 800245a:	f7fe f984 	bl	8000766 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_RCC_OscConfig+0x82e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	2b3f      	cmp	r3, #63	; 0x3f
 800246c:	d904      	bls.n	8002478 <HAL_RCC_OscConfig+0x838>
 800246e:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8002472:	486c      	ldr	r0, [pc, #432]	; (8002624 <HAL_RCC_OscConfig+0x9e4>)
 8002474:	f7fe f977 	bl	8000766 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	2b03      	cmp	r3, #3
 800247e:	d904      	bls.n	800248a <HAL_RCC_OscConfig+0x84a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002488:	d904      	bls.n	8002494 <HAL_RCC_OscConfig+0x854>
 800248a:	f240 21f5 	movw	r1, #757	; 0x2f5
 800248e:	4865      	ldr	r0, [pc, #404]	; (8002624 <HAL_RCC_OscConfig+0x9e4>)
 8002490:	f7fe f969 	bl	8000766 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_RCC_OscConfig+0x864>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a0:	2b80      	cmp	r3, #128	; 0x80
 80024a2:	d904      	bls.n	80024ae <HAL_RCC_OscConfig+0x86e>
 80024a4:	f240 21f6 	movw	r1, #758	; 0x2f6
 80024a8:	485e      	ldr	r0, [pc, #376]	; (8002624 <HAL_RCC_OscConfig+0x9e4>)
 80024aa:	f7fe f95c 	bl	8000766 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_RCC_OscConfig+0x87e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	2b80      	cmp	r3, #128	; 0x80
 80024bc:	d904      	bls.n	80024c8 <HAL_RCC_OscConfig+0x888>
 80024be:	f240 21f7 	movw	r1, #759	; 0x2f7
 80024c2:	4858      	ldr	r0, [pc, #352]	; (8002624 <HAL_RCC_OscConfig+0x9e4>)
 80024c4:	f7fe f94f 	bl	8000766 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_RCC_OscConfig+0x898>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d4:	2b80      	cmp	r3, #128	; 0x80
 80024d6:	d904      	bls.n	80024e2 <HAL_RCC_OscConfig+0x8a2>
 80024d8:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 80024dc:	4851      	ldr	r0, [pc, #324]	; (8002624 <HAL_RCC_OscConfig+0x9e4>)
 80024de:	f7fe f942 	bl	8000766 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ea:	d304      	bcc.n	80024f6 <HAL_RCC_OscConfig+0x8b6>
 80024ec:	f240 21f9 	movw	r1, #761	; 0x2f9
 80024f0:	484c      	ldr	r0, [pc, #304]	; (8002624 <HAL_RCC_OscConfig+0x9e4>)
 80024f2:	f7fe f938 	bl	8000766 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f6:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a49      	ldr	r2, [pc, #292]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80024fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002502:	f7fe fcbf 	bl	8000e84 <HAL_GetTick>
 8002506:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x8dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250a:	f7fe fcbb 	bl	8000e84 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x8dc>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e0e2      	b.n	80026e2 <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800251c:	4b40      	ldr	r3, [pc, #256]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f0      	bne.n	800250a <HAL_RCC_OscConfig+0x8ca>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002528:	4b3d      	ldr	r3, [pc, #244]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 800252a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800252c:	4b3e      	ldr	r3, [pc, #248]	; (8002628 <HAL_RCC_OscConfig+0x9e8>)
 800252e:	4013      	ands	r3, r2
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002538:	0112      	lsls	r2, r2, #4
 800253a:	430a      	orrs	r2, r1
 800253c:	4938      	ldr	r1, [pc, #224]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 800253e:	4313      	orrs	r3, r2
 8002540:	628b      	str	r3, [r1, #40]	; 0x28
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	3b01      	subs	r3, #1
 8002548:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	3b01      	subs	r3, #1
 8002552:	025b      	lsls	r3, r3, #9
 8002554:	b29b      	uxth	r3, r3
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255c:	3b01      	subs	r3, #1
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	3b01      	subs	r3, #1
 800256c:	061b      	lsls	r3, r3, #24
 800256e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002572:	492b      	ldr	r1, [pc, #172]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 8002574:	4313      	orrs	r3, r2
 8002576:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002578:	4b29      	ldr	r3, [pc, #164]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	4a28      	ldr	r2, [pc, #160]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 8002586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002588:	4b28      	ldr	r3, [pc, #160]	; (800262c <HAL_RCC_OscConfig+0x9ec>)
 800258a:	4013      	ands	r3, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002590:	00d2      	lsls	r2, r2, #3
 8002592:	4923      	ldr	r1, [pc, #140]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 8002594:	4313      	orrs	r3, r2
 8002596:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f023 020c 	bic.w	r2, r3, #12
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	491e      	ldr	r1, [pc, #120]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80025aa:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	f023 0202 	bic.w	r2, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	491a      	ldr	r1, [pc, #104]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80025bc:	4b18      	ldr	r3, [pc, #96]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	4a17      	ldr	r2, [pc, #92]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80025c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025c8:	4b15      	ldr	r3, [pc, #84]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	4a14      	ldr	r2, [pc, #80]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80025ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	4a11      	ldr	r2, [pc, #68]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80025da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 80025f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe fc44 	bl	8000e84 <HAL_GetTick>
 80025fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002600:	f7fe fc40 	bl	8000e84 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e067      	b.n	80026e2 <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002612:	4b03      	ldr	r3, [pc, #12]	; (8002620 <HAL_RCC_OscConfig+0x9e0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x9c0>
 800261e:	e05f      	b.n	80026e0 <HAL_RCC_OscConfig+0xaa0>
 8002620:	58024400 	.word	0x58024400
 8002624:	080062b8 	.word	0x080062b8
 8002628:	fffffc0c 	.word	0xfffffc0c
 800262c:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002630:	4b2e      	ldr	r3, [pc, #184]	; (80026ec <HAL_RCC_OscConfig+0xaac>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a2d      	ldr	r2, [pc, #180]	; (80026ec <HAL_RCC_OscConfig+0xaac>)
 8002636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800263a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fc22 	bl	8000e84 <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0xa16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002644:	f7fe fc1e 	bl	8000e84 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0xa16>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e045      	b.n	80026e2 <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002656:	4b25      	ldr	r3, [pc, #148]	; (80026ec <HAL_RCC_OscConfig+0xaac>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0xa04>
 8002662:	e03d      	b.n	80026e0 <HAL_RCC_OscConfig+0xaa0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002664:	4b21      	ldr	r3, [pc, #132]	; (80026ec <HAL_RCC_OscConfig+0xaac>)
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800266a:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_RCC_OscConfig+0xaac>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	2b01      	cmp	r3, #1
 8002676:	d031      	beq.n	80026dc <HAL_RCC_OscConfig+0xa9c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f003 0203 	and.w	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d12a      	bne.n	80026dc <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d122      	bne.n	80026dc <HAL_RCC_OscConfig+0xa9c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d11a      	bne.n	80026dc <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	0a5b      	lsrs	r3, r3, #9
 80026aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d111      	bne.n	80026dc <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	0c1b      	lsrs	r3, r3, #16
 80026bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d108      	bne.n	80026dc <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	0e1b      	lsrs	r3, r3, #24
 80026ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_OscConfig+0xaa0>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0xaa2>
      }
    }
  }
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3730      	adds	r7, #48	; 0x30
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	58024400 	.word	0x58024400

080026f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e354      	b.n	8002dae <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_RCC_ClockConfig+0x24>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b3f      	cmp	r3, #63	; 0x3f
 8002712:	d904      	bls.n	800271e <HAL_RCC_ClockConfig+0x2e>
 8002714:	f240 3186 	movw	r1, #902	; 0x386
 8002718:	4827      	ldr	r0, [pc, #156]	; (80027b8 <HAL_RCC_ClockConfig+0xc8>)
 800271a:	f7fe f824 	bl	8000766 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d031      	beq.n	8002788 <HAL_RCC_ClockConfig+0x98>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d02e      	beq.n	8002788 <HAL_RCC_ClockConfig+0x98>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d02b      	beq.n	8002788 <HAL_RCC_ClockConfig+0x98>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b03      	cmp	r3, #3
 8002734:	d028      	beq.n	8002788 <HAL_RCC_ClockConfig+0x98>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b04      	cmp	r3, #4
 800273a:	d025      	beq.n	8002788 <HAL_RCC_ClockConfig+0x98>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b05      	cmp	r3, #5
 8002740:	d022      	beq.n	8002788 <HAL_RCC_ClockConfig+0x98>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b06      	cmp	r3, #6
 8002746:	d01f      	beq.n	8002788 <HAL_RCC_ClockConfig+0x98>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	2b07      	cmp	r3, #7
 800274c:	d01c      	beq.n	8002788 <HAL_RCC_ClockConfig+0x98>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d019      	beq.n	8002788 <HAL_RCC_ClockConfig+0x98>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b09      	cmp	r3, #9
 8002758:	d016      	beq.n	8002788 <HAL_RCC_ClockConfig+0x98>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b0a      	cmp	r3, #10
 800275e:	d013      	beq.n	8002788 <HAL_RCC_ClockConfig+0x98>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2b0b      	cmp	r3, #11
 8002764:	d010      	beq.n	8002788 <HAL_RCC_ClockConfig+0x98>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b0c      	cmp	r3, #12
 800276a:	d00d      	beq.n	8002788 <HAL_RCC_ClockConfig+0x98>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b0d      	cmp	r3, #13
 8002770:	d00a      	beq.n	8002788 <HAL_RCC_ClockConfig+0x98>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b0e      	cmp	r3, #14
 8002776:	d007      	beq.n	8002788 <HAL_RCC_ClockConfig+0x98>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2b0f      	cmp	r3, #15
 800277c:	d004      	beq.n	8002788 <HAL_RCC_ClockConfig+0x98>
 800277e:	f240 3187 	movw	r1, #903	; 0x387
 8002782:	480d      	ldr	r0, [pc, #52]	; (80027b8 <HAL_RCC_ClockConfig+0xc8>)
 8002784:	f7fd ffef 	bl	8000766 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_RCC_ClockConfig+0xcc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d914      	bls.n	80027c0 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0xcc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 020f 	bic.w	r2, r3, #15
 800279e:	4907      	ldr	r1, [pc, #28]	; (80027bc <HAL_RCC_ClockConfig+0xcc>)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_RCC_ClockConfig+0xcc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e2fa      	b.n	8002dae <HAL_RCC_ClockConfig+0x6be>
 80027b8:	080062b8 	.word	0x080062b8
 80027bc:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d029      	beq.n	8002820 <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	4b9a      	ldr	r3, [pc, #616]	; (8002a3c <HAL_RCC_ClockConfig+0x34c>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027d8:	429a      	cmp	r2, r3
 80027da:	d921      	bls.n	8002820 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d014      	beq.n	800280e <HAL_RCC_ClockConfig+0x11e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	d010      	beq.n	800280e <HAL_RCC_ClockConfig+0x11e>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b50      	cmp	r3, #80	; 0x50
 80027f2:	d00c      	beq.n	800280e <HAL_RCC_ClockConfig+0x11e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b60      	cmp	r3, #96	; 0x60
 80027fa:	d008      	beq.n	800280e <HAL_RCC_ClockConfig+0x11e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	2b70      	cmp	r3, #112	; 0x70
 8002802:	d004      	beq.n	800280e <HAL_RCC_ClockConfig+0x11e>
 8002804:	f240 31a3 	movw	r1, #931	; 0x3a3
 8002808:	488d      	ldr	r0, [pc, #564]	; (8002a40 <HAL_RCC_ClockConfig+0x350>)
 800280a:	f7fd ffac 	bl	8000766 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800280e:	4b8b      	ldr	r3, [pc, #556]	; (8002a3c <HAL_RCC_ClockConfig+0x34c>)
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	4988      	ldr	r1, [pc, #544]	; (8002a3c <HAL_RCC_ClockConfig+0x34c>)
 800281c:	4313      	orrs	r3, r2
 800281e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d029      	beq.n	8002880 <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	4b82      	ldr	r3, [pc, #520]	; (8002a3c <HAL_RCC_ClockConfig+0x34c>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002838:	429a      	cmp	r2, r3
 800283a:	d921      	bls.n	8002880 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d014      	beq.n	800286e <HAL_RCC_ClockConfig+0x17e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d010      	beq.n	800286e <HAL_RCC_ClockConfig+0x17e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	2b50      	cmp	r3, #80	; 0x50
 8002852:	d00c      	beq.n	800286e <HAL_RCC_ClockConfig+0x17e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	2b60      	cmp	r3, #96	; 0x60
 800285a:	d008      	beq.n	800286e <HAL_RCC_ClockConfig+0x17e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	2b70      	cmp	r3, #112	; 0x70
 8002862:	d004      	beq.n	800286e <HAL_RCC_ClockConfig+0x17e>
 8002864:	f240 31b5 	movw	r1, #949	; 0x3b5
 8002868:	4875      	ldr	r0, [pc, #468]	; (8002a40 <HAL_RCC_ClockConfig+0x350>)
 800286a:	f7fd ff7c 	bl	8000766 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800286e:	4b73      	ldr	r3, [pc, #460]	; (8002a3c <HAL_RCC_ClockConfig+0x34c>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	4970      	ldr	r1, [pc, #448]	; (8002a3c <HAL_RCC_ClockConfig+0x34c>)
 800287c:	4313      	orrs	r3, r2
 800287e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	d02d      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699a      	ldr	r2, [r3, #24]
 8002890:	4b6a      	ldr	r3, [pc, #424]	; (8002a3c <HAL_RCC_ClockConfig+0x34c>)
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002898:	429a      	cmp	r2, r3
 800289a:	d925      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d018      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x1e6>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ac:	d013      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x1e6>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80028b6:	d00e      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x1e6>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028c0:	d009      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x1e6>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028ca:	d004      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x1e6>
 80028cc:	f240 31c6 	movw	r1, #966	; 0x3c6
 80028d0:	485b      	ldr	r0, [pc, #364]	; (8002a40 <HAL_RCC_ClockConfig+0x350>)
 80028d2:	f7fd ff48 	bl	8000766 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028d6:	4b59      	ldr	r3, [pc, #356]	; (8002a3c <HAL_RCC_ClockConfig+0x34c>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	4956      	ldr	r1, [pc, #344]	; (8002a3c <HAL_RCC_ClockConfig+0x34c>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d029      	beq.n	8002948 <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	4b50      	ldr	r3, [pc, #320]	; (8002a3c <HAL_RCC_ClockConfig+0x34c>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002900:	429a      	cmp	r2, r3
 8002902:	d921      	bls.n	8002948 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d014      	beq.n	8002936 <HAL_RCC_ClockConfig+0x246>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	2b40      	cmp	r3, #64	; 0x40
 8002912:	d010      	beq.n	8002936 <HAL_RCC_ClockConfig+0x246>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	2b50      	cmp	r3, #80	; 0x50
 800291a:	d00c      	beq.n	8002936 <HAL_RCC_ClockConfig+0x246>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	2b60      	cmp	r3, #96	; 0x60
 8002922:	d008      	beq.n	8002936 <HAL_RCC_ClockConfig+0x246>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	2b70      	cmp	r3, #112	; 0x70
 800292a:	d004      	beq.n	8002936 <HAL_RCC_ClockConfig+0x246>
 800292c:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 8002930:	4843      	ldr	r0, [pc, #268]	; (8002a40 <HAL_RCC_ClockConfig+0x350>)
 8002932:	f7fd ff18 	bl	8000766 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002936:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <HAL_RCC_ClockConfig+0x34c>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	493e      	ldr	r1, [pc, #248]	; (8002a3c <HAL_RCC_ClockConfig+0x34c>)
 8002944:	4313      	orrs	r3, r2
 8002946:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d039      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x2d8>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <HAL_RCC_ClockConfig+0x34c>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	429a      	cmp	r2, r3
 8002962:	d931      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d024      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x2c6>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d020      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x2c6>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b09      	cmp	r3, #9
 800297a:	d01c      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x2c6>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b0a      	cmp	r3, #10
 8002982:	d018      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x2c6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2b0b      	cmp	r3, #11
 800298a:	d014      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x2c6>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b0c      	cmp	r3, #12
 8002992:	d010      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x2c6>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b0d      	cmp	r3, #13
 800299a:	d00c      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x2c6>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b0e      	cmp	r3, #14
 80029a2:	d008      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x2c6>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b0f      	cmp	r3, #15
 80029aa:	d004      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x2c6>
 80029ac:	f240 31eb 	movw	r1, #1003	; 0x3eb
 80029b0:	4823      	ldr	r0, [pc, #140]	; (8002a40 <HAL_RCC_ClockConfig+0x350>)
 80029b2:	f7fd fed8 	bl	8000766 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b6:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <HAL_RCC_ClockConfig+0x34c>)
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	f023 020f 	bic.w	r2, r3, #15
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	491e      	ldr	r1, [pc, #120]	; (8002a3c <HAL_RCC_ClockConfig+0x34c>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80a2 	beq.w	8002b1a <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d032      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x354>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029e6:	d02d      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x354>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80029f0:	d028      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x354>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80029fa:	d023      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x354>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8002a04:	d01e      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x354>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a0e:	d019      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x354>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8002a18:	d014      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x354>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8002a22:	d00f      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x354>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a2c:	d00a      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x354>
 8002a2e:	f240 31fb 	movw	r1, #1019	; 0x3fb
 8002a32:	4803      	ldr	r0, [pc, #12]	; (8002a40 <HAL_RCC_ClockConfig+0x350>)
 8002a34:	f7fd fe97 	bl	8000766 <assert_failed>
 8002a38:	e004      	b.n	8002a44 <HAL_RCC_ClockConfig+0x354>
 8002a3a:	bf00      	nop
 8002a3c:	58024400 	.word	0x58024400
 8002a40:	080062b8 	.word	0x080062b8
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d010      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x37e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00c      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x37e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x37e>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d004      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x37e>
 8002a64:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8002a68:	4858      	ldr	r0, [pc, #352]	; (8002bcc <HAL_RCC_ClockConfig+0x4dc>)
 8002a6a:	f7fd fe7c 	bl	8000766 <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a6e:	4b58      	ldr	r3, [pc, #352]	; (8002bd0 <HAL_RCC_ClockConfig+0x4e0>)
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4955      	ldr	r1, [pc, #340]	; (8002bd0 <HAL_RCC_ClockConfig+0x4e0>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d107      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a88:	4b51      	ldr	r3, [pc, #324]	; (8002bd0 <HAL_RCC_ClockConfig+0x4e0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d121      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e18a      	b.n	8002dae <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aa0:	4b4b      	ldr	r3, [pc, #300]	; (8002bd0 <HAL_RCC_ClockConfig+0x4e0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d115      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e17e      	b.n	8002dae <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ab8:	4b45      	ldr	r3, [pc, #276]	; (8002bd0 <HAL_RCC_ClockConfig+0x4e0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e172      	b.n	8002dae <HAL_RCC_ClockConfig+0x6be>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ac8:	4b41      	ldr	r3, [pc, #260]	; (8002bd0 <HAL_RCC_ClockConfig+0x4e0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e16a      	b.n	8002dae <HAL_RCC_ClockConfig+0x6be>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ad8:	4b3d      	ldr	r3, [pc, #244]	; (8002bd0 <HAL_RCC_ClockConfig+0x4e0>)
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f023 0207 	bic.w	r2, r3, #7
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	493a      	ldr	r1, [pc, #232]	; (8002bd0 <HAL_RCC_ClockConfig+0x4e0>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aea:	f7fe f9cb 	bl	8000e84 <HAL_GetTick>
 8002aee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af2:	f7fe f9c7 	bl	8000e84 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e152      	b.n	8002dae <HAL_RCC_ClockConfig+0x6be>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b08:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_RCC_ClockConfig+0x4e0>)
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d1eb      	bne.n	8002af2 <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d039      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <HAL_RCC_ClockConfig+0x4e0>)
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d231      	bcs.n	8002b9a <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d024      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x498>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d020      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x498>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b09      	cmp	r3, #9
 8002b4c:	d01c      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x498>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b0a      	cmp	r3, #10
 8002b54:	d018      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x498>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b0b      	cmp	r3, #11
 8002b5c:	d014      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x498>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d010      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x498>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b0d      	cmp	r3, #13
 8002b6c:	d00c      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x498>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b0e      	cmp	r3, #14
 8002b74:	d008      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x498>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b0f      	cmp	r3, #15
 8002b7c:	d004      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x498>
 8002b7e:	f240 413d 	movw	r1, #1085	; 0x43d
 8002b82:	4812      	ldr	r0, [pc, #72]	; (8002bcc <HAL_RCC_ClockConfig+0x4dc>)
 8002b84:	f7fd fdef 	bl	8000766 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_RCC_ClockConfig+0x4e0>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f023 020f 	bic.w	r2, r3, #15
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	490e      	ldr	r1, [pc, #56]	; (8002bd0 <HAL_RCC_ClockConfig+0x4e0>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <HAL_RCC_ClockConfig+0x4e4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d217      	bcs.n	8002bd8 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_RCC_ClockConfig+0x4e4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 020f 	bic.w	r2, r3, #15
 8002bb0:	4908      	ldr	r1, [pc, #32]	; (8002bd4 <HAL_RCC_ClockConfig+0x4e4>)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_RCC_ClockConfig+0x4e4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d008      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0f1      	b.n	8002dae <HAL_RCC_ClockConfig+0x6be>
 8002bca:	bf00      	nop
 8002bcc:	080062b8 	.word	0x080062b8
 8002bd0:	58024400 	.word	0x58024400
 8002bd4:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d029      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x548>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	4b73      	ldr	r3, [pc, #460]	; (8002db8 <HAL_RCC_ClockConfig+0x6c8>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d221      	bcs.n	8002c38 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d014      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x536>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b40      	cmp	r3, #64	; 0x40
 8002c02:	d010      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x536>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b50      	cmp	r3, #80	; 0x50
 8002c0a:	d00c      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x536>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	2b60      	cmp	r3, #96	; 0x60
 8002c12:	d008      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x536>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	2b70      	cmp	r3, #112	; 0x70
 8002c1a:	d004      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x536>
 8002c1c:	f240 415e 	movw	r1, #1118	; 0x45e
 8002c20:	4866      	ldr	r0, [pc, #408]	; (8002dbc <HAL_RCC_ClockConfig+0x6cc>)
 8002c22:	f7fd fda0 	bl	8000766 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c26:	4b64      	ldr	r3, [pc, #400]	; (8002db8 <HAL_RCC_ClockConfig+0x6c8>)
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	4961      	ldr	r1, [pc, #388]	; (8002db8 <HAL_RCC_ClockConfig+0x6c8>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d029      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x5a8>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	4b5b      	ldr	r3, [pc, #364]	; (8002db8 <HAL_RCC_ClockConfig+0x6c8>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d221      	bcs.n	8002c98 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d014      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x596>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	2b40      	cmp	r3, #64	; 0x40
 8002c62:	d010      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x596>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	2b50      	cmp	r3, #80	; 0x50
 8002c6a:	d00c      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x596>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	2b60      	cmp	r3, #96	; 0x60
 8002c72:	d008      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x596>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	2b70      	cmp	r3, #112	; 0x70
 8002c7a:	d004      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x596>
 8002c7c:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8002c80:	484e      	ldr	r0, [pc, #312]	; (8002dbc <HAL_RCC_ClockConfig+0x6cc>)
 8002c82:	f7fd fd70 	bl	8000766 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c86:	4b4c      	ldr	r3, [pc, #304]	; (8002db8 <HAL_RCC_ClockConfig+0x6c8>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	4949      	ldr	r1, [pc, #292]	; (8002db8 <HAL_RCC_ClockConfig+0x6c8>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d02d      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x610>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699a      	ldr	r2, [r3, #24]
 8002ca8:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <HAL_RCC_ClockConfig+0x6c8>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d225      	bcs.n	8002d00 <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d018      	beq.n	8002cee <HAL_RCC_ClockConfig+0x5fe>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc4:	d013      	beq.n	8002cee <HAL_RCC_ClockConfig+0x5fe>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002cce:	d00e      	beq.n	8002cee <HAL_RCC_ClockConfig+0x5fe>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002cd8:	d009      	beq.n	8002cee <HAL_RCC_ClockConfig+0x5fe>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ce2:	d004      	beq.n	8002cee <HAL_RCC_ClockConfig+0x5fe>
 8002ce4:	f240 4182 	movw	r1, #1154	; 0x482
 8002ce8:	4834      	ldr	r0, [pc, #208]	; (8002dbc <HAL_RCC_ClockConfig+0x6cc>)
 8002cea:	f7fd fd3c 	bl	8000766 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cee:	4b32      	ldr	r3, [pc, #200]	; (8002db8 <HAL_RCC_ClockConfig+0x6c8>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	492f      	ldr	r1, [pc, #188]	; (8002db8 <HAL_RCC_ClockConfig+0x6c8>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d029      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x670>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69da      	ldr	r2, [r3, #28]
 8002d10:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <HAL_RCC_ClockConfig+0x6c8>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d221      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d014      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x65e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d010      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x65e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	2b50      	cmp	r3, #80	; 0x50
 8002d32:	d00c      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x65e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	2b60      	cmp	r3, #96	; 0x60
 8002d3a:	d008      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x65e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	2b70      	cmp	r3, #112	; 0x70
 8002d42:	d004      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x65e>
 8002d44:	f240 4194 	movw	r1, #1172	; 0x494
 8002d48:	481c      	ldr	r0, [pc, #112]	; (8002dbc <HAL_RCC_ClockConfig+0x6cc>)
 8002d4a:	f7fd fd0c 	bl	8000766 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <HAL_RCC_ClockConfig+0x6c8>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	4917      	ldr	r1, [pc, #92]	; (8002db8 <HAL_RCC_ClockConfig+0x6c8>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d60:	f000 f836 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <HAL_RCC_ClockConfig+0x6c8>)
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	4913      	ldr	r1, [pc, #76]	; (8002dc0 <HAL_RCC_ClockConfig+0x6d0>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <HAL_RCC_ClockConfig+0x6c8>)
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <HAL_RCC_ClockConfig+0x6d0>)
 8002d88:	5cd3      	ldrb	r3, [r2, r3]
 8002d8a:	f003 031f 	and.w	r3, r3, #31
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
 8002d94:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <HAL_RCC_ClockConfig+0x6d4>)
 8002d96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d98:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <HAL_RCC_ClockConfig+0x6d8>)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_ClockConfig+0x6dc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe f824 	bl	8000df0 <HAL_InitTick>
 8002da8:	4603      	mov	r3, r0
 8002daa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	58024400 	.word	0x58024400
 8002dbc:	080062b8 	.word	0x080062b8
 8002dc0:	080063dc 	.word	0x080063dc
 8002dc4:	20000004 	.word	0x20000004
 8002dc8:	20000000 	.word	0x20000000
 8002dcc:	20000008 	.word	0x20000008

08002dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dd6:	4bb3      	ldr	r3, [pc, #716]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dde:	2b18      	cmp	r3, #24
 8002de0:	f200 8155 	bhi.w	800308e <HAL_RCC_GetSysClockFreq+0x2be>
 8002de4:	a201      	add	r2, pc, #4	; (adr r2, 8002dec <HAL_RCC_GetSysClockFreq+0x1c>)
 8002de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dea:	bf00      	nop
 8002dec:	08002e51 	.word	0x08002e51
 8002df0:	0800308f 	.word	0x0800308f
 8002df4:	0800308f 	.word	0x0800308f
 8002df8:	0800308f 	.word	0x0800308f
 8002dfc:	0800308f 	.word	0x0800308f
 8002e00:	0800308f 	.word	0x0800308f
 8002e04:	0800308f 	.word	0x0800308f
 8002e08:	0800308f 	.word	0x0800308f
 8002e0c:	08002e77 	.word	0x08002e77
 8002e10:	0800308f 	.word	0x0800308f
 8002e14:	0800308f 	.word	0x0800308f
 8002e18:	0800308f 	.word	0x0800308f
 8002e1c:	0800308f 	.word	0x0800308f
 8002e20:	0800308f 	.word	0x0800308f
 8002e24:	0800308f 	.word	0x0800308f
 8002e28:	0800308f 	.word	0x0800308f
 8002e2c:	08002e7d 	.word	0x08002e7d
 8002e30:	0800308f 	.word	0x0800308f
 8002e34:	0800308f 	.word	0x0800308f
 8002e38:	0800308f 	.word	0x0800308f
 8002e3c:	0800308f 	.word	0x0800308f
 8002e40:	0800308f 	.word	0x0800308f
 8002e44:	0800308f 	.word	0x0800308f
 8002e48:	0800308f 	.word	0x0800308f
 8002e4c:	08002e83 	.word	0x08002e83
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e50:	4b94      	ldr	r3, [pc, #592]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e5c:	4b91      	ldr	r3, [pc, #580]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	08db      	lsrs	r3, r3, #3
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	4a90      	ldr	r2, [pc, #576]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002e6e:	e111      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e70:	4b8d      	ldr	r3, [pc, #564]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e72:	61bb      	str	r3, [r7, #24]
    break;
 8002e74:	e10e      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002e76:	4b8d      	ldr	r3, [pc, #564]	; (80030ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e78:	61bb      	str	r3, [r7, #24]
    break;
 8002e7a:	e10b      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002e7c:	4b8c      	ldr	r3, [pc, #560]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e7e:	61bb      	str	r3, [r7, #24]
    break;
 8002e80:	e108      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e82:	4b88      	ldr	r3, [pc, #544]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002e8c:	4b85      	ldr	r3, [pc, #532]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e96:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e98:	4b82      	ldr	r3, [pc, #520]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002ea2:	4b80      	ldr	r3, [pc, #512]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea6:	08db      	lsrs	r3, r3, #3
 8002ea8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80e1 	beq.w	8003088 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	f000 8083 	beq.w	8002fd4 <HAL_RCC_GetSysClockFreq+0x204>
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	f200 80a1 	bhi.w	8003018 <HAL_RCC_GetSysClockFreq+0x248>
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x114>
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d056      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002ee2:	e099      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ee4:	4b6f      	ldr	r3, [pc, #444]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d02d      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ef0:	4b6c      	ldr	r3, [pc, #432]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	08db      	lsrs	r3, r3, #3
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	4a6b      	ldr	r2, [pc, #428]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
 8002f00:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	ee07 3a90 	vmov	s15, r3
 8002f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f1a:	4b62      	ldr	r3, [pc, #392]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f2e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80030b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002f4a:	e087      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f56:	eddf 6a58 	vldr	s13, [pc, #352]	; 80030b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f5e:	4b51      	ldr	r3, [pc, #324]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f72:	eddf 5a50 	vldr	s11, [pc, #320]	; 80030b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f8e:	e065      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80030bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa2:	4b40      	ldr	r3, [pc, #256]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002faa:	ee07 3a90 	vmov	s15, r3
 8002fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fb6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80030b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fd2:	e043      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fde:	eddf 6a38 	vldr	s13, [pc, #224]	; 80030c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe6:	4b2f      	ldr	r3, [pc, #188]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ffa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80030b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800300a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800300e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003016:	e021      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	ee07 3a90 	vmov	s15, r3
 800301e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003022:	eddf 6a26 	vldr	s13, [pc, #152]	; 80030bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800303a:	ed97 6a02 	vldr	s12, [r7, #8]
 800303e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80030b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800304a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800304e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800305a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800305c:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	0a5b      	lsrs	r3, r3, #9
 8003062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003066:	3301      	adds	r3, #1
 8003068:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	ee07 3a90 	vmov	s15, r3
 8003070:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003074:	edd7 6a07 	vldr	s13, [r7, #28]
 8003078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800307c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003080:	ee17 3a90 	vmov	r3, s15
 8003084:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003086:	e005      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	61bb      	str	r3, [r7, #24]
    break;
 800308c:	e002      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800308e:	4b07      	ldr	r3, [pc, #28]	; (80030ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003090:	61bb      	str	r3, [r7, #24]
    break;
 8003092:	bf00      	nop
  }

  return sysclockfreq;
 8003094:	69bb      	ldr	r3, [r7, #24]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3724      	adds	r7, #36	; 0x24
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	58024400 	.word	0x58024400
 80030a8:	03d09000 	.word	0x03d09000
 80030ac:	003d0900 	.word	0x003d0900
 80030b0:	017d7840 	.word	0x017d7840
 80030b4:	46000000 	.word	0x46000000
 80030b8:	4c742400 	.word	0x4c742400
 80030bc:	4a742400 	.word	0x4a742400
 80030c0:	4bbebc20 	.word	0x4bbebc20

080030c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030cc:	2300      	movs	r3, #0
 80030ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030d0:	2300      	movs	r3, #0
 80030d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d03f      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030e8:	d02a      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030ee:	d824      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030f4:	d018      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030fa:	d81e      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003104:	d007      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003106:	e018      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003108:	4bab      	ldr	r3, [pc, #684]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	4aaa      	ldr	r2, [pc, #680]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800310e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003112:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003114:	e015      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3304      	adds	r3, #4
 800311a:	2102      	movs	r1, #2
 800311c:	4618      	mov	r0, r3
 800311e:	f001 f9dd 	bl	80044dc <RCCEx_PLL2_Config>
 8003122:	4603      	mov	r3, r0
 8003124:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003126:	e00c      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3324      	adds	r3, #36	; 0x24
 800312c:	2102      	movs	r1, #2
 800312e:	4618      	mov	r0, r3
 8003130:	f001 faf6 	bl	8004720 <RCCEx_PLL3_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003138:	e003      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	75fb      	strb	r3, [r7, #23]
      break;
 800313e:	e000      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003142:	7dfb      	ldrb	r3, [r7, #23]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d109      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003148:	4b9b      	ldr	r3, [pc, #620]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800314a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003154:	4998      	ldr	r1, [pc, #608]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003156:	4313      	orrs	r3, r2
 8003158:	650b      	str	r3, [r1, #80]	; 0x50
 800315a:	e001      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315c:	7dfb      	ldrb	r3, [r7, #23]
 800315e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d03d      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003170:	2b04      	cmp	r3, #4
 8003172:	d826      	bhi.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003174:	a201      	add	r2, pc, #4	; (adr r2, 800317c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	08003191 	.word	0x08003191
 8003180:	0800319f 	.word	0x0800319f
 8003184:	080031b1 	.word	0x080031b1
 8003188:	080031c9 	.word	0x080031c9
 800318c:	080031c9 	.word	0x080031c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003190:	4b89      	ldr	r3, [pc, #548]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	4a88      	ldr	r2, [pc, #544]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800319a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800319c:	e015      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3304      	adds	r3, #4
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f001 f999 	bl	80044dc <RCCEx_PLL2_Config>
 80031aa:	4603      	mov	r3, r0
 80031ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031ae:	e00c      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3324      	adds	r3, #36	; 0x24
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 fab2 	bl	8004720 <RCCEx_PLL3_Config>
 80031bc:	4603      	mov	r3, r0
 80031be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031c0:	e003      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	75fb      	strb	r3, [r7, #23]
      break;
 80031c6:	e000      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80031c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ca:	7dfb      	ldrb	r3, [r7, #23]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d109      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031d0:	4b79      	ldr	r3, [pc, #484]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d4:	f023 0207 	bic.w	r2, r3, #7
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031dc:	4976      	ldr	r1, [pc, #472]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	650b      	str	r3, [r1, #80]	; 0x50
 80031e2:	e001      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e4:	7dfb      	ldrb	r3, [r7, #23]
 80031e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d042      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fc:	d02b      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80031fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003202:	d825      	bhi.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003204:	2bc0      	cmp	r3, #192	; 0xc0
 8003206:	d028      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003208:	2bc0      	cmp	r3, #192	; 0xc0
 800320a:	d821      	bhi.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800320c:	2b80      	cmp	r3, #128	; 0x80
 800320e:	d016      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003210:	2b80      	cmp	r3, #128	; 0x80
 8003212:	d81d      	bhi.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d007      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800321c:	e018      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800321e:	4b66      	ldr	r3, [pc, #408]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	4a65      	ldr	r2, [pc, #404]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003228:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800322a:	e017      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	2100      	movs	r1, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f001 f952 	bl	80044dc <RCCEx_PLL2_Config>
 8003238:	4603      	mov	r3, r0
 800323a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800323c:	e00e      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3324      	adds	r3, #36	; 0x24
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f001 fa6b 	bl	8004720 <RCCEx_PLL3_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800324e:	e005      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	75fb      	strb	r3, [r7, #23]
      break;
 8003254:	e002      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003256:	bf00      	nop
 8003258:	e000      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800325a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800325c:	7dfb      	ldrb	r3, [r7, #23]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003262:	4b55      	ldr	r3, [pc, #340]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003266:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	4952      	ldr	r1, [pc, #328]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003270:	4313      	orrs	r3, r2
 8003272:	650b      	str	r3, [r1, #80]	; 0x50
 8003274:	e001      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003282:	2b00      	cmp	r3, #0
 8003284:	d049      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800328c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003290:	d030      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003292:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003296:	d82a      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003298:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800329c:	d02c      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800329e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032a2:	d824      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032a8:	d018      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80032aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ae:	d81e      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80032b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032b8:	d007      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 80032ba:	e018      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032bc:	4b3e      	ldr	r3, [pc, #248]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	4a3d      	ldr	r2, [pc, #244]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032c8:	e017      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3304      	adds	r3, #4
 80032ce:	2100      	movs	r1, #0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f001 f903 	bl	80044dc <RCCEx_PLL2_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80032da:	e00e      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3324      	adds	r3, #36	; 0x24
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f001 fa1c 	bl	8004720 <RCCEx_PLL3_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032ec:	e005      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
      break;
 80032f2:	e002      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80032f4:	bf00      	nop
 80032f6:	e000      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80032f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003300:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800330e:	492a      	ldr	r1, [pc, #168]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003310:	4313      	orrs	r3, r2
 8003312:	658b      	str	r3, [r1, #88]	; 0x58
 8003314:	e001      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003316:	7dfb      	ldrb	r3, [r7, #23]
 8003318:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003322:	2b00      	cmp	r3, #0
 8003324:	d04c      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800332c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003330:	d030      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003332:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003336:	d82a      	bhi.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003338:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800333c:	d02c      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800333e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003342:	d824      	bhi.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003348:	d018      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800334a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800334e:	d81e      	bhi.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003358:	d007      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800335a:	e018      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800335c:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003366:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003368:	e017      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3304      	adds	r3, #4
 800336e:	2100      	movs	r1, #0
 8003370:	4618      	mov	r0, r3
 8003372:	f001 f8b3 	bl	80044dc <RCCEx_PLL2_Config>
 8003376:	4603      	mov	r3, r0
 8003378:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800337a:	e00e      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3324      	adds	r3, #36	; 0x24
 8003380:	2100      	movs	r1, #0
 8003382:	4618      	mov	r0, r3
 8003384:	f001 f9cc 	bl	8004720 <RCCEx_PLL3_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800338c:	e005      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	75fb      	strb	r3, [r7, #23]
      break;
 8003392:	e002      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003394:	bf00      	nop
 8003396:	e000      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10d      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033ae:	4902      	ldr	r1, [pc, #8]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	658b      	str	r3, [r1, #88]	; 0x58
 80033b4:	e004      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80033b6:	bf00      	nop
 80033b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d032      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d0:	2b30      	cmp	r3, #48	; 0x30
 80033d2:	d01c      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80033d4:	2b30      	cmp	r3, #48	; 0x30
 80033d6:	d817      	bhi.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d00c      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d813      	bhi.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d016      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d10f      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e8:	4baf      	ldr	r3, [pc, #700]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	4aae      	ldr	r2, [pc, #696]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80033ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80033f4:	e00e      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3304      	adds	r3, #4
 80033fa:	2102      	movs	r1, #2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f001 f86d 	bl	80044dc <RCCEx_PLL2_Config>
 8003402:	4603      	mov	r3, r0
 8003404:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003406:	e005      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	75fb      	strb	r3, [r7, #23]
      break;
 800340c:	e002      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800340e:	bf00      	nop
 8003410:	e000      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003414:	7dfb      	ldrb	r3, [r7, #23]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800341a:	4ba3      	ldr	r3, [pc, #652]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800341c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003426:	49a0      	ldr	r1, [pc, #640]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003428:	4313      	orrs	r3, r2
 800342a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800342c:	e001      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342e:	7dfb      	ldrb	r3, [r7, #23]
 8003430:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d047      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003446:	d030      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800344c:	d82a      	bhi.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800344e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003452:	d02c      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003454:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003458:	d824      	bhi.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800345a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800345e:	d018      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003464:	d81e      	bhi.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800346a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346e:	d007      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003470:	e018      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003472:	4b8d      	ldr	r3, [pc, #564]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	4a8c      	ldr	r2, [pc, #560]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800347c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800347e:	e017      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3304      	adds	r3, #4
 8003484:	2100      	movs	r1, #0
 8003486:	4618      	mov	r0, r3
 8003488:	f001 f828 	bl	80044dc <RCCEx_PLL2_Config>
 800348c:	4603      	mov	r3, r0
 800348e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003490:	e00e      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3324      	adds	r3, #36	; 0x24
 8003496:	2100      	movs	r1, #0
 8003498:	4618      	mov	r0, r3
 800349a:	f001 f941 	bl	8004720 <RCCEx_PLL3_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034a2:	e005      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	75fb      	strb	r3, [r7, #23]
      break;
 80034a8:	e002      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80034aa:	bf00      	nop
 80034ac:	e000      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80034ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034b6:	4b7c      	ldr	r3, [pc, #496]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ba:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c2:	4979      	ldr	r1, [pc, #484]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	650b      	str	r3, [r1, #80]	; 0x50
 80034c8:	e001      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
 80034cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d049      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034e2:	d02e      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80034e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034e8:	d828      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80034ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034ee:	d02a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80034f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034f4:	d822      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80034f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034fa:	d026      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80034fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003500:	d81c      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003502:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003506:	d010      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003508:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800350c:	d816      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01d      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003516:	d111      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3304      	adds	r3, #4
 800351c:	2101      	movs	r1, #1
 800351e:	4618      	mov	r0, r3
 8003520:	f000 ffdc 	bl	80044dc <RCCEx_PLL2_Config>
 8003524:	4603      	mov	r3, r0
 8003526:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003528:	e012      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3324      	adds	r3, #36	; 0x24
 800352e:	2101      	movs	r1, #1
 8003530:	4618      	mov	r0, r3
 8003532:	f001 f8f5 	bl	8004720 <RCCEx_PLL3_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800353a:	e009      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	75fb      	strb	r3, [r7, #23]
      break;
 8003540:	e006      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003542:	bf00      	nop
 8003544:	e004      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003546:	bf00      	nop
 8003548:	e002      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800354a:	bf00      	nop
 800354c:	e000      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800354e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003550:	7dfb      	ldrb	r3, [r7, #23]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003556:	4b54      	ldr	r3, [pc, #336]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003562:	4951      	ldr	r1, [pc, #324]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003564:	4313      	orrs	r3, r2
 8003566:	650b      	str	r3, [r1, #80]	; 0x50
 8003568:	e001      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d04b      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003584:	d02e      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800358a:	d828      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003590:	d02a      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003596:	d822      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003598:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800359c:	d026      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x528>
 800359e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035a2:	d81c      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035a8:	d010      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x508>
 80035aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ae:	d816      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01d      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80035b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035b8:	d111      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3304      	adds	r3, #4
 80035be:	2101      	movs	r1, #1
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 ff8b 	bl	80044dc <RCCEx_PLL2_Config>
 80035c6:	4603      	mov	r3, r0
 80035c8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80035ca:	e012      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3324      	adds	r3, #36	; 0x24
 80035d0:	2101      	movs	r1, #1
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 f8a4 	bl	8004720 <RCCEx_PLL3_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80035dc:	e009      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	75fb      	strb	r3, [r7, #23]
      break;
 80035e2:	e006      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80035e4:	bf00      	nop
 80035e6:	e004      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80035e8:	bf00      	nop
 80035ea:	e002      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80035ec:	bf00      	nop
 80035ee:	e000      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80035f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10a      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80035f8:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003606:	4928      	ldr	r1, [pc, #160]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003608:	4313      	orrs	r3, r2
 800360a:	658b      	str	r3, [r1, #88]	; 0x58
 800360c:	e001      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360e:	7dfb      	ldrb	r3, [r7, #23]
 8003610:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d02f      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003626:	d00e      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800362c:	d814      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d015      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003636:	d10f      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	4a1a      	ldr	r2, [pc, #104]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800363e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003642:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003644:	e00c      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3304      	adds	r3, #4
 800364a:	2101      	movs	r1, #1
 800364c:	4618      	mov	r0, r3
 800364e:	f000 ff45 	bl	80044dc <RCCEx_PLL2_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003656:	e003      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	75fb      	strb	r3, [r7, #23]
      break;
 800365c:	e000      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800365e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003660:	7dfb      	ldrb	r3, [r7, #23]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d109      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003672:	490d      	ldr	r1, [pc, #52]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003674:	4313      	orrs	r3, r2
 8003676:	650b      	str	r3, [r1, #80]	; 0x50
 8003678:	e001      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d036      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x634>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	2b03      	cmp	r3, #3
 8003690:	d81c      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003692:	a201      	add	r2, pc, #4	; (adr r2, 8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003698:	080036d3 	.word	0x080036d3
 800369c:	080036ad 	.word	0x080036ad
 80036a0:	080036bb 	.word	0x080036bb
 80036a4:	080036d3 	.word	0x080036d3
 80036a8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ac:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	4a0f      	ldr	r2, [pc, #60]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 80036b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80036b8:	e00c      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3304      	adds	r3, #4
 80036be:	2102      	movs	r1, #2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 ff0b 	bl	80044dc <RCCEx_PLL2_Config>
 80036c6:	4603      	mov	r3, r0
 80036c8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80036ca:	e003      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	75fb      	strb	r3, [r7, #23]
      break;
 80036d0:	e000      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80036d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x630>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 80036dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036de:	f023 0203 	bic.w	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	4902      	ldr	r1, [pc, #8]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036ec:	e004      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80036ee:	bf00      	nop
 80036f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 829b 	beq.w	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xb78>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800370c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003710:	f000 81a9 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800371a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371e:	f000 81a2 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003728:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 800372c:	f000 819b 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003736:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 800373a:	f000 8194 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003744:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8003748:	f000 818d 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003752:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 8003756:	f000 8186 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003760:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8003764:	f000 817f 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800376e:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 8003772:	f000 8178 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800377c:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8003780:	f000 8171 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800378a:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 800378e:	f000 816a 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003798:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 800379c:	f000 8163 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037a6:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 80037aa:	f000 815c 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037b4:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 80037b8:	f000 8155 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037c2:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 80037c6:	f000 814e 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037d0:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 80037d4:	f000 8147 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037de:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 80037e2:	f000 8140 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037ec:	4aa8      	ldr	r2, [pc, #672]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	f000 8139 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037fa:	4aa6      	ldr	r2, [pc, #664]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	f000 8132 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003808:	4aa3      	ldr	r2, [pc, #652]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	f000 812b 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003816:	4aa1      	ldr	r2, [pc, #644]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	f000 8124 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003824:	4a9e      	ldr	r2, [pc, #632]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8003826:	4293      	cmp	r3, r2
 8003828:	f000 811d 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003832:	4a9c      	ldr	r2, [pc, #624]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	f000 8116 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003840:	4a99      	ldr	r2, [pc, #612]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	f000 810f 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800384e:	4a97      	ldr	r2, [pc, #604]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	f000 8108 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800385c:	4a94      	ldr	r2, [pc, #592]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800385e:	4293      	cmp	r3, r2
 8003860:	f000 8101 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800386a:	4a92      	ldr	r2, [pc, #584]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	f000 80fa 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003878:	4a8f      	ldr	r2, [pc, #572]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	f000 80f3 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003886:	4a8d      	ldr	r2, [pc, #564]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	f000 80ec 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003894:	4a8a      	ldr	r2, [pc, #552]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8003896:	4293      	cmp	r3, r2
 8003898:	f000 80e5 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038a2:	4a88      	ldr	r2, [pc, #544]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	f000 80de 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038b0:	4a85      	ldr	r2, [pc, #532]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	f000 80d7 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038be:	4a83      	ldr	r2, [pc, #524]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	f000 80d0 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038cc:	4a80      	ldr	r2, [pc, #512]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	f000 80c9 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038da:	4a7e      	ldr	r2, [pc, #504]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	f000 80c2 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038e8:	4a7b      	ldr	r2, [pc, #492]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	f000 80bb 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038f6:	4a79      	ldr	r2, [pc, #484]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	f000 80b4 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003904:	4a76      	ldr	r2, [pc, #472]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	f000 80ad 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003912:	4a74      	ldr	r2, [pc, #464]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 8003914:	4293      	cmp	r3, r2
 8003916:	f000 80a6 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003920:	4a71      	ldr	r2, [pc, #452]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8003922:	4293      	cmp	r3, r2
 8003924:	f000 809f 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800392e:	4a6f      	ldr	r2, [pc, #444]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8003930:	4293      	cmp	r3, r2
 8003932:	f000 8098 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800393c:	4a6c      	ldr	r2, [pc, #432]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	f000 8091 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800394a:	4a6a      	ldr	r2, [pc, #424]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 800394c:	4293      	cmp	r3, r2
 800394e:	f000 808a 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003958:	4a67      	ldr	r2, [pc, #412]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 800395a:	4293      	cmp	r3, r2
 800395c:	f000 8083 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003966:	4a65      	ldr	r2, [pc, #404]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d07c      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003972:	4a63      	ldr	r2, [pc, #396]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d076      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800397e:	4a61      	ldr	r2, [pc, #388]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d070      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800398a:	4a5f      	ldr	r2, [pc, #380]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d06a      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003996:	4a5d      	ldr	r2, [pc, #372]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d064      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039a2:	4a5b      	ldr	r2, [pc, #364]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d05e      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039ae:	4a59      	ldr	r2, [pc, #356]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0xa50>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d058      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039ba:	4a57      	ldr	r2, [pc, #348]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0xa54>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d052      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039c6:	4a55      	ldr	r2, [pc, #340]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d04c      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039d2:	4a53      	ldr	r2, [pc, #332]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0xa5c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d046      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039de:	4a51      	ldr	r2, [pc, #324]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d040      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039ea:	4a4f      	ldr	r2, [pc, #316]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xa64>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d03a      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039f6:	4a4d      	ldr	r2, [pc, #308]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xa68>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d034      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a02:	4a4b      	ldr	r2, [pc, #300]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xa6c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d02e      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a0e:	4a49      	ldr	r2, [pc, #292]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0xa70>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d028      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a1a:	4a47      	ldr	r2, [pc, #284]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d022      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a26:	4a45      	ldr	r2, [pc, #276]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d01c      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a32:	4a43      	ldr	r2, [pc, #268]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d016      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a3e:	4a41      	ldr	r2, [pc, #260]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d010      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a4a:	4a3f      	ldr	r2, [pc, #252]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0xa84>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00a      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a56:	4a3d      	ldr	r2, [pc, #244]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003a5c:	f240 317f 	movw	r1, #895	; 0x37f
 8003a60:	483b      	ldr	r0, [pc, #236]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 8003a62:	f7fc fe80 	bl	8000766 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a66:	4b3b      	ldr	r3, [pc, #236]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a3a      	ldr	r2, [pc, #232]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 8003a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a72:	f7fd fa07 	bl	8000e84 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a78:	e06e      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xa94>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7a:	f7fd fa03 	bl	8000e84 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b64      	cmp	r3, #100	; 0x64
 8003a86:	d967      	bls.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xa94>
      {
        ret = HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	75fb      	strb	r3, [r7, #23]
        break;
 8003a8c:	e06a      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8003a8e:	bf00      	nop
 8003a90:	00010300 	.word	0x00010300
 8003a94:	00011300 	.word	0x00011300
 8003a98:	00012300 	.word	0x00012300
 8003a9c:	00013300 	.word	0x00013300
 8003aa0:	00014300 	.word	0x00014300
 8003aa4:	00015300 	.word	0x00015300
 8003aa8:	00016300 	.word	0x00016300
 8003aac:	00017300 	.word	0x00017300
 8003ab0:	00018300 	.word	0x00018300
 8003ab4:	00019300 	.word	0x00019300
 8003ab8:	0001a300 	.word	0x0001a300
 8003abc:	0001b300 	.word	0x0001b300
 8003ac0:	0001c300 	.word	0x0001c300
 8003ac4:	0001d300 	.word	0x0001d300
 8003ac8:	0001e300 	.word	0x0001e300
 8003acc:	0001f300 	.word	0x0001f300
 8003ad0:	00020300 	.word	0x00020300
 8003ad4:	00021300 	.word	0x00021300
 8003ad8:	00022300 	.word	0x00022300
 8003adc:	00023300 	.word	0x00023300
 8003ae0:	00024300 	.word	0x00024300
 8003ae4:	00025300 	.word	0x00025300
 8003ae8:	00026300 	.word	0x00026300
 8003aec:	00027300 	.word	0x00027300
 8003af0:	00028300 	.word	0x00028300
 8003af4:	00029300 	.word	0x00029300
 8003af8:	0002a300 	.word	0x0002a300
 8003afc:	0002b300 	.word	0x0002b300
 8003b00:	0002c300 	.word	0x0002c300
 8003b04:	0002d300 	.word	0x0002d300
 8003b08:	0002e300 	.word	0x0002e300
 8003b0c:	0002f300 	.word	0x0002f300
 8003b10:	00030300 	.word	0x00030300
 8003b14:	00031300 	.word	0x00031300
 8003b18:	00032300 	.word	0x00032300
 8003b1c:	00033300 	.word	0x00033300
 8003b20:	00034300 	.word	0x00034300
 8003b24:	00035300 	.word	0x00035300
 8003b28:	00036300 	.word	0x00036300
 8003b2c:	00037300 	.word	0x00037300
 8003b30:	00038300 	.word	0x00038300
 8003b34:	00039300 	.word	0x00039300
 8003b38:	0003a300 	.word	0x0003a300
 8003b3c:	0003b300 	.word	0x0003b300
 8003b40:	0003c300 	.word	0x0003c300
 8003b44:	0003d300 	.word	0x0003d300
 8003b48:	0003e300 	.word	0x0003e300
 8003b4c:	0003f300 	.word	0x0003f300
 8003b50:	080062f0 	.word	0x080062f0
 8003b54:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b58:	4bb9      	ldr	r3, [pc, #740]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d08a      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
      }
    }

    if(ret == HAL_OK)
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d166      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b6a:	4bb6      	ldr	r3, [pc, #728]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003b6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b74:	4053      	eors	r3, r2
 8003b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d013      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b7e:	4bb1      	ldr	r3, [pc, #708]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b86:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b88:	4bae      	ldr	r3, [pc, #696]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	4aad      	ldr	r2, [pc, #692]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b92:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b94:	4bab      	ldr	r3, [pc, #684]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	4aaa      	ldr	r2, [pc, #680]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ba0:	4aa8      	ldr	r2, [pc, #672]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb0:	d115      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xb1a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7fd f967 	bl	8000e84 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bb8:	e00b      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fd f963 	bl	8000e84 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d902      	bls.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
          {
            ret = HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	75fb      	strb	r3, [r7, #23]
            break;
 8003bd0:	e005      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bd2:	4b9c      	ldr	r3, [pc, #624]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0ed      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xaf6>
          }
        }
      }

      if(ret == HAL_OK)
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d126      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf2:	d10d      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003bf4:	4b93      	ldr	r3, [pc, #588]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c02:	0919      	lsrs	r1, r3, #4
 8003c04:	4b90      	ldr	r3, [pc, #576]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xd84>)
 8003c06:	400b      	ands	r3, r1
 8003c08:	498e      	ldr	r1, [pc, #568]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	610b      	str	r3, [r1, #16]
 8003c0e:	e005      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8003c10:	4b8c      	ldr	r3, [pc, #560]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	4a8b      	ldr	r2, [pc, #556]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003c16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c1a:	6113      	str	r3, [r2, #16]
 8003c1c:	4b89      	ldr	r3, [pc, #548]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003c1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2a:	4986      	ldr	r1, [pc, #536]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	670b      	str	r3, [r1, #112]	; 0x70
 8003c30:	e004      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xb78>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c32:	7dfb      	ldrb	r3, [r7, #23]
 8003c34:	75bb      	strb	r3, [r7, #22]
 8003c36:	e001      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xb78>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	7dfb      	ldrb	r3, [r7, #23]
 8003c3a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d07e      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xc82>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c4c:	2b28      	cmp	r3, #40	; 0x28
 8003c4e:	d867      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003c50:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <HAL_RCCEx_PeriphCLKConfig+0xb94>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003d27 	.word	0x08003d27
 8003c5c:	08003d21 	.word	0x08003d21
 8003c60:	08003d21 	.word	0x08003d21
 8003c64:	08003d21 	.word	0x08003d21
 8003c68:	08003d21 	.word	0x08003d21
 8003c6c:	08003d21 	.word	0x08003d21
 8003c70:	08003d21 	.word	0x08003d21
 8003c74:	08003d21 	.word	0x08003d21
 8003c78:	08003cfd 	.word	0x08003cfd
 8003c7c:	08003d21 	.word	0x08003d21
 8003c80:	08003d21 	.word	0x08003d21
 8003c84:	08003d21 	.word	0x08003d21
 8003c88:	08003d21 	.word	0x08003d21
 8003c8c:	08003d21 	.word	0x08003d21
 8003c90:	08003d21 	.word	0x08003d21
 8003c94:	08003d21 	.word	0x08003d21
 8003c98:	08003d0f 	.word	0x08003d0f
 8003c9c:	08003d21 	.word	0x08003d21
 8003ca0:	08003d21 	.word	0x08003d21
 8003ca4:	08003d21 	.word	0x08003d21
 8003ca8:	08003d21 	.word	0x08003d21
 8003cac:	08003d21 	.word	0x08003d21
 8003cb0:	08003d21 	.word	0x08003d21
 8003cb4:	08003d21 	.word	0x08003d21
 8003cb8:	08003d27 	.word	0x08003d27
 8003cbc:	08003d21 	.word	0x08003d21
 8003cc0:	08003d21 	.word	0x08003d21
 8003cc4:	08003d21 	.word	0x08003d21
 8003cc8:	08003d21 	.word	0x08003d21
 8003ccc:	08003d21 	.word	0x08003d21
 8003cd0:	08003d21 	.word	0x08003d21
 8003cd4:	08003d21 	.word	0x08003d21
 8003cd8:	08003d27 	.word	0x08003d27
 8003cdc:	08003d21 	.word	0x08003d21
 8003ce0:	08003d21 	.word	0x08003d21
 8003ce4:	08003d21 	.word	0x08003d21
 8003ce8:	08003d21 	.word	0x08003d21
 8003cec:	08003d21 	.word	0x08003d21
 8003cf0:	08003d21 	.word	0x08003d21
 8003cf4:	08003d21 	.word	0x08003d21
 8003cf8:	08003d27 	.word	0x08003d27
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	2101      	movs	r1, #1
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fbea 	bl	80044dc <RCCEx_PLL2_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d0c:	e00c      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xc64>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3324      	adds	r3, #36	; 0x24
 8003d12:	2101      	movs	r1, #1
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fd03 	bl	8004720 <RCCEx_PLL3_Config>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d1e:	e003      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xc64>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	75fb      	strb	r3, [r7, #23]
      break;
 8003d24:	e000      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xc64>
      break;
 8003d26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d28:	7dfb      	ldrb	r3, [r7, #23]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d2e:	4b45      	ldr	r3, [pc, #276]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d32:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d3a:	4942      	ldr	r1, [pc, #264]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	654b      	str	r3, [r1, #84]	; 0x54
 8003d40:	e001      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
 8003d44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d037      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d820      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xcd8>
 8003d5a:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003da3 	.word	0x08003da3
 8003d64:	08003d79 	.word	0x08003d79
 8003d68:	08003d8b 	.word	0x08003d8b
 8003d6c:	08003da3 	.word	0x08003da3
 8003d70:	08003da3 	.word	0x08003da3
 8003d74:	08003da3 	.word	0x08003da3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fbac 	bl	80044dc <RCCEx_PLL2_Config>
 8003d84:	4603      	mov	r3, r0
 8003d86:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d88:	e00c      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xce0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3324      	adds	r3, #36	; 0x24
 8003d8e:	2101      	movs	r1, #1
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fcc5 	bl	8004720 <RCCEx_PLL3_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d9a:	e003      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xce0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xce0>
      break;
 8003da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003daa:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dae:	f023 0207 	bic.w	r2, r3, #7
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db6:	4923      	ldr	r1, [pc, #140]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	654b      	str	r3, [r1, #84]	; 0x54
 8003dbc:	e001      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
 8003dc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d040      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd4:	2b05      	cmp	r3, #5
 8003dd6:	d821      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xd58>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003e23 	.word	0x08003e23
 8003de4:	08003df9 	.word	0x08003df9
 8003de8:	08003e0b 	.word	0x08003e0b
 8003dec:	08003e23 	.word	0x08003e23
 8003df0:	08003e23 	.word	0x08003e23
 8003df4:	08003e23 	.word	0x08003e23
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fb6c 	bl	80044dc <RCCEx_PLL2_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e08:	e00c      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xd60>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3324      	adds	r3, #36	; 0x24
 8003e0e:	2101      	movs	r1, #1
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fc85 	bl	8004720 <RCCEx_PLL3_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e1a:	e003      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e20:	e000      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      break;
 8003e22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d110      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xd88>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	f023 0207 	bic.w	r2, r3, #7
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e38:	4902      	ldr	r1, [pc, #8]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	658b      	str	r3, [r1, #88]	; 0x58
 8003e3e:	e007      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003e40:	58024800 	.word	0x58024800
 8003e44:	58024400 	.word	0x58024400
 8003e48:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d04b      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e66:	d02e      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xe02>
 8003e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e6c:	d828      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e72:	d02a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xe06>
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d822      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 8003e7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e7e:	d026      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xe0a>
 8003e80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e84:	d81c      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 8003e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e8a:	d010      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xdea>
 8003e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e90:	d816      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01d      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 8003e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e9a:	d111      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fb1a 	bl	80044dc <RCCEx_PLL2_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003eac:	e012      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xe10>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3324      	adds	r3, #36	; 0x24
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fc33 	bl	8004720 <RCCEx_PLL3_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ebe:	e009      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec4:	e006      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e004      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 8003ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eda:	4bb2      	ldr	r3, [pc, #712]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8003edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ede:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee8:	49ae      	ldr	r1, [pc, #696]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	654b      	str	r3, [r1, #84]	; 0x54
 8003eee:	e001      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d04b      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xed4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f0a:	d02e      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xea6>
 8003f0c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f10:	d828      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f16:	d02a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
 8003f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1c:	d822      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003f1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f22:	d026      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xeae>
 8003f24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f28:	d81c      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2e:	d010      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
 8003f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f34:	d816      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01d      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xeb2>
 8003f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3e:	d111      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xea0>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3304      	adds	r3, #4
 8003f44:	2100      	movs	r1, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fac8 	bl	80044dc <RCCEx_PLL2_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f50:	e012      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xeb4>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3324      	adds	r3, #36	; 0x24
 8003f56:	2102      	movs	r1, #2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fbe1 	bl	8004720 <RCCEx_PLL3_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f62:	e009      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	75fb      	strb	r3, [r7, #23]
      break;
 8003f68:	e006      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e004      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e002      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 8003f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xed0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f7e:	4b89      	ldr	r3, [pc, #548]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f8c:	4985      	ldr	r1, [pc, #532]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	658b      	str	r3, [r1, #88]	; 0x58
 8003f92:	e001      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d04b      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xf78>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003faa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fae:	d02e      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8003fb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fb4:	d828      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xf44>
 8003fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fba:	d02a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xf4e>
 8003fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc0:	d822      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xf44>
 8003fc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fc6:	d026      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xf52>
 8003fc8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fcc:	d81c      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xf44>
 8003fce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd2:	d010      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xf32>
 8003fd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd8:	d816      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xf44>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d01d      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xf56>
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe2:	d111      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xf44>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fa76 	bl	80044dc <RCCEx_PLL2_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ff4:	e012      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xf58>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3324      	adds	r3, #36	; 0x24
 8003ffa:	2102      	movs	r1, #2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fb8f 	bl	8004720 <RCCEx_PLL3_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004006:	e009      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xf58>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	75fb      	strb	r3, [r7, #23]
      break;
 800400c:	e006      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 800400e:	bf00      	nop
 8004010:	e004      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 8004012:	bf00      	nop
 8004014:	e002      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 8004016:	bf00      	nop
 8004018:	e000      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 800401a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800401c:	7dfb      	ldrb	r3, [r7, #23]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xf74>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004022:	4b60      	ldr	r3, [pc, #384]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004030:	495c      	ldr	r1, [pc, #368]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004032:	4313      	orrs	r3, r2
 8004034:	658b      	str	r3, [r1, #88]	; 0x58
 8004036:	e001      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xf78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004038:	7dfb      	ldrb	r3, [r7, #23]
 800403a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d036      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xff2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004052:	d015      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800405a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800405e:	d00f      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004070:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004074:	d004      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 8004076:	f240 510f 	movw	r1, #1295	; 0x50f
 800407a:	484b      	ldr	r0, [pc, #300]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
 800407c:	f7fc fb73 	bl	8000766 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408a:	d10a      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xfde>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3324      	adds	r3, #36	; 0x24
 8004090:	2102      	movs	r1, #2
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fb44 	bl	8004720 <RCCEx_PLL3_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xfde>
        {
          status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80040a2:	4b40      	ldr	r3, [pc, #256]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040b0:	493c      	ldr	r1, [pc, #240]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d036      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x106c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040cc:	d015      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x1036>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d8:	d00f      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x1036>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x1036>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040ee:	d004      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x1036>
 80040f0:	f240 5122 	movw	r1, #1314	; 0x522
 80040f4:	482c      	ldr	r0, [pc, #176]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
 80040f6:	f7fc fb36 	bl	8000766 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004104:	d10a      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x1058>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3324      	adds	r3, #36	; 0x24
 800410a:	2102      	movs	r1, #2
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fb07 	bl	8004720 <RCCEx_PLL3_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x1058>
      {
        status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800411c:	4b21      	ldr	r3, [pc, #132]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800411e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412a:	491e      	ldr	r1, [pc, #120]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800412c:	4313      	orrs	r3, r2
 800412e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d039      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x10ec>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004146:	d01d      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8004148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800414c:	d817      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1096>
 8004152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004156:	d009      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 8004158:	e011      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	2100      	movs	r1, #0
 8004160:	4618      	mov	r0, r3
 8004162:	f000 f9bb 	bl	80044dc <RCCEx_PLL2_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800416a:	e00c      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x10c2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3324      	adds	r3, #36	; 0x24
 8004170:	2102      	movs	r1, #2
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fad4 	bl	8004720 <RCCEx_PLL3_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800417c:	e003      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	75fb      	strb	r3, [r7, #23]
      break;
 8004182:	e000      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      break;
 8004184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004186:	7dfb      	ldrb	r3, [r7, #23]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10f      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x10e8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800418c:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800419a:	4902      	ldr	r1, [pc, #8]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800419c:	4313      	orrs	r3, r2
 800419e:	658b      	str	r3, [r1, #88]	; 0x58
 80041a0:	e006      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x10ec>
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
 80041a8:	080062f0 	.word	0x080062f0
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
 80041ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d033      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1160>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041c6:	d01c      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x113e>
 80041c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041cc:	d816      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x1138>
 80041ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d2:	d003      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1118>
 80041d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041d8:	d007      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x1126>
 80041da:	e00f      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x1138>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041dc:	4b53      	ldr	r3, [pc, #332]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	4a52      	ldr	r2, [pc, #328]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 80041e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80041e8:	e00c      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3324      	adds	r3, #36	; 0x24
 80041ee:	2101      	movs	r1, #1
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fa95 	bl	8004720 <RCCEx_PLL3_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80041fa:	e003      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1140>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004200:	e000      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1140>
      break;
 8004202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x115c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800420a:	4b48      	ldr	r3, [pc, #288]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004218:	4944      	ldr	r1, [pc, #272]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800421a:	4313      	orrs	r3, r2
 800421c:	654b      	str	r3, [r1, #84]	; 0x54
 800421e:	e001      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1160>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004220:	7dfb      	ldrb	r3, [r7, #23]
 8004222:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d037      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004234:	2b00      	cmp	r3, #0
 8004236:	d009      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004240:	d004      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004242:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 8004246:	483a      	ldr	r0, [pc, #232]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x126c>)
 8004248:	f7fc fa8d 	bl	8000766 <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1198>
 8004254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004258:	d007      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x11a6>
 800425a:	e00f      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x11b8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425c:	4b33      	ldr	r3, [pc, #204]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	4a32      	ldr	r2, [pc, #200]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004266:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004268:	e00b      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x11be>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3304      	adds	r3, #4
 800426e:	2102      	movs	r1, #2
 8004270:	4618      	mov	r0, r3
 8004272:	f000 f933 	bl	80044dc <RCCEx_PLL2_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800427a:	e002      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x11be>

    default:
      ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	75fb      	strb	r3, [r7, #23]
      break;
 8004280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004282:	7dfb      	ldrb	r3, [r7, #23]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x11d8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004288:	4b28      	ldr	r3, [pc, #160]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800428a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004294:	4925      	ldr	r1, [pc, #148]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004296:	4313      	orrs	r3, r2
 8004298:	64cb      	str	r3, [r1, #76]	; 0x4c
 800429a:	e001      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x11fe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3324      	adds	r3, #36	; 0x24
 80042b0:	2102      	movs	r1, #2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fa34 	bl	8004720 <RCCEx_PLL3_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x11fe>
    {
      status=HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d034      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1274>
  {

    switch(PeriphClkInit->RngClockSelection)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d6:	d017      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1244>
 80042d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042dc:	d811      	bhi.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x123e>
 80042de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e2:	d013      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1248>
 80042e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e8:	d80b      	bhi.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x123e>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d010      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80042ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f2:	d106      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x123e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f4:	4b0d      	ldr	r3, [pc, #52]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	4a0c      	ldr	r2, [pc, #48]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 80042fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004300:	e007      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x124e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	75fb      	strb	r3, [r7, #23]
      break;
 8004306:	e004      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x124e>
      break;
 8004308:	bf00      	nop
 800430a:	e002      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x124e>
      break;
 800430c:	bf00      	nop
 800430e:	e000      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x124e>
      break;
 8004310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004312:	7dfb      	ldrb	r3, [r7, #23]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10d      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1270>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004318:	4b04      	ldr	r3, [pc, #16]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800431a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004324:	4901      	ldr	r1, [pc, #4]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004326:	4313      	orrs	r3, r2
 8004328:	654b      	str	r3, [r1, #84]	; 0x54
 800432a:	e005      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1274>
 800432c:	58024400 	.word	0x58024400
 8004330:	080062f0 	.word	0x080062f0
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004334:	7dfb      	ldrb	r3, [r7, #23]
 8004336:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d016      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x12ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	2b00      	cmp	r3, #0
 800434a:	d009      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x129c>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004354:	d004      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x129c>
 8004356:	f240 51e7 	movw	r1, #1511	; 0x5e7
 800435a:	485e      	ldr	r0, [pc, #376]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800435c:	f7fc fa03 	bl	8000766 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004360:	4b5d      	ldr	r3, [pc, #372]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004364:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	495a      	ldr	r1, [pc, #360]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800436e:	4313      	orrs	r3, r2
 8004370:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d019      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x12da>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800438e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004392:	d004      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x12da>
 8004394:	f240 51f1 	movw	r1, #1521	; 0x5f1
 8004398:	484e      	ldr	r0, [pc, #312]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800439a:	f7fc f9e4 	bl	8000766 <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800439e:	4b4e      	ldr	r3, [pc, #312]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043ac:	494a      	ldr	r1, [pc, #296]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1316>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043ce:	d004      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1316>
 80043d0:	f240 51fb 	movw	r1, #1531	; 0x5fb
 80043d4:	483f      	ldr	r0, [pc, #252]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043d6:	f7fc f9c6 	bl	8000766 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043da:	4b3f      	ldr	r3, [pc, #252]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80043dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043e6:	493c      	ldr	r1, [pc, #240]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01d      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1354>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800440c:	d004      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1354>
 800440e:	f240 6111 	movw	r1, #1553	; 0x611
 8004412:	4830      	ldr	r0, [pc, #192]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004414:	f7fc f9a7 	bl	8000766 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004418:	4b2f      	ldr	r3, [pc, #188]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	4a2e      	ldr	r2, [pc, #184]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800441e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004422:	6113      	str	r3, [r2, #16]
 8004424:	4b2c      	ldr	r3, [pc, #176]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800442e:	492a      	ldr	r1, [pc, #168]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004430:	4313      	orrs	r3, r2
 8004432:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	da1b      	bge.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x13b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00e      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x139e>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800444c:	d009      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x139e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004456:	d004      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x139e>
 8004458:	f240 611b 	movw	r1, #1563	; 0x61b
 800445c:	481d      	ldr	r0, [pc, #116]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800445e:	f7fc f982 	bl	8000766 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004462:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004466:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446e:	491a      	ldr	r1, [pc, #104]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004470:	4313      	orrs	r3, r2
 8004472:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01f      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x13fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004486:	2b00      	cmp	r3, #0
 8004488:	d010      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004494:	d00a      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044a0:	d004      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80044a2:	f240 6125 	movw	r1, #1573	; 0x625
 80044a6:	480b      	ldr	r0, [pc, #44]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a8:	f7fc f95d 	bl	8000766 <assert_failed>

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ba:	4907      	ldr	r1, [pc, #28]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80044c0:	7dbb      	ldrb	r3, [r7, #22]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x1406>
  {
    return HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	e000      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1408>
  }
  return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	080062f0 	.word	0x080062f0
 80044d8:	58024400 	.word	0x58024400

080044dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <RCCEx_PLL2_Config+0x1e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b3f      	cmp	r3, #63	; 0x3f
 80044f8:	d904      	bls.n	8004504 <RCCEx_PLL2_Config+0x28>
 80044fa:	f640 51c2 	movw	r1, #3522	; 0xdc2
 80044fe:	4885      	ldr	r0, [pc, #532]	; (8004714 <RCCEx_PLL2_Config+0x238>)
 8004500:	f7fc f931 	bl	8000766 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b03      	cmp	r3, #3
 800450a:	d904      	bls.n	8004516 <RCCEx_PLL2_Config+0x3a>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004514:	d904      	bls.n	8004520 <RCCEx_PLL2_Config+0x44>
 8004516:	f640 51c3 	movw	r1, #3523	; 0xdc3
 800451a:	487e      	ldr	r0, [pc, #504]	; (8004714 <RCCEx_PLL2_Config+0x238>)
 800451c:	f7fc f923 	bl	8000766 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <RCCEx_PLL2_Config+0x54>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b80      	cmp	r3, #128	; 0x80
 800452e:	d904      	bls.n	800453a <RCCEx_PLL2_Config+0x5e>
 8004530:	f640 51c4 	movw	r1, #3524	; 0xdc4
 8004534:	4877      	ldr	r0, [pc, #476]	; (8004714 <RCCEx_PLL2_Config+0x238>)
 8004536:	f7fc f916 	bl	8000766 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <RCCEx_PLL2_Config+0x6e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b80      	cmp	r3, #128	; 0x80
 8004548:	d904      	bls.n	8004554 <RCCEx_PLL2_Config+0x78>
 800454a:	f640 51c5 	movw	r1, #3525	; 0xdc5
 800454e:	4871      	ldr	r0, [pc, #452]	; (8004714 <RCCEx_PLL2_Config+0x238>)
 8004550:	f7fc f909 	bl	8000766 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <RCCEx_PLL2_Config+0x88>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b80      	cmp	r3, #128	; 0x80
 8004562:	d904      	bls.n	800456e <RCCEx_PLL2_Config+0x92>
 8004564:	f640 51c6 	movw	r1, #3526	; 0xdc6
 8004568:	486a      	ldr	r0, [pc, #424]	; (8004714 <RCCEx_PLL2_Config+0x238>)
 800456a:	f7fc f8fc 	bl	8000766 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d010      	beq.n	8004598 <RCCEx_PLL2_Config+0xbc>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	2b40      	cmp	r3, #64	; 0x40
 800457c:	d00c      	beq.n	8004598 <RCCEx_PLL2_Config+0xbc>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	2b80      	cmp	r3, #128	; 0x80
 8004584:	d008      	beq.n	8004598 <RCCEx_PLL2_Config+0xbc>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	2bc0      	cmp	r3, #192	; 0xc0
 800458c:	d004      	beq.n	8004598 <RCCEx_PLL2_Config+0xbc>
 800458e:	f640 51c7 	movw	r1, #3527	; 0xdc7
 8004592:	4860      	ldr	r0, [pc, #384]	; (8004714 <RCCEx_PLL2_Config+0x238>)
 8004594:	f7fc f8e7 	bl	8000766 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <RCCEx_PLL2_Config+0xd6>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d004      	beq.n	80045b2 <RCCEx_PLL2_Config+0xd6>
 80045a8:	f640 51c8 	movw	r1, #3528	; 0xdc8
 80045ac:	4859      	ldr	r0, [pc, #356]	; (8004714 <RCCEx_PLL2_Config+0x238>)
 80045ae:	f7fc f8da 	bl	8000766 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ba:	d304      	bcc.n	80045c6 <RCCEx_PLL2_Config+0xea>
 80045bc:	f640 51c9 	movw	r1, #3529	; 0xdc9
 80045c0:	4854      	ldr	r0, [pc, #336]	; (8004714 <RCCEx_PLL2_Config+0x238>)
 80045c2:	f7fc f8d0 	bl	8000766 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045c6:	4b54      	ldr	r3, [pc, #336]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d101      	bne.n	80045d6 <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e099      	b.n	800470a <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80045d6:	4b50      	ldr	r3, [pc, #320]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a4f      	ldr	r2, [pc, #316]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 80045dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e2:	f7fc fc4f 	bl	8000e84 <HAL_GetTick>
 80045e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045e8:	e008      	b.n	80045fc <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80045ea:	f7fc fc4b 	bl	8000e84 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e086      	b.n	800470a <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045fc:	4b46      	ldr	r3, [pc, #280]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1f0      	bne.n	80045ea <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004608:	4b43      	ldr	r3, [pc, #268]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	031b      	lsls	r3, r3, #12
 8004616:	4940      	ldr	r1, [pc, #256]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 8004618:	4313      	orrs	r3, r2
 800461a:	628b      	str	r3, [r1, #40]	; 0x28
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	3b01      	subs	r3, #1
 8004622:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	3b01      	subs	r3, #1
 800462c:	025b      	lsls	r3, r3, #9
 800462e:	b29b      	uxth	r3, r3
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	3b01      	subs	r3, #1
 8004638:	041b      	lsls	r3, r3, #16
 800463a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	3b01      	subs	r3, #1
 8004646:	061b      	lsls	r3, r3, #24
 8004648:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800464c:	4932      	ldr	r1, [pc, #200]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 800464e:	4313      	orrs	r3, r2
 8004650:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004652:	4b31      	ldr	r3, [pc, #196]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	492e      	ldr	r1, [pc, #184]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 8004660:	4313      	orrs	r3, r2
 8004662:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004664:	4b2c      	ldr	r3, [pc, #176]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	f023 0220 	bic.w	r2, r3, #32
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	4929      	ldr	r1, [pc, #164]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 8004672:	4313      	orrs	r3, r2
 8004674:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004676:	4b28      	ldr	r3, [pc, #160]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	4a27      	ldr	r2, [pc, #156]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 800467c:	f023 0310 	bic.w	r3, r3, #16
 8004680:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004682:	4b25      	ldr	r3, [pc, #148]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 8004684:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004686:	4b25      	ldr	r3, [pc, #148]	; (800471c <RCCEx_PLL2_Config+0x240>)
 8004688:	4013      	ands	r3, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	69d2      	ldr	r2, [r2, #28]
 800468e:	00d2      	lsls	r2, r2, #3
 8004690:	4921      	ldr	r1, [pc, #132]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 8004692:	4313      	orrs	r3, r2
 8004694:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004696:	4b20      	ldr	r3, [pc, #128]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	4a1f      	ldr	r2, [pc, #124]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 800469c:	f043 0310 	orr.w	r3, r3, #16
 80046a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046a8:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	4a1a      	ldr	r2, [pc, #104]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 80046ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046b4:	e00f      	b.n	80046d6 <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d106      	bne.n	80046ca <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80046bc:	4b16      	ldr	r3, [pc, #88]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	4a15      	ldr	r2, [pc, #84]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 80046c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046c8:	e005      	b.n	80046d6 <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80046ca:	4b13      	ldr	r3, [pc, #76]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 80046cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ce:	4a12      	ldr	r2, [pc, #72]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 80046d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80046d6:	4b10      	ldr	r3, [pc, #64]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a0f      	ldr	r2, [pc, #60]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 80046dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e2:	f7fc fbcf 	bl	8000e84 <HAL_GetTick>
 80046e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046e8:	e008      	b.n	80046fc <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80046ea:	f7fc fbcb 	bl	8000e84 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e006      	b.n	800470a <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046fc:	4b06      	ldr	r3, [pc, #24]	; (8004718 <RCCEx_PLL2_Config+0x23c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 8004708:	7bfb      	ldrb	r3, [r7, #15]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	080062f0 	.word	0x080062f0
 8004718:	58024400 	.word	0x58024400
 800471c:	ffff0007 	.word	0xffff0007

08004720 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <RCCEx_PLL3_Config+0x1e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b3f      	cmp	r3, #63	; 0x3f
 800473c:	d904      	bls.n	8004748 <RCCEx_PLL3_Config+0x28>
 800473e:	f640 612a 	movw	r1, #3626	; 0xe2a
 8004742:	4887      	ldr	r0, [pc, #540]	; (8004960 <RCCEx_PLL3_Config+0x240>)
 8004744:	f7fc f80f 	bl	8000766 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d904      	bls.n	800475a <RCCEx_PLL3_Config+0x3a>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004758:	d904      	bls.n	8004764 <RCCEx_PLL3_Config+0x44>
 800475a:	f640 612b 	movw	r1, #3627	; 0xe2b
 800475e:	4880      	ldr	r0, [pc, #512]	; (8004960 <RCCEx_PLL3_Config+0x240>)
 8004760:	f7fc f801 	bl	8000766 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <RCCEx_PLL3_Config+0x54>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2b80      	cmp	r3, #128	; 0x80
 8004772:	d904      	bls.n	800477e <RCCEx_PLL3_Config+0x5e>
 8004774:	f640 612c 	movw	r1, #3628	; 0xe2c
 8004778:	4879      	ldr	r0, [pc, #484]	; (8004960 <RCCEx_PLL3_Config+0x240>)
 800477a:	f7fb fff4 	bl	8000766 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <RCCEx_PLL3_Config+0x6e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b80      	cmp	r3, #128	; 0x80
 800478c:	d904      	bls.n	8004798 <RCCEx_PLL3_Config+0x78>
 800478e:	f640 612d 	movw	r1, #3629	; 0xe2d
 8004792:	4873      	ldr	r0, [pc, #460]	; (8004960 <RCCEx_PLL3_Config+0x240>)
 8004794:	f7fb ffe7 	bl	8000766 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <RCCEx_PLL3_Config+0x88>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	2b80      	cmp	r3, #128	; 0x80
 80047a6:	d904      	bls.n	80047b2 <RCCEx_PLL3_Config+0x92>
 80047a8:	f640 612e 	movw	r1, #3630	; 0xe2e
 80047ac:	486c      	ldr	r0, [pc, #432]	; (8004960 <RCCEx_PLL3_Config+0x240>)
 80047ae:	f7fb ffda 	bl	8000766 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d013      	beq.n	80047e2 <RCCEx_PLL3_Config+0xc2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c2:	d00e      	beq.n	80047e2 <RCCEx_PLL3_Config+0xc2>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047cc:	d009      	beq.n	80047e2 <RCCEx_PLL3_Config+0xc2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047d6:	d004      	beq.n	80047e2 <RCCEx_PLL3_Config+0xc2>
 80047d8:	f640 612f 	movw	r1, #3631	; 0xe2f
 80047dc:	4860      	ldr	r0, [pc, #384]	; (8004960 <RCCEx_PLL3_Config+0x240>)
 80047de:	f7fb ffc2 	bl	8000766 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d009      	beq.n	80047fe <RCCEx_PLL3_Config+0xde>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f2:	d004      	beq.n	80047fe <RCCEx_PLL3_Config+0xde>
 80047f4:	f44f 6163 	mov.w	r1, #3632	; 0xe30
 80047f8:	4859      	ldr	r0, [pc, #356]	; (8004960 <RCCEx_PLL3_Config+0x240>)
 80047fa:	f7fb ffb4 	bl	8000766 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004806:	d304      	bcc.n	8004812 <RCCEx_PLL3_Config+0xf2>
 8004808:	f640 6131 	movw	r1, #3633	; 0xe31
 800480c:	4854      	ldr	r0, [pc, #336]	; (8004960 <RCCEx_PLL3_Config+0x240>)
 800480e:	f7fb ffaa 	bl	8000766 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004812:	4b54      	ldr	r3, [pc, #336]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b03      	cmp	r3, #3
 800481c:	d101      	bne.n	8004822 <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e099      	b.n	8004956 <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004822:	4b50      	ldr	r3, [pc, #320]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a4f      	ldr	r2, [pc, #316]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 8004828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800482c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800482e:	f7fc fb29 	bl	8000e84 <HAL_GetTick>
 8004832:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004834:	e008      	b.n	8004848 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004836:	f7fc fb25 	bl	8000e84 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e086      	b.n	8004956 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004848:	4b46      	ldr	r3, [pc, #280]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1f0      	bne.n	8004836 <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004854:	4b43      	ldr	r3, [pc, #268]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	051b      	lsls	r3, r3, #20
 8004862:	4940      	ldr	r1, [pc, #256]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 8004864:	4313      	orrs	r3, r2
 8004866:	628b      	str	r3, [r1, #40]	; 0x28
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	3b01      	subs	r3, #1
 800486e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	3b01      	subs	r3, #1
 8004878:	025b      	lsls	r3, r3, #9
 800487a:	b29b      	uxth	r3, r3
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	3b01      	subs	r3, #1
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	3b01      	subs	r3, #1
 8004892:	061b      	lsls	r3, r3, #24
 8004894:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004898:	4932      	ldr	r1, [pc, #200]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 800489a:	4313      	orrs	r3, r2
 800489c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800489e:	4b31      	ldr	r3, [pc, #196]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	492e      	ldr	r1, [pc, #184]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80048b0:	4b2c      	ldr	r3, [pc, #176]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	4929      	ldr	r1, [pc, #164]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80048c2:	4b28      	ldr	r3, [pc, #160]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	4a27      	ldr	r2, [pc, #156]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 80048c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80048ce:	4b25      	ldr	r3, [pc, #148]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 80048d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048d2:	4b25      	ldr	r3, [pc, #148]	; (8004968 <RCCEx_PLL3_Config+0x248>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	69d2      	ldr	r2, [r2, #28]
 80048da:	00d2      	lsls	r2, r2, #3
 80048dc:	4921      	ldr	r1, [pc, #132]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	4a1f      	ldr	r2, [pc, #124]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80048f4:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	4a1a      	ldr	r2, [pc, #104]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 80048fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004900:	e00f      	b.n	8004922 <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d106      	bne.n	8004916 <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004908:	4b16      	ldr	r3, [pc, #88]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	4a15      	ldr	r2, [pc, #84]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 800490e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004912:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004914:	e005      	b.n	8004922 <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004916:	4b13      	ldr	r3, [pc, #76]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	4a12      	ldr	r2, [pc, #72]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 800491c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004920:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004922:	4b10      	ldr	r3, [pc, #64]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a0f      	ldr	r2, [pc, #60]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 8004928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800492e:	f7fc faa9 	bl	8000e84 <HAL_GetTick>
 8004932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004934:	e008      	b.n	8004948 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004936:	f7fc faa5 	bl	8000e84 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e006      	b.n	8004956 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004948:	4b06      	ldr	r3, [pc, #24]	; (8004964 <RCCEx_PLL3_Config+0x244>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 8004954:	7bfb      	ldrb	r3, [r7, #15]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	080062f0 	.word	0x080062f0
 8004964:	58024400 	.word	0x58024400
 8004968:	ffff0007 	.word	0xffff0007

0800496c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e292      	b.n	8004ea8 <HAL_SPI_Init+0x53c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a97      	ldr	r2, [pc, #604]	; (8004be4 <HAL_SPI_Init+0x278>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d01c      	beq.n	80049c6 <HAL_SPI_Init+0x5a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a95      	ldr	r2, [pc, #596]	; (8004be8 <HAL_SPI_Init+0x27c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d017      	beq.n	80049c6 <HAL_SPI_Init+0x5a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a94      	ldr	r2, [pc, #592]	; (8004bec <HAL_SPI_Init+0x280>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d012      	beq.n	80049c6 <HAL_SPI_Init+0x5a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a92      	ldr	r2, [pc, #584]	; (8004bf0 <HAL_SPI_Init+0x284>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00d      	beq.n	80049c6 <HAL_SPI_Init+0x5a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a91      	ldr	r2, [pc, #580]	; (8004bf4 <HAL_SPI_Init+0x288>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d008      	beq.n	80049c6 <HAL_SPI_Init+0x5a>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a8f      	ldr	r2, [pc, #572]	; (8004bf8 <HAL_SPI_Init+0x28c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <HAL_SPI_Init+0x5a>
 80049be:	21fb      	movs	r1, #251	; 0xfb
 80049c0:	488e      	ldr	r0, [pc, #568]	; (8004bfc <HAL_SPI_Init+0x290>)
 80049c2:	f7fb fed0 	bl	8000766 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <HAL_SPI_Init+0x74>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d6:	d003      	beq.n	80049e0 <HAL_SPI_Init+0x74>
 80049d8:	21fc      	movs	r1, #252	; 0xfc
 80049da:	4888      	ldr	r0, [pc, #544]	; (8004bfc <HAL_SPI_Init+0x290>)
 80049dc:	f7fb fec3 	bl	8000766 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d012      	beq.n	8004a0e <HAL_SPI_Init+0xa2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049f0:	d00d      	beq.n	8004a0e <HAL_SPI_Init+0xa2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80049fa:	d008      	beq.n	8004a0e <HAL_SPI_Init+0xa2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a04:	d003      	beq.n	8004a0e <HAL_SPI_Init+0xa2>
 8004a06:	21fd      	movs	r1, #253	; 0xfd
 8004a08:	487c      	ldr	r0, [pc, #496]	; (8004bfc <HAL_SPI_Init+0x290>)
 8004a0a:	f7fb feac 	bl	8000766 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	2b1f      	cmp	r3, #31
 8004a14:	d077      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b1e      	cmp	r3, #30
 8004a1c:	d073      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	2b1d      	cmp	r3, #29
 8004a24:	d06f      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	2b1c      	cmp	r3, #28
 8004a2c:	d06b      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	2b1b      	cmp	r3, #27
 8004a34:	d067      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	2b1a      	cmp	r3, #26
 8004a3c:	d063      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b19      	cmp	r3, #25
 8004a44:	d05f      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	2b18      	cmp	r3, #24
 8004a4c:	d05b      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2b17      	cmp	r3, #23
 8004a54:	d057      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b16      	cmp	r3, #22
 8004a5c:	d053      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b15      	cmp	r3, #21
 8004a64:	d04f      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	2b14      	cmp	r3, #20
 8004a6c:	d04b      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b13      	cmp	r3, #19
 8004a74:	d047      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b15      	cmp	r3, #21
 8004a7c:	d043      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	2b12      	cmp	r3, #18
 8004a84:	d03f      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b11      	cmp	r3, #17
 8004a8c:	d03b      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d037      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	2b0f      	cmp	r3, #15
 8004a9c:	d033      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	2b0e      	cmp	r3, #14
 8004aa4:	d02f      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	2b0d      	cmp	r3, #13
 8004aac:	d02b      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	2b0c      	cmp	r3, #12
 8004ab4:	d027      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2b0b      	cmp	r3, #11
 8004abc:	d023      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	2b0a      	cmp	r3, #10
 8004ac4:	d01f      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	2b09      	cmp	r3, #9
 8004acc:	d01b      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d017      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2b07      	cmp	r3, #7
 8004adc:	d013      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	2b06      	cmp	r3, #6
 8004ae4:	d00f      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2b05      	cmp	r3, #5
 8004aec:	d00b      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d007      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d003      	beq.n	8004b06 <HAL_SPI_Init+0x19a>
 8004afe:	21fe      	movs	r1, #254	; 0xfe
 8004b00:	483e      	ldr	r0, [pc, #248]	; (8004bfc <HAL_SPI_Init+0x290>)
 8004b02:	f7fb fe30 	bl	8000766 <assert_failed>
  assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d047      	beq.n	8004b9e <HAL_SPI_Init+0x232>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d043      	beq.n	8004b9e <HAL_SPI_Init+0x232>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1a:	2b40      	cmp	r3, #64	; 0x40
 8004b1c:	d03f      	beq.n	8004b9e <HAL_SPI_Init+0x232>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b22:	2b60      	cmp	r3, #96	; 0x60
 8004b24:	d03b      	beq.n	8004b9e <HAL_SPI_Init+0x232>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2a:	2b80      	cmp	r3, #128	; 0x80
 8004b2c:	d037      	beq.n	8004b9e <HAL_SPI_Init+0x232>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b32:	2ba0      	cmp	r3, #160	; 0xa0
 8004b34:	d033      	beq.n	8004b9e <HAL_SPI_Init+0x232>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b3c:	d02f      	beq.n	8004b9e <HAL_SPI_Init+0x232>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	2be0      	cmp	r3, #224	; 0xe0
 8004b44:	d02b      	beq.n	8004b9e <HAL_SPI_Init+0x232>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4e:	d026      	beq.n	8004b9e <HAL_SPI_Init+0x232>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b54:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8004b58:	d021      	beq.n	8004b9e <HAL_SPI_Init+0x232>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004b62:	d01c      	beq.n	8004b9e <HAL_SPI_Init+0x232>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b68:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8004b6c:	d017      	beq.n	8004b9e <HAL_SPI_Init+0x232>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b72:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004b76:	d012      	beq.n	8004b9e <HAL_SPI_Init+0x232>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7c:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8004b80:	d00d      	beq.n	8004b9e <HAL_SPI_Init+0x232>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004b8a:	d008      	beq.n	8004b9e <HAL_SPI_Init+0x232>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b90:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004b94:	d003      	beq.n	8004b9e <HAL_SPI_Init+0x232>
 8004b96:	21ff      	movs	r1, #255	; 0xff
 8004b98:	4818      	ldr	r0, [pc, #96]	; (8004bfc <HAL_SPI_Init+0x290>)
 8004b9a:	f7fb fde4 	bl	8000766 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ba6:	d00d      	beq.n	8004bc4 <HAL_SPI_Init+0x258>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d009      	beq.n	8004bc4 <HAL_SPI_Init+0x258>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bb8:	d004      	beq.n	8004bc4 <HAL_SPI_Init+0x258>
 8004bba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bbe:	480f      	ldr	r0, [pc, #60]	; (8004bfc <HAL_SPI_Init+0x290>)
 8004bc0:	f7fb fdd1 	bl	8000766 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bcc:	d018      	beq.n	8004c00 <HAL_SPI_Init+0x294>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d014      	beq.n	8004c00 <HAL_SPI_Init+0x294>
 8004bd6:	f240 1101 	movw	r1, #257	; 0x101
 8004bda:	4808      	ldr	r0, [pc, #32]	; (8004bfc <HAL_SPI_Init+0x290>)
 8004bdc:	f7fb fdc3 	bl	8000766 <assert_failed>
 8004be0:	e00e      	b.n	8004c00 <HAL_SPI_Init+0x294>
 8004be2:	bf00      	nop
 8004be4:	40013000 	.word	0x40013000
 8004be8:	40003800 	.word	0x40003800
 8004bec:	40003c00 	.word	0x40003c00
 8004bf0:	40013400 	.word	0x40013400
 8004bf4:	40015000 	.word	0x40015000
 8004bf8:	58001400 	.word	0x58001400
 8004bfc:	0800632c 	.word	0x0800632c
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d027      	beq.n	8004c58 <HAL_SPI_Init+0x2ec>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c10:	d022      	beq.n	8004c58 <HAL_SPI_Init+0x2ec>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c1a:	d01d      	beq.n	8004c58 <HAL_SPI_Init+0x2ec>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c24:	d018      	beq.n	8004c58 <HAL_SPI_Init+0x2ec>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2e:	d013      	beq.n	8004c58 <HAL_SPI_Init+0x2ec>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c38:	d00e      	beq.n	8004c58 <HAL_SPI_Init+0x2ec>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004c42:	d009      	beq.n	8004c58 <HAL_SPI_Init+0x2ec>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f1b3 4fe0 	cmp.w	r3, #1879048192	; 0x70000000
 8004c4c:	d004      	beq.n	8004c58 <HAL_SPI_Init+0x2ec>
 8004c4e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004c52:	4897      	ldr	r0, [pc, #604]	; (8004eb0 <HAL_SPI_Init+0x544>)
 8004c54:	f7fb fd87 	bl	8000766 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d009      	beq.n	8004c74 <HAL_SPI_Init+0x308>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c68:	d004      	beq.n	8004c74 <HAL_SPI_Init+0x308>
 8004c6a:	f240 1103 	movw	r1, #259	; 0x103
 8004c6e:	4890      	ldr	r0, [pc, #576]	; (8004eb0 <HAL_SPI_Init+0x544>)
 8004c70:	f7fb fd79 	bl	8000766 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d009      	beq.n	8004c90 <HAL_SPI_Init+0x324>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c84:	d004      	beq.n	8004c90 <HAL_SPI_Init+0x324>
 8004c86:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004c8a:	4889      	ldr	r0, [pc, #548]	; (8004eb0 <HAL_SPI_Init+0x544>)
 8004c8c:	f7fb fd6b 	bl	8000766 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d11b      	bne.n	8004cd0 <HAL_SPI_Init+0x364>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d009      	beq.n	8004cb4 <HAL_SPI_Init+0x348>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ca8:	d004      	beq.n	8004cb4 <HAL_SPI_Init+0x348>
 8004caa:	f240 1107 	movw	r1, #263	; 0x107
 8004cae:	4880      	ldr	r0, [pc, #512]	; (8004eb0 <HAL_SPI_Init+0x544>)
 8004cb0:	f7fb fd59 	bl	8000766 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d009      	beq.n	8004cd0 <HAL_SPI_Init+0x364>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cc4:	d004      	beq.n	8004cd0 <HAL_SPI_Init+0x364>
 8004cc6:	f44f 7184 	mov.w	r1, #264	; 0x108
 8004cca:	4879      	ldr	r0, [pc, #484]	; (8004eb0 <HAL_SPI_Init+0x544>)
 8004ccc:	f7fb fd4b 	bl	8000766 <assert_failed>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a76      	ldr	r2, [pc, #472]	; (8004eb4 <HAL_SPI_Init+0x548>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00f      	beq.n	8004d00 <HAL_SPI_Init+0x394>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a74      	ldr	r2, [pc, #464]	; (8004eb8 <HAL_SPI_Init+0x54c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00a      	beq.n	8004d00 <HAL_SPI_Init+0x394>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a73      	ldr	r2, [pc, #460]	; (8004ebc <HAL_SPI_Init+0x550>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d005      	beq.n	8004d00 <HAL_SPI_Init+0x394>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	2b0f      	cmp	r3, #15
 8004cfa:	d901      	bls.n	8004d00 <HAL_SPI_Init+0x394>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0d3      	b.n	8004ea8 <HAL_SPI_Init+0x53c>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fbb1 	bl	8005468 <SPI_GetPacketSize>
 8004d06:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a69      	ldr	r2, [pc, #420]	; (8004eb4 <HAL_SPI_Init+0x548>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00c      	beq.n	8004d2c <HAL_SPI_Init+0x3c0>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a68      	ldr	r2, [pc, #416]	; (8004eb8 <HAL_SPI_Init+0x54c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d007      	beq.n	8004d2c <HAL_SPI_Init+0x3c0>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a66      	ldr	r2, [pc, #408]	; (8004ebc <HAL_SPI_Init+0x550>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d002      	beq.n	8004d2c <HAL_SPI_Init+0x3c0>
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d811      	bhi.n	8004d50 <HAL_SPI_Init+0x3e4>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004d30:	4a60      	ldr	r2, [pc, #384]	; (8004eb4 <HAL_SPI_Init+0x548>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d009      	beq.n	8004d4a <HAL_SPI_Init+0x3de>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a5f      	ldr	r2, [pc, #380]	; (8004eb8 <HAL_SPI_Init+0x54c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <HAL_SPI_Init+0x3de>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a5d      	ldr	r2, [pc, #372]	; (8004ebc <HAL_SPI_Init+0x550>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d104      	bne.n	8004d54 <HAL_SPI_Init+0x3e8>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	d901      	bls.n	8004d54 <HAL_SPI_Init+0x3e8>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e0a9      	b.n	8004ea8 <HAL_SPI_Init+0x53c>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d106      	bne.n	8004d6e <HAL_SPI_Init+0x402>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fb fd5f 	bl	800082c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d8e:	d119      	bne.n	8004dc4 <HAL_SPI_Init+0x458>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d98:	d103      	bne.n	8004da2 <HAL_SPI_Init+0x436>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d008      	beq.n	8004db4 <HAL_SPI_Init+0x448>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10c      	bne.n	8004dc4 <HAL_SPI_Init+0x458>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004db2:	d107      	bne.n	8004dc4 <HAL_SPI_Init+0x458>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dc2:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	ea42 0103 	orr.w	r1, r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e24:	ea42 0103 	orr.w	r1, r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d113      	bne.n	8004e64 <HAL_SPI_Init+0x4f8>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e4e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e62:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
 8004e72:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <HAL_SPI_Init+0x52a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	0800632c 	.word	0x0800632c
 8004eb4:	40013000 	.word	0x40013000
 8004eb8:	40003800 	.word	0x40003800
 8004ebc:	40003c00 	.word	0x40003c00

08004ec0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	; 0x28
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3320      	adds	r3, #32
 8004ed6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00e      	beq.n	8004f02 <HAL_SPI_Transmit+0x42>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004eec:	d009      	beq.n	8004f02 <HAL_SPI_Transmit+0x42>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ef6:	d004      	beq.n	8004f02 <HAL_SPI_Transmit+0x42>
 8004ef8:	f240 311e 	movw	r1, #798	; 0x31e
 8004efc:	4899      	ldr	r0, [pc, #612]	; (8005164 <HAL_SPI_Transmit+0x2a4>)
 8004efe:	f7fb fc32 	bl	8000766 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_SPI_Transmit+0x50>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e1d8      	b.n	80052c2 <HAL_SPI_Transmit+0x402>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f18:	f7fb ffb4 	bl	8000e84 <HAL_GetTick>
 8004f1c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d007      	beq.n	8004f3a <HAL_SPI_Transmit+0x7a>
  {
    errorcode = HAL_BUSY;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004f36:	7efb      	ldrb	r3, [r7, #27]
 8004f38:	e1c3      	b.n	80052c2 <HAL_SPI_Transmit+0x402>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_SPI_Transmit+0x86>
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d107      	bne.n	8004f56 <HAL_SPI_Transmit+0x96>
  {
    errorcode = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004f52:	7efb      	ldrb	r3, [r7, #27]
 8004f54:	e1b5      	b.n	80052c2 <HAL_SPI_Transmit+0x402>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2203      	movs	r2, #3
 8004f5a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	88fa      	ldrh	r2, [r7, #6]
 8004f70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	88fa      	ldrh	r2, [r7, #6]
 8004f78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004fa6:	d107      	bne.n	8004fb8 <HAL_SPI_Transmit+0xf8>
  {
    SPI_1LINE_TX(hspi);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	4b6a      	ldr	r3, [pc, #424]	; (8005168 <HAL_SPI_Transmit+0x2a8>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	88f9      	ldrh	r1, [r7, #6]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	430b      	orrs	r3, r1
 8004fca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe4:	d107      	bne.n	8004ff6 <HAL_SPI_Transmit+0x136>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	2b0f      	cmp	r3, #15
 8004ffc:	d947      	bls.n	800508e <HAL_SPI_Transmit+0x1ce>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004ffe:	e03f      	b.n	8005080 <HAL_SPI_Transmit+0x1c0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b02      	cmp	r3, #2
 800500c:	d114      	bne.n	8005038 <HAL_SPI_Transmit+0x178>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501e:	1d1a      	adds	r2, r3, #4
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005036:	e023      	b.n	8005080 <HAL_SPI_Transmit+0x1c0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005038:	f7fb ff24 	bl	8000e84 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d803      	bhi.n	8005050 <HAL_SPI_Transmit+0x190>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800504e:	d102      	bne.n	8005056 <HAL_SPI_Transmit+0x196>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d114      	bne.n	8005080 <HAL_SPI_Transmit+0x1c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 f938 	bl	80052cc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800506a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e120      	b.n	80052c2 <HAL_SPI_Transmit+0x402>
    while (hspi->TxXferCount > 0UL)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005086:	b29b      	uxth	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1b9      	bne.n	8005000 <HAL_SPI_Transmit+0x140>
 800508c:	e0f3      	b.n	8005276 <HAL_SPI_Transmit+0x3b6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	2b07      	cmp	r3, #7
 8005094:	f240 80e8 	bls.w	8005268 <HAL_SPI_Transmit+0x3a8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005098:	e05d      	b.n	8005156 <HAL_SPI_Transmit+0x296>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d132      	bne.n	800510e <HAL_SPI_Transmit+0x24e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d918      	bls.n	80050e6 <HAL_SPI_Transmit+0x226>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d014      	beq.n	80050e6 <HAL_SPI_Transmit+0x226>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050cc:	1d1a      	adds	r2, r3, #4
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b02      	subs	r3, #2
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80050e4:	e037      	b.n	8005156 <HAL_SPI_Transmit+0x296>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ea:	881a      	ldrh	r2, [r3, #0]
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f4:	1c9a      	adds	r2, r3, #2
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800510c:	e023      	b.n	8005156 <HAL_SPI_Transmit+0x296>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800510e:	f7fb feb9 	bl	8000e84 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d803      	bhi.n	8005126 <HAL_SPI_Transmit+0x266>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005124:	d102      	bne.n	800512c <HAL_SPI_Transmit+0x26c>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d114      	bne.n	8005156 <HAL_SPI_Transmit+0x296>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f8cd 	bl	80052cc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005140:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e0b5      	b.n	80052c2 <HAL_SPI_Transmit+0x402>
    while (hspi->TxXferCount > 0UL)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d19b      	bne.n	800509a <HAL_SPI_Transmit+0x1da>
 8005162:	e088      	b.n	8005276 <HAL_SPI_Transmit+0x3b6>
 8005164:	0800632c 	.word	0x0800632c
 8005168:	ffff0000 	.word	0xffff0000
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d152      	bne.n	8005220 <HAL_SPI_Transmit+0x360>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b03      	cmp	r3, #3
 8005184:	d918      	bls.n	80051b8 <HAL_SPI_Transmit+0x2f8>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	2b40      	cmp	r3, #64	; 0x40
 800518c:	d914      	bls.n	80051b8 <HAL_SPI_Transmit+0x2f8>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6812      	ldr	r2, [r2, #0]
 8005198:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519e:	1d1a      	adds	r2, r3, #4
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b04      	subs	r3, #4
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80051b6:	e057      	b.n	8005268 <HAL_SPI_Transmit+0x3a8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d917      	bls.n	80051f4 <HAL_SPI_Transmit+0x334>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d013      	beq.n	80051f4 <HAL_SPI_Transmit+0x334>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d0:	881a      	ldrh	r2, [r3, #0]
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051da:	1c9a      	adds	r2, r3, #2
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b02      	subs	r3, #2
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80051f2:	e039      	b.n	8005268 <HAL_SPI_Transmit+0x3a8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3320      	adds	r3, #32
 80051fe:	7812      	ldrb	r2, [r2, #0]
 8005200:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800521e:	e023      	b.n	8005268 <HAL_SPI_Transmit+0x3a8>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005220:	f7fb fe30 	bl	8000e84 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d803      	bhi.n	8005238 <HAL_SPI_Transmit+0x378>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005236:	d102      	bne.n	800523e <HAL_SPI_Transmit+0x37e>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d114      	bne.n	8005268 <HAL_SPI_Transmit+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f844 	bl	80052cc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005252:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e02c      	b.n	80052c2 <HAL_SPI_Transmit+0x402>
    while (hspi->TxXferCount > 0UL)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	f47f af7b 	bne.w	800516c <HAL_SPI_Transmit+0x2ac>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2200      	movs	r2, #0
 800527e:	2108      	movs	r1, #8
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 f8c3 	bl	800540c <SPI_WaitOnFlagUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d007      	beq.n	800529c <HAL_SPI_Transmit+0x3dc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005292:	f043 0220 	orr.w	r2, r3, #32
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 f815 	bl	80052cc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_SPI_Transmit+0x400>
  {
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <HAL_SPI_Transmit+0x402>
  }
  return errorcode;
 80052c0:	7efb      	ldrb	r3, [r7, #27]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop

080052cc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0208 	orr.w	r2, r2, #8
 80052ea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0210 	orr.w	r2, r2, #16
 80052fa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0201 	bic.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6919      	ldr	r1, [r3, #16]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b3c      	ldr	r3, [pc, #240]	; (8005408 <SPI_CloseTransfer+0x13c>)
 8005318:	400b      	ands	r3, r1
 800531a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800532a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b04      	cmp	r3, #4
 8005336:	d014      	beq.n	8005362 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00f      	beq.n	8005362 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005348:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699a      	ldr	r2, [r3, #24]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0220 	orr.w	r2, r2, #32
 8005360:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b03      	cmp	r3, #3
 800536c:	d014      	beq.n	8005398 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00f      	beq.n	8005398 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800537e:	f043 0204 	orr.w	r2, r3, #4
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005396:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00f      	beq.n	80053c2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a8:	f043 0201 	orr.w	r2, r3, #1
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699a      	ldr	r2, [r3, #24]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00f      	beq.n	80053ec <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d2:	f043 0208 	orr.w	r2, r3, #8
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80053fc:	bf00      	nop
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	fffffc90 	.word	0xfffffc90

0800540c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	4613      	mov	r3, r2
 800541a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800541c:	e010      	b.n	8005440 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800541e:	f7fb fd31 	bl	8000e84 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	429a      	cmp	r2, r3
 800542c:	d803      	bhi.n	8005436 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005434:	d102      	bne.n	800543c <SPI_WaitOnFlagUntilTimeout+0x30>
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e00f      	b.n	8005460 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695a      	ldr	r2, [r3, #20]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4013      	ands	r3, r2
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	429a      	cmp	r2, r3
 800545c:	d0df      	beq.n	800541e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005474:	095b      	lsrs	r3, r3, #5
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	3301      	adds	r3, #1
 8005480:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	3307      	adds	r3, #7
 8005486:	08db      	lsrs	r3, r3, #3
 8005488:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
	...

080054a0 <_ZN7DisplayC1Ev>:
 * V = Vertical
 * H = Horizontal
 */
enum class Orientation {V, H};

class Display
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	4a04      	ldr	r2, [pc, #16]	; (80054bc <_ZN7DisplayC1Ev+0x1c>)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	08006464 	.word	0x08006464

080054c0 <_ZN6ST7735C1Ev>:

#define ST7735_COLOR565(r, g, b) (((r & 0x1F) << 11) | ((g & 0x3F) << 5) | ((b & 0x1F)))

#define CLIPVALUE(v, min, max) ((v < min) ? min : ((v > max) ? max : v))

ST7735::ST7735()
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff ffe8 	bl	80054a0 <_ZN7DisplayC1Ev>
 80054d0:	4a0b      	ldr	r2, [pc, #44]	; (8005500 <_ZN6ST7735C1Ev+0x40>)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	601a      	str	r2, [r3, #0]
{
	//1.8 inch display dimensions
	this->orientation = Orientation::V;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	605a      	str	r2, [r3, #4]
	this->v_width_dots = 128;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2280      	movs	r2, #128	; 0x80
 80054e0:	609a      	str	r2, [r3, #8]
	this->v_height_dots = 160;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	22a0      	movs	r2, #160	; 0xa0
 80054e6:	60da      	str	r2, [r3, #12]
	this->v_width_mm = 28.03;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a06      	ldr	r2, [pc, #24]	; (8005504 <_ZN6ST7735C1Ev+0x44>)
 80054ec:	611a      	str	r2, [r3, #16]
	this->v_height_mm = 35.04;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a05      	ldr	r2, [pc, #20]	; (8005508 <_ZN6ST7735C1Ev+0x48>)
 80054f2:	615a      	str	r2, [r3, #20]
}
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	080063f4 	.word	0x080063f4
 8005504:	41e03d71 	.word	0x41e03d71
 8005508:	420c28f6 	.word	0x420c28f6

0800550c <_ZN6ST7735D1Ev>:

ST7735::~ST7735()
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	4a05      	ldr	r2, [pc, #20]	; (800552c <_ZN6ST7735D1Ev+0x20>)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fcb1 	bl	8005e84 <_ZN7DisplayD1Ev>
{
	// TODO Auto-generated destructor stub
}
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	080063f4 	.word	0x080063f4

08005530 <_ZN6ST773511sendCommandEh>:

void ST7735::sendCommand(uint8_t cmd)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	70fb      	strb	r3, [r7, #3]
	this->dcPinReset();
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3354      	adds	r3, #84	; 0x54
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	4798      	blx	r3
	this->sendByte(cmd);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3360      	adds	r3, #96	; 0x60
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	78fa      	ldrb	r2, [r7, #3]
 8005552:	4611      	mov	r1, r2
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	4798      	blx	r3
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <_ZN6ST77358sendDataEh>:

void ST7735::sendData(uint8_t data)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	70fb      	strb	r3, [r7, #3]
	this->dcPinSet();
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3350      	adds	r3, #80	; 0x50
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	4798      	blx	r3
	this->sendByte(data);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3360      	adds	r3, #96	; 0x60
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	78fa      	ldrb	r2, [r7, #3]
 8005582:	4611      	mov	r1, r2
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	4798      	blx	r3
}
 8005588:	bf00      	nop
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <_ZN6ST77354initEv>:

void ST7735::init()
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	this->initIO();
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3344      	adds	r3, #68	; 0x44
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	4798      	blx	r3
	this->reset();
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3328      	adds	r3, #40	; 0x28
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	4798      	blx	r3
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <_ZN6ST773512initCommand1Ev>:

void ST7735::initCommand1()
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
	this->sendCommand(ST7735_SWRESET); //1: Software reset
 80055c0:	2101      	movs	r1, #1
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff ffb4 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->delay(150);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3364      	adds	r3, #100	; 0x64
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2196      	movs	r1, #150	; 0x96
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	4798      	blx	r3
	this->sendCommand(ST7735_SLPOUT); //2: Out of sleep mode
 80055d6:	2111      	movs	r1, #17
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff ffa9 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->delay(500);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3364      	adds	r3, #100	; 0x64
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	21f4      	movs	r1, #244	; 0xf4
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	4798      	blx	r3
	this->sendCommand(ST7735_FRMCTR1); //3: Frame rate ctrl - normal mode
 80055ec:	21b1      	movs	r1, #177	; 0xb1
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff ff9e 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0x01); //Rate = fosc/(1x2+40) * (LINE+2C+2D)
 80055f4:	2101      	movs	r1, #1
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff ffb2 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x2C);
 80055fc:	212c      	movs	r1, #44	; 0x2c
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff ffae 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 8005604:	212d      	movs	r1, #45	; 0x2d
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff ffaa 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_FRMCTR2); //4: Frame rate control - idle mode
 800560c:	21b2      	movs	r1, #178	; 0xb2
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff ff8e 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0x01); //Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8005614:	2101      	movs	r1, #1
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff ffa2 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x2C);
 800561c:	212c      	movs	r1, #44	; 0x2c
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff ff9e 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 8005624:	212d      	movs	r1, #45	; 0x2d
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff ff9a 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_FRMCTR3); //5: Frame rate ctrl - partial mode
 800562c:	21b3      	movs	r1, #179	; 0xb3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff ff7e 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0x01); //Dot inversion mode
 8005634:	2101      	movs	r1, #1
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff ff92 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x2C);
 800563c:	212c      	movs	r1, #44	; 0x2c
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff ff8e 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 8005644:	212d      	movs	r1, #45	; 0x2d
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff ff8a 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x01); //Line inversion mode
 800564c:	2101      	movs	r1, #1
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff ff86 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x2C);
 8005654:	212c      	movs	r1, #44	; 0x2c
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7ff ff82 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 800565c:	212d      	movs	r1, #45	; 0x2d
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff ff7e 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_INVCTR); //6: Display inversion ctrl
 8005664:	21b4      	movs	r1, #180	; 0xb4
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff ff62 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0x07); //No inversion
 800566c:	2107      	movs	r1, #7
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff ff76 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_PWCTR1); //7: Power control
 8005674:	21c0      	movs	r1, #192	; 0xc0
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff ff5a 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0xA2);
 800567c:	21a2      	movs	r1, #162	; 0xa2
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff ff6e 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x02); // -4.6V
 8005684:	2102      	movs	r1, #2
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff ff6a 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x84); // AUTO mode
 800568c:	2184      	movs	r1, #132	; 0x84
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff ff66 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_PWCTR2); // 8: Power control
 8005694:	21c1      	movs	r1, #193	; 0xc1
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff ff4a 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0xC5); // VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 800569c:	21c5      	movs	r1, #197	; 0xc5
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7ff ff5e 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_PWCTR3); // 9: Power control
 80056a4:	21c2      	movs	r1, #194	; 0xc2
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff ff42 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0x0A); // Opamp current small
 80056ac:	210a      	movs	r1, #10
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff ff56 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x00); // Boost frequency
 80056b4:	2100      	movs	r1, #0
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff ff52 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_PWCTR4); // 10: Power control
 80056bc:	21c3      	movs	r1, #195	; 0xc3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff ff36 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0x8A); // BCLK/2, Opamp current small & Medium low
 80056c4:	218a      	movs	r1, #138	; 0x8a
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff ff4a 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x2A);
 80056cc:	212a      	movs	r1, #42	; 0x2a
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff ff46 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_PWCTR5); // 11: Power control
 80056d4:	21c4      	movs	r1, #196	; 0xc4
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7ff ff2a 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0x8A);
 80056dc:	218a      	movs	r1, #138	; 0x8a
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff ff3e 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0xEE);
 80056e4:	21ee      	movs	r1, #238	; 0xee
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff ff3a 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_VMCTR1); // 12: Power control
 80056ec:	21c5      	movs	r1, #197	; 0xc5
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff ff1e 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0x0E);
 80056f4:	210e      	movs	r1, #14
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff ff32 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_INVOFF); // 13: Don't invert display
 80056fc:	2120      	movs	r1, #32
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7ff ff16 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendCommand(ST7735_MADCTL); // 14: Memory access control (directions)
 8005704:	2136      	movs	r1, #54	; 0x36
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff ff12 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(ST7735_ROTATION); // row addr/col addr, bottom to top refresh
 800570c:	21c0      	movs	r1, #192	; 0xc0
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7ff ff26 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_COLMOD); // 15: set color mode
 8005714:	213a      	movs	r1, #58	; 0x3a
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff ff0a 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0x05); // 16-bit color
 800571c:	2105      	movs	r1, #5
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7ff ff1e 	bl	8005560 <_ZN6ST77358sendDataEh>
}
 8005724:	bf00      	nop
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <_ZN6ST773512initCommand2Ev>:

void ST7735::initCommand2()
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
	this->sendCommand(ST7735_CASET); // 1: Column addr set
 8005734:	212a      	movs	r1, #42	; 0x2a
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fefa 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0x00); // XSTART = 0
 800573c:	2100      	movs	r1, #0
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff ff0e 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 8005744:	2100      	movs	r1, #0
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff ff0a 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x00); // XEND = 127
 800574c:	2100      	movs	r1, #0
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff ff06 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x7F);
 8005754:	217f      	movs	r1, #127	; 0x7f
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff ff02 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_RASET); // 2: Row addr set
 800575c:	212b      	movs	r1, #43	; 0x2b
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff fee6 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0x00); // XSTART = 0
 8005764:	2100      	movs	r1, #0
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff fefa 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 800576c:	2100      	movs	r1, #0
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff fef6 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x00); // XEND = 127
 8005774:	2100      	movs	r1, #0
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff fef2 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x7F);
 800577c:	217f      	movs	r1, #127	; 0x7f
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff feee 	bl	8005560 <_ZN6ST77358sendDataEh>
}
 8005784:	bf00      	nop
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <_ZN6ST773512initCommand3Ev>:

void ST7735::initCommand3()
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
	this->sendCommand(ST7735_GMCTRP1); // 1: Magical unicorn dust
 8005794:	21e0      	movs	r1, #224	; 0xe0
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff feca 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0x02);
 800579c:	2102      	movs	r1, #2
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff fede 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x1C);
 80057a4:	211c      	movs	r1, #28
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff feda 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x07);
 80057ac:	2107      	movs	r1, #7
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff fed6 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x12);
 80057b4:	2112      	movs	r1, #18
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff fed2 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x37);
 80057bc:	2137      	movs	r1, #55	; 0x37
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7ff fece 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x32);
 80057c4:	2132      	movs	r1, #50	; 0x32
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff feca 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x29);
 80057cc:	2129      	movs	r1, #41	; 0x29
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff fec6 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 80057d4:	212d      	movs	r1, #45	; 0x2d
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7ff fec2 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x29);
 80057dc:	2129      	movs	r1, #41	; 0x29
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff febe 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x25);
 80057e4:	2125      	movs	r1, #37	; 0x25
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff feba 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x2B);
 80057ec:	212b      	movs	r1, #43	; 0x2b
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff feb6 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x39);
 80057f4:	2139      	movs	r1, #57	; 0x39
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff feb2 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 80057fc:	2100      	movs	r1, #0
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff feae 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x01);
 8005804:	2101      	movs	r1, #1
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7ff feaa 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x03);
 800580c:	2103      	movs	r1, #3
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff fea6 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x10);
 8005814:	2110      	movs	r1, #16
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff fea2 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_GMCTRN1); // 2: Sparkles and rainbows
 800581c:	21e1      	movs	r1, #225	; 0xe1
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff fe86 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0x03);
 8005824:	2103      	movs	r1, #3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff fe9a 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x1D);
 800582c:	211d      	movs	r1, #29
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff fe96 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x07);
 8005834:	2107      	movs	r1, #7
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff fe92 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x06);
 800583c:	2106      	movs	r1, #6
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff fe8e 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x2E);
 8005844:	212e      	movs	r1, #46	; 0x2e
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff fe8a 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x2C);
 800584c:	212c      	movs	r1, #44	; 0x2c
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff fe86 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x29);
 8005854:	2129      	movs	r1, #41	; 0x29
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff fe82 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 800585c:	212d      	movs	r1, #45	; 0x2d
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff fe7e 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x2E);
 8005864:	212e      	movs	r1, #46	; 0x2e
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff fe7a 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x2E);
 800586c:	212e      	movs	r1, #46	; 0x2e
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff fe76 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x37);
 8005874:	2137      	movs	r1, #55	; 0x37
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff fe72 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x3F);
 800587c:	213f      	movs	r1, #63	; 0x3f
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff fe6e 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 8005884:	2100      	movs	r1, #0
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff fe6a 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 800588c:	2100      	movs	r1, #0
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7ff fe66 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x02);
 8005894:	2102      	movs	r1, #2
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff fe62 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x10);
 800589c:	2110      	movs	r1, #16
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff fe5e 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_NORON);
 80058a4:	2113      	movs	r1, #19
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff fe42 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->delay(10);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3364      	adds	r3, #100	; 0x64
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	210a      	movs	r1, #10
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	4798      	blx	r3
	this->sendCommand(ST7735_DISPON);
 80058ba:	2129      	movs	r1, #41	; 0x29
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff fe37 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->delay(100);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3364      	adds	r3, #100	; 0x64
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2164      	movs	r1, #100	; 0x64
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	4798      	blx	r3
}
 80058d0:	bf00      	nop
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <_ZN6ST77357getNameEv>:

const char *ST7735::getName()
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
	return "ST7735";
 80058e0:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <_ZN6ST77357getNameEv+0x18>)
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	08006364 	.word	0x08006364

080058f4 <_ZN6ST77358getWidthEv>:

uint32_t ST7735::getWidth()
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
	if(this->orientation == Orientation::V)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d102      	bne.n	800590a <_ZN6ST77358getWidthEv+0x16>
		return this->v_width_dots;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	e001      	b.n	800590e <_ZN6ST77358getWidthEv+0x1a>
	else
		return this->v_height_dots;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
}
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <_ZN6ST77359getHeightEv>:

uint32_t ST7735::getHeight()
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
	if(this->orientation == Orientation::V)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d102      	bne.n	8005930 <_ZN6ST77359getHeightEv+0x16>
		return this->v_height_dots;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	e001      	b.n	8005934 <_ZN6ST77359getHeightEv+0x1a>
	else
		return this->v_width_dots;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
}
 8005934:	4618      	mov	r0, r3
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <_ZN6ST77358getDPMMXEv>:

float ST7735::getDPMMX()
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
	if(this->orientation == Orientation::V)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10b      	bne.n	8005968 <_ZN6ST77358getDPMMXEv+0x28>
		return (float)this->v_width_dots/this->v_width_mm;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	ee07 3a90 	vmov	s15, r3
 8005958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005966:	e00a      	b.n	800597e <_ZN6ST77358getDPMMXEv+0x3e>
	else
		return (float)this->v_height_dots/this->v_height_mm;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	ee07 3a90 	vmov	s15, r3
 8005970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	ed93 7a05 	vldr	s14, [r3, #20]
 800597a:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 800597e:	eeb0 0a67 	vmov.f32	s0, s15
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <_ZN6ST77358getDPMMYEv>:

float ST7735::getDPMMY()
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
	if(this->orientation == Orientation::V)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10b      	bne.n	80059b4 <_ZN6ST77358getDPMMYEv+0x28>
		return (float)this->v_height_dots/this->v_height_mm;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	ee07 3a90 	vmov	s15, r3
 80059a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	ed93 7a05 	vldr	s14, [r3, #20]
 80059ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059b2:	e00a      	b.n	80059ca <_ZN6ST77358getDPMMYEv+0x3e>
	else
		return (float)this->v_width_dots/this->v_width_mm;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	ee07 3a90 	vmov	s15, r3
 80059bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	ed93 7a04 	vldr	s14, [r3, #16]
 80059c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 80059ca:	eeb0 0a67 	vmov.f32	s0, s15
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <_ZN6ST773513setBrightnessEf>:

void ST7735::setBrightness(float v)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	ed87 0a00 	vstr	s0, [r7]
	//TODO
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <_ZN6ST773513getBrightnessEv>:

float ST7735::getBrightness()
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
	//TODO
	return 1;
 80059f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80059fc:	ee07 3a90 	vmov	s15, r3
}
 8005a00:	eeb0 0a67 	vmov.f32	s0, s15
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <_ZN6ST773514setOrientationE11Orientation>:

void ST7735::setOrientation(Orientation orientation)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
	this->orientation = orientation;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	605a      	str	r2, [r3, #4]
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <_ZN6ST773514getOrientationEv>:

Orientation ST7735::getOrientation()
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
	return this->orientation;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <_ZN6ST77355resetEv>:

void ST7735::reset()
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
	//select
	this->csPinReset();
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	335c      	adds	r3, #92	; 0x5c
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	4798      	blx	r3

	//reset
	this->rstPinReset();
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	334c      	adds	r3, #76	; 0x4c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	4798      	blx	r3
	this->delay(7);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3364      	adds	r3, #100	; 0x64
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2107      	movs	r1, #7
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	4798      	blx	r3
	this->rstPinSet();
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3348      	adds	r3, #72	; 0x48
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	4798      	blx	r3

	//configure
	this->initCommand1();
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff fd9b 	bl	80055b8 <_ZN6ST773512initCommand1Ev>
	this->initCommand2();
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff fe52 	bl	800572c <_ZN6ST773512initCommand2Ev>
	this->initCommand3();
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff fe7f 	bl	800578c <_ZN6ST773512initCommand3Ev>

	//unselect
	this->csPinSet();
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3358      	adds	r3, #88	; 0x58
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	4798      	blx	r3
}
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <_ZN6ST77356selectEv>:

void ST7735::select()
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
	this->selected = true;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	761a      	strb	r2, [r3, #24]
	this->csPinReset();
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	335c      	adds	r3, #92	; 0x5c
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	4798      	blx	r3
}
 8005abc:	bf00      	nop
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <_ZN6ST77358unselectEv>:

void ST7735::unselect()
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
	this->selected = false;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	761a      	strb	r2, [r3, #24]
	this->csPinSet();
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3358      	adds	r3, #88	; 0x58
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	4798      	blx	r3
}
 8005ade:	bf00      	nop
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <_ZN6ST773516setAddressWindowEhhhh>:

void ST7735::setAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b082      	sub	sp, #8
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	4608      	mov	r0, r1
 8005af0:	4611      	mov	r1, r2
 8005af2:	461a      	mov	r2, r3
 8005af4:	4603      	mov	r3, r0
 8005af6:	70fb      	strb	r3, [r7, #3]
 8005af8:	460b      	mov	r3, r1
 8005afa:	70bb      	strb	r3, [r7, #2]
 8005afc:	4613      	mov	r3, r2
 8005afe:	707b      	strb	r3, [r7, #1]
    this->sendCommand(ST7735_CASET); // Column addr set
 8005b00:	212a      	movs	r1, #42	; 0x2a
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff fd14 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0x00);            // XS15 ~ XS8
 8005b08:	2100      	movs	r1, #0
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7ff fd28 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(x0+ST7735_XSTART);     // XSTART       XS7 ~ XS0
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff fd23 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);            // XE15 ~ XE8
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff fd1f 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(x1+ST7735_XSTART);     // XEND         XE7 ~ XE0
 8005b22:	787b      	ldrb	r3, [r7, #1]
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff fd1a 	bl	8005560 <_ZN6ST77358sendDataEh>

	this->sendCommand(ST7735_RASET); // Row addr set
 8005b2c:	212b      	movs	r1, #43	; 0x2b
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7ff fcfe 	bl	8005530 <_ZN6ST773511sendCommandEh>
	this->sendData(0x00);
 8005b34:	2100      	movs	r1, #0
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff fd12 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(y0+ST7735_YSTART);     // YSTART
 8005b3c:	78bb      	ldrb	r3, [r7, #2]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7ff fd0d 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 8005b46:	2100      	movs	r1, #0
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff fd09 	bl	8005560 <_ZN6ST77358sendDataEh>
	this->sendData(y1+ST7735_YSTART);     // YEND
 8005b4e:	7c3b      	ldrb	r3, [r7, #16]
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff fd04 	bl	8005560 <_ZN6ST77358sendDataEh>

	this->sendCommand(ST7735_RAMWR);
 8005b58:	212c      	movs	r1, #44	; 0x2c
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff fce8 	bl	8005530 <_ZN6ST773511sendCommandEh>
}
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <_ZN6ST773512convertColorEfff>:

uint16_t ST7735::convertColor(float r, float g, float b)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005b72:	edc7 0a02 	vstr	s1, [r7, #8]
 8005b76:	ed87 1a01 	vstr	s2, [r7, #4]
	r = CLIPVALUE(r, 0, 1);
 8005b7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b86:	d502      	bpl.n	8005b8e <_ZN6ST773512convertColorEfff+0x26>
 8005b88:	f04f 0300 	mov.w	r3, #0
 8005b8c:	e00c      	b.n	8005ba8 <_ZN6ST773512convertColorEfff+0x40>
 8005b8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9e:	dd02      	ble.n	8005ba6 <_ZN6ST773512convertColorEfff+0x3e>
 8005ba0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005ba4:	e000      	b.n	8005ba8 <_ZN6ST773512convertColorEfff+0x40>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	60fb      	str	r3, [r7, #12]
	g = CLIPVALUE(g, 0, 1);
 8005baa:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb6:	d502      	bpl.n	8005bbe <_ZN6ST773512convertColorEfff+0x56>
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	e00c      	b.n	8005bd8 <_ZN6ST773512convertColorEfff+0x70>
 8005bbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bce:	dd02      	ble.n	8005bd6 <_ZN6ST773512convertColorEfff+0x6e>
 8005bd0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005bd4:	e000      	b.n	8005bd8 <_ZN6ST773512convertColorEfff+0x70>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	60bb      	str	r3, [r7, #8]
	b = CLIPVALUE(b, 0, 1);
 8005bda:	edd7 7a01 	vldr	s15, [r7, #4]
 8005bde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be6:	d502      	bpl.n	8005bee <_ZN6ST773512convertColorEfff+0x86>
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	e00c      	b.n	8005c08 <_ZN6ST773512convertColorEfff+0xa0>
 8005bee:	edd7 7a01 	vldr	s15, [r7, #4]
 8005bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bfe:	dd02      	ble.n	8005c06 <_ZN6ST773512convertColorEfff+0x9e>
 8005c00:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005c04:	e000      	b.n	8005c08 <_ZN6ST773512convertColorEfff+0xa0>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	607b      	str	r3, [r7, #4]
	uint8_t R = 0x1F * r;
 8005c0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c0e:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8005c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c1a:	edc7 7a00 	vstr	s15, [r7]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	75fb      	strb	r3, [r7, #23]
	uint8_t G = 0x3F * g;
 8005c22:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c26:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005c88 <_ZN6ST773512convertColorEfff+0x120>
 8005c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c32:	edc7 7a00 	vstr	s15, [r7]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	75bb      	strb	r3, [r7, #22]
	uint8_t B = 0x1F * b;
 8005c3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c3e:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8005c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c4a:	edc7 7a00 	vstr	s15, [r7]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	757b      	strb	r3, [r7, #21]
	uint16_t color = ST7735_COLOR565(R,G,B);
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	02db      	lsls	r3, r3, #11
 8005c56:	b21a      	sxth	r2, r3
 8005c58:	7dbb      	ldrb	r3, [r7, #22]
 8005c5a:	015b      	lsls	r3, r3, #5
 8005c5c:	b21b      	sxth	r3, r3
 8005c5e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8005c62:	b21b      	sxth	r3, r3
 8005c64:	4313      	orrs	r3, r2
 8005c66:	b21a      	sxth	r2, r3
 8005c68:	7d7b      	ldrb	r3, [r7, #21]
 8005c6a:	b21b      	sxth	r3, r3
 8005c6c:	f003 031f 	and.w	r3, r3, #31
 8005c70:	b21b      	sxth	r3, r3
 8005c72:	4313      	orrs	r3, r2
 8005c74:	b21b      	sxth	r3, r3
 8005c76:	827b      	strh	r3, [r7, #18]
	return color;
 8005c78:	8a7b      	ldrh	r3, [r7, #18]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	427c0000 	.word	0x427c0000

08005c8c <_ZN6ST77359drawPixelEiifff>:


bool ST7735::drawPixel(int x, int y, float r, float g, float b)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08a      	sub	sp, #40	; 0x28
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	6178      	str	r0, [r7, #20]
 8005c94:	6139      	str	r1, [r7, #16]
 8005c96:	60fa      	str	r2, [r7, #12]
 8005c98:	ed87 0a02 	vstr	s0, [r7, #8]
 8005c9c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005ca0:	ed87 1a00 	vstr	s2, [r7]
    if(this->selected)
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	7e1b      	ldrb	r3, [r3, #24]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d04a      	beq.n	8005d42 <_ZN6ST77359drawPixelEiifff+0xb6>
    {
    	if(x >= this->getWidth() or y >= this->getHeight() or x < 0 or y < 0)
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6978      	ldr	r0, [r7, #20]
 8005cb6:	4798      	blx	r3
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d90f      	bls.n	8005ce0 <_ZN6ST77359drawPixelEiifff+0x54>
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6978      	ldr	r0, [r7, #20]
 8005cca:	4798      	blx	r3
 8005ccc:	4602      	mov	r2, r0
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d905      	bls.n	8005ce0 <_ZN6ST77359drawPixelEiifff+0x54>
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	db02      	blt.n	8005ce0 <_ZN6ST77359drawPixelEiifff+0x54>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	da01      	bge.n	8005ce4 <_ZN6ST77359drawPixelEiifff+0x58>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <_ZN6ST77359drawPixelEiifff+0x5a>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <_ZN6ST77359drawPixelEiifff+0x62>
    		return false;
 8005cea:	2300      	movs	r3, #0
 8005cec:	e02a      	b.n	8005d44 <_ZN6ST77359drawPixelEiifff+0xb8>

    	uint16_t color = ST7735::convertColor(r, g, b);
 8005cee:	ed97 1a00 	vldr	s2, [r7]
 8005cf2:	edd7 0a01 	vldr	s1, [r7, #4]
 8005cf6:	ed97 0a02 	vldr	s0, [r7, #8]
 8005cfa:	f7ff ff35 	bl	8005b68 <_ZN6ST773512convertColorEfff>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	83fb      	strh	r3, [r7, #30]
    	this->setAddressWindow(x, y, x+1, y+1);
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	b2d9      	uxtb	r1, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	3301      	adds	r3, #1
 8005d10:	b2d8      	uxtb	r0, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	3301      	adds	r3, #1
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	6978      	ldr	r0, [r7, #20]
 8005d20:	f7ff fee1 	bl	8005ae6 <_ZN6ST773516setAddressWindowEhhhh>
    	uint8_t data[2];
    	this->sendData(color >> 8);
 8005d24:	8bfb      	ldrh	r3, [r7, #30]
 8005d26:	121b      	asrs	r3, r3, #8
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6978      	ldr	r0, [r7, #20]
 8005d2e:	f7ff fc17 	bl	8005560 <_ZN6ST77358sendDataEh>
    	this->sendData(color & 0xFF);
 8005d32:	8bfb      	ldrh	r3, [r7, #30]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	4619      	mov	r1, r3
 8005d38:	6978      	ldr	r0, [r7, #20]
 8005d3a:	f7ff fc11 	bl	8005560 <_ZN6ST77358sendDataEh>
    	return true;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <_ZN6ST77359drawPixelEiifff+0xb8>
    }
    else
    {
    	return false;
 8005d42:	2300      	movs	r3, #0
    }
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <_ZN6ST77358drawAreaEiiiifff>:

bool ST7735::drawArea(int x1, int y1, int x2, int y2, float r, float g, float b)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b090      	sub	sp, #64	; 0x40
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	61f8      	str	r0, [r7, #28]
 8005d54:	61b9      	str	r1, [r7, #24]
 8005d56:	617a      	str	r2, [r7, #20]
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	ed87 0a03 	vstr	s0, [r7, #12]
 8005d5e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005d62:	ed87 1a01 	vstr	s2, [r7, #4]
    if(this->selected)
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	7e1b      	ldrb	r3, [r3, #24]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 8084 	beq.w	8005e78 <_ZN6ST77358drawAreaEiiiifff+0x12c>
    {
    	uint32_t w = this->getWidth();
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3304      	adds	r3, #4
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69f8      	ldr	r0, [r7, #28]
 8005d7a:	4798      	blx	r3
 8005d7c:	62f8      	str	r0, [r7, #44]	; 0x2c
    	uint32_t h = this->getHeight();
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3308      	adds	r3, #8
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69f8      	ldr	r0, [r7, #28]
 8005d88:	4798      	blx	r3
 8005d8a:	62b8      	str	r0, [r7, #40]	; 0x28

    	if(x1 >= w or y1 >= h or x1 >= x2 or y1 >= y2)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d90b      	bls.n	8005dac <_ZN6ST77358drawAreaEiiiifff+0x60>
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d907      	bls.n	8005dac <_ZN6ST77358drawAreaEiiiifff+0x60>
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	da03      	bge.n	8005dac <_ZN6ST77358drawAreaEiiiifff+0x60>
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da8:	429a      	cmp	r2, r3
 8005daa:	db01      	blt.n	8005db0 <_ZN6ST77358drawAreaEiiiifff+0x64>
    		return false;
 8005dac:	2300      	movs	r3, #0
 8005dae:	e064      	b.n	8005e7a <_ZN6ST77358drawAreaEiiiifff+0x12e>

    	x1 = (x1 < 0) ? 0 : x1;
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005db6:	61bb      	str	r3, [r7, #24]
    	y1 = (y1 < 0) ? 0 : y1;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005dbe:	617b      	str	r3, [r7, #20]
    	x2 = CLIPVALUE(x2, x1, w);
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	db07      	blt.n	8005dd8 <_ZN6ST77358drawAreaEiiiifff+0x8c>
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d201      	bcs.n	8005dd4 <_ZN6ST77358drawAreaEiiiifff+0x88>
 8005dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd2:	e002      	b.n	8005dda <_ZN6ST77358drawAreaEiiiifff+0x8e>
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	e000      	b.n	8005dda <_ZN6ST77358drawAreaEiiiifff+0x8e>
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	613b      	str	r3, [r7, #16]
    	y2 = CLIPVALUE(y2, y1, h);
 8005ddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	db07      	blt.n	8005df4 <_ZN6ST77358drawAreaEiiiifff+0xa8>
 8005de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d201      	bcs.n	8005df0 <_ZN6ST77358drawAreaEiiiifff+0xa4>
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	e002      	b.n	8005df6 <_ZN6ST77358drawAreaEiiiifff+0xaa>
 8005df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df2:	e000      	b.n	8005df6 <_ZN6ST77358drawAreaEiiiifff+0xaa>
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	643b      	str	r3, [r7, #64]	; 0x40

    	uint16_t color = ST7735::convertColor(r, g, b);
 8005df8:	ed97 1a01 	vldr	s2, [r7, #4]
 8005dfc:	edd7 0a02 	vldr	s1, [r7, #8]
 8005e00:	ed97 0a03 	vldr	s0, [r7, #12]
 8005e04:	f7ff feb0 	bl	8005b68 <_ZN6ST773512convertColorEfff>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	84fb      	strh	r3, [r7, #38]	; 0x26
    	this->setAddressWindow(x1, y1, x2, y2);
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	b2d9      	uxtb	r1, r3
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	b2d8      	uxtb	r0, r3
 8005e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	4603      	mov	r3, r0
 8005e20:	69f8      	ldr	r0, [r7, #28]
 8005e22:	f7ff fe60 	bl	8005ae6 <_ZN6ST773516setAddressWindowEhhhh>
    	this->dcPinSet();
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3350      	adds	r3, #80	; 0x50
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69f8      	ldr	r0, [r7, #28]
 8005e30:	4798      	blx	r3

    	for(int i = x1; i <= x2; i += 1 )
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	637b      	str	r3, [r7, #52]	; 0x34
 8005e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	dc1a      	bgt.n	8005e74 <_ZN6ST77358drawAreaEiiiifff+0x128>
    	{
    		for(int j = y1; j <= y2; j += 1)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	633b      	str	r3, [r7, #48]	; 0x30
 8005e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e46:	429a      	cmp	r2, r3
 8005e48:	dc10      	bgt.n	8005e6c <_ZN6ST77358drawAreaEiiiifff+0x120>
    		{
    			this->sendData(color >> 8);
 8005e4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e4c:	121b      	asrs	r3, r3, #8
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	4619      	mov	r1, r3
 8005e52:	69f8      	ldr	r0, [r7, #28]
 8005e54:	f7ff fb84 	bl	8005560 <_ZN6ST77358sendDataEh>
    			this->sendData(color & 0xFF);
 8005e58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	69f8      	ldr	r0, [r7, #28]
 8005e60:	f7ff fb7e 	bl	8005560 <_ZN6ST77358sendDataEh>
    		for(int j = y1; j <= y2; j += 1)
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	3301      	adds	r3, #1
 8005e68:	633b      	str	r3, [r7, #48]	; 0x30
 8005e6a:	e7ea      	b.n	8005e42 <_ZN6ST77358drawAreaEiiiifff+0xf6>
    	for(int i = x1; i <= x2; i += 1 )
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	3301      	adds	r3, #1
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
 8005e72:	e7e0      	b.n	8005e36 <_ZN6ST77358drawAreaEiiiifff+0xea>
    		}
    	}

    	return true;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <_ZN6ST77358drawAreaEiiiifff+0x12e>
    }
    else
    {
    	return false;
 8005e78:	2300      	movs	r3, #0
    }
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3738      	adds	r7, #56	; 0x38
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <_ZN7DisplayD1Ev>:
 *      Author: Filipe Chagas
 */

#include "display.hpp"

Display::~Display()
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	4a04      	ldr	r2, [pc, #16]	; (8005ea0 <_ZN7DisplayD1Ev+0x1c>)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	08006464 	.word	0x08006464

08005ea4 <_ZdlPvj>:
 8005ea4:	f000 b814 	b.w	8005ed0 <_ZdlPv>

08005ea8 <_Znwj>:
 8005ea8:	2801      	cmp	r0, #1
 8005eaa:	bf38      	it	cc
 8005eac:	2001      	movcc	r0, #1
 8005eae:	b510      	push	{r4, lr}
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f000 f85a 	bl	8005f6c <malloc>
 8005eb8:	b930      	cbnz	r0, 8005ec8 <_Znwj+0x20>
 8005eba:	f000 f81d 	bl	8005ef8 <_ZSt15get_new_handlerv>
 8005ebe:	b908      	cbnz	r0, 8005ec4 <_Znwj+0x1c>
 8005ec0:	f000 f822 	bl	8005f08 <abort>
 8005ec4:	4780      	blx	r0
 8005ec6:	e7f4      	b.n	8005eb2 <_Znwj+0xa>
 8005ec8:	bd10      	pop	{r4, pc}

08005eca <__cxa_pure_virtual>:
 8005eca:	b508      	push	{r3, lr}
 8005ecc:	f000 f80e 	bl	8005eec <_ZSt9terminatev>

08005ed0 <_ZdlPv>:
 8005ed0:	f000 b854 	b.w	8005f7c <free>

08005ed4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005ed4:	b508      	push	{r3, lr}
 8005ed6:	4780      	blx	r0
 8005ed8:	f000 f816 	bl	8005f08 <abort>

08005edc <_ZSt13get_terminatev>:
 8005edc:	4b02      	ldr	r3, [pc, #8]	; (8005ee8 <_ZSt13get_terminatev+0xc>)
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	f3bf 8f5b 	dmb	ish
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	20000010 	.word	0x20000010

08005eec <_ZSt9terminatev>:
 8005eec:	b508      	push	{r3, lr}
 8005eee:	f7ff fff5 	bl	8005edc <_ZSt13get_terminatev>
 8005ef2:	f7ff ffef 	bl	8005ed4 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08005ef8 <_ZSt15get_new_handlerv>:
 8005ef8:	4b02      	ldr	r3, [pc, #8]	; (8005f04 <_ZSt15get_new_handlerv+0xc>)
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	f3bf 8f5b 	dmb	ish
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20000098 	.word	0x20000098

08005f08 <abort>:
 8005f08:	b508      	push	{r3, lr}
 8005f0a:	2006      	movs	r0, #6
 8005f0c:	f000 f928 	bl	8006160 <raise>
 8005f10:	2001      	movs	r0, #1
 8005f12:	f7fa fe3a 	bl	8000b8a <_exit>
	...

08005f18 <__errno>:
 8005f18:	4b01      	ldr	r3, [pc, #4]	; (8005f20 <__errno+0x8>)
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20000014 	.word	0x20000014

08005f24 <__libc_init_array>:
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	4d0d      	ldr	r5, [pc, #52]	; (8005f5c <__libc_init_array+0x38>)
 8005f28:	4c0d      	ldr	r4, [pc, #52]	; (8005f60 <__libc_init_array+0x3c>)
 8005f2a:	1b64      	subs	r4, r4, r5
 8005f2c:	10a4      	asrs	r4, r4, #2
 8005f2e:	2600      	movs	r6, #0
 8005f30:	42a6      	cmp	r6, r4
 8005f32:	d109      	bne.n	8005f48 <__libc_init_array+0x24>
 8005f34:	4d0b      	ldr	r5, [pc, #44]	; (8005f64 <__libc_init_array+0x40>)
 8005f36:	4c0c      	ldr	r4, [pc, #48]	; (8005f68 <__libc_init_array+0x44>)
 8005f38:	f000 f93c 	bl	80061b4 <_init>
 8005f3c:	1b64      	subs	r4, r4, r5
 8005f3e:	10a4      	asrs	r4, r4, #2
 8005f40:	2600      	movs	r6, #0
 8005f42:	42a6      	cmp	r6, r4
 8005f44:	d105      	bne.n	8005f52 <__libc_init_array+0x2e>
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
 8005f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f4c:	4798      	blx	r3
 8005f4e:	3601      	adds	r6, #1
 8005f50:	e7ee      	b.n	8005f30 <__libc_init_array+0xc>
 8005f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f56:	4798      	blx	r3
 8005f58:	3601      	adds	r6, #1
 8005f5a:	e7f2      	b.n	8005f42 <__libc_init_array+0x1e>
 8005f5c:	080064a8 	.word	0x080064a8
 8005f60:	080064a8 	.word	0x080064a8
 8005f64:	080064a8 	.word	0x080064a8
 8005f68:	080064ac 	.word	0x080064ac

08005f6c <malloc>:
 8005f6c:	4b02      	ldr	r3, [pc, #8]	; (8005f78 <malloc+0xc>)
 8005f6e:	4601      	mov	r1, r0
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	f000 b863 	b.w	800603c <_malloc_r>
 8005f76:	bf00      	nop
 8005f78:	20000014 	.word	0x20000014

08005f7c <free>:
 8005f7c:	4b02      	ldr	r3, [pc, #8]	; (8005f88 <free+0xc>)
 8005f7e:	4601      	mov	r1, r0
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	f000 b80b 	b.w	8005f9c <_free_r>
 8005f86:	bf00      	nop
 8005f88:	20000014 	.word	0x20000014

08005f8c <memset>:
 8005f8c:	4402      	add	r2, r0
 8005f8e:	4603      	mov	r3, r0
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d100      	bne.n	8005f96 <memset+0xa>
 8005f94:	4770      	bx	lr
 8005f96:	f803 1b01 	strb.w	r1, [r3], #1
 8005f9a:	e7f9      	b.n	8005f90 <memset+0x4>

08005f9c <_free_r>:
 8005f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f9e:	2900      	cmp	r1, #0
 8005fa0:	d048      	beq.n	8006034 <_free_r+0x98>
 8005fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fa6:	9001      	str	r0, [sp, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f1a1 0404 	sub.w	r4, r1, #4
 8005fae:	bfb8      	it	lt
 8005fb0:	18e4      	addlt	r4, r4, r3
 8005fb2:	f000 f8f1 	bl	8006198 <__malloc_lock>
 8005fb6:	4a20      	ldr	r2, [pc, #128]	; (8006038 <_free_r+0x9c>)
 8005fb8:	9801      	ldr	r0, [sp, #4]
 8005fba:	6813      	ldr	r3, [r2, #0]
 8005fbc:	4615      	mov	r5, r2
 8005fbe:	b933      	cbnz	r3, 8005fce <_free_r+0x32>
 8005fc0:	6063      	str	r3, [r4, #4]
 8005fc2:	6014      	str	r4, [r2, #0]
 8005fc4:	b003      	add	sp, #12
 8005fc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fca:	f000 b8eb 	b.w	80061a4 <__malloc_unlock>
 8005fce:	42a3      	cmp	r3, r4
 8005fd0:	d90b      	bls.n	8005fea <_free_r+0x4e>
 8005fd2:	6821      	ldr	r1, [r4, #0]
 8005fd4:	1862      	adds	r2, r4, r1
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	bf04      	itt	eq
 8005fda:	681a      	ldreq	r2, [r3, #0]
 8005fdc:	685b      	ldreq	r3, [r3, #4]
 8005fde:	6063      	str	r3, [r4, #4]
 8005fe0:	bf04      	itt	eq
 8005fe2:	1852      	addeq	r2, r2, r1
 8005fe4:	6022      	streq	r2, [r4, #0]
 8005fe6:	602c      	str	r4, [r5, #0]
 8005fe8:	e7ec      	b.n	8005fc4 <_free_r+0x28>
 8005fea:	461a      	mov	r2, r3
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	b10b      	cbz	r3, 8005ff4 <_free_r+0x58>
 8005ff0:	42a3      	cmp	r3, r4
 8005ff2:	d9fa      	bls.n	8005fea <_free_r+0x4e>
 8005ff4:	6811      	ldr	r1, [r2, #0]
 8005ff6:	1855      	adds	r5, r2, r1
 8005ff8:	42a5      	cmp	r5, r4
 8005ffa:	d10b      	bne.n	8006014 <_free_r+0x78>
 8005ffc:	6824      	ldr	r4, [r4, #0]
 8005ffe:	4421      	add	r1, r4
 8006000:	1854      	adds	r4, r2, r1
 8006002:	42a3      	cmp	r3, r4
 8006004:	6011      	str	r1, [r2, #0]
 8006006:	d1dd      	bne.n	8005fc4 <_free_r+0x28>
 8006008:	681c      	ldr	r4, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	6053      	str	r3, [r2, #4]
 800600e:	4421      	add	r1, r4
 8006010:	6011      	str	r1, [r2, #0]
 8006012:	e7d7      	b.n	8005fc4 <_free_r+0x28>
 8006014:	d902      	bls.n	800601c <_free_r+0x80>
 8006016:	230c      	movs	r3, #12
 8006018:	6003      	str	r3, [r0, #0]
 800601a:	e7d3      	b.n	8005fc4 <_free_r+0x28>
 800601c:	6825      	ldr	r5, [r4, #0]
 800601e:	1961      	adds	r1, r4, r5
 8006020:	428b      	cmp	r3, r1
 8006022:	bf04      	itt	eq
 8006024:	6819      	ldreq	r1, [r3, #0]
 8006026:	685b      	ldreq	r3, [r3, #4]
 8006028:	6063      	str	r3, [r4, #4]
 800602a:	bf04      	itt	eq
 800602c:	1949      	addeq	r1, r1, r5
 800602e:	6021      	streq	r1, [r4, #0]
 8006030:	6054      	str	r4, [r2, #4]
 8006032:	e7c7      	b.n	8005fc4 <_free_r+0x28>
 8006034:	b003      	add	sp, #12
 8006036:	bd30      	pop	{r4, r5, pc}
 8006038:	2000009c 	.word	0x2000009c

0800603c <_malloc_r>:
 800603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603e:	1ccd      	adds	r5, r1, #3
 8006040:	f025 0503 	bic.w	r5, r5, #3
 8006044:	3508      	adds	r5, #8
 8006046:	2d0c      	cmp	r5, #12
 8006048:	bf38      	it	cc
 800604a:	250c      	movcc	r5, #12
 800604c:	2d00      	cmp	r5, #0
 800604e:	4606      	mov	r6, r0
 8006050:	db01      	blt.n	8006056 <_malloc_r+0x1a>
 8006052:	42a9      	cmp	r1, r5
 8006054:	d903      	bls.n	800605e <_malloc_r+0x22>
 8006056:	230c      	movs	r3, #12
 8006058:	6033      	str	r3, [r6, #0]
 800605a:	2000      	movs	r0, #0
 800605c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800605e:	f000 f89b 	bl	8006198 <__malloc_lock>
 8006062:	4921      	ldr	r1, [pc, #132]	; (80060e8 <_malloc_r+0xac>)
 8006064:	680a      	ldr	r2, [r1, #0]
 8006066:	4614      	mov	r4, r2
 8006068:	b99c      	cbnz	r4, 8006092 <_malloc_r+0x56>
 800606a:	4f20      	ldr	r7, [pc, #128]	; (80060ec <_malloc_r+0xb0>)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	b923      	cbnz	r3, 800607a <_malloc_r+0x3e>
 8006070:	4621      	mov	r1, r4
 8006072:	4630      	mov	r0, r6
 8006074:	f000 f83c 	bl	80060f0 <_sbrk_r>
 8006078:	6038      	str	r0, [r7, #0]
 800607a:	4629      	mov	r1, r5
 800607c:	4630      	mov	r0, r6
 800607e:	f000 f837 	bl	80060f0 <_sbrk_r>
 8006082:	1c43      	adds	r3, r0, #1
 8006084:	d123      	bne.n	80060ce <_malloc_r+0x92>
 8006086:	230c      	movs	r3, #12
 8006088:	6033      	str	r3, [r6, #0]
 800608a:	4630      	mov	r0, r6
 800608c:	f000 f88a 	bl	80061a4 <__malloc_unlock>
 8006090:	e7e3      	b.n	800605a <_malloc_r+0x1e>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	1b5b      	subs	r3, r3, r5
 8006096:	d417      	bmi.n	80060c8 <_malloc_r+0x8c>
 8006098:	2b0b      	cmp	r3, #11
 800609a:	d903      	bls.n	80060a4 <_malloc_r+0x68>
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	441c      	add	r4, r3
 80060a0:	6025      	str	r5, [r4, #0]
 80060a2:	e004      	b.n	80060ae <_malloc_r+0x72>
 80060a4:	6863      	ldr	r3, [r4, #4]
 80060a6:	42a2      	cmp	r2, r4
 80060a8:	bf0c      	ite	eq
 80060aa:	600b      	streq	r3, [r1, #0]
 80060ac:	6053      	strne	r3, [r2, #4]
 80060ae:	4630      	mov	r0, r6
 80060b0:	f000 f878 	bl	80061a4 <__malloc_unlock>
 80060b4:	f104 000b 	add.w	r0, r4, #11
 80060b8:	1d23      	adds	r3, r4, #4
 80060ba:	f020 0007 	bic.w	r0, r0, #7
 80060be:	1ac2      	subs	r2, r0, r3
 80060c0:	d0cc      	beq.n	800605c <_malloc_r+0x20>
 80060c2:	1a1b      	subs	r3, r3, r0
 80060c4:	50a3      	str	r3, [r4, r2]
 80060c6:	e7c9      	b.n	800605c <_malloc_r+0x20>
 80060c8:	4622      	mov	r2, r4
 80060ca:	6864      	ldr	r4, [r4, #4]
 80060cc:	e7cc      	b.n	8006068 <_malloc_r+0x2c>
 80060ce:	1cc4      	adds	r4, r0, #3
 80060d0:	f024 0403 	bic.w	r4, r4, #3
 80060d4:	42a0      	cmp	r0, r4
 80060d6:	d0e3      	beq.n	80060a0 <_malloc_r+0x64>
 80060d8:	1a21      	subs	r1, r4, r0
 80060da:	4630      	mov	r0, r6
 80060dc:	f000 f808 	bl	80060f0 <_sbrk_r>
 80060e0:	3001      	adds	r0, #1
 80060e2:	d1dd      	bne.n	80060a0 <_malloc_r+0x64>
 80060e4:	e7cf      	b.n	8006086 <_malloc_r+0x4a>
 80060e6:	bf00      	nop
 80060e8:	2000009c 	.word	0x2000009c
 80060ec:	200000a0 	.word	0x200000a0

080060f0 <_sbrk_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4d06      	ldr	r5, [pc, #24]	; (800610c <_sbrk_r+0x1c>)
 80060f4:	2300      	movs	r3, #0
 80060f6:	4604      	mov	r4, r0
 80060f8:	4608      	mov	r0, r1
 80060fa:	602b      	str	r3, [r5, #0]
 80060fc:	f7fa fd50 	bl	8000ba0 <_sbrk>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d102      	bne.n	800610a <_sbrk_r+0x1a>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	b103      	cbz	r3, 800610a <_sbrk_r+0x1a>
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	20000144 	.word	0x20000144

08006110 <_raise_r>:
 8006110:	291f      	cmp	r1, #31
 8006112:	b538      	push	{r3, r4, r5, lr}
 8006114:	4604      	mov	r4, r0
 8006116:	460d      	mov	r5, r1
 8006118:	d904      	bls.n	8006124 <_raise_r+0x14>
 800611a:	2316      	movs	r3, #22
 800611c:	6003      	str	r3, [r0, #0]
 800611e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006122:	bd38      	pop	{r3, r4, r5, pc}
 8006124:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006126:	b112      	cbz	r2, 800612e <_raise_r+0x1e>
 8006128:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800612c:	b94b      	cbnz	r3, 8006142 <_raise_r+0x32>
 800612e:	4620      	mov	r0, r4
 8006130:	f000 f830 	bl	8006194 <_getpid_r>
 8006134:	462a      	mov	r2, r5
 8006136:	4601      	mov	r1, r0
 8006138:	4620      	mov	r0, r4
 800613a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800613e:	f000 b817 	b.w	8006170 <_kill_r>
 8006142:	2b01      	cmp	r3, #1
 8006144:	d00a      	beq.n	800615c <_raise_r+0x4c>
 8006146:	1c59      	adds	r1, r3, #1
 8006148:	d103      	bne.n	8006152 <_raise_r+0x42>
 800614a:	2316      	movs	r3, #22
 800614c:	6003      	str	r3, [r0, #0]
 800614e:	2001      	movs	r0, #1
 8006150:	e7e7      	b.n	8006122 <_raise_r+0x12>
 8006152:	2400      	movs	r4, #0
 8006154:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006158:	4628      	mov	r0, r5
 800615a:	4798      	blx	r3
 800615c:	2000      	movs	r0, #0
 800615e:	e7e0      	b.n	8006122 <_raise_r+0x12>

08006160 <raise>:
 8006160:	4b02      	ldr	r3, [pc, #8]	; (800616c <raise+0xc>)
 8006162:	4601      	mov	r1, r0
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	f7ff bfd3 	b.w	8006110 <_raise_r>
 800616a:	bf00      	nop
 800616c:	20000014 	.word	0x20000014

08006170 <_kill_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	4d07      	ldr	r5, [pc, #28]	; (8006190 <_kill_r+0x20>)
 8006174:	2300      	movs	r3, #0
 8006176:	4604      	mov	r4, r0
 8006178:	4608      	mov	r0, r1
 800617a:	4611      	mov	r1, r2
 800617c:	602b      	str	r3, [r5, #0]
 800617e:	f7fa fcf4 	bl	8000b6a <_kill>
 8006182:	1c43      	adds	r3, r0, #1
 8006184:	d102      	bne.n	800618c <_kill_r+0x1c>
 8006186:	682b      	ldr	r3, [r5, #0]
 8006188:	b103      	cbz	r3, 800618c <_kill_r+0x1c>
 800618a:	6023      	str	r3, [r4, #0]
 800618c:	bd38      	pop	{r3, r4, r5, pc}
 800618e:	bf00      	nop
 8006190:	20000144 	.word	0x20000144

08006194 <_getpid_r>:
 8006194:	f7fa bce1 	b.w	8000b5a <_getpid>

08006198 <__malloc_lock>:
 8006198:	4801      	ldr	r0, [pc, #4]	; (80061a0 <__malloc_lock+0x8>)
 800619a:	f000 b809 	b.w	80061b0 <__retarget_lock_acquire_recursive>
 800619e:	bf00      	nop
 80061a0:	2000014c 	.word	0x2000014c

080061a4 <__malloc_unlock>:
 80061a4:	4801      	ldr	r0, [pc, #4]	; (80061ac <__malloc_unlock+0x8>)
 80061a6:	f000 b804 	b.w	80061b2 <__retarget_lock_release_recursive>
 80061aa:	bf00      	nop
 80061ac:	2000014c 	.word	0x2000014c

080061b0 <__retarget_lock_acquire_recursive>:
 80061b0:	4770      	bx	lr

080061b2 <__retarget_lock_release_recursive>:
 80061b2:	4770      	bx	lr

080061b4 <_init>:
 80061b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b6:	bf00      	nop
 80061b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ba:	bc08      	pop	{r3}
 80061bc:	469e      	mov	lr, r3
 80061be:	4770      	bx	lr

080061c0 <_fini>:
 80061c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c2:	bf00      	nop
 80061c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c6:	bc08      	pop	{r3}
 80061c8:	469e      	mov	lr, r3
 80061ca:	4770      	bx	lr
