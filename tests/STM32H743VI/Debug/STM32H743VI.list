
STM32H743VI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b7c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b44  08008e20  08008e20  00018e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009964  08009964  00019964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009968  08009968  00019968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  0800996c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000dc  20000078  080099e4  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000154  080099e4  00020154  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00026e13  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004622  00000000  00000000  00046eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000e28  00000000  00000000  0004b4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000d78  00000000  00000000  0004c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003aa6b  00000000  00000000  0004d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000143c4  00000000  00000000  00087aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015938c  00000000  00000000  0009beaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001f523b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004670  00000000  00000000  001f5290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000078 	.word	0x20000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008e04 	.word	0x08008e04

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000007c 	.word	0x2000007c
 80002dc:	08008e04 	.word	0x08008e04

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8000702:	ed97 0a01 	vldr	s0, [r7, #4]
 8000706:	f006 fbbf 	bl	8006e88 <cosf>
 800070a:	eef0 7a40 	vmov.f32	s15, s0
 800070e:	eeb0 0a67 	vmov.f32	s0, s15
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000722:	ed97 0a01 	vldr	s0, [r7, #4]
 8000726:	f006 fd3b 	bl	80071a0 <sinf>
 800072a:	eef0 7a40 	vmov.f32	s15, s0
 800072e:	eeb0 0a67 	vmov.f32	s0, s15
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <_Z7cppMainv>:
#include <math.h>

#define PI 3.14159265359

void cppMain()
{
 8000738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073a:	ed2d 8b06 	vpush	{d8-d10}
 800073e:	b0a1      	sub	sp, #132	; 0x84
 8000740:	af04      	add	r7, sp, #16
											TFT_RST_Pin,
											TFT_A0_GPIO_Port,
											TFT_A0_Pin,
											TFT_CS_GPIO_Port,
											TFT_CS_Pin,
											&hspi1);
 8000742:	2038      	movs	r0, #56	; 0x38
 8000744:	f006 fb44 	bl	8006dd0 <_Znwj>
 8000748:	4603      	mov	r3, r0
 800074a:	461c      	mov	r4, r3
 800074c:	4bcc      	ldr	r3, [pc, #816]	; (8000a80 <_Z7cppMainv+0x348>)
 800074e:	9303      	str	r3, [sp, #12]
 8000750:	2310      	movs	r3, #16
 8000752:	9302      	str	r3, [sp, #8]
 8000754:	4bcb      	ldr	r3, [pc, #812]	; (8000a84 <_Z7cppMainv+0x34c>)
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	2340      	movs	r3, #64	; 0x40
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	4bca      	ldr	r3, [pc, #808]	; (8000a88 <_Z7cppMainv+0x350>)
 800075e:	2210      	movs	r2, #16
 8000760:	49c9      	ldr	r1, [pc, #804]	; (8000a88 <_Z7cppMainv+0x350>)
 8000762:	4620      	mov	r0, r4
 8000764:	f000 fbde 	bl	8000f24 <_ZN14STM32H7_ST7735C1EP12GPIO_TypeDeftS1_tS1_tP19__SPI_HandleTypeDef>
 8000768:	66bc      	str	r4, [r7, #104]	; 0x68

	Pencil canvas(*tft);
 800076a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800076c:	463b      	mov	r3, r7
 800076e:	4611      	mov	r1, r2
 8000770:	4618      	mov	r0, r3
 8000772:	f005 fac1 	bl	8005cf8 <_ZN6PencilC1ER7Display>

	tft->init();
 8000776:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3324      	adds	r3, #36	; 0x24
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4610      	mov	r0, r2
 8000782:	4798      	blx	r3
	tft->select();
 8000784:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	332c      	adds	r3, #44	; 0x2c
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4610      	mov	r0, r2
 8000790:	4798      	blx	r3
	tft->drawArea(0,0, tft->getWidth()-1, tft->getHeight()-1, 0,0,0);
 8000792:	6ebd      	ldr	r5, [r7, #104]	; 0x68
 8000794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3338      	adds	r3, #56	; 0x38
 800079a:	681c      	ldr	r4, [r3, #0]
 800079c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800079e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	3304      	adds	r3, #4
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4610      	mov	r0, r2
 80007a8:	4798      	blx	r3
 80007aa:	4603      	mov	r3, r0
 80007ac:	3b01      	subs	r3, #1
 80007ae:	461e      	mov	r6, r3
 80007b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80007b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	3308      	adds	r3, #8
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4610      	mov	r0, r2
 80007bc:	4798      	blx	r3
 80007be:	4603      	mov	r3, r0
 80007c0:	3b01      	subs	r3, #1
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	ed9f 1ab1 	vldr	s2, [pc, #708]	; 8000a8c <_Z7cppMainv+0x354>
 80007c8:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8000a8c <_Z7cppMainv+0x354>
 80007cc:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8000a8c <_Z7cppMainv+0x354>
 80007d0:	4633      	mov	r3, r6
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	4628      	mov	r0, r5
 80007d8:	47a0      	blx	r4

	//canvas.drawLine(10, 10, 50, 60, Color(1,0,0));
	//canvas.drawLine(100, 30, 40, 90, Color(0,1,0));
	//canvas.drawLine(22, 30, 90, 70, Color(0,0,1));

	int mx = tft->getWidth()/2;
 80007da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80007dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3304      	adds	r3, #4
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4610      	mov	r0, r2
 80007e6:	4798      	blx	r3
 80007e8:	4603      	mov	r3, r0
 80007ea:	085b      	lsrs	r3, r3, #1
 80007ec:	667b      	str	r3, [r7, #100]	; 0x64
	int my = tft->getHeight()/2;
 80007ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80007f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3308      	adds	r3, #8
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4610      	mov	r0, r2
 80007fa:	4798      	blx	r3
 80007fc:	4603      	mov	r3, r0
 80007fe:	085b      	lsrs	r3, r3, #1
 8000800:	663b      	str	r3, [r7, #96]	; 0x60

	canvas.drawRectangle(10,10,tft->getWidth()-20,tft->getHeight()-20, Color(1,1,1));
 8000802:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3304      	adds	r3, #4
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4610      	mov	r0, r2
 800080e:	4798      	blx	r3
 8000810:	4603      	mov	r3, r0
 8000812:	3b14      	subs	r3, #20
 8000814:	ee07 3a90 	vmov	s15, r3
 8000818:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800081c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800081e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	3308      	adds	r3, #8
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4610      	mov	r0, r2
 8000828:	4798      	blx	r3
 800082a:	4603      	mov	r3, r0
 800082c:	3b14      	subs	r3, #20
 800082e:	ee07 3a90 	vmov	s15, r3
 8000832:	eef8 8a67 	vcvt.f32.u32	s17, s15
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800083e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000842:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000846:	4618      	mov	r0, r3
 8000848:	f005 f9d0 	bl	8005bec <_ZN5ColorC1Efff>
 800084c:	f107 0210 	add.w	r2, r7, #16
 8000850:	463b      	mov	r3, r7
 8000852:	4611      	mov	r1, r2
 8000854:	eef0 1a68 	vmov.f32	s3, s17
 8000858:	eeb0 1a48 	vmov.f32	s2, s16
 800085c:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8000860:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000864:	4618      	mov	r0, r3
 8000866:	f005 fbd3 	bl	8006010 <_ZN6Pencil13drawRectangleEffff5Color>
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	4618      	mov	r0, r3
 8000870:	f005 fa22 	bl	8005cb8 <_ZN5ColorD1Ev>

	for(float theta = 0; theta < 2*PI; theta += 0.1)
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	66fb      	str	r3, [r7, #108]	; 0x6c
 800087a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800087e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000882:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8000a58 <_Z7cppMainv+0x320>
 8000886:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800088a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800088e:	f140 8086 	bpl.w	800099e <_Z7cppMainv+0x266>
	{
		canvas.drawLine(mx, my, mx+(double)50*cos(theta), my+(double)50*sin(theta), Color(sin(theta),sin(theta+PI/2),sin(theta+PI)));
 8000892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000894:	ee07 3a90 	vmov	s15, r3
 8000898:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 800089c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800089e:	ee07 3a90 	vmov	s15, r3
 80008a2:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 80008a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80008b0:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 80008b4:	f7ff ff20 	bl	80006f8 <_ZSt3cosf>
 80008b8:	eef0 7a40 	vmov.f32	s15, s0
 80008bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008c0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000a60 <_Z7cppMainv+0x328>
 80008c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008c8:	ee38 7b07 	vadd.f64	d7, d8, d7
 80008cc:	eeb7 abc7 	vcvt.f32.f64	s20, d7
 80008d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008d2:	ee07 3a90 	vmov	s15, r3
 80008d6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80008da:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 80008de:	f7ff ff1b 	bl	8000718 <_ZSt3sinf>
 80008e2:	eef0 7a40 	vmov.f32	s15, s0
 80008e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008ea:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8000a60 <_Z7cppMainv+0x328>
 80008ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008f2:	ee38 7b07 	vadd.f64	d7, d8, d7
 80008f6:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
 80008fa:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 80008fe:	f7ff ff0b 	bl	8000718 <_ZSt3sinf>
 8000902:	eef0 aa40 	vmov.f32	s21, s0
 8000906:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800090a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800090e:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8000a68 <_Z7cppMainv+0x330>
 8000912:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000916:	eeb0 0b47 	vmov.f64	d0, d7
 800091a:	f006 fb65 	bl	8006fe8 <sin>
 800091e:	eeb0 7b40 	vmov.f64	d7, d0
 8000922:	eef7 8bc7 	vcvt.f32.f64	s17, d7
 8000926:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800092a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800092e:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8000a70 <_Z7cppMainv+0x338>
 8000932:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000936:	eeb0 0b47 	vmov.f64	d0, d7
 800093a:	f006 fb55 	bl	8006fe8 <sin>
 800093e:	eeb0 7b40 	vmov.f64	d7, d0
 8000942:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094a:	eeb0 1a67 	vmov.f32	s2, s15
 800094e:	eef0 0a68 	vmov.f32	s1, s17
 8000952:	eeb0 0a6a 	vmov.f32	s0, s21
 8000956:	4618      	mov	r0, r3
 8000958:	f005 f948 	bl	8005bec <_ZN5ColorC1Efff>
 800095c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000960:	463b      	mov	r3, r7
 8000962:	4611      	mov	r1, r2
 8000964:	eef0 1a48 	vmov.f32	s3, s16
 8000968:	eeb0 1a4a 	vmov.f32	s2, s20
 800096c:	eef0 0a69 	vmov.f32	s1, s19
 8000970:	eeb0 0a49 	vmov.f32	s0, s18
 8000974:	4618      	mov	r0, r3
 8000976:	f005 fa42 	bl	8005dfe <_ZN6Pencil8drawLineEffff5Color>
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4618      	mov	r0, r3
 8000980:	f005 f99a 	bl	8005cb8 <_ZN5ColorD1Ev>
	for(float theta = 0; theta < 2*PI; theta += 0.1)
 8000984:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000988:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800098c:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8000a78 <_Z7cppMainv+0x340>
 8000990:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000994:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000998:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 800099c:	e76d      	b.n	800087a <_Z7cppMainv+0x142>
	}

	canvas.drawEllipse(mx,my,50,100,Color(1,1,1));
 800099e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80009a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009aa:	ee07 3a90 	vmov	s15, r3
 80009ae:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80009b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009b6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80009ba:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80009be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f005 f912 	bl	8005bec <_ZN5ColorC1Efff>
 80009c8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80009cc:	463b      	mov	r3, r7
 80009ce:	2264      	movs	r2, #100	; 0x64
 80009d0:	eddf 1a2f 	vldr	s3, [pc, #188]	; 8000a90 <_Z7cppMainv+0x358>
 80009d4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8000a94 <_Z7cppMainv+0x35c>
 80009d8:	eef0 0a68 	vmov.f32	s1, s17
 80009dc:	eeb0 0a48 	vmov.f32	s0, s16
 80009e0:	4618      	mov	r0, r3
 80009e2:	f005 fbf1 	bl	80061c8 <_ZN6Pencil11drawEllipseEffff5Colorm>
 80009e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ea:	4618      	mov	r0, r3
 80009ec:	f005 f964 	bl	8005cb8 <_ZN5ColorD1Ev>
	canvas.drawEllipse(mx,my,50.5,100,Color(1,1,1));
 80009f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009f2:	ee07 3a90 	vmov	s15, r3
 80009f6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80009fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009fc:	ee07 3a90 	vmov	s15, r3
 8000a00:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8000a04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a08:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000a0c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000a10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f005 f8e9 	bl	8005bec <_ZN5ColorC1Efff>
 8000a1a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000a1e:	463b      	mov	r3, r7
 8000a20:	2264      	movs	r2, #100	; 0x64
 8000a22:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8000a90 <_Z7cppMainv+0x358>
 8000a26:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8000a98 <_Z7cppMainv+0x360>
 8000a2a:	eef0 0a68 	vmov.f32	s1, s17
 8000a2e:	eeb0 0a48 	vmov.f32	s0, s16
 8000a32:	4618      	mov	r0, r3
 8000a34:	f005 fbc8 	bl	80061c8 <_ZN6Pencil11drawEllipseEffff5Colorm>
 8000a38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f005 f93b 	bl	8005cb8 <_ZN5ColorD1Ev>

	tft->unselect();
 8000a42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	3330      	adds	r3, #48	; 0x30
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	4798      	blx	r3

	while(true)
 8000a50:	e7fe      	b.n	8000a50 <_Z7cppMainv+0x318>
 8000a52:	bf00      	nop
 8000a54:	f3af 8000 	nop.w
 8000a58:	54442eea 	.word	0x54442eea
 8000a5c:	401921fb 	.word	0x401921fb
 8000a60:	00000000 	.word	0x00000000
 8000a64:	40490000 	.word	0x40490000
 8000a68:	54442eea 	.word	0x54442eea
 8000a6c:	3ff921fb 	.word	0x3ff921fb
 8000a70:	54442eea 	.word	0x54442eea
 8000a74:	400921fb 	.word	0x400921fb
 8000a78:	9999999a 	.word	0x9999999a
 8000a7c:	3fb99999 	.word	0x3fb99999
 8000a80:	200000b8 	.word	0x200000b8
 8000a84:	58020800 	.word	0x58020800
 8000a88:	58020000 	.word	0x58020000
 8000a8c:	00000000 	.word	0x00000000
 8000a90:	42c80000 	.word	0x42c80000
 8000a94:	42480000 	.word	0x42480000
 8000a98:	424a0000 	.word	0x424a0000

08000a9c <jumpToCPP>:

	}
}

extern "C" void jumpToCPP()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	cppMain();
 8000aa0:	f7ff fe4a 	bl	8000738 <_Z7cppMainv>
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2224      	movs	r2, #36	; 0x24
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f007 fa1b 	bl	8007ef0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_DAC1_Init+0x5c>)
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_DAC1_Init+0x60>)
 8000abe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ac0:	4810      	ldr	r0, [pc, #64]	; (8000b04 <MX_DAC1_Init+0x5c>)
 8000ac2:	f000 fedd 	bl	8001880 <HAL_DAC_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000acc:	f000 f95e 	bl	8000d8c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000adc:	2302      	movs	r3, #2
 8000ade:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4806      	ldr	r0, [pc, #24]	; (8000b04 <MX_DAC1_Init+0x5c>)
 8000aec:	f000 fef8 	bl	80018e0 <HAL_DAC_ConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000af6:	f000 f949 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200000a4 	.word	0x200000a4
 8000b08:	40007400 	.word	0x40007400

08000b0c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <HAL_DAC_MspInit+0x3c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d10e      	bne.n	8000b3c <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_DAC_MspInit+0x40>)
 8000b20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b24:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <HAL_DAC_MspInit+0x40>)
 8000b26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <HAL_DAC_MspInit+0x40>)
 8000b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	40007400 	.word	0x40007400
 8000b4c:	58024400 	.word	0x58024400

08000b50 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b3d      	ldr	r3, [pc, #244]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	4a3b      	ldr	r2, [pc, #236]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b76:	4b39      	ldr	r3, [pc, #228]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b84:	4b35      	ldr	r3, [pc, #212]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	4a34      	ldr	r2, [pc, #208]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b94:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba2:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	4a2c      	ldr	r2, [pc, #176]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <MX_GPIO_Init+0x10c>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb8:	f003 0308 	and.w	r3, r3, #8
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_RST_Pin|TFT_A0_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2150      	movs	r1, #80	; 0x50
 8000bc4:	4826      	ldr	r0, [pc, #152]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000bc6:	f001 fb1f 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2110      	movs	r1, #16
 8000bce:	4825      	ldr	r0, [pc, #148]	; (8000c64 <MX_GPIO_Init+0x114>)
 8000bd0:	f001 fb1a 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin|TFT_A0_Pin;
 8000bd4:	2350      	movs	r3, #80	; 0x50
 8000bd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be0:	2302      	movs	r3, #2
 8000be2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	4619      	mov	r1, r3
 8000bea:	481d      	ldr	r0, [pc, #116]	; (8000c60 <MX_GPIO_Init+0x110>)
 8000bec:	f001 f85c 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_CS_Pin;
 8000bf0:	2310      	movs	r3, #16
 8000bf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TFT_CS_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	4619      	mov	r1, r3
 8000c06:	4817      	ldr	r0, [pc, #92]	; (8000c64 <MX_GPIO_Init+0x114>)
 8000c08:	f001 f84e 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_EXTI1_ENC_A_Pin|GPIO_EXT2_ENC_B_Pin|GPIO_EXTI3_ENC_SW_Pin;
 8000c0c:	230e      	movs	r3, #14
 8000c0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <MX_GPIO_Init+0x118>)
 8000c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4813      	ldr	r0, [pc, #76]	; (8000c6c <MX_GPIO_Init+0x11c>)
 8000c20:	f001 f842 	bl	8001ca8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	2007      	movs	r0, #7
 8000c2a:	f000 fddb 	bl	80017e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c2e:	2007      	movs	r0, #7
 8000c30:	f000 fe02 	bl	8001838 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2008      	movs	r0, #8
 8000c3a:	f000 fdd3 	bl	80017e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c3e:	2008      	movs	r0, #8
 8000c40:	f000 fdfa 	bl	8001838 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2009      	movs	r0, #9
 8000c4a:	f000 fdcb 	bl	80017e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c4e:	2009      	movs	r0, #9
 8000c50:	f000 fdf2 	bl	8001838 <HAL_NVIC_EnableIRQ>

}
 8000c54:	bf00      	nop
 8000c56:	3720      	adds	r7, #32
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	58024400 	.word	0x58024400
 8000c60:	58020000 	.word	0x58020000
 8000c64:	58020800 	.word	0x58020800
 8000c68:	11110000 	.word	0x11110000
 8000c6c:	58020c00 	.word	0x58020c00

08000c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c74:	f000 fc04 	bl	8001480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c78:	f000 f80a 	bl	8000c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7c:	f7ff ff68 	bl	8000b50 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c80:	f000 f894 	bl	8000dac <MX_SPI1_Init>
  MX_DAC1_Init();
 8000c84:	f7ff ff10 	bl	8000aa8 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  jumpToCPP();
 8000c88:	f7ff ff08 	bl	8000a9c <jumpToCPP>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <main+0x1c>
	...

08000c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b09c      	sub	sp, #112	; 0x70
 8000c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	224c      	movs	r2, #76	; 0x4c
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f007 f926 	bl	8007ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2220      	movs	r2, #32
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f007 f920 	bl	8007ef0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	f001 fb03 	bl	80022bc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <SystemClock_Config+0xf4>)
 8000cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbe:	4a31      	ldr	r2, [pc, #196]	; (8000d84 <SystemClock_Config+0xf4>)
 8000cc0:	f023 0301 	bic.w	r3, r3, #1
 8000cc4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <SystemClock_Config+0xf4>)
 8000cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <SystemClock_Config+0xf8>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cd8:	4a2b      	ldr	r2, [pc, #172]	; (8000d88 <SystemClock_Config+0xf8>)
 8000cda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <SystemClock_Config+0xf8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cec:	bf00      	nop
 8000cee:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <SystemClock_Config+0xf8>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cfa:	d1f8      	bne.n	8000cee <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d04:	2340      	movs	r3, #64	; 0x40
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d10:	2304      	movs	r3, #4
 8000d12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000d14:	230c      	movs	r3, #12
 8000d16:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d24:	230c      	movs	r3, #12
 8000d26:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d30:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fb06 	bl	8002348 <HAL_RCC_OscConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000d42:	f000 f823 	bl	8000d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	233f      	movs	r3, #63	; 0x3f
 8000d48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2102      	movs	r1, #2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f002 f844 	bl	8002df8 <HAL_RCC_ClockConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000d76:	f000 f809 	bl	8000d8c <Error_Handler>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3770      	adds	r7, #112	; 0x70
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	58000400 	.word	0x58000400
 8000d88:	58024800 	.word	0x58024800

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <Error_Handler+0x8>

08000d96 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000db2:	4a29      	ldr	r2, [pc, #164]	; (8000e58 <MX_SPI1_Init+0xac>)
 8000db4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000db6:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000db8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000dbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000dbe:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000dc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dc4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc6:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000dc8:	2207      	movs	r2, #7
 8000dca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dcc:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd2:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000dda:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000dde:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000de2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000de6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_SPI1_Init+0xa8>)
 8000e40:	f004 f918 	bl	8005074 <HAL_SPI_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000e4a:	f7ff ff9f 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200000b8 	.word	0x200000b8
 8000e58:	40013000 	.word	0x40013000

08000e5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0b8      	sub	sp, #224	; 0xe0
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	22bc      	movs	r2, #188	; 0xbc
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f007 f837 	bl	8007ef0 <memset>
  if(spiHandle->Instance==SPI1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a24      	ldr	r2, [pc, #144]	; (8000f18 <HAL_SPI_MspInit+0xbc>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d141      	bne.n	8000f10 <HAL_SPI_MspInit+0xb4>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e90:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 fc96 	bl	80037cc <HAL_RCCEx_PeriphCLKConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000ea6:	f7ff ff71 	bl	8000d8c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <HAL_SPI_MspInit+0xc0>)
 8000eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000eb0:	4a1a      	ldr	r2, [pc, #104]	; (8000f1c <HAL_SPI_MspInit+0xc0>)
 8000eb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_SPI_MspInit+0xc0>)
 8000ebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_SPI_MspInit+0xc0>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <HAL_SPI_MspInit+0xc0>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_SPI_MspInit+0xc0>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ee6:	23a0      	movs	r3, #160	; 0xa0
 8000ee8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000efe:	2305      	movs	r3, #5
 8000f00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <HAL_SPI_MspInit+0xc4>)
 8000f0c:	f000 fecc 	bl	8001ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f10:	bf00      	nop
 8000f12:	37e0      	adds	r7, #224	; 0xe0
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40013000 	.word	0x40013000
 8000f1c:	58024400 	.word	0x58024400
 8000f20:	58020000 	.word	0x58020000

08000f24 <_ZN14STM32H7_ST7735C1EP12GPIO_TypeDeftS1_tS1_tP19__SPI_HandleTypeDef>:
 *      Author: filipe
 */

#include <stm32h7_st7735.hpp>

STM32H7_ST7735::STM32H7_ST7735(GPIO_TypeDef *rst_port,
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	4613      	mov	r3, r2
 8000f32:	80fb      	strh	r3, [r7, #6]
		uint16_t rst_pin,
		GPIO_TypeDef *dc_port,
		uint16_t dc_pin,
		GPIO_TypeDef *cs_port,
		uint16_t cs_pin,
		SPI_HandleTypeDef *hspi) : ST7735()
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f005 fa56 	bl	80063e8 <_ZN6ST7735C1Ev>
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <_ZN14STM32H7_ST7735C1EP12GPIO_TypeDeftS1_tS1_tP19__SPI_HandleTypeDef+0x54>)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	601a      	str	r2, [r3, #0]
{
	this->rst_port = rst_port;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	61da      	str	r2, [r3, #28]
	this->rst_pin = rst_pin;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	88fa      	ldrh	r2, [r7, #6]
 8000f4c:	841a      	strh	r2, [r3, #32]
	this->dc_port = dc_port;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
	this->dc_pin = dc_pin;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	8b3a      	ldrh	r2, [r7, #24]
 8000f58:	851a      	strh	r2, [r3, #40]	; 0x28
	this->cs_port = cs_port;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	69fa      	ldr	r2, [r7, #28]
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
	this->cs_pin = cs_pin;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	8c3a      	ldrh	r2, [r7, #32]
 8000f64:	861a      	strh	r2, [r3, #48]	; 0x30
	this->hspi = hspi;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	08009420 	.word	0x08009420

08000f7c <_ZN14STM32H7_ST7735D1Ev>:

STM32H7_ST7735::~STM32H7_ST7735()
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <_ZN14STM32H7_ST7735D1Ev+0x20>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f005 fa51 	bl	8006434 <_ZN6ST7735D1Ev>
{
	// TODO Auto-generated destructor stub
}
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	08009420 	.word	0x08009420

08000fa0 <_ZN14STM32H7_ST7735D0Ev>:
STM32H7_ST7735::~STM32H7_ST7735()
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
}
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ffe7 	bl	8000f7c <_ZN14STM32H7_ST7735D1Ev>
 8000fae:	2138      	movs	r1, #56	; 0x38
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f005 ff0b 	bl	8006dcc <_ZdlPvj>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_ZN14STM32H7_ST77356initIOEv>:

void STM32H7_ST7735::initIO()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	HAL_SPI_Init(this->hspi);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f004 f851 	bl	8005074 <HAL_SPI_Init>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_ZN14STM32H7_ST77359rstPinSetEv>:

void STM32H7_ST7735::rstPinSet()
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->rst_port, this->rst_pin, GPIO_PIN_SET);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69d8      	ldr	r0, [r3, #28]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	8c1b      	ldrh	r3, [r3, #32]
 8000fea:	2201      	movs	r2, #1
 8000fec:	4619      	mov	r1, r3
 8000fee:	f001 f90b 	bl	8002208 <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_ZN14STM32H7_ST773511rstPinResetEv>:

void STM32H7_ST7735::rstPinReset()
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->rst_port, this->rst_pin, GPIO_PIN_RESET);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69d8      	ldr	r0, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	8c1b      	ldrh	r3, [r3, #32]
 800100a:	2200      	movs	r2, #0
 800100c:	4619      	mov	r1, r3
 800100e:	f001 f8fb 	bl	8002208 <HAL_GPIO_WritePin>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <_ZN14STM32H7_ST77358dcPinSetEv>:

void STM32H7_ST7735::dcPinSet()
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->dc_port, this->dc_pin, GPIO_PIN_SET);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800102a:	2201      	movs	r2, #1
 800102c:	4619      	mov	r1, r3
 800102e:	f001 f8eb 	bl	8002208 <HAL_GPIO_WritePin>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <_ZN14STM32H7_ST773510dcPinResetEv>:

void STM32H7_ST7735::dcPinReset()
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->dc_port, this->dc_pin, GPIO_PIN_RESET);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	f001 f8db 	bl	8002208 <HAL_GPIO_WritePin>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_ZN14STM32H7_ST77358csPinSetEv>:

void STM32H7_ST7735::csPinSet()
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->cs_port, this->cs_pin, GPIO_PIN_SET);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800106a:	2201      	movs	r2, #1
 800106c:	4619      	mov	r1, r3
 800106e:	f001 f8cb 	bl	8002208 <HAL_GPIO_WritePin>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_ZN14STM32H7_ST773510csPinResetEv>:

void STM32H7_ST7735::csPinReset()
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->cs_port, this->cs_pin, GPIO_PIN_RESET);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800108a:	2200      	movs	r2, #0
 800108c:	4619      	mov	r1, r3
 800108e:	f001 f8bb 	bl	8002208 <HAL_GPIO_WritePin>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <_ZN14STM32H7_ST77358sendByteEh>:

void STM32H7_ST7735::sendByte(uint8_t data)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	460b      	mov	r3, r1
 80010a4:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(this->hspi, &data, 1, 0x1);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80010aa:	1cf9      	adds	r1, r7, #3
 80010ac:	2301      	movs	r3, #1
 80010ae:	2201      	movs	r2, #1
 80010b0:	f004 fa8a 	bl	80055c8 <HAL_SPI_Transmit>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_ZN14STM32H7_ST77355delayEh>:

void STM32H7_ST7735::delay(uint8_t ms)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
	HAL_Delay(ms);
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fa6a 	bl	80015a4 <HAL_Delay>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_MspInit+0x30>)
 80010e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010e4:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_MspInit+0x30>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_MspInit+0x30>)
 80010f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	58024400 	.word	0x58024400

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler+0x4>

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f000 fa04 	bl	8001564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001164:	2002      	movs	r0, #2
 8001166:	f001 f883 	bl	8002270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}

0800116e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001172:	2004      	movs	r0, #4
 8001174:	f001 f87c 	bl	8002270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001180:	2008      	movs	r0, #8
 8001182:	f001 f875 	bl	8002270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}

0800118a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
	return 1;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <_kill>:

int _kill(int pid, int sig)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011a4:	f006 fe58 	bl	8007e58 <__errno>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2216      	movs	r2, #22
 80011ac:	601a      	str	r2, [r3, #0]
	return -1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <_exit>:

void _exit (int status)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffe7 	bl	800119a <_kill>
	while (1) {}		/* Make sure we hang here */
 80011cc:	e7fe      	b.n	80011cc <_exit+0x12>

080011ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e00a      	b.n	80011f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011e0:	f3af 8000 	nop.w
 80011e4:	4601      	mov	r1, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	60ba      	str	r2, [r7, #8]
 80011ec:	b2ca      	uxtb	r2, r1
 80011ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3301      	adds	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	dbf0      	blt.n	80011e0 <_read+0x12>
	}

return len;
 80011fe:	687b      	ldr	r3, [r7, #4]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e009      	b.n	800122e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	60ba      	str	r2, [r7, #8]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	429a      	cmp	r2, r3
 8001234:	dbf1      	blt.n	800121a <_write+0x12>
	}
	return len;
 8001236:	687b      	ldr	r3, [r7, #4]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <_close>:

int _close(int file)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	return -1;
 8001248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001268:	605a      	str	r2, [r3, #4]
	return 0;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <_isatty>:

int _isatty(int file)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	return 1;
 8001280:	2301      	movs	r3, #1
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800128e:	b480      	push	{r7}
 8001290:	b085      	sub	sp, #20
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
	return 0;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b0:	4a14      	ldr	r2, [pc, #80]	; (8001304 <_sbrk+0x5c>)
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <_sbrk+0x60>)
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <_sbrk+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <_sbrk+0x64>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <_sbrk+0x68>)
 80012c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d207      	bcs.n	80012e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d8:	f006 fdbe 	bl	8007e58 <__errno>
 80012dc:	4603      	mov	r3, r0
 80012de:	220c      	movs	r2, #12
 80012e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e6:	e009      	b.n	80012fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	4a05      	ldr	r2, [pc, #20]	; (800130c <_sbrk+0x64>)
 80012f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fa:	68fb      	ldr	r3, [r7, #12]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20020000 	.word	0x20020000
 8001308:	00000400 	.word	0x00000400
 800130c:	20000094 	.word	0x20000094
 8001310:	20000158 	.word	0x20000158

08001314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001318:	4b39      	ldr	r3, [pc, #228]	; (8001400 <SystemInit+0xec>)
 800131a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131e:	4a38      	ldr	r2, [pc, #224]	; (8001400 <SystemInit+0xec>)
 8001320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001328:	4b36      	ldr	r3, [pc, #216]	; (8001404 <SystemInit+0xf0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	2b06      	cmp	r3, #6
 8001332:	d807      	bhi.n	8001344 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001334:	4b33      	ldr	r3, [pc, #204]	; (8001404 <SystemInit+0xf0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 030f 	bic.w	r3, r3, #15
 800133c:	4a31      	ldr	r2, [pc, #196]	; (8001404 <SystemInit+0xf0>)
 800133e:	f043 0307 	orr.w	r3, r3, #7
 8001342:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001344:	4b30      	ldr	r3, [pc, #192]	; (8001408 <SystemInit+0xf4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <SystemInit+0xf4>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001350:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <SystemInit+0xf4>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001356:	4b2c      	ldr	r3, [pc, #176]	; (8001408 <SystemInit+0xf4>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	492b      	ldr	r1, [pc, #172]	; (8001408 <SystemInit+0xf4>)
 800135c:	4b2b      	ldr	r3, [pc, #172]	; (800140c <SystemInit+0xf8>)
 800135e:	4013      	ands	r3, r2
 8001360:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001362:	4b28      	ldr	r3, [pc, #160]	; (8001404 <SystemInit+0xf0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d007      	beq.n	800137e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <SystemInit+0xf0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 030f 	bic.w	r3, r3, #15
 8001376:	4a23      	ldr	r2, [pc, #140]	; (8001404 <SystemInit+0xf0>)
 8001378:	f043 0307 	orr.w	r3, r3, #7
 800137c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800137e:	4b22      	ldr	r3, [pc, #136]	; (8001408 <SystemInit+0xf4>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001384:	4b20      	ldr	r3, [pc, #128]	; (8001408 <SystemInit+0xf4>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <SystemInit+0xf4>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <SystemInit+0xf4>)
 8001392:	4a1f      	ldr	r2, [pc, #124]	; (8001410 <SystemInit+0xfc>)
 8001394:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <SystemInit+0xf4>)
 8001398:	4a1e      	ldr	r2, [pc, #120]	; (8001414 <SystemInit+0x100>)
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <SystemInit+0xf4>)
 800139e:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <SystemInit+0x104>)
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <SystemInit+0xf4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <SystemInit+0xf4>)
 80013aa:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <SystemInit+0x104>)
 80013ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <SystemInit+0xf4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <SystemInit+0xf4>)
 80013b6:	4a18      	ldr	r2, [pc, #96]	; (8001418 <SystemInit+0x104>)
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <SystemInit+0xf4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <SystemInit+0xf4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a10      	ldr	r2, [pc, #64]	; (8001408 <SystemInit+0xf4>)
 80013c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <SystemInit+0xf4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <SystemInit+0x108>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <SystemInit+0x10c>)
 80013d8:	4013      	ands	r3, r2
 80013da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013de:	d202      	bcs.n	80013e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <SystemInit+0x110>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <SystemInit+0x114>)
 80013e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013ec:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SystemInit+0xec>)
 80013f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013f4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00
 8001404:	52002000 	.word	0x52002000
 8001408:	58024400 	.word	0x58024400
 800140c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001410:	02020200 	.word	0x02020200
 8001414:	01ff0000 	.word	0x01ff0000
 8001418:	01010280 	.word	0x01010280
 800141c:	5c001000 	.word	0x5c001000
 8001420:	ffff0000 	.word	0xffff0000
 8001424:	51008108 	.word	0x51008108
 8001428:	52004000 	.word	0x52004000

0800142c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800142c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001464 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001430:	f7ff ff70 	bl	8001314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001434:	480c      	ldr	r0, [pc, #48]	; (8001468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001436:	490d      	ldr	r1, [pc, #52]	; (800146c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800144c:	4c0a      	ldr	r4, [pc, #40]	; (8001478 <LoopFillZerobss+0x22>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145a:	f006 fd15 	bl	8007e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145e:	f7ff fc07 	bl	8000c70 <main>
  bx  lr
 8001462:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001464:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800146c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001470:	0800996c 	.word	0x0800996c
  ldr r2, =_sbss
 8001474:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001478:	20000154 	.word	0x20000154

0800147c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC3_IRQHandler>
	...

08001480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001486:	2003      	movs	r0, #3
 8001488:	f000 f98c 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800148c:	f002 f824 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8001490:	4602      	mov	r2, r0
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_Init+0x68>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	4913      	ldr	r1, [pc, #76]	; (80014ec <HAL_Init+0x6c>)
 800149e:	5ccb      	ldrb	r3, [r1, r3]
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	fa22 f303 	lsr.w	r3, r2, r3
 80014a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_Init+0x68>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_Init+0x6c>)
 80014b4:	5cd3      	ldrb	r3, [r2, r3]
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	fa22 f303 	lsr.w	r3, r2, r3
 80014c0:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <HAL_Init+0x70>)
 80014c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014c4:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <HAL_Init+0x74>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f814 	bl	80014f8 <HAL_InitTick>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e002      	b.n	80014e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014da:	f7ff fdfd 	bl	80010d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	58024400 	.word	0x58024400
 80014ec:	08009488 	.word	0x08009488
 80014f0:	20000004 	.word	0x20000004
 80014f4:	20000000 	.word	0x20000000

080014f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_InitTick+0x60>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e021      	b.n	8001550 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <HAL_InitTick+0x64>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_InitTick+0x60>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f9a0 	bl	8001868 <HAL_SYSTICK_Config>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00e      	b.n	8001550 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d80a      	bhi.n	800154e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001540:	f000 f950 	bl	80017e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <HAL_InitTick+0x68>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	2000000c 	.word	0x2000000c
 800155c:	20000000 	.word	0x20000000
 8001560:	20000008 	.word	0x20000008

08001564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x20>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x24>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <HAL_IncTick+0x24>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	2000000c 	.word	0x2000000c
 8001588:	20000140 	.word	0x20000140

0800158c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return uwTick;
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <HAL_GetTick+0x14>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000140 	.word	0x20000140

080015a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff ffee 	bl	800158c <HAL_GetTick>
 80015b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015bc:	d005      	beq.n	80015ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_Delay+0x44>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ca:	bf00      	nop
 80015cc:	f7ff ffde 	bl	800158c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d8f7      	bhi.n	80015cc <HAL_Delay+0x28>
  {
  }
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000000c 	.word	0x2000000c

080015ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetREVID+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	0c1b      	lsrs	r3, r3, #16
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	5c001000 	.word	0x5c001000

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <__NVIC_SetPriorityGrouping+0x40>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	4313      	orrs	r3, r2
 8001630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001632:	4a04      	ldr	r2, [pc, #16]	; (8001644 <__NVIC_SetPriorityGrouping+0x40>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00
 8001648:	05fa0000 	.word	0x05fa0000

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4907      	ldr	r1, [pc, #28]	; (80016a0 <__NVIC_EnableIRQ+0x38>)
 8001682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
         );
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001784:	f7ff ff8e 	bl	80016a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b07      	cmp	r3, #7
 80017b0:	d00f      	beq.n	80017d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b06      	cmp	r3, #6
 80017b6:	d00c      	beq.n	80017d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b05      	cmp	r3, #5
 80017bc:	d009      	beq.n	80017d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d006      	beq.n	80017d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d003      	beq.n	80017d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017ca:	2192      	movs	r1, #146	; 0x92
 80017cc:	4804      	ldr	r0, [pc, #16]	; (80017e0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80017ce:	f7ff fae2 	bl	8000d96 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ff16 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	08008e20 	.word	0x08008e20

080017e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d903      	bls.n	8001800 <HAL_NVIC_SetPriority+0x1c>
 80017f8:	21aa      	movs	r1, #170	; 0xaa
 80017fa:	480e      	ldr	r0, [pc, #56]	; (8001834 <HAL_NVIC_SetPriority+0x50>)
 80017fc:	f7ff facb 	bl	8000d96 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b0f      	cmp	r3, #15
 8001804:	d903      	bls.n	800180e <HAL_NVIC_SetPriority+0x2a>
 8001806:	21ab      	movs	r1, #171	; 0xab
 8001808:	480a      	ldr	r0, [pc, #40]	; (8001834 <HAL_NVIC_SetPriority+0x50>)
 800180a:	f7ff fac4 	bl	8000d96 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800180e:	f7ff ff1d 	bl	800164c <__NVIC_GetPriorityGrouping>
 8001812:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	68b9      	ldr	r1, [r7, #8]
 8001818:	6978      	ldr	r0, [r7, #20]
 800181a:	f7ff ff6d 	bl	80016f8 <NVIC_EncodePriority>
 800181e:	4602      	mov	r2, r0
 8001820:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff3c 	bl	80016a4 <__NVIC_SetPriority>
}
 800182c:	bf00      	nop
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	08008e20 	.word	0x08008e20

08001838 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001846:	2b00      	cmp	r3, #0
 8001848:	da03      	bge.n	8001852 <HAL_NVIC_EnableIRQ+0x1a>
 800184a:	21be      	movs	r1, #190	; 0xbe
 800184c:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_NVIC_EnableIRQ+0x2c>)
 800184e:	f7ff faa2 	bl	8000d96 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff06 	bl	8001668 <__NVIC_EnableIRQ>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	08008e20 	.word	0x08008e20

08001868 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff75 	bl	8001760 <SysTick_Config>
 8001876:	4603      	mov	r3, r0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e01e      	b.n	80018d0 <HAL_DAC_Init+0x50>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a10      	ldr	r2, [pc, #64]	; (80018d8 <HAL_DAC_Init+0x58>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d004      	beq.n	80018a6 <HAL_DAC_Init+0x26>
 800189c:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80018a0:	480e      	ldr	r0, [pc, #56]	; (80018dc <HAL_DAC_Init+0x5c>)
 80018a2:	f7ff fa78 	bl	8000d96 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	791b      	ldrb	r3, [r3, #4]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d105      	bne.n	80018bc <HAL_DAC_Init+0x3c>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff f928 	bl	8000b0c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2202      	movs	r2, #2
 80018c0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40007400 	.word	0x40007400
 80018dc:	08008e5c 	.word	0x08008e5c

080018e0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d03c      	beq.n	800196e <HAL_DAC_ConfigChannel+0x8e>
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b06      	cmp	r3, #6
 80018fa:	d038      	beq.n	800196e <HAL_DAC_ConfigChannel+0x8e>
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b0a      	cmp	r3, #10
 8001902:	d034      	beq.n	800196e <HAL_DAC_ConfigChannel+0x8e>
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b0e      	cmp	r3, #14
 800190a:	d030      	beq.n	800196e <HAL_DAC_ConfigChannel+0x8e>
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b12      	cmp	r3, #18
 8001912:	d02c      	beq.n	800196e <HAL_DAC_ConfigChannel+0x8e>
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b16      	cmp	r3, #22
 800191a:	d028      	beq.n	800196e <HAL_DAC_ConfigChannel+0x8e>
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b1a      	cmp	r3, #26
 8001922:	d024      	beq.n	800196e <HAL_DAC_ConfigChannel+0x8e>
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b1e      	cmp	r3, #30
 800192a:	d020      	beq.n	800196e <HAL_DAC_ConfigChannel+0x8e>
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b22      	cmp	r3, #34	; 0x22
 8001932:	d01c      	beq.n	800196e <HAL_DAC_ConfigChannel+0x8e>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b26      	cmp	r3, #38	; 0x26
 800193a:	d018      	beq.n	800196e <HAL_DAC_ConfigChannel+0x8e>
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b2a      	cmp	r3, #42	; 0x2a
 8001942:	d014      	beq.n	800196e <HAL_DAC_ConfigChannel+0x8e>
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b2e      	cmp	r3, #46	; 0x2e
 800194a:	d010      	beq.n	800196e <HAL_DAC_ConfigChannel+0x8e>
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b32      	cmp	r3, #50	; 0x32
 8001952:	d00c      	beq.n	800196e <HAL_DAC_ConfigChannel+0x8e>
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b36      	cmp	r3, #54	; 0x36
 800195a:	d008      	beq.n	800196e <HAL_DAC_ConfigChannel+0x8e>
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d004      	beq.n	800196e <HAL_DAC_ConfigChannel+0x8e>
 8001964:	f240 31ee 	movw	r1, #1006	; 0x3ee
 8001968:	489e      	ldr	r0, [pc, #632]	; (8001be4 <HAL_DAC_ConfigChannel+0x304>)
 800196a:	f7ff fa14 	bl	8000d96 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d008      	beq.n	8001988 <HAL_DAC_ConfigChannel+0xa8>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d004      	beq.n	8001988 <HAL_DAC_ConfigChannel+0xa8>
 800197e:	f240 31ef 	movw	r1, #1007	; 0x3ef
 8001982:	4898      	ldr	r0, [pc, #608]	; (8001be4 <HAL_DAC_ConfigChannel+0x304>)
 8001984:	f7ff fa07 	bl	8000d96 <assert_failed>
  assert_param(IS_DAC_CHIP_CONNECTION(sConfig->DAC_ConnectOnChipPeripheral));
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d00c      	beq.n	80019aa <HAL_DAC_ConfigChannel+0xca>
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d008      	beq.n	80019aa <HAL_DAC_ConfigChannel+0xca>
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b04      	cmp	r3, #4
 800199e:	d004      	beq.n	80019aa <HAL_DAC_ConfigChannel+0xca>
 80019a0:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80019a4:	488f      	ldr	r0, [pc, #572]	; (8001be4 <HAL_DAC_ConfigChannel+0x304>)
 80019a6:	f7ff f9f6 	bl	8000d96 <assert_failed>
  assert_param(IS_DAC_TRIMMING(sConfig->DAC_UserTrimming));
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d008      	beq.n	80019c4 <HAL_DAC_ConfigChannel+0xe4>
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d004      	beq.n	80019c4 <HAL_DAC_ConfigChannel+0xe4>
 80019ba:	f240 31f1 	movw	r1, #1009	; 0x3f1
 80019be:	4889      	ldr	r0, [pc, #548]	; (8001be4 <HAL_DAC_ConfigChannel+0x304>)
 80019c0:	f7ff f9e9 	bl	8000d96 <assert_failed>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d108      	bne.n	80019de <HAL_DAC_ConfigChannel+0xfe>
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	2b1f      	cmp	r3, #31
 80019d2:	d904      	bls.n	80019de <HAL_DAC_ConfigChannel+0xfe>
 80019d4:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 80019d8:	4882      	ldr	r0, [pc, #520]	; (8001be4 <HAL_DAC_ConfigChannel+0x304>)
 80019da:	f7ff f9dc 	bl	8000d96 <assert_failed>
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d008      	beq.n	80019f8 <HAL_DAC_ConfigChannel+0x118>
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d004      	beq.n	80019f8 <HAL_DAC_ConfigChannel+0x118>
 80019ee:	f240 31f6 	movw	r1, #1014	; 0x3f6
 80019f2:	487c      	ldr	r0, [pc, #496]	; (8001be4 <HAL_DAC_ConfigChannel+0x304>)
 80019f4:	f7ff f9cf 	bl	8000d96 <assert_failed>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d11c      	bne.n	8001a3a <HAL_DAC_ConfigChannel+0x15a>
  {
    assert_param(IS_DAC_SAMPLETIME(sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime));
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a08:	d304      	bcc.n	8001a14 <HAL_DAC_ConfigChannel+0x134>
 8001a0a:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8001a0e:	4875      	ldr	r0, [pc, #468]	; (8001be4 <HAL_DAC_ConfigChannel+0x304>)
 8001a10:	f7ff f9c1 	bl	8000d96 <assert_failed>
    assert_param(IS_DAC_HOLDTIME(sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime));
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1c:	d304      	bcc.n	8001a28 <HAL_DAC_ConfigChannel+0x148>
 8001a1e:	f240 31fa 	movw	r1, #1018	; 0x3fa
 8001a22:	4870      	ldr	r0, [pc, #448]	; (8001be4 <HAL_DAC_ConfigChannel+0x304>)
 8001a24:	f7ff f9b7 	bl	8000d96 <assert_failed>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	2bff      	cmp	r3, #255	; 0xff
 8001a2e:	d904      	bls.n	8001a3a <HAL_DAC_ConfigChannel+0x15a>
 8001a30:	f240 31fb 	movw	r1, #1019	; 0x3fb
 8001a34:	486b      	ldr	r0, [pc, #428]	; (8001be4 <HAL_DAC_ConfigChannel+0x304>)
 8001a36:	f7ff f9ae 	bl	8000d96 <assert_failed>
  }
  assert_param(IS_DAC_CHANNEL(Channel));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <HAL_DAC_ConfigChannel+0x170>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b10      	cmp	r3, #16
 8001a44:	d004      	beq.n	8001a50 <HAL_DAC_ConfigChannel+0x170>
 8001a46:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8001a4a:	4866      	ldr	r0, [pc, #408]	; (8001be4 <HAL_DAC_ConfigChannel+0x304>)
 8001a4c:	f7ff f9a3 	bl	8000d96 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	795b      	ldrb	r3, [r3, #5]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_DAC_ConfigChannel+0x17c>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e121      	b.n	8001ca0 <HAL_DAC_ConfigChannel+0x3c0>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2202      	movs	r2, #2
 8001a66:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d174      	bne.n	8001b5a <HAL_DAC_ConfigChannel+0x27a>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001a70:	f7ff fd8c 	bl	800158c <HAL_GetTick>
 8001a74:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d134      	bne.n	8001ae6 <HAL_DAC_ConfigChannel+0x206>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001a7c:	e011      	b.n	8001aa2 <HAL_DAC_ConfigChannel+0x1c2>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001a7e:	f7ff fd85 	bl	800158c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d90a      	bls.n	8001aa2 <HAL_DAC_ConfigChannel+0x1c2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f043 0208 	orr.w	r2, r3, #8
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e0fe      	b.n	8001ca0 <HAL_DAC_ConfigChannel+0x3c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aa8:	4b4f      	ldr	r3, [pc, #316]	; (8001be8 <HAL_DAC_ConfigChannel+0x308>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e6      	bne.n	8001a7e <HAL_DAC_ConfigChannel+0x19e>
        }
      }
      HAL_Delay(1);
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7ff fd77 	bl	80015a4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	6992      	ldr	r2, [r2, #24]
 8001abe:	641a      	str	r2, [r3, #64]	; 0x40
 8001ac0:	e01e      	b.n	8001b00 <HAL_DAC_ConfigChannel+0x220>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001ac2:	f7ff fd63 	bl	800158c <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d90a      	bls.n	8001ae6 <HAL_DAC_ConfigChannel+0x206>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	f043 0208 	orr.w	r2, r3, #8
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2203      	movs	r2, #3
 8001ae0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e0dc      	b.n	8001ca0 <HAL_DAC_ConfigChannel+0x3c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	dbe8      	blt.n	8001ac2 <HAL_DAC_ConfigChannel+0x1e2>
        }
      }
      HAL_Delay(1U);
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff fd57 	bl	80015a4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	6992      	ldr	r2, [r2, #24]
 8001afe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	ea02 0103 	and.w	r1, r2, r3
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	69da      	ldr	r2, [r3, #28]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	409a      	lsls	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	21ff      	movs	r1, #255	; 0xff
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	ea02 0103 	and.w	r1, r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	6a1a      	ldr	r2, [r3, #32]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	409a      	lsls	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d11d      	bne.n	8001b9e <HAL_DAC_ConfigChannel+0x2be>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b68:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	221f      	movs	r2, #31
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2207      	movs	r2, #7
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d102      	bne.n	8001bc8 <HAL_DAC_ConfigChannel+0x2e8>
  {
    connectOnChip = 0x00000000UL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	e013      	b.n	8001bf0 <HAL_DAC_ConfigChannel+0x310>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d102      	bne.n	8001bd6 <HAL_DAC_ConfigChannel+0x2f6>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	e00c      	b.n	8001bf0 <HAL_DAC_ConfigChannel+0x310>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <HAL_DAC_ConfigChannel+0x30c>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001bde:	2301      	movs	r3, #1
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	e005      	b.n	8001bf0 <HAL_DAC_ConfigChannel+0x310>
 8001be4:	08008e5c 	.word	0x08008e5c
 8001be8:	20008000 	.word	0x20008000
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6819      	ldr	r1, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	400a      	ands	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	4013      	ands	r3, r2
 8001c54:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6819      	ldr	r1, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	22c0      	movs	r2, #192	; 0xc0
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	400a      	ands	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3720      	adds	r7, #32
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001cb6:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <HAL_GPIO_Init+0x12c>)
 8001cb8:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a46      	ldr	r2, [pc, #280]	; (8001dd8 <HAL_GPIO_Init+0x130>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d02b      	beq.n	8001d1a <HAL_GPIO_Init+0x72>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a45      	ldr	r2, [pc, #276]	; (8001ddc <HAL_GPIO_Init+0x134>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d027      	beq.n	8001d1a <HAL_GPIO_Init+0x72>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a44      	ldr	r2, [pc, #272]	; (8001de0 <HAL_GPIO_Init+0x138>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d023      	beq.n	8001d1a <HAL_GPIO_Init+0x72>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a43      	ldr	r2, [pc, #268]	; (8001de4 <HAL_GPIO_Init+0x13c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d01f      	beq.n	8001d1a <HAL_GPIO_Init+0x72>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a42      	ldr	r2, [pc, #264]	; (8001de8 <HAL_GPIO_Init+0x140>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d01b      	beq.n	8001d1a <HAL_GPIO_Init+0x72>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a41      	ldr	r2, [pc, #260]	; (8001dec <HAL_GPIO_Init+0x144>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d017      	beq.n	8001d1a <HAL_GPIO_Init+0x72>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a40      	ldr	r2, [pc, #256]	; (8001df0 <HAL_GPIO_Init+0x148>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d013      	beq.n	8001d1a <HAL_GPIO_Init+0x72>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a3f      	ldr	r2, [pc, #252]	; (8001df4 <HAL_GPIO_Init+0x14c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00f      	beq.n	8001d1a <HAL_GPIO_Init+0x72>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a3e      	ldr	r2, [pc, #248]	; (8001df8 <HAL_GPIO_Init+0x150>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00b      	beq.n	8001d1a <HAL_GPIO_Init+0x72>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a3d      	ldr	r2, [pc, #244]	; (8001dfc <HAL_GPIO_Init+0x154>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d007      	beq.n	8001d1a <HAL_GPIO_Init+0x72>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a3c      	ldr	r2, [pc, #240]	; (8001e00 <HAL_GPIO_Init+0x158>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x72>
 8001d12:	21bb      	movs	r1, #187	; 0xbb
 8001d14:	483b      	ldr	r0, [pc, #236]	; (8001e04 <HAL_GPIO_Init+0x15c>)
 8001d16:	f7ff f83e 	bl	8000d96 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_GPIO_Init+0x88>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b37      	ldr	r3, [pc, #220]	; (8001e08 <HAL_GPIO_Init+0x160>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x90>
 8001d30:	21bc      	movs	r1, #188	; 0xbc
 8001d32:	4834      	ldr	r0, [pc, #208]	; (8001e04 <HAL_GPIO_Init+0x15c>)
 8001d34:	f7ff f82f 	bl	8000d96 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d035      	beq.n	8001dac <HAL_GPIO_Init+0x104>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d031      	beq.n	8001dac <HAL_GPIO_Init+0x104>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b11      	cmp	r3, #17
 8001d4e:	d02d      	beq.n	8001dac <HAL_GPIO_Init+0x104>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d029      	beq.n	8001dac <HAL_GPIO_Init+0x104>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b12      	cmp	r3, #18
 8001d5e:	d025      	beq.n	8001dac <HAL_GPIO_Init+0x104>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4a29      	ldr	r2, [pc, #164]	; (8001e0c <HAL_GPIO_Init+0x164>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d020      	beq.n	8001dac <HAL_GPIO_Init+0x104>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4a28      	ldr	r2, [pc, #160]	; (8001e10 <HAL_GPIO_Init+0x168>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d01b      	beq.n	8001dac <HAL_GPIO_Init+0x104>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a26      	ldr	r2, [pc, #152]	; (8001e14 <HAL_GPIO_Init+0x16c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d016      	beq.n	8001dac <HAL_GPIO_Init+0x104>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4a25      	ldr	r2, [pc, #148]	; (8001e18 <HAL_GPIO_Init+0x170>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d011      	beq.n	8001dac <HAL_GPIO_Init+0x104>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4a23      	ldr	r2, [pc, #140]	; (8001e1c <HAL_GPIO_Init+0x174>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00c      	beq.n	8001dac <HAL_GPIO_Init+0x104>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <HAL_GPIO_Init+0x178>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d007      	beq.n	8001dac <HAL_GPIO_Init+0x104>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x104>
 8001da4:	21bd      	movs	r1, #189	; 0xbd
 8001da6:	4817      	ldr	r0, [pc, #92]	; (8001e04 <HAL_GPIO_Init+0x15c>)
 8001da8:	f7fe fff5 	bl	8000d96 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 821a 	beq.w	80021ea <HAL_GPIO_Init+0x542>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	f000 8215 	beq.w	80021ea <HAL_GPIO_Init+0x542>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	f000 8210 	beq.w	80021ea <HAL_GPIO_Init+0x542>
 8001dca:	21be      	movs	r1, #190	; 0xbe
 8001dcc:	480d      	ldr	r0, [pc, #52]	; (8001e04 <HAL_GPIO_Init+0x15c>)
 8001dce:	f7fe ffe2 	bl	8000d96 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dd2:	e20a      	b.n	80021ea <HAL_GPIO_Init+0x542>
 8001dd4:	58000080 	.word	0x58000080
 8001dd8:	58020000 	.word	0x58020000
 8001ddc:	58020400 	.word	0x58020400
 8001de0:	58020800 	.word	0x58020800
 8001de4:	58020c00 	.word	0x58020c00
 8001de8:	58021000 	.word	0x58021000
 8001dec:	58021400 	.word	0x58021400
 8001df0:	58021800 	.word	0x58021800
 8001df4:	58021c00 	.word	0x58021c00
 8001df8:	58022000 	.word	0x58022000
 8001dfc:	58022400 	.word	0x58022400
 8001e00:	58022800 	.word	0x58022800
 8001e04:	08008e94 	.word	0x08008e94
 8001e08:	ffff0000 	.word	0xffff0000
 8001e0c:	11110000 	.word	0x11110000
 8001e10:	11210000 	.word	0x11210000
 8001e14:	11310000 	.word	0x11310000
 8001e18:	11120000 	.word	0x11120000
 8001e1c:	11220000 	.word	0x11220000
 8001e20:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 81d4 	beq.w	80021e4 <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d00b      	beq.n	8001e5c <HAL_GPIO_Init+0x1b4>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d007      	beq.n	8001e5c <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e50:	2b11      	cmp	r3, #17
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b12      	cmp	r3, #18
 8001e5a:	d144      	bne.n	8001ee6 <HAL_GPIO_Init+0x23e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00f      	beq.n	8001e84 <HAL_GPIO_Init+0x1dc>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d00b      	beq.n	8001e84 <HAL_GPIO_Init+0x1dc>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d007      	beq.n	8001e84 <HAL_GPIO_Init+0x1dc>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x1dc>
 8001e7c:	21ce      	movs	r1, #206	; 0xce
 8001e7e:	4897      	ldr	r0, [pc, #604]	; (80020dc <HAL_GPIO_Init+0x434>)
 8001e80:	f7fe ff89 	bl	8000d96 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eba:	2201      	movs	r2, #1
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	f003 0201 	and.w	r2, r3, #1
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x27e>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b12      	cmp	r3, #18
 8001f24:	d15b      	bne.n	8001fde <HAL_GPIO_Init+0x336>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a6d      	ldr	r2, [pc, #436]	; (80020e0 <HAL_GPIO_Init+0x438>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d02b      	beq.n	8001f86 <HAL_GPIO_Init+0x2de>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a6c      	ldr	r2, [pc, #432]	; (80020e4 <HAL_GPIO_Init+0x43c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d027      	beq.n	8001f86 <HAL_GPIO_Init+0x2de>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a6b      	ldr	r2, [pc, #428]	; (80020e8 <HAL_GPIO_Init+0x440>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d023      	beq.n	8001f86 <HAL_GPIO_Init+0x2de>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a6a      	ldr	r2, [pc, #424]	; (80020ec <HAL_GPIO_Init+0x444>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01f      	beq.n	8001f86 <HAL_GPIO_Init+0x2de>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a69      	ldr	r2, [pc, #420]	; (80020f0 <HAL_GPIO_Init+0x448>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01b      	beq.n	8001f86 <HAL_GPIO_Init+0x2de>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a68      	ldr	r2, [pc, #416]	; (80020f4 <HAL_GPIO_Init+0x44c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d017      	beq.n	8001f86 <HAL_GPIO_Init+0x2de>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a67      	ldr	r2, [pc, #412]	; (80020f8 <HAL_GPIO_Init+0x450>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <HAL_GPIO_Init+0x2de>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a66      	ldr	r2, [pc, #408]	; (80020fc <HAL_GPIO_Init+0x454>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00f      	beq.n	8001f86 <HAL_GPIO_Init+0x2de>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a65      	ldr	r2, [pc, #404]	; (8002100 <HAL_GPIO_Init+0x458>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00b      	beq.n	8001f86 <HAL_GPIO_Init+0x2de>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a64      	ldr	r2, [pc, #400]	; (8002104 <HAL_GPIO_Init+0x45c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d007      	beq.n	8001f86 <HAL_GPIO_Init+0x2de>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a63      	ldr	r2, [pc, #396]	; (8002108 <HAL_GPIO_Init+0x460>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x2de>
 8001f7e:	21e6      	movs	r1, #230	; 0xe6
 8001f80:	4856      	ldr	r0, [pc, #344]	; (80020dc <HAL_GPIO_Init+0x434>)
 8001f82:	f7fe ff08 	bl	8000d96 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b0f      	cmp	r3, #15
 8001f8c:	d903      	bls.n	8001f96 <HAL_GPIO_Init+0x2ee>
 8001f8e:	21e7      	movs	r1, #231	; 0xe7
 8001f90:	4852      	ldr	r0, [pc, #328]	; (80020dc <HAL_GPIO_Init+0x434>)
 8001f92:	f7fe ff00 	bl	8000d96 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	69b9      	ldr	r1, [r7, #24]
 8001fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0203 	and.w	r2, r3, #3
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80e2 	beq.w	80021e4 <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002020:	4b3a      	ldr	r3, [pc, #232]	; (800210c <HAL_GPIO_Init+0x464>)
 8002022:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002026:	4a39      	ldr	r2, [pc, #228]	; (800210c <HAL_GPIO_Init+0x464>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002030:	4b36      	ldr	r3, [pc, #216]	; (800210c <HAL_GPIO_Init+0x464>)
 8002032:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800203e:	4a34      	ldr	r2, [pc, #208]	; (8002110 <HAL_GPIO_Init+0x468>)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a1e      	ldr	r2, [pc, #120]	; (80020e0 <HAL_GPIO_Init+0x438>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d054      	beq.n	8002114 <HAL_GPIO_Init+0x46c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_GPIO_Init+0x43c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d031      	beq.n	80020d6 <HAL_GPIO_Init+0x42e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a1c      	ldr	r2, [pc, #112]	; (80020e8 <HAL_GPIO_Init+0x440>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d02b      	beq.n	80020d2 <HAL_GPIO_Init+0x42a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <HAL_GPIO_Init+0x444>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d025      	beq.n	80020ce <HAL_GPIO_Init+0x426>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a1a      	ldr	r2, [pc, #104]	; (80020f0 <HAL_GPIO_Init+0x448>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01f      	beq.n	80020ca <HAL_GPIO_Init+0x422>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a19      	ldr	r2, [pc, #100]	; (80020f4 <HAL_GPIO_Init+0x44c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d019      	beq.n	80020c6 <HAL_GPIO_Init+0x41e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a18      	ldr	r2, [pc, #96]	; (80020f8 <HAL_GPIO_Init+0x450>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <HAL_GPIO_Init+0x41a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a17      	ldr	r2, [pc, #92]	; (80020fc <HAL_GPIO_Init+0x454>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00d      	beq.n	80020be <HAL_GPIO_Init+0x416>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a16      	ldr	r2, [pc, #88]	; (8002100 <HAL_GPIO_Init+0x458>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d007      	beq.n	80020ba <HAL_GPIO_Init+0x412>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a15      	ldr	r2, [pc, #84]	; (8002104 <HAL_GPIO_Init+0x45c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d101      	bne.n	80020b6 <HAL_GPIO_Init+0x40e>
 80020b2:	2309      	movs	r3, #9
 80020b4:	e02f      	b.n	8002116 <HAL_GPIO_Init+0x46e>
 80020b6:	230a      	movs	r3, #10
 80020b8:	e02d      	b.n	8002116 <HAL_GPIO_Init+0x46e>
 80020ba:	2308      	movs	r3, #8
 80020bc:	e02b      	b.n	8002116 <HAL_GPIO_Init+0x46e>
 80020be:	2307      	movs	r3, #7
 80020c0:	e029      	b.n	8002116 <HAL_GPIO_Init+0x46e>
 80020c2:	2306      	movs	r3, #6
 80020c4:	e027      	b.n	8002116 <HAL_GPIO_Init+0x46e>
 80020c6:	2305      	movs	r3, #5
 80020c8:	e025      	b.n	8002116 <HAL_GPIO_Init+0x46e>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e023      	b.n	8002116 <HAL_GPIO_Init+0x46e>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e021      	b.n	8002116 <HAL_GPIO_Init+0x46e>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e01f      	b.n	8002116 <HAL_GPIO_Init+0x46e>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e01d      	b.n	8002116 <HAL_GPIO_Init+0x46e>
 80020da:	bf00      	nop
 80020dc:	08008e94 	.word	0x08008e94
 80020e0:	58020000 	.word	0x58020000
 80020e4:	58020400 	.word	0x58020400
 80020e8:	58020800 	.word	0x58020800
 80020ec:	58020c00 	.word	0x58020c00
 80020f0:	58021000 	.word	0x58021000
 80020f4:	58021400 	.word	0x58021400
 80020f8:	58021800 	.word	0x58021800
 80020fc:	58021c00 	.word	0x58021c00
 8002100:	58022000 	.word	0x58022000
 8002104:	58022400 	.word	0x58022400
 8002108:	58022800 	.word	0x58022800
 800210c:	58024400 	.word	0x58024400
 8002110:	58000400 	.word	0x58000400
 8002114:	2300      	movs	r3, #0
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	f002 0203 	and.w	r2, r2, #3
 800211c:	0092      	lsls	r2, r2, #2
 800211e:	4093      	lsls	r3, r2
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002126:	4937      	ldr	r1, [pc, #220]	; (8002204 <HAL_GPIO_Init+0x55c>)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	3302      	adds	r3, #2
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	3301      	adds	r3, #1
 80021e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f47f ae15 	bne.w	8001e24 <HAL_GPIO_Init+0x17c>
  }
}
 80021fa:	bf00      	nop
 80021fc:	bf00      	nop
 80021fe:	3720      	adds	r7, #32
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	58000400 	.word	0x58000400

08002208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
 8002214:	4613      	mov	r3, r2
 8002216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d004      	beq.n	8002228 <HAL_GPIO_WritePin+0x20>
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_GPIO_WritePin+0x60>)
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <HAL_GPIO_WritePin+0x2a>
 8002228:	f240 11ad 	movw	r1, #429	; 0x1ad
 800222c:	480f      	ldr	r0, [pc, #60]	; (800226c <HAL_GPIO_WritePin+0x64>)
 800222e:	f7fe fdb2 	bl	8000d96 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002232:	787b      	ldrb	r3, [r7, #1]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d007      	beq.n	8002248 <HAL_GPIO_WritePin+0x40>
 8002238:	787b      	ldrb	r3, [r7, #1]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d004      	beq.n	8002248 <HAL_GPIO_WritePin+0x40>
 800223e:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8002242:	480a      	ldr	r0, [pc, #40]	; (800226c <HAL_GPIO_WritePin+0x64>)
 8002244:	f7fe fda7 	bl	8000d96 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002248:	787b      	ldrb	r3, [r7, #1]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002254:	e003      	b.n	800225e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	041a      	lsls	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	619a      	str	r2, [r3, #24]
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	ffff0000 	.word	0xffff0000
 800226c:	08008e94 	.word	0x08008e94

08002270 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800227a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	4013      	ands	r3, r2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800228a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f804 	bl	80022a4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d007      	beq.n	80022da <HAL_PWREx_ConfigSupply+0x1e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d004      	beq.n	80022da <HAL_PWREx_ConfigSupply+0x1e>
 80022d0:	f240 113f 	movw	r1, #319	; 0x13f
 80022d4:	481a      	ldr	r0, [pc, #104]	; (8002340 <HAL_PWREx_ConfigSupply+0x84>)
 80022d6:	f7fe fd5e 	bl	8000d96 <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_PWREx_ConfigSupply+0x88>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d00a      	beq.n	80022fc <HAL_PWREx_ConfigSupply+0x40>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022e6:	4b17      	ldr	r3, [pc, #92]	; (8002344 <HAL_PWREx_ConfigSupply+0x88>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_PWREx_ConfigSupply+0x3c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e01f      	b.n	8002338 <HAL_PWREx_ConfigSupply+0x7c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	e01d      	b.n	8002338 <HAL_PWREx_ConfigSupply+0x7c>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_PWREx_ConfigSupply+0x88>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f023 0207 	bic.w	r2, r3, #7
 8002304:	490f      	ldr	r1, [pc, #60]	; (8002344 <HAL_PWREx_ConfigSupply+0x88>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4313      	orrs	r3, r2
 800230a:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800230c:	f7ff f93e 	bl	800158c <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002312:	e009      	b.n	8002328 <HAL_PWREx_ConfigSupply+0x6c>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002314:	f7ff f93a 	bl	800158c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002322:	d901      	bls.n	8002328 <HAL_PWREx_ConfigSupply+0x6c>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e007      	b.n	8002338 <HAL_PWREx_ConfigSupply+0x7c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_PWREx_ConfigSupply+0x88>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002334:	d1ee      	bne.n	8002314 <HAL_PWREx_ConfigSupply+0x58>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	08008ed0 	.word	0x08008ed0
 8002344:	58024800 	.word	0x58024800

08002348 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08c      	sub	sp, #48	; 0x30
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	f000 bd47 	b.w	8002dea <HAL_RCC_OscConfig+0xaa2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d028      	beq.n	80023b6 <HAL_RCC_OscConfig+0x6e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d122      	bne.n	80023b6 <HAL_RCC_OscConfig+0x6e>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d11c      	bne.n	80023b6 <HAL_RCC_OscConfig+0x6e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b00      	cmp	r3, #0
 8002386:	d116      	bne.n	80023b6 <HAL_RCC_OscConfig+0x6e>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d110      	bne.n	80023b6 <HAL_RCC_OscConfig+0x6e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <HAL_RCC_OscConfig+0x6e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d104      	bne.n	80023b6 <HAL_RCC_OscConfig+0x6e>
 80023ac:	f240 11a3 	movw	r1, #419	; 0x1a3
 80023b0:	489b      	ldr	r0, [pc, #620]	; (8002620 <HAL_RCC_OscConfig+0x2d8>)
 80023b2:	f7fe fcf0 	bl	8000d96 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 809d 	beq.w	80024fe <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00e      	beq.n	80023ea <HAL_RCC_OscConfig+0xa2>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d4:	d009      	beq.n	80023ea <HAL_RCC_OscConfig+0xa2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023de:	d004      	beq.n	80023ea <HAL_RCC_OscConfig+0xa2>
 80023e0:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 80023e4:	488e      	ldr	r0, [pc, #568]	; (8002620 <HAL_RCC_OscConfig+0x2d8>)
 80023e6:	f7fe fcd6 	bl	8000d96 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ea:	4b8e      	ldr	r3, [pc, #568]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023f4:	4b8b      	ldr	r3, [pc, #556]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d007      	beq.n	8002410 <HAL_RCC_OscConfig+0xc8>
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002402:	2b18      	cmp	r3, #24
 8002404:	d111      	bne.n	800242a <HAL_RCC_OscConfig+0xe2>
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d10c      	bne.n	800242a <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002410:	4b84      	ldr	r3, [pc, #528]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d06f      	beq.n	80024fc <HAL_RCC_OscConfig+0x1b4>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d16b      	bne.n	80024fc <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	f000 bce0 	b.w	8002dea <HAL_RCC_OscConfig+0xaa2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0xfa>
 8002434:	4b7b      	ldr	r3, [pc, #492]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a7a      	ldr	r2, [pc, #488]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e02e      	b.n	80024a0 <HAL_RCC_OscConfig+0x158>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x11c>
 800244a:	4b76      	ldr	r3, [pc, #472]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a75      	ldr	r2, [pc, #468]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 8002450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b73      	ldr	r3, [pc, #460]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a72      	ldr	r2, [pc, #456]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 800245c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e01d      	b.n	80024a0 <HAL_RCC_OscConfig+0x158>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x140>
 800246e:	4b6d      	ldr	r3, [pc, #436]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a6c      	ldr	r2, [pc, #432]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 8002474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b6a      	ldr	r3, [pc, #424]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a69      	ldr	r2, [pc, #420]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0x158>
 8002488:	4b66      	ldr	r3, [pc, #408]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a65      	ldr	r2, [pc, #404]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 800248e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b63      	ldr	r3, [pc, #396]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a62      	ldr	r2, [pc, #392]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 800249a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d014      	beq.n	80024d2 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7ff f870 	bl	800158c <HAL_GetTick>
 80024ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ae:	e009      	b.n	80024c4 <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b0:	f7ff f86c 	bl	800158c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d902      	bls.n	80024c4 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	f000 bc93 	b.w	8002dea <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024c4:	4b57      	ldr	r3, [pc, #348]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ef      	beq.n	80024b0 <HAL_RCC_OscConfig+0x168>
 80024d0:	e015      	b.n	80024fe <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7ff f85b 	bl	800158c <HAL_GetTick>
 80024d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024d8:	e009      	b.n	80024ee <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024da:	f7ff f857 	bl	800158c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b64      	cmp	r3, #100	; 0x64
 80024e6:	d902      	bls.n	80024ee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	f000 bc7e 	b.w	8002dea <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024ee:	4b4d      	ldr	r3, [pc, #308]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1ef      	bne.n	80024da <HAL_RCC_OscConfig+0x192>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 80d7 	beq.w	80026ba <HAL_RCC_OscConfig+0x372>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d018      	beq.n	8002546 <HAL_RCC_OscConfig+0x1fe>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d014      	beq.n	8002546 <HAL_RCC_OscConfig+0x1fe>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d010      	beq.n	8002546 <HAL_RCC_OscConfig+0x1fe>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b09      	cmp	r3, #9
 800252a:	d00c      	beq.n	8002546 <HAL_RCC_OscConfig+0x1fe>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b11      	cmp	r3, #17
 8002532:	d008      	beq.n	8002546 <HAL_RCC_OscConfig+0x1fe>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b19      	cmp	r3, #25
 800253a:	d004      	beq.n	8002546 <HAL_RCC_OscConfig+0x1fe>
 800253c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8002540:	4837      	ldr	r0, [pc, #220]	; (8002620 <HAL_RCC_OscConfig+0x2d8>)
 8002542:	f7fe fc28 	bl	8000d96 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b7f      	cmp	r3, #127	; 0x7f
 800254c:	d904      	bls.n	8002558 <HAL_RCC_OscConfig+0x210>
 800254e:	f240 11dd 	movw	r1, #477	; 0x1dd
 8002552:	4833      	ldr	r0, [pc, #204]	; (8002620 <HAL_RCC_OscConfig+0x2d8>)
 8002554:	f7fe fc1f 	bl	8000d96 <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002558:	4b32      	ldr	r3, [pc, #200]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002560:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002562:	4b30      	ldr	r3, [pc, #192]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <HAL_RCC_OscConfig+0x236>
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	2b18      	cmp	r3, #24
 8002572:	d13b      	bne.n	80025ec <HAL_RCC_OscConfig+0x2a4>
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d136      	bne.n	80025ec <HAL_RCC_OscConfig+0x2a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800257e:	4b29      	ldr	r3, [pc, #164]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d006      	beq.n	8002598 <HAL_RCC_OscConfig+0x250>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d102      	bne.n	8002598 <HAL_RCC_OscConfig+0x250>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	f000 bc29 	b.w	8002dea <HAL_RCC_OscConfig+0xaa2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002598:	f7ff f828 	bl	80015ec <HAL_GetREVID>
 800259c:	4603      	mov	r3, r0
 800259e:	f241 0203 	movw	r2, #4099	; 0x1003
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d817      	bhi.n	80025d6 <HAL_RCC_OscConfig+0x28e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b40      	cmp	r3, #64	; 0x40
 80025ac:	d108      	bne.n	80025c0 <HAL_RCC_OscConfig+0x278>
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80025b6:	4a1b      	ldr	r2, [pc, #108]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 80025b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025bc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025be:	e07c      	b.n	80026ba <HAL_RCC_OscConfig+0x372>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b18      	ldr	r3, [pc, #96]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	031b      	lsls	r3, r3, #12
 80025ce:	4915      	ldr	r1, [pc, #84]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d4:	e071      	b.n	80026ba <HAL_RCC_OscConfig+0x372>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	061b      	lsls	r3, r3, #24
 80025e4:	490f      	ldr	r1, [pc, #60]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ea:	e066      	b.n	80026ba <HAL_RCC_OscConfig+0x372>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d049      	beq.n	8002688 <HAL_RCC_OscConfig+0x340>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f023 0219 	bic.w	r2, r3, #25
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4908      	ldr	r1, [pc, #32]	; (8002624 <HAL_RCC_OscConfig+0x2dc>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7fe ffc1 	bl	800158c <HAL_GetTick>
 800260a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800260c:	e00c      	b.n	8002628 <HAL_RCC_OscConfig+0x2e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260e:	f7fe ffbd 	bl	800158c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d905      	bls.n	8002628 <HAL_RCC_OscConfig+0x2e0>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e3e4      	b.n	8002dea <HAL_RCC_OscConfig+0xaa2>
 8002620:	08008f0c 	.word	0x08008f0c
 8002624:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002628:	4ba4      	ldr	r3, [pc, #656]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ec      	beq.n	800260e <HAL_RCC_OscConfig+0x2c6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	f7fe ffda 	bl	80015ec <HAL_GetREVID>
 8002638:	4603      	mov	r3, r0
 800263a:	f241 0203 	movw	r2, #4099	; 0x1003
 800263e:	4293      	cmp	r3, r2
 8002640:	d817      	bhi.n	8002672 <HAL_RCC_OscConfig+0x32a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b40      	cmp	r3, #64	; 0x40
 8002648:	d108      	bne.n	800265c <HAL_RCC_OscConfig+0x314>
 800264a:	4b9c      	ldr	r3, [pc, #624]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002652:	4a9a      	ldr	r2, [pc, #616]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 8002654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002658:	6053      	str	r3, [r2, #4]
 800265a:	e02e      	b.n	80026ba <HAL_RCC_OscConfig+0x372>
 800265c:	4b97      	ldr	r3, [pc, #604]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	031b      	lsls	r3, r3, #12
 800266a:	4994      	ldr	r1, [pc, #592]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
 8002670:	e023      	b.n	80026ba <HAL_RCC_OscConfig+0x372>
 8002672:	4b92      	ldr	r3, [pc, #584]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	061b      	lsls	r3, r3, #24
 8002680:	498e      	ldr	r1, [pc, #568]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
 8002686:	e018      	b.n	80026ba <HAL_RCC_OscConfig+0x372>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002688:	4b8c      	ldr	r3, [pc, #560]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a8b      	ldr	r2, [pc, #556]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe ff7a 	bl	800158c <HAL_GetTick>
 8002698:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269c:	f7fe ff76 	bl	800158c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e39d      	b.n	8002dea <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026ae:	4b83      	ldr	r3, [pc, #524]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x354>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80bf 	beq.w	8002846 <HAL_RCC_OscConfig+0x4fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCC_OscConfig+0x39a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2b80      	cmp	r3, #128	; 0x80
 80026d6:	d004      	beq.n	80026e2 <HAL_RCC_OscConfig+0x39a>
 80026d8:	f240 211f 	movw	r1, #543	; 0x21f
 80026dc:	4878      	ldr	r0, [pc, #480]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80026de:	f7fe fb5a 	bl	8000d96 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	2b3f      	cmp	r3, #63	; 0x3f
 80026e8:	d904      	bls.n	80026f4 <HAL_RCC_OscConfig+0x3ac>
 80026ea:	f44f 7108 	mov.w	r1, #544	; 0x220
 80026ee:	4874      	ldr	r0, [pc, #464]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80026f0:	f7fe fb51 	bl	8000d96 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f4:	4b71      	ldr	r3, [pc, #452]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026fc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026fe:	4b6f      	ldr	r3, [pc, #444]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b08      	cmp	r3, #8
 8002708:	d007      	beq.n	800271a <HAL_RCC_OscConfig+0x3d2>
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b18      	cmp	r3, #24
 800270e:	d13a      	bne.n	8002786 <HAL_RCC_OscConfig+0x43e>
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b01      	cmp	r3, #1
 8002718:	d135      	bne.n	8002786 <HAL_RCC_OscConfig+0x43e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800271a:	4b68      	ldr	r3, [pc, #416]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_RCC_OscConfig+0x3ea>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	2b80      	cmp	r3, #128	; 0x80
 800272c:	d001      	beq.n	8002732 <HAL_RCC_OscConfig+0x3ea>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e35b      	b.n	8002dea <HAL_RCC_OscConfig+0xaa2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002732:	f7fe ff5b 	bl	80015ec <HAL_GetREVID>
 8002736:	4603      	mov	r3, r0
 8002738:	f241 0203 	movw	r2, #4099	; 0x1003
 800273c:	4293      	cmp	r3, r2
 800273e:	d817      	bhi.n	8002770 <HAL_RCC_OscConfig+0x428>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	2b20      	cmp	r3, #32
 8002746:	d108      	bne.n	800275a <HAL_RCC_OscConfig+0x412>
 8002748:	4b5c      	ldr	r3, [pc, #368]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002750:	4a5a      	ldr	r2, [pc, #360]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 8002752:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002756:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002758:	e075      	b.n	8002846 <HAL_RCC_OscConfig+0x4fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800275a:	4b58      	ldr	r3, [pc, #352]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	069b      	lsls	r3, r3, #26
 8002768:	4954      	ldr	r1, [pc, #336]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800276e:	e06a      	b.n	8002846 <HAL_RCC_OscConfig+0x4fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002770:	4b52      	ldr	r3, [pc, #328]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	494f      	ldr	r1, [pc, #316]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 8002780:	4313      	orrs	r3, r2
 8002782:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002784:	e05f      	b.n	8002846 <HAL_RCC_OscConfig+0x4fe>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d042      	beq.n	8002814 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800278e:	4b4b      	ldr	r3, [pc, #300]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a4a      	ldr	r2, [pc, #296]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 8002794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe fef7 	bl	800158c <HAL_GetTick>
 800279e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x46c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80027a2:	f7fe fef3 	bl	800158c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e31a      	b.n	8002dea <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027b4:	4b41      	ldr	r3, [pc, #260]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x45a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027c0:	f7fe ff14 	bl	80015ec <HAL_GetREVID>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d817      	bhi.n	80027fe <HAL_RCC_OscConfig+0x4b6>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	d108      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4a0>
 80027d6:	4b39      	ldr	r3, [pc, #228]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027de:	4a37      	ldr	r2, [pc, #220]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 80027e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027e4:	6053      	str	r3, [r2, #4]
 80027e6:	e02e      	b.n	8002846 <HAL_RCC_OscConfig+0x4fe>
 80027e8:	4b34      	ldr	r3, [pc, #208]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	069b      	lsls	r3, r3, #26
 80027f6:	4931      	ldr	r1, [pc, #196]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
 80027fc:	e023      	b.n	8002846 <HAL_RCC_OscConfig+0x4fe>
 80027fe:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	061b      	lsls	r3, r3, #24
 800280c:	492b      	ldr	r1, [pc, #172]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 800280e:	4313      	orrs	r3, r2
 8002810:	60cb      	str	r3, [r1, #12]
 8002812:	e018      	b.n	8002846 <HAL_RCC_OscConfig+0x4fe>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002814:	4b29      	ldr	r3, [pc, #164]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a28      	ldr	r2, [pc, #160]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 800281a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800281e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fe feb4 	bl	800158c <HAL_GetTick>
 8002824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x4f2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002828:	f7fe feb0 	bl	800158c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x4f2>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e2d7      	b.n	8002dea <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d047      	beq.n	80028e2 <HAL_RCC_OscConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <HAL_RCC_OscConfig+0x524>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d004      	beq.n	800286c <HAL_RCC_OscConfig+0x524>
 8002862:	f240 2161 	movw	r1, #609	; 0x261
 8002866:	4816      	ldr	r0, [pc, #88]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002868:	f7fe fa95 	bl	8000d96 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d019      	beq.n	80028a8 <HAL_RCC_OscConfig+0x560>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 8002876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002878:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7fe fe84 	bl	800158c <HAL_GetTick>
 8002884:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002888:	f7fe fe80 	bl	800158c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e2a7      	b.n	8002dea <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 800289c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x540>
 80028a6:	e01c      	b.n	80028e2 <HAL_RCC_OscConfig+0x59a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a8:	4b04      	ldr	r3, [pc, #16]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 80028aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ac:	4a03      	ldr	r2, [pc, #12]	; (80028bc <HAL_RCC_OscConfig+0x574>)
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7fe fe6a 	bl	800158c <HAL_GetTick>
 80028b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028ba:	e00c      	b.n	80028d6 <HAL_RCC_OscConfig+0x58e>
 80028bc:	58024400 	.word	0x58024400
 80028c0:	08008f0c 	.word	0x08008f0c
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c4:	f7fe fe62 	bl	800158c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x58e>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e289      	b.n	8002dea <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028d6:	4b71      	ldr	r3, [pc, #452]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 80028d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x57c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d043      	beq.n	8002976 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_RCC_OscConfig+0x5c0>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d004      	beq.n	8002908 <HAL_RCC_OscConfig+0x5c0>
 80028fe:	f44f 7123 	mov.w	r1, #652	; 0x28c
 8002902:	4867      	ldr	r0, [pc, #412]	; (8002aa0 <HAL_RCC_OscConfig+0x758>)
 8002904:	f7fe fa47 	bl	8000d96 <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d019      	beq.n	8002944 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002910:	4b62      	ldr	r3, [pc, #392]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a61      	ldr	r2, [pc, #388]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 8002916:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800291a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800291c:	f7fe fe36 	bl	800158c <HAL_GetTick>
 8002920:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x5ee>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002924:	f7fe fe32 	bl	800158c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e259      	b.n	8002dea <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002936:	4b59      	ldr	r3, [pc, #356]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x5dc>
 8002942:	e018      	b.n	8002976 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002944:	4b55      	ldr	r3, [pc, #340]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a54      	ldr	r2, [pc, #336]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 800294a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800294e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002950:	f7fe fe1c 	bl	800158c <HAL_GetTick>
 8002954:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002958:	f7fe fe18 	bl	800158c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e23f      	b.n	8002dea <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800296a:	4b4c      	ldr	r3, [pc, #304]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 8098 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x76c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00c      	beq.n	80029a6 <HAL_RCC_OscConfig+0x65e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d008      	beq.n	80029a6 <HAL_RCC_OscConfig+0x65e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b05      	cmp	r3, #5
 800299a:	d004      	beq.n	80029a6 <HAL_RCC_OscConfig+0x65e>
 800299c:	f240 21b6 	movw	r1, #694	; 0x2b6
 80029a0:	483f      	ldr	r0, [pc, #252]	; (8002aa0 <HAL_RCC_OscConfig+0x758>)
 80029a2:	f7fe f9f8 	bl	8000d96 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029a6:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <HAL_RCC_OscConfig+0x75c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a3e      	ldr	r2, [pc, #248]	; (8002aa4 <HAL_RCC_OscConfig+0x75c>)
 80029ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029b2:	f7fe fdeb 	bl	800158c <HAL_GetTick>
 80029b6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x684>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80029ba:	f7fe fde7 	bl	800158c <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b64      	cmp	r3, #100	; 0x64
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x684>
      {
        return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e20e      	b.n	8002dea <HAL_RCC_OscConfig+0xaa2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029cc:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <HAL_RCC_OscConfig+0x75c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x672>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d106      	bne.n	80029ee <HAL_RCC_OscConfig+0x6a6>
 80029e0:	4b2e      	ldr	r3, [pc, #184]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a2d      	ldr	r2, [pc, #180]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
 80029ec:	e02d      	b.n	8002a4a <HAL_RCC_OscConfig+0x702>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x6c8>
 80029f6:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	4a28      	ldr	r2, [pc, #160]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	6713      	str	r3, [r2, #112]	; 0x70
 8002a02:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	4a25      	ldr	r2, [pc, #148]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0e:	e01c      	b.n	8002a4a <HAL_RCC_OscConfig+0x702>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d10c      	bne.n	8002a32 <HAL_RCC_OscConfig+0x6ea>
 8002a18:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	4a1f      	ldr	r2, [pc, #124]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 8002a1e:	f043 0304 	orr.w	r3, r3, #4
 8002a22:	6713      	str	r3, [r2, #112]	; 0x70
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	4a1c      	ldr	r2, [pc, #112]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a30:	e00b      	b.n	8002a4a <HAL_RCC_OscConfig+0x702>
 8002a32:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3e:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	4a16      	ldr	r2, [pc, #88]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 8002a44:	f023 0304 	bic.w	r3, r3, #4
 8002a48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d015      	beq.n	8002a7e <HAL_RCC_OscConfig+0x736>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a52:	f7fe fd9b 	bl	800158c <HAL_GetTick>
 8002a56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a58:	e00a      	b.n	8002a70 <HAL_RCC_OscConfig+0x728>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a5a:	f7fe fd97 	bl	800158c <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e1bc      	b.n	8002dea <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_RCC_OscConfig+0x754>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ee      	beq.n	8002a5a <HAL_RCC_OscConfig+0x712>
 8002a7c:	e01a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x76c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7e:	f7fe fd85 	bl	800158c <HAL_GetTick>
 8002a82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a84:	e010      	b.n	8002aa8 <HAL_RCC_OscConfig+0x760>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7fe fd81 	bl	800158c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d907      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x760>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e1a6      	b.n	8002dea <HAL_RCC_OscConfig+0xaa2>
 8002a9c:	58024400 	.word	0x58024400
 8002aa0:	08008f0c 	.word	0x08008f0c
 8002aa4:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aa8:	4b9f      	ldr	r3, [pc, #636]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1e8      	bne.n	8002a86 <HAL_RCC_OscConfig+0x73e>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00c      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x78e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x78e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d004      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x78e>
 8002acc:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 8002ad0:	4896      	ldr	r0, [pc, #600]	; (8002d2c <HAL_RCC_OscConfig+0x9e4>)
 8002ad2:	f7fe f960 	bl	8000d96 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 8184 	beq.w	8002de8 <HAL_RCC_OscConfig+0xaa0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ae0:	4b91      	ldr	r3, [pc, #580]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ae8:	2b18      	cmp	r3, #24
 8002aea:	f000 813f 	beq.w	8002d6c <HAL_RCC_OscConfig+0xa24>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	f040 8120 	bne.w	8002d38 <HAL_RCC_OscConfig+0x9f0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d010      	beq.n	8002b22 <HAL_RCC_OscConfig+0x7da>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00c      	beq.n	8002b22 <HAL_RCC_OscConfig+0x7da>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCC_OscConfig+0x7da>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d004      	beq.n	8002b22 <HAL_RCC_OscConfig+0x7da>
 8002b18:	f240 21f1 	movw	r1, #753	; 0x2f1
 8002b1c:	4883      	ldr	r0, [pc, #524]	; (8002d2c <HAL_RCC_OscConfig+0x9e4>)
 8002b1e:	f7fe f93a 	bl	8000d96 <assert_failed>
        assert_param(IS_RCC_PLLRGE_VALUE(RCC_OscInitStruct->PLL.PLLRGE));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d010      	beq.n	8002b4c <HAL_RCC_OscConfig+0x804>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d00c      	beq.n	8002b4c <HAL_RCC_OscConfig+0x804>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d008      	beq.n	8002b4c <HAL_RCC_OscConfig+0x804>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	d004      	beq.n	8002b4c <HAL_RCC_OscConfig+0x804>
 8002b42:	f240 21f2 	movw	r1, #754	; 0x2f2
 8002b46:	4879      	ldr	r0, [pc, #484]	; (8002d2c <HAL_RCC_OscConfig+0x9e4>)
 8002b48:	f7fe f925 	bl	8000d96 <assert_failed>
        assert_param(IS_RCC_PLLVCO_VALUE(RCC_OscInitStruct->PLL.PLLVCOSEL));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCC_OscConfig+0x81e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d004      	beq.n	8002b66 <HAL_RCC_OscConfig+0x81e>
 8002b5c:	f240 21f3 	movw	r1, #755	; 0x2f3
 8002b60:	4872      	ldr	r0, [pc, #456]	; (8002d2c <HAL_RCC_OscConfig+0x9e4>)
 8002b62:	f7fe f918 	bl	8000d96 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCC_OscConfig+0x82e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	2b3f      	cmp	r3, #63	; 0x3f
 8002b74:	d904      	bls.n	8002b80 <HAL_RCC_OscConfig+0x838>
 8002b76:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8002b7a:	486c      	ldr	r0, [pc, #432]	; (8002d2c <HAL_RCC_OscConfig+0x9e4>)
 8002b7c:	f7fe f90b 	bl	8000d96 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d904      	bls.n	8002b92 <HAL_RCC_OscConfig+0x84a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b90:	d904      	bls.n	8002b9c <HAL_RCC_OscConfig+0x854>
 8002b92:	f240 21f5 	movw	r1, #757	; 0x2f5
 8002b96:	4865      	ldr	r0, [pc, #404]	; (8002d2c <HAL_RCC_OscConfig+0x9e4>)
 8002b98:	f7fe f8fd 	bl	8000d96 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_RCC_OscConfig+0x864>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba8:	2b80      	cmp	r3, #128	; 0x80
 8002baa:	d904      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x86e>
 8002bac:	f240 21f6 	movw	r1, #758	; 0x2f6
 8002bb0:	485e      	ldr	r0, [pc, #376]	; (8002d2c <HAL_RCC_OscConfig+0x9e4>)
 8002bb2:	f7fe f8f0 	bl	8000d96 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x87e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	2b80      	cmp	r3, #128	; 0x80
 8002bc4:	d904      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x888>
 8002bc6:	f240 21f7 	movw	r1, #759	; 0x2f7
 8002bca:	4858      	ldr	r0, [pc, #352]	; (8002d2c <HAL_RCC_OscConfig+0x9e4>)
 8002bcc:	f7fe f8e3 	bl	8000d96 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_RCC_OscConfig+0x898>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bdc:	2b80      	cmp	r3, #128	; 0x80
 8002bde:	d904      	bls.n	8002bea <HAL_RCC_OscConfig+0x8a2>
 8002be0:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 8002be4:	4851      	ldr	r0, [pc, #324]	; (8002d2c <HAL_RCC_OscConfig+0x9e4>)
 8002be6:	f7fe f8d6 	bl	8000d96 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf2:	d304      	bcc.n	8002bfe <HAL_RCC_OscConfig+0x8b6>
 8002bf4:	f240 21f9 	movw	r1, #761	; 0x2f9
 8002bf8:	484c      	ldr	r0, [pc, #304]	; (8002d2c <HAL_RCC_OscConfig+0x9e4>)
 8002bfa:	f7fe f8cc 	bl	8000d96 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfe:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a49      	ldr	r2, [pc, #292]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002c04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7fe fcbf 	bl	800158c <HAL_GetTick>
 8002c0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x8dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c12:	f7fe fcbb 	bl	800158c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x8dc>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e0e2      	b.n	8002dea <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c24:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x8ca>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c30:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002c32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c34:	4b3e      	ldr	r3, [pc, #248]	; (8002d30 <HAL_RCC_OscConfig+0x9e8>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c40:	0112      	lsls	r2, r2, #4
 8002c42:	430a      	orrs	r2, r1
 8002c44:	4938      	ldr	r1, [pc, #224]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	628b      	str	r3, [r1, #40]	; 0x28
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c64:	3b01      	subs	r3, #1
 8002c66:	041b      	lsls	r3, r3, #16
 8002c68:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	3b01      	subs	r3, #1
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c7a:	492b      	ldr	r1, [pc, #172]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c80:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	4a28      	ldr	r2, [pc, #160]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c8c:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c90:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <HAL_RCC_OscConfig+0x9ec>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c98:	00d2      	lsls	r2, r2, #3
 8002c9a:	4923      	ldr	r1, [pc, #140]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ca0:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	f023 020c 	bic.w	r2, r3, #12
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	491e      	ldr	r1, [pc, #120]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	f023 0202 	bic.w	r2, r3, #2
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	491a      	ldr	r1, [pc, #104]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	4a17      	ldr	r2, [pc, #92]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd0:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	4a11      	ldr	r2, [pc, #68]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0b      	ldr	r2, [pc, #44]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fc44 	bl	800158c <HAL_GetTick>
 8002d04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe fc40 	bl	800158c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e067      	b.n	8002dea <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d1a:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <HAL_RCC_OscConfig+0x9e0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x9c0>
 8002d26:	e05f      	b.n	8002de8 <HAL_RCC_OscConfig+0xaa0>
 8002d28:	58024400 	.word	0x58024400
 8002d2c:	08008f0c 	.word	0x08008f0c
 8002d30:	fffffc0c 	.word	0xfffffc0c
 8002d34:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d38:	4b2e      	ldr	r3, [pc, #184]	; (8002df4 <HAL_RCC_OscConfig+0xaac>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a2d      	ldr	r2, [pc, #180]	; (8002df4 <HAL_RCC_OscConfig+0xaac>)
 8002d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe fc22 	bl	800158c <HAL_GetTick>
 8002d48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xa16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe fc1e 	bl	800158c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xa16>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e045      	b.n	8002dea <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d5e:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <HAL_RCC_OscConfig+0xaac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0xa04>
 8002d6a:	e03d      	b.n	8002de8 <HAL_RCC_OscConfig+0xaa0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d6c:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <HAL_RCC_OscConfig+0xaac>)
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <HAL_RCC_OscConfig+0xaac>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d031      	beq.n	8002de4 <HAL_RCC_OscConfig+0xa9c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f003 0203 	and.w	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d12a      	bne.n	8002de4 <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d122      	bne.n	8002de4 <HAL_RCC_OscConfig+0xa9c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d11a      	bne.n	8002de4 <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	0a5b      	lsrs	r3, r3, #9
 8002db2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d111      	bne.n	8002de4 <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d108      	bne.n	8002de4 <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	0e1b      	lsrs	r3, r3, #24
 8002dd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_OscConfig+0xaa0>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0xaa2>
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3730      	adds	r7, #48	; 0x30
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	58024400 	.word	0x58024400

08002df8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e354      	b.n	80034b6 <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x24>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b3f      	cmp	r3, #63	; 0x3f
 8002e1a:	d904      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x2e>
 8002e1c:	f240 3186 	movw	r1, #902	; 0x386
 8002e20:	4827      	ldr	r0, [pc, #156]	; (8002ec0 <HAL_RCC_ClockConfig+0xc8>)
 8002e22:	f7fd ffb8 	bl	8000d96 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d031      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x98>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d02e      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x98>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d02b      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x98>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d028      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x98>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d025      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x98>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d022      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x98>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b06      	cmp	r3, #6
 8002e4e:	d01f      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x98>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b07      	cmp	r3, #7
 8002e54:	d01c      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x98>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d019      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x98>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b09      	cmp	r3, #9
 8002e60:	d016      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x98>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b0a      	cmp	r3, #10
 8002e66:	d013      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x98>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b0b      	cmp	r3, #11
 8002e6c:	d010      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x98>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b0c      	cmp	r3, #12
 8002e72:	d00d      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x98>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2b0d      	cmp	r3, #13
 8002e78:	d00a      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x98>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b0e      	cmp	r3, #14
 8002e7e:	d007      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x98>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b0f      	cmp	r3, #15
 8002e84:	d004      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x98>
 8002e86:	f240 3187 	movw	r1, #903	; 0x387
 8002e8a:	480d      	ldr	r0, [pc, #52]	; (8002ec0 <HAL_RCC_ClockConfig+0xc8>)
 8002e8c:	f7fd ff83 	bl	8000d96 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <HAL_RCC_ClockConfig+0xcc>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d914      	bls.n	8002ec8 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_RCC_ClockConfig+0xcc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 020f 	bic.w	r2, r3, #15
 8002ea6:	4907      	ldr	r1, [pc, #28]	; (8002ec4 <HAL_RCC_ClockConfig+0xcc>)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_RCC_ClockConfig+0xcc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e2fa      	b.n	80034b6 <HAL_RCC_ClockConfig+0x6be>
 8002ec0:	08008f0c 	.word	0x08008f0c
 8002ec4:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d029      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	4b9a      	ldr	r3, [pc, #616]	; (8003144 <HAL_RCC_ClockConfig+0x34c>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d921      	bls.n	8002f28 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d014      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x11e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	2b40      	cmp	r3, #64	; 0x40
 8002ef2:	d010      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x11e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2b50      	cmp	r3, #80	; 0x50
 8002efa:	d00c      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x11e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b60      	cmp	r3, #96	; 0x60
 8002f02:	d008      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x11e>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b70      	cmp	r3, #112	; 0x70
 8002f0a:	d004      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x11e>
 8002f0c:	f240 31a3 	movw	r1, #931	; 0x3a3
 8002f10:	488d      	ldr	r0, [pc, #564]	; (8003148 <HAL_RCC_ClockConfig+0x350>)
 8002f12:	f7fd ff40 	bl	8000d96 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f16:	4b8b      	ldr	r3, [pc, #556]	; (8003144 <HAL_RCC_ClockConfig+0x34c>)
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	4988      	ldr	r1, [pc, #544]	; (8003144 <HAL_RCC_ClockConfig+0x34c>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d029      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	4b82      	ldr	r3, [pc, #520]	; (8003144 <HAL_RCC_ClockConfig+0x34c>)
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d921      	bls.n	8002f88 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d014      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x17e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d010      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x17e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	2b50      	cmp	r3, #80	; 0x50
 8002f5a:	d00c      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x17e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	2b60      	cmp	r3, #96	; 0x60
 8002f62:	d008      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x17e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	2b70      	cmp	r3, #112	; 0x70
 8002f6a:	d004      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x17e>
 8002f6c:	f240 31b5 	movw	r1, #949	; 0x3b5
 8002f70:	4875      	ldr	r0, [pc, #468]	; (8003148 <HAL_RCC_ClockConfig+0x350>)
 8002f72:	f7fd ff10 	bl	8000d96 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f76:	4b73      	ldr	r3, [pc, #460]	; (8003144 <HAL_RCC_ClockConfig+0x34c>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	4970      	ldr	r1, [pc, #448]	; (8003144 <HAL_RCC_ClockConfig+0x34c>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d02d      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699a      	ldr	r2, [r3, #24]
 8002f98:	4b6a      	ldr	r3, [pc, #424]	; (8003144 <HAL_RCC_ClockConfig+0x34c>)
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d925      	bls.n	8002ff0 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d018      	beq.n	8002fde <HAL_RCC_ClockConfig+0x1e6>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb4:	d013      	beq.n	8002fde <HAL_RCC_ClockConfig+0x1e6>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002fbe:	d00e      	beq.n	8002fde <HAL_RCC_ClockConfig+0x1e6>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002fc8:	d009      	beq.n	8002fde <HAL_RCC_ClockConfig+0x1e6>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fd2:	d004      	beq.n	8002fde <HAL_RCC_ClockConfig+0x1e6>
 8002fd4:	f240 31c6 	movw	r1, #966	; 0x3c6
 8002fd8:	485b      	ldr	r0, [pc, #364]	; (8003148 <HAL_RCC_ClockConfig+0x350>)
 8002fda:	f7fd fedc 	bl	8000d96 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fde:	4b59      	ldr	r3, [pc, #356]	; (8003144 <HAL_RCC_ClockConfig+0x34c>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	4956      	ldr	r1, [pc, #344]	; (8003144 <HAL_RCC_ClockConfig+0x34c>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d029      	beq.n	8003050 <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	4b50      	ldr	r3, [pc, #320]	; (8003144 <HAL_RCC_ClockConfig+0x34c>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003008:	429a      	cmp	r2, r3
 800300a:	d921      	bls.n	8003050 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d014      	beq.n	800303e <HAL_RCC_ClockConfig+0x246>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d010      	beq.n	800303e <HAL_RCC_ClockConfig+0x246>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	2b50      	cmp	r3, #80	; 0x50
 8003022:	d00c      	beq.n	800303e <HAL_RCC_ClockConfig+0x246>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	2b60      	cmp	r3, #96	; 0x60
 800302a:	d008      	beq.n	800303e <HAL_RCC_ClockConfig+0x246>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	2b70      	cmp	r3, #112	; 0x70
 8003032:	d004      	beq.n	800303e <HAL_RCC_ClockConfig+0x246>
 8003034:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 8003038:	4843      	ldr	r0, [pc, #268]	; (8003148 <HAL_RCC_ClockConfig+0x350>)
 800303a:	f7fd feac 	bl	8000d96 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800303e:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_RCC_ClockConfig+0x34c>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	493e      	ldr	r1, [pc, #248]	; (8003144 <HAL_RCC_ClockConfig+0x34c>)
 800304c:	4313      	orrs	r3, r2
 800304e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d039      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x2d8>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	4b38      	ldr	r3, [pc, #224]	; (8003144 <HAL_RCC_ClockConfig+0x34c>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	429a      	cmp	r2, r3
 800306a:	d931      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d024      	beq.n	80030be <HAL_RCC_ClockConfig+0x2c6>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b08      	cmp	r3, #8
 800307a:	d020      	beq.n	80030be <HAL_RCC_ClockConfig+0x2c6>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b09      	cmp	r3, #9
 8003082:	d01c      	beq.n	80030be <HAL_RCC_ClockConfig+0x2c6>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b0a      	cmp	r3, #10
 800308a:	d018      	beq.n	80030be <HAL_RCC_ClockConfig+0x2c6>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2b0b      	cmp	r3, #11
 8003092:	d014      	beq.n	80030be <HAL_RCC_ClockConfig+0x2c6>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b0c      	cmp	r3, #12
 800309a:	d010      	beq.n	80030be <HAL_RCC_ClockConfig+0x2c6>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b0d      	cmp	r3, #13
 80030a2:	d00c      	beq.n	80030be <HAL_RCC_ClockConfig+0x2c6>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b0e      	cmp	r3, #14
 80030aa:	d008      	beq.n	80030be <HAL_RCC_ClockConfig+0x2c6>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	2b0f      	cmp	r3, #15
 80030b2:	d004      	beq.n	80030be <HAL_RCC_ClockConfig+0x2c6>
 80030b4:	f240 31eb 	movw	r1, #1003	; 0x3eb
 80030b8:	4823      	ldr	r0, [pc, #140]	; (8003148 <HAL_RCC_ClockConfig+0x350>)
 80030ba:	f7fd fe6c 	bl	8000d96 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030be:	4b21      	ldr	r3, [pc, #132]	; (8003144 <HAL_RCC_ClockConfig+0x34c>)
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	f023 020f 	bic.w	r2, r3, #15
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	491e      	ldr	r1, [pc, #120]	; (8003144 <HAL_RCC_ClockConfig+0x34c>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80a2 	beq.w	8003222 <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d032      	beq.n	800314c <HAL_RCC_ClockConfig+0x354>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ee:	d02d      	beq.n	800314c <HAL_RCC_ClockConfig+0x354>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80030f8:	d028      	beq.n	800314c <HAL_RCC_ClockConfig+0x354>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003102:	d023      	beq.n	800314c <HAL_RCC_ClockConfig+0x354>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800310c:	d01e      	beq.n	800314c <HAL_RCC_ClockConfig+0x354>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003116:	d019      	beq.n	800314c <HAL_RCC_ClockConfig+0x354>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8003120:	d014      	beq.n	800314c <HAL_RCC_ClockConfig+0x354>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800312a:	d00f      	beq.n	800314c <HAL_RCC_ClockConfig+0x354>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003134:	d00a      	beq.n	800314c <HAL_RCC_ClockConfig+0x354>
 8003136:	f240 31fb 	movw	r1, #1019	; 0x3fb
 800313a:	4803      	ldr	r0, [pc, #12]	; (8003148 <HAL_RCC_ClockConfig+0x350>)
 800313c:	f7fd fe2b 	bl	8000d96 <assert_failed>
 8003140:	e004      	b.n	800314c <HAL_RCC_ClockConfig+0x354>
 8003142:	bf00      	nop
 8003144:	58024400 	.word	0x58024400
 8003148:	08008f0c 	.word	0x08008f0c
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d010      	beq.n	8003176 <HAL_RCC_ClockConfig+0x37e>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00c      	beq.n	8003176 <HAL_RCC_ClockConfig+0x37e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d008      	beq.n	8003176 <HAL_RCC_ClockConfig+0x37e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d004      	beq.n	8003176 <HAL_RCC_ClockConfig+0x37e>
 800316c:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8003170:	4858      	ldr	r0, [pc, #352]	; (80032d4 <HAL_RCC_ClockConfig+0x4dc>)
 8003172:	f7fd fe10 	bl	8000d96 <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003176:	4b58      	ldr	r3, [pc, #352]	; (80032d8 <HAL_RCC_ClockConfig+0x4e0>)
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	4955      	ldr	r1, [pc, #340]	; (80032d8 <HAL_RCC_ClockConfig+0x4e0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003190:	4b51      	ldr	r3, [pc, #324]	; (80032d8 <HAL_RCC_ClockConfig+0x4e0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d121      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e18a      	b.n	80034b6 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d107      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031a8:	4b4b      	ldr	r3, [pc, #300]	; (80032d8 <HAL_RCC_ClockConfig+0x4e0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d115      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e17e      	b.n	80034b6 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d107      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031c0:	4b45      	ldr	r3, [pc, #276]	; (80032d8 <HAL_RCC_ClockConfig+0x4e0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d109      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e172      	b.n	80034b6 <HAL_RCC_ClockConfig+0x6be>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031d0:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <HAL_RCC_ClockConfig+0x4e0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e16a      	b.n	80034b6 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031e0:	4b3d      	ldr	r3, [pc, #244]	; (80032d8 <HAL_RCC_ClockConfig+0x4e0>)
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f023 0207 	bic.w	r2, r3, #7
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	493a      	ldr	r1, [pc, #232]	; (80032d8 <HAL_RCC_ClockConfig+0x4e0>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f2:	f7fe f9cb 	bl	800158c <HAL_GetTick>
 80031f6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f8:	e00a      	b.n	8003210 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fa:	f7fe f9c7 	bl	800158c <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f241 3288 	movw	r2, #5000	; 0x1388
 8003208:	4293      	cmp	r3, r2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e152      	b.n	80034b6 <HAL_RCC_ClockConfig+0x6be>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003210:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <HAL_RCC_ClockConfig+0x4e0>)
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	429a      	cmp	r2, r3
 8003220:	d1eb      	bne.n	80031fa <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d039      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <HAL_RCC_ClockConfig+0x4e0>)
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	429a      	cmp	r2, r3
 800323c:	d231      	bcs.n	80032a2 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d024      	beq.n	8003290 <HAL_RCC_ClockConfig+0x498>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2b08      	cmp	r3, #8
 800324c:	d020      	beq.n	8003290 <HAL_RCC_ClockConfig+0x498>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	2b09      	cmp	r3, #9
 8003254:	d01c      	beq.n	8003290 <HAL_RCC_ClockConfig+0x498>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b0a      	cmp	r3, #10
 800325c:	d018      	beq.n	8003290 <HAL_RCC_ClockConfig+0x498>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b0b      	cmp	r3, #11
 8003264:	d014      	beq.n	8003290 <HAL_RCC_ClockConfig+0x498>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d010      	beq.n	8003290 <HAL_RCC_ClockConfig+0x498>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b0d      	cmp	r3, #13
 8003274:	d00c      	beq.n	8003290 <HAL_RCC_ClockConfig+0x498>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b0e      	cmp	r3, #14
 800327c:	d008      	beq.n	8003290 <HAL_RCC_ClockConfig+0x498>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b0f      	cmp	r3, #15
 8003284:	d004      	beq.n	8003290 <HAL_RCC_ClockConfig+0x498>
 8003286:	f240 413d 	movw	r1, #1085	; 0x43d
 800328a:	4812      	ldr	r0, [pc, #72]	; (80032d4 <HAL_RCC_ClockConfig+0x4dc>)
 800328c:	f7fd fd83 	bl	8000d96 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <HAL_RCC_ClockConfig+0x4e0>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f023 020f 	bic.w	r2, r3, #15
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	490e      	ldr	r1, [pc, #56]	; (80032d8 <HAL_RCC_ClockConfig+0x4e0>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_RCC_ClockConfig+0x4e4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d217      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <HAL_RCC_ClockConfig+0x4e4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 020f 	bic.w	r2, r3, #15
 80032b8:	4908      	ldr	r1, [pc, #32]	; (80032dc <HAL_RCC_ClockConfig+0x4e4>)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCC_ClockConfig+0x4e4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d008      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e0f1      	b.n	80034b6 <HAL_RCC_ClockConfig+0x6be>
 80032d2:	bf00      	nop
 80032d4:	08008f0c 	.word	0x08008f0c
 80032d8:	58024400 	.word	0x58024400
 80032dc:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d029      	beq.n	8003340 <HAL_RCC_ClockConfig+0x548>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	4b73      	ldr	r3, [pc, #460]	; (80034c0 <HAL_RCC_ClockConfig+0x6c8>)
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d221      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d014      	beq.n	800332e <HAL_RCC_ClockConfig+0x536>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d010      	beq.n	800332e <HAL_RCC_ClockConfig+0x536>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	2b50      	cmp	r3, #80	; 0x50
 8003312:	d00c      	beq.n	800332e <HAL_RCC_ClockConfig+0x536>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2b60      	cmp	r3, #96	; 0x60
 800331a:	d008      	beq.n	800332e <HAL_RCC_ClockConfig+0x536>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b70      	cmp	r3, #112	; 0x70
 8003322:	d004      	beq.n	800332e <HAL_RCC_ClockConfig+0x536>
 8003324:	f240 415e 	movw	r1, #1118	; 0x45e
 8003328:	4866      	ldr	r0, [pc, #408]	; (80034c4 <HAL_RCC_ClockConfig+0x6cc>)
 800332a:	f7fd fd34 	bl	8000d96 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800332e:	4b64      	ldr	r3, [pc, #400]	; (80034c0 <HAL_RCC_ClockConfig+0x6c8>)
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	4961      	ldr	r1, [pc, #388]	; (80034c0 <HAL_RCC_ClockConfig+0x6c8>)
 800333c:	4313      	orrs	r3, r2
 800333e:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d029      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x5a8>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	4b5b      	ldr	r3, [pc, #364]	; (80034c0 <HAL_RCC_ClockConfig+0x6c8>)
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003358:	429a      	cmp	r2, r3
 800335a:	d221      	bcs.n	80033a0 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d014      	beq.n	800338e <HAL_RCC_ClockConfig+0x596>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	2b40      	cmp	r3, #64	; 0x40
 800336a:	d010      	beq.n	800338e <HAL_RCC_ClockConfig+0x596>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	2b50      	cmp	r3, #80	; 0x50
 8003372:	d00c      	beq.n	800338e <HAL_RCC_ClockConfig+0x596>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	2b60      	cmp	r3, #96	; 0x60
 800337a:	d008      	beq.n	800338e <HAL_RCC_ClockConfig+0x596>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	2b70      	cmp	r3, #112	; 0x70
 8003382:	d004      	beq.n	800338e <HAL_RCC_ClockConfig+0x596>
 8003384:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003388:	484e      	ldr	r0, [pc, #312]	; (80034c4 <HAL_RCC_ClockConfig+0x6cc>)
 800338a:	f7fd fd04 	bl	8000d96 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800338e:	4b4c      	ldr	r3, [pc, #304]	; (80034c0 <HAL_RCC_ClockConfig+0x6c8>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	4949      	ldr	r1, [pc, #292]	; (80034c0 <HAL_RCC_ClockConfig+0x6c8>)
 800339c:	4313      	orrs	r3, r2
 800339e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d02d      	beq.n	8003408 <HAL_RCC_ClockConfig+0x610>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	4b43      	ldr	r3, [pc, #268]	; (80034c0 <HAL_RCC_ClockConfig+0x6c8>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d225      	bcs.n	8003408 <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d018      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x5fe>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033cc:	d013      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x5fe>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80033d6:	d00e      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x5fe>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033e0:	d009      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x5fe>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033ea:	d004      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x5fe>
 80033ec:	f240 4182 	movw	r1, #1154	; 0x482
 80033f0:	4834      	ldr	r0, [pc, #208]	; (80034c4 <HAL_RCC_ClockConfig+0x6cc>)
 80033f2:	f7fd fcd0 	bl	8000d96 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033f6:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <HAL_RCC_ClockConfig+0x6c8>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	492f      	ldr	r1, [pc, #188]	; (80034c0 <HAL_RCC_ClockConfig+0x6c8>)
 8003404:	4313      	orrs	r3, r2
 8003406:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d029      	beq.n	8003468 <HAL_RCC_ClockConfig+0x670>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	4b29      	ldr	r3, [pc, #164]	; (80034c0 <HAL_RCC_ClockConfig+0x6c8>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003420:	429a      	cmp	r2, r3
 8003422:	d221      	bcs.n	8003468 <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d014      	beq.n	8003456 <HAL_RCC_ClockConfig+0x65e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	2b40      	cmp	r3, #64	; 0x40
 8003432:	d010      	beq.n	8003456 <HAL_RCC_ClockConfig+0x65e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	2b50      	cmp	r3, #80	; 0x50
 800343a:	d00c      	beq.n	8003456 <HAL_RCC_ClockConfig+0x65e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	2b60      	cmp	r3, #96	; 0x60
 8003442:	d008      	beq.n	8003456 <HAL_RCC_ClockConfig+0x65e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	2b70      	cmp	r3, #112	; 0x70
 800344a:	d004      	beq.n	8003456 <HAL_RCC_ClockConfig+0x65e>
 800344c:	f240 4194 	movw	r1, #1172	; 0x494
 8003450:	481c      	ldr	r0, [pc, #112]	; (80034c4 <HAL_RCC_ClockConfig+0x6cc>)
 8003452:	f7fd fca0 	bl	8000d96 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003456:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <HAL_RCC_ClockConfig+0x6c8>)
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4917      	ldr	r1, [pc, #92]	; (80034c0 <HAL_RCC_ClockConfig+0x6c8>)
 8003464:	4313      	orrs	r3, r2
 8003466:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003468:	f000 f836 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 800346c:	4602      	mov	r2, r0
 800346e:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <HAL_RCC_ClockConfig+0x6c8>)
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	0a1b      	lsrs	r3, r3, #8
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	4913      	ldr	r1, [pc, #76]	; (80034c8 <HAL_RCC_ClockConfig+0x6d0>)
 800347a:	5ccb      	ldrb	r3, [r1, r3]
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
 8003484:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003486:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <HAL_RCC_ClockConfig+0x6c8>)
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	4a0e      	ldr	r2, [pc, #56]	; (80034c8 <HAL_RCC_ClockConfig+0x6d0>)
 8003490:	5cd3      	ldrb	r3, [r2, r3]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
 800349c:	4a0b      	ldr	r2, [pc, #44]	; (80034cc <HAL_RCC_ClockConfig+0x6d4>)
 800349e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034a0:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <HAL_RCC_ClockConfig+0x6d8>)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80034a6:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCC_ClockConfig+0x6dc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe f824 	bl	80014f8 <HAL_InitTick>
 80034b0:	4603      	mov	r3, r0
 80034b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	58024400 	.word	0x58024400
 80034c4:	08008f0c 	.word	0x08008f0c
 80034c8:	08009488 	.word	0x08009488
 80034cc:	20000004 	.word	0x20000004
 80034d0:	20000000 	.word	0x20000000
 80034d4:	20000008 	.word	0x20000008

080034d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	b089      	sub	sp, #36	; 0x24
 80034dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034de:	4bb3      	ldr	r3, [pc, #716]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034e6:	2b18      	cmp	r3, #24
 80034e8:	f200 8155 	bhi.w	8003796 <HAL_RCC_GetSysClockFreq+0x2be>
 80034ec:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	08003559 	.word	0x08003559
 80034f8:	08003797 	.word	0x08003797
 80034fc:	08003797 	.word	0x08003797
 8003500:	08003797 	.word	0x08003797
 8003504:	08003797 	.word	0x08003797
 8003508:	08003797 	.word	0x08003797
 800350c:	08003797 	.word	0x08003797
 8003510:	08003797 	.word	0x08003797
 8003514:	0800357f 	.word	0x0800357f
 8003518:	08003797 	.word	0x08003797
 800351c:	08003797 	.word	0x08003797
 8003520:	08003797 	.word	0x08003797
 8003524:	08003797 	.word	0x08003797
 8003528:	08003797 	.word	0x08003797
 800352c:	08003797 	.word	0x08003797
 8003530:	08003797 	.word	0x08003797
 8003534:	08003585 	.word	0x08003585
 8003538:	08003797 	.word	0x08003797
 800353c:	08003797 	.word	0x08003797
 8003540:	08003797 	.word	0x08003797
 8003544:	08003797 	.word	0x08003797
 8003548:	08003797 	.word	0x08003797
 800354c:	08003797 	.word	0x08003797
 8003550:	08003797 	.word	0x08003797
 8003554:	0800358b 	.word	0x0800358b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003558:	4b94      	ldr	r3, [pc, #592]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b00      	cmp	r3, #0
 8003562:	d009      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003564:	4b91      	ldr	r3, [pc, #580]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	4a90      	ldr	r2, [pc, #576]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
 8003574:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003576:	e111      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003578:	4b8d      	ldr	r3, [pc, #564]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800357a:	61bb      	str	r3, [r7, #24]
    break;
 800357c:	e10e      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800357e:	4b8d      	ldr	r3, [pc, #564]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003580:	61bb      	str	r3, [r7, #24]
    break;
 8003582:	e10b      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003584:	4b8c      	ldr	r3, [pc, #560]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003586:	61bb      	str	r3, [r7, #24]
    break;
 8003588:	e108      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800358a:	4b88      	ldr	r3, [pc, #544]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003594:	4b85      	ldr	r3, [pc, #532]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800359e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80035a0:	4b82      	ldr	r3, [pc, #520]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80035aa:	4b80      	ldr	r3, [pc, #512]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ae:	08db      	lsrs	r3, r3, #3
 80035b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80e1 	beq.w	8003790 <HAL_RCC_GetSysClockFreq+0x2b8>
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	f000 8083 	beq.w	80036dc <HAL_RCC_GetSysClockFreq+0x204>
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	f200 80a1 	bhi.w	8003720 <HAL_RCC_GetSysClockFreq+0x248>
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_RCC_GetSysClockFreq+0x114>
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d056      	beq.n	8003698 <HAL_RCC_GetSysClockFreq+0x1c0>
 80035ea:	e099      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035ec:	4b6f      	ldr	r3, [pc, #444]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d02d      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035f8:	4b6c      	ldr	r3, [pc, #432]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	08db      	lsrs	r3, r3, #3
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	4a6b      	ldr	r2, [pc, #428]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
 8003608:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	ee07 3a90 	vmov	s15, r3
 8003610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	ee07 3a90 	vmov	s15, r3
 800361a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003622:	4b62      	ldr	r3, [pc, #392]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800362a:	ee07 3a90 	vmov	s15, r3
 800362e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003632:	ed97 6a02 	vldr	s12, [r7, #8]
 8003636:	eddf 5a61 	vldr	s11, [pc, #388]	; 80037bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800363a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800363e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800364a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003652:	e087      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80037c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003666:	4b51      	ldr	r3, [pc, #324]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800366e:	ee07 3a90 	vmov	s15, r3
 8003672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003676:	ed97 6a02 	vldr	s12, [r7, #8]
 800367a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80037bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800367e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800368a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800368e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003696:	e065      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	ee07 3a90 	vmov	s15, r3
 800369e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80037c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036aa:	4b40      	ldr	r3, [pc, #256]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80036be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80037bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80036c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036da:	e043      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80037c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80036ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ee:	4b2f      	ldr	r3, [pc, #188]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003702:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80037bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800370a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800370e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800371e:	e021      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80037c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800372e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003732:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003742:	ed97 6a02 	vldr	s12, [r7, #8]
 8003746:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80037bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800374a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800374e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800375a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003762:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003764:	4b11      	ldr	r3, [pc, #68]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	0a5b      	lsrs	r3, r3, #9
 800376a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800376e:	3301      	adds	r3, #1
 8003770:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	ee07 3a90 	vmov	s15, r3
 8003778:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800377c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003788:	ee17 3a90 	vmov	r3, s15
 800378c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800378e:	e005      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	61bb      	str	r3, [r7, #24]
    break;
 8003794:	e002      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003796:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003798:	61bb      	str	r3, [r7, #24]
    break;
 800379a:	bf00      	nop
  }

  return sysclockfreq;
 800379c:	69bb      	ldr	r3, [r7, #24]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3724      	adds	r7, #36	; 0x24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	58024400 	.word	0x58024400
 80037b0:	03d09000 	.word	0x03d09000
 80037b4:	003d0900 	.word	0x003d0900
 80037b8:	017d7840 	.word	0x017d7840
 80037bc:	46000000 	.word	0x46000000
 80037c0:	4c742400 	.word	0x4c742400
 80037c4:	4a742400 	.word	0x4a742400
 80037c8:	4bbebc20 	.word	0x4bbebc20

080037cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037d4:	2300      	movs	r3, #0
 80037d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037d8:	2300      	movs	r3, #0
 80037da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d03f      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037f0:	d02a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037f6:	d824      	bhi.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037fc:	d018      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003802:	d81e      	bhi.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800380c:	d007      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800380e:	e018      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003810:	4bab      	ldr	r3, [pc, #684]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	4aaa      	ldr	r2, [pc, #680]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800381c:	e015      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3304      	adds	r3, #4
 8003822:	2102      	movs	r1, #2
 8003824:	4618      	mov	r0, r3
 8003826:	f001 f9dd 	bl	8004be4 <RCCEx_PLL2_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800382e:	e00c      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3324      	adds	r3, #36	; 0x24
 8003834:	2102      	movs	r1, #2
 8003836:	4618      	mov	r0, r3
 8003838:	f001 faf6 	bl	8004e28 <RCCEx_PLL3_Config>
 800383c:	4603      	mov	r3, r0
 800383e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003840:	e003      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	75fb      	strb	r3, [r7, #23]
      break;
 8003846:	e000      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003850:	4b9b      	ldr	r3, [pc, #620]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003854:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800385c:	4998      	ldr	r1, [pc, #608]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800385e:	4313      	orrs	r3, r2
 8003860:	650b      	str	r3, [r1, #80]	; 0x50
 8003862:	e001      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003864:	7dfb      	ldrb	r3, [r7, #23]
 8003866:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d03d      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	2b04      	cmp	r3, #4
 800387a:	d826      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800387c:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003882:	bf00      	nop
 8003884:	08003899 	.word	0x08003899
 8003888:	080038a7 	.word	0x080038a7
 800388c:	080038b9 	.word	0x080038b9
 8003890:	080038d1 	.word	0x080038d1
 8003894:	080038d1 	.word	0x080038d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003898:	4b89      	ldr	r3, [pc, #548]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	4a88      	ldr	r2, [pc, #544]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800389e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038a4:	e015      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3304      	adds	r3, #4
 80038aa:	2100      	movs	r1, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f001 f999 	bl	8004be4 <RCCEx_PLL2_Config>
 80038b2:	4603      	mov	r3, r0
 80038b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038b6:	e00c      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3324      	adds	r3, #36	; 0x24
 80038bc:	2100      	movs	r1, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	f001 fab2 	bl	8004e28 <RCCEx_PLL3_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038c8:	e003      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
      break;
 80038ce:	e000      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80038d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d109      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038d8:	4b79      	ldr	r3, [pc, #484]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038dc:	f023 0207 	bic.w	r2, r3, #7
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	4976      	ldr	r1, [pc, #472]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	650b      	str	r3, [r1, #80]	; 0x50
 80038ea:	e001      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
 80038ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d042      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003904:	d02b      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390a:	d825      	bhi.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800390c:	2bc0      	cmp	r3, #192	; 0xc0
 800390e:	d028      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003910:	2bc0      	cmp	r3, #192	; 0xc0
 8003912:	d821      	bhi.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003914:	2b80      	cmp	r3, #128	; 0x80
 8003916:	d016      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003918:	2b80      	cmp	r3, #128	; 0x80
 800391a:	d81d      	bhi.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003920:	2b40      	cmp	r3, #64	; 0x40
 8003922:	d007      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003924:	e018      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003926:	4b66      	ldr	r3, [pc, #408]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	4a65      	ldr	r2, [pc, #404]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800392c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003930:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003932:	e017      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	2100      	movs	r1, #0
 800393a:	4618      	mov	r0, r3
 800393c:	f001 f952 	bl	8004be4 <RCCEx_PLL2_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003944:	e00e      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3324      	adds	r3, #36	; 0x24
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f001 fa6b 	bl	8004e28 <RCCEx_PLL3_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003956:	e005      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	75fb      	strb	r3, [r7, #23]
      break;
 800395c:	e002      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800395e:	bf00      	nop
 8003960:	e000      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003964:	7dfb      	ldrb	r3, [r7, #23]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800396a:	4b55      	ldr	r3, [pc, #340]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800396c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	4952      	ldr	r1, [pc, #328]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003978:	4313      	orrs	r3, r2
 800397a:	650b      	str	r3, [r1, #80]	; 0x50
 800397c:	e001      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397e:	7dfb      	ldrb	r3, [r7, #23]
 8003980:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398a:	2b00      	cmp	r3, #0
 800398c:	d049      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003994:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003998:	d030      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800399a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800399e:	d82a      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039a4:	d02c      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80039a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039aa:	d824      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b0:	d018      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80039b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b6:	d81e      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80039bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039c0:	d007      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80039c2:	e018      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c4:	4b3e      	ldr	r3, [pc, #248]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	4a3d      	ldr	r2, [pc, #244]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039d0:	e017      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 f903 	bl	8004be4 <RCCEx_PLL2_Config>
 80039de:	4603      	mov	r3, r0
 80039e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80039e2:	e00e      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3324      	adds	r3, #36	; 0x24
 80039e8:	2100      	movs	r1, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f001 fa1c 	bl	8004e28 <RCCEx_PLL3_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039f4:	e005      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
      break;
 80039fa:	e002      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80039fc:	bf00      	nop
 80039fe:	e000      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a08:	4b2d      	ldr	r3, [pc, #180]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a16:	492a      	ldr	r1, [pc, #168]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	658b      	str	r3, [r1, #88]	; 0x58
 8003a1c:	e001      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
 8003a20:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d04c      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a38:	d030      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003a3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a3e:	d82a      	bhi.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a44:	d02c      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003a46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a4a:	d824      	bhi.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a50:	d018      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a56:	d81e      	bhi.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a60:	d007      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003a62:	e018      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a64:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	4a15      	ldr	r2, [pc, #84]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a70:	e017      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3304      	adds	r3, #4
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 f8b3 	bl	8004be4 <RCCEx_PLL2_Config>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a82:	e00e      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3324      	adds	r3, #36	; 0x24
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f001 f9cc 	bl	8004e28 <RCCEx_PLL3_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a94:	e005      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	75fb      	strb	r3, [r7, #23]
      break;
 8003a9a:	e002      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003a9c:	bf00      	nop
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10d      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ab6:	4902      	ldr	r1, [pc, #8]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	658b      	str	r3, [r1, #88]	; 0x58
 8003abc:	e004      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003abe:	bf00      	nop
 8003ac0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
 8003ac6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d032      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad8:	2b30      	cmp	r3, #48	; 0x30
 8003ada:	d01c      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003adc:	2b30      	cmp	r3, #48	; 0x30
 8003ade:	d817      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d00c      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d813      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d016      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d10f      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af0:	4baf      	ldr	r3, [pc, #700]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	4aae      	ldr	r2, [pc, #696]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003afc:	e00e      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3304      	adds	r3, #4
 8003b02:	2102      	movs	r1, #2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f001 f86d 	bl	8004be4 <RCCEx_PLL2_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b0e:	e005      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	75fb      	strb	r3, [r7, #23]
      break;
 8003b14:	e002      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b22:	4ba3      	ldr	r3, [pc, #652]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2e:	49a0      	ldr	r1, [pc, #640]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b34:	e001      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
 8003b38:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d047      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b4e:	d030      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b54:	d82a      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b5a:	d02c      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003b5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b60:	d824      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b66:	d018      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6c:	d81e      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b76:	d007      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003b78:	e018      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b7a:	4b8d      	ldr	r3, [pc, #564]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	4a8c      	ldr	r2, [pc, #560]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b86:	e017      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f001 f828 	bl	8004be4 <RCCEx_PLL2_Config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b98:	e00e      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3324      	adds	r3, #36	; 0x24
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 f941 	bl	8004e28 <RCCEx_PLL3_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003baa:	e005      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb0:	e002      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e000      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003bb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bbe:	4b7c      	ldr	r3, [pc, #496]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bca:	4979      	ldr	r1, [pc, #484]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	650b      	str	r3, [r1, #80]	; 0x50
 8003bd0:	e001      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd2:	7dfb      	ldrb	r3, [r7, #23]
 8003bd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d049      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bea:	d02e      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf0:	d828      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003bf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bf6:	d02a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003bf8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bfc:	d822      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003bfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c02:	d026      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c08:	d81c      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003c0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c0e:	d010      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c14:	d816      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d01d      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1e:	d111      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	2101      	movs	r1, #1
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 ffdc 	bl	8004be4 <RCCEx_PLL2_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c30:	e012      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3324      	adds	r3, #36	; 0x24
 8003c36:	2101      	movs	r1, #1
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f001 f8f5 	bl	8004e28 <RCCEx_PLL3_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c42:	e009      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	75fb      	strb	r3, [r7, #23]
      break;
 8003c48:	e006      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e004      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c4e:	bf00      	nop
 8003c50:	e002      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c52:	bf00      	nop
 8003c54:	e000      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c5e:	4b54      	ldr	r3, [pc, #336]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c62:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6a:	4951      	ldr	r1, [pc, #324]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	650b      	str	r3, [r1, #80]	; 0x50
 8003c70:	e001      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d04b      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c8c:	d02e      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003c8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c92:	d828      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c98:	d02a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9e:	d822      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ca0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ca4:	d026      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003ca6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003caa:	d81c      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb0:	d010      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb6:	d816      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01d      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003cbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cc0:	d111      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 ff8b 	bl	8004be4 <RCCEx_PLL2_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003cd2:	e012      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3324      	adds	r3, #36	; 0x24
 8003cd8:	2101      	movs	r1, #1
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 f8a4 	bl	8004e28 <RCCEx_PLL3_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ce4:	e009      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cea:	e006      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003cec:	bf00      	nop
 8003cee:	e004      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003cf0:	bf00      	nop
 8003cf2:	e002      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003cf4:	bf00      	nop
 8003cf6:	e000      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d00:	4b2b      	ldr	r3, [pc, #172]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d0e:	4928      	ldr	r1, [pc, #160]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	658b      	str	r3, [r1, #88]	; 0x58
 8003d14:	e001      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
 8003d18:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d02f      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d2e:	d00e      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d34:	d814      	bhi.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d015      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003d3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d3e:	d10f      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d40:	4b1b      	ldr	r3, [pc, #108]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	4a1a      	ldr	r2, [pc, #104]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d4c:	e00c      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3304      	adds	r3, #4
 8003d52:	2101      	movs	r1, #1
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 ff45 	bl	8004be4 <RCCEx_PLL2_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d5e:	e003      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	75fb      	strb	r3, [r7, #23]
      break;
 8003d64:	e000      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003d66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d6e:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d7a:	490d      	ldr	r1, [pc, #52]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	650b      	str	r3, [r1, #80]	; 0x50
 8003d80:	e001      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
 8003d84:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d036      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x634>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d81c      	bhi.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003d9a:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da0:	08003ddb 	.word	0x08003ddb
 8003da4:	08003db5 	.word	0x08003db5
 8003da8:	08003dc3 	.word	0x08003dc3
 8003dac:	08003ddb 	.word	0x08003ddb
 8003db0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db4:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	4a0f      	ldr	r2, [pc, #60]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003dc0:	e00c      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 ff0b 	bl	8004be4 <RCCEx_PLL2_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003dd2:	e003      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd8:	e000      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x630>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de6:	f023 0203 	bic.w	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	4902      	ldr	r1, [pc, #8]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003df4:	e004      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003df6:	bf00      	nop
 8003df8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
 8003dfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 829b 	beq.w	8004344 <HAL_RCCEx_PeriphCLKConfig+0xb78>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e18:	f000 81a9 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e26:	f000 81a2 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e30:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8003e34:	f000 819b 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e3e:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8003e42:	f000 8194 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e4c:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8003e50:	f000 818d 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e5a:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 8003e5e:	f000 8186 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e68:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8003e6c:	f000 817f 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e76:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 8003e7a:	f000 8178 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e84:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8003e88:	f000 8171 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e92:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8003e96:	f000 816a 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ea0:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8003ea4:	f000 8163 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eae:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 8003eb2:	f000 815c 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ebc:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 8003ec0:	f000 8155 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eca:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 8003ece:	f000 814e 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ed8:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 8003edc:	f000 8147 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ee6:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 8003eea:	f000 8140 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ef4:	4aa8      	ldr	r2, [pc, #672]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	f000 8139 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f02:	4aa6      	ldr	r2, [pc, #664]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	f000 8132 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f10:	4aa3      	ldr	r2, [pc, #652]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	f000 812b 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f1e:	4aa1      	ldr	r2, [pc, #644]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	f000 8124 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f2c:	4a9e      	ldr	r2, [pc, #632]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	f000 811d 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f3a:	4a9c      	ldr	r2, [pc, #624]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	f000 8116 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f48:	4a99      	ldr	r2, [pc, #612]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	f000 810f 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f56:	4a97      	ldr	r2, [pc, #604]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	f000 8108 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f64:	4a94      	ldr	r2, [pc, #592]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	f000 8101 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f72:	4a92      	ldr	r2, [pc, #584]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	f000 80fa 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f80:	4a8f      	ldr	r2, [pc, #572]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	f000 80f3 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f8e:	4a8d      	ldr	r2, [pc, #564]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	f000 80ec 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f9c:	4a8a      	ldr	r2, [pc, #552]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	f000 80e5 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003faa:	4a88      	ldr	r2, [pc, #544]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	f000 80de 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fb8:	4a85      	ldr	r2, [pc, #532]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	f000 80d7 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fc6:	4a83      	ldr	r2, [pc, #524]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	f000 80d0 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fd4:	4a80      	ldr	r2, [pc, #512]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	f000 80c9 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fe2:	4a7e      	ldr	r2, [pc, #504]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	f000 80c2 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ff0:	4a7b      	ldr	r2, [pc, #492]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	f000 80bb 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ffe:	4a79      	ldr	r2, [pc, #484]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 8004000:	4293      	cmp	r3, r2
 8004002:	f000 80b4 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800400c:	4a76      	ldr	r2, [pc, #472]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	f000 80ad 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800401a:	4a74      	ldr	r2, [pc, #464]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 800401c:	4293      	cmp	r3, r2
 800401e:	f000 80a6 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004028:	4a71      	ldr	r2, [pc, #452]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800402a:	4293      	cmp	r3, r2
 800402c:	f000 809f 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004036:	4a6f      	ldr	r2, [pc, #444]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8004038:	4293      	cmp	r3, r2
 800403a:	f000 8098 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004044:	4a6c      	ldr	r2, [pc, #432]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	f000 8091 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004052:	4a6a      	ldr	r2, [pc, #424]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004054:	4293      	cmp	r3, r2
 8004056:	f000 808a 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004060:	4a67      	ldr	r2, [pc, #412]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004062:	4293      	cmp	r3, r2
 8004064:	f000 8083 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800406e:	4a65      	ldr	r2, [pc, #404]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d07c      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800407a:	4a63      	ldr	r2, [pc, #396]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d076      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004086:	4a61      	ldr	r2, [pc, #388]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d070      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004092:	4a5f      	ldr	r2, [pc, #380]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d06a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800409e:	4a5d      	ldr	r2, [pc, #372]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d064      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040aa:	4a5b      	ldr	r2, [pc, #364]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d05e      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040b6:	4a59      	ldr	r2, [pc, #356]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0xa50>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d058      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040c2:	4a57      	ldr	r2, [pc, #348]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0xa54>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d052      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040ce:	4a55      	ldr	r2, [pc, #340]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d04c      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040da:	4a53      	ldr	r2, [pc, #332]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0xa5c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d046      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040e6:	4a51      	ldr	r2, [pc, #324]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d040      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040f2:	4a4f      	ldr	r2, [pc, #316]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xa64>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d03a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040fe:	4a4d      	ldr	r2, [pc, #308]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0xa68>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d034      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800410a:	4a4b      	ldr	r2, [pc, #300]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0xa6c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d02e      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004116:	4a49      	ldr	r2, [pc, #292]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0xa70>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d028      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004122:	4a47      	ldr	r2, [pc, #284]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d022      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800412e:	4a45      	ldr	r2, [pc, #276]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d01c      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800413a:	4a43      	ldr	r2, [pc, #268]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d016      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004146:	4a41      	ldr	r2, [pc, #260]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d010      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004152:	4a3f      	ldr	r2, [pc, #252]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0xa84>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800415e:	4a3d      	ldr	r2, [pc, #244]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004164:	f240 317f 	movw	r1, #895	; 0x37f
 8004168:	483b      	ldr	r0, [pc, #236]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 800416a:	f7fc fe14 	bl	8000d96 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800416e:	4b3b      	ldr	r3, [pc, #236]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a3a      	ldr	r2, [pc, #232]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 8004174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004178:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800417a:	f7fd fa07 	bl	800158c <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004180:	e06e      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xa94>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004182:	f7fd fa03 	bl	800158c <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b64      	cmp	r3, #100	; 0x64
 800418e:	d967      	bls.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xa94>
      {
        ret = HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	75fb      	strb	r3, [r7, #23]
        break;
 8004194:	e06a      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8004196:	bf00      	nop
 8004198:	00010300 	.word	0x00010300
 800419c:	00011300 	.word	0x00011300
 80041a0:	00012300 	.word	0x00012300
 80041a4:	00013300 	.word	0x00013300
 80041a8:	00014300 	.word	0x00014300
 80041ac:	00015300 	.word	0x00015300
 80041b0:	00016300 	.word	0x00016300
 80041b4:	00017300 	.word	0x00017300
 80041b8:	00018300 	.word	0x00018300
 80041bc:	00019300 	.word	0x00019300
 80041c0:	0001a300 	.word	0x0001a300
 80041c4:	0001b300 	.word	0x0001b300
 80041c8:	0001c300 	.word	0x0001c300
 80041cc:	0001d300 	.word	0x0001d300
 80041d0:	0001e300 	.word	0x0001e300
 80041d4:	0001f300 	.word	0x0001f300
 80041d8:	00020300 	.word	0x00020300
 80041dc:	00021300 	.word	0x00021300
 80041e0:	00022300 	.word	0x00022300
 80041e4:	00023300 	.word	0x00023300
 80041e8:	00024300 	.word	0x00024300
 80041ec:	00025300 	.word	0x00025300
 80041f0:	00026300 	.word	0x00026300
 80041f4:	00027300 	.word	0x00027300
 80041f8:	00028300 	.word	0x00028300
 80041fc:	00029300 	.word	0x00029300
 8004200:	0002a300 	.word	0x0002a300
 8004204:	0002b300 	.word	0x0002b300
 8004208:	0002c300 	.word	0x0002c300
 800420c:	0002d300 	.word	0x0002d300
 8004210:	0002e300 	.word	0x0002e300
 8004214:	0002f300 	.word	0x0002f300
 8004218:	00030300 	.word	0x00030300
 800421c:	00031300 	.word	0x00031300
 8004220:	00032300 	.word	0x00032300
 8004224:	00033300 	.word	0x00033300
 8004228:	00034300 	.word	0x00034300
 800422c:	00035300 	.word	0x00035300
 8004230:	00036300 	.word	0x00036300
 8004234:	00037300 	.word	0x00037300
 8004238:	00038300 	.word	0x00038300
 800423c:	00039300 	.word	0x00039300
 8004240:	0003a300 	.word	0x0003a300
 8004244:	0003b300 	.word	0x0003b300
 8004248:	0003c300 	.word	0x0003c300
 800424c:	0003d300 	.word	0x0003d300
 8004250:	0003e300 	.word	0x0003e300
 8004254:	0003f300 	.word	0x0003f300
 8004258:	08008f44 	.word	0x08008f44
 800425c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004260:	4bb9      	ldr	r3, [pc, #740]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d08a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
      }
    }

    if(ret == HAL_OK)
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d166      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004272:	4bb6      	ldr	r3, [pc, #728]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004274:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800427c:	4053      	eors	r3, r2
 800427e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004282:	2b00      	cmp	r3, #0
 8004284:	d013      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xae2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004286:	4bb1      	ldr	r3, [pc, #708]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004290:	4bae      	ldr	r3, [pc, #696]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	4aad      	ldr	r2, [pc, #692]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800429c:	4bab      	ldr	r3, [pc, #684]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a0:	4aaa      	ldr	r2, [pc, #680]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80042a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80042a8:	4aa8      	ldr	r2, [pc, #672]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b8:	d115      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ba:	f7fd f967 	bl	800158c <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042c0:	e00b      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xb0e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7fd f963 	bl	800158c <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d902      	bls.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xb0e>
          {
            ret = HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	75fb      	strb	r3, [r7, #23]
            break;
 80042d8:	e005      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042da:	4b9c      	ldr	r3, [pc, #624]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0ed      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
          }
        }
      }

      if(ret == HAL_OK)
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d126      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xb6e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fa:	d10d      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80042fc:	4b93      	ldr	r3, [pc, #588]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800430a:	0919      	lsrs	r1, r3, #4
 800430c:	4b90      	ldr	r3, [pc, #576]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0xd84>)
 800430e:	400b      	ands	r3, r1
 8004310:	498e      	ldr	r1, [pc, #568]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004312:	4313      	orrs	r3, r2
 8004314:	610b      	str	r3, [r1, #16]
 8004316:	e005      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8004318:	4b8c      	ldr	r3, [pc, #560]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	4a8b      	ldr	r2, [pc, #556]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800431e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004322:	6113      	str	r3, [r2, #16]
 8004324:	4b89      	ldr	r3, [pc, #548]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004326:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800432e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004332:	4986      	ldr	r1, [pc, #536]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004334:	4313      	orrs	r3, r2
 8004336:	670b      	str	r3, [r1, #112]	; 0x70
 8004338:	e004      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xb78>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	75bb      	strb	r3, [r7, #22]
 800433e:	e001      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xb78>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d07e      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xc82>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004354:	2b28      	cmp	r3, #40	; 0x28
 8004356:	d867      	bhi.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <HAL_RCCEx_PeriphCLKConfig+0xb94>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	0800442f 	.word	0x0800442f
 8004364:	08004429 	.word	0x08004429
 8004368:	08004429 	.word	0x08004429
 800436c:	08004429 	.word	0x08004429
 8004370:	08004429 	.word	0x08004429
 8004374:	08004429 	.word	0x08004429
 8004378:	08004429 	.word	0x08004429
 800437c:	08004429 	.word	0x08004429
 8004380:	08004405 	.word	0x08004405
 8004384:	08004429 	.word	0x08004429
 8004388:	08004429 	.word	0x08004429
 800438c:	08004429 	.word	0x08004429
 8004390:	08004429 	.word	0x08004429
 8004394:	08004429 	.word	0x08004429
 8004398:	08004429 	.word	0x08004429
 800439c:	08004429 	.word	0x08004429
 80043a0:	08004417 	.word	0x08004417
 80043a4:	08004429 	.word	0x08004429
 80043a8:	08004429 	.word	0x08004429
 80043ac:	08004429 	.word	0x08004429
 80043b0:	08004429 	.word	0x08004429
 80043b4:	08004429 	.word	0x08004429
 80043b8:	08004429 	.word	0x08004429
 80043bc:	08004429 	.word	0x08004429
 80043c0:	0800442f 	.word	0x0800442f
 80043c4:	08004429 	.word	0x08004429
 80043c8:	08004429 	.word	0x08004429
 80043cc:	08004429 	.word	0x08004429
 80043d0:	08004429 	.word	0x08004429
 80043d4:	08004429 	.word	0x08004429
 80043d8:	08004429 	.word	0x08004429
 80043dc:	08004429 	.word	0x08004429
 80043e0:	0800442f 	.word	0x0800442f
 80043e4:	08004429 	.word	0x08004429
 80043e8:	08004429 	.word	0x08004429
 80043ec:	08004429 	.word	0x08004429
 80043f0:	08004429 	.word	0x08004429
 80043f4:	08004429 	.word	0x08004429
 80043f8:	08004429 	.word	0x08004429
 80043fc:	08004429 	.word	0x08004429
 8004400:	0800442f 	.word	0x0800442f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	2101      	movs	r1, #1
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fbea 	bl	8004be4 <RCCEx_PLL2_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004414:	e00c      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xc64>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3324      	adds	r3, #36	; 0x24
 800441a:	2101      	movs	r1, #1
 800441c:	4618      	mov	r0, r3
 800441e:	f000 fd03 	bl	8004e28 <RCCEx_PLL3_Config>
 8004422:	4603      	mov	r3, r0
 8004424:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004426:	e003      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xc64>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	75fb      	strb	r3, [r7, #23]
      break;
 800442c:	e000      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xc64>
      break;
 800442e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d109      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004436:	4b45      	ldr	r3, [pc, #276]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004442:	4942      	ldr	r1, [pc, #264]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004444:	4313      	orrs	r3, r2
 8004446:	654b      	str	r3, [r1, #84]	; 0x54
 8004448:	e001      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d037      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xcfe>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445e:	2b05      	cmp	r3, #5
 8004460:	d820      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xcd8>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	080044ab 	.word	0x080044ab
 800446c:	08004481 	.word	0x08004481
 8004470:	08004493 	.word	0x08004493
 8004474:	080044ab 	.word	0x080044ab
 8004478:	080044ab 	.word	0x080044ab
 800447c:	080044ab 	.word	0x080044ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	2101      	movs	r1, #1
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fbac 	bl	8004be4 <RCCEx_PLL2_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004490:	e00c      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xce0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3324      	adds	r3, #36	; 0x24
 8004496:	2101      	movs	r1, #1
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fcc5 	bl	8004e28 <RCCEx_PLL3_Config>
 800449e:	4603      	mov	r3, r0
 80044a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80044a2:	e003      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xce0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	75fb      	strb	r3, [r7, #23]
      break;
 80044a8:	e000      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xce0>
      break;
 80044aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80044b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b6:	f023 0207 	bic.w	r2, r3, #7
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044be:	4923      	ldr	r1, [pc, #140]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	654b      	str	r3, [r1, #84]	; 0x54
 80044c4:	e001      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xcfe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c6:	7dfb      	ldrb	r3, [r7, #23]
 80044c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d040      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044dc:	2b05      	cmp	r3, #5
 80044de:	d821      	bhi.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 80044e0:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>)
 80044e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e6:	bf00      	nop
 80044e8:	0800452b 	.word	0x0800452b
 80044ec:	08004501 	.word	0x08004501
 80044f0:	08004513 	.word	0x08004513
 80044f4:	0800452b 	.word	0x0800452b
 80044f8:	0800452b 	.word	0x0800452b
 80044fc:	0800452b 	.word	0x0800452b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	2101      	movs	r1, #1
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fb6c 	bl	8004be4 <RCCEx_PLL2_Config>
 800450c:	4603      	mov	r3, r0
 800450e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004510:	e00c      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xd60>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3324      	adds	r3, #36	; 0x24
 8004516:	2101      	movs	r1, #1
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fc85 	bl	8004e28 <RCCEx_PLL3_Config>
 800451e:	4603      	mov	r3, r0
 8004520:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004522:	e003      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xd60>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	75fb      	strb	r3, [r7, #23]
      break;
 8004528:	e000      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xd60>
      break;
 800452a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452c:	7dfb      	ldrb	r3, [r7, #23]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d110      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xd88>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004532:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	f023 0207 	bic.w	r2, r3, #7
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004540:	4902      	ldr	r1, [pc, #8]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004542:	4313      	orrs	r3, r2
 8004544:	658b      	str	r3, [r1, #88]	; 0x58
 8004546:	e007      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8004548:	58024800 	.word	0x58024800
 800454c:	58024400 	.word	0x58024400
 8004550:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004554:	7dfb      	ldrb	r3, [r7, #23]
 8004556:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	2b00      	cmp	r3, #0
 8004562:	d04b      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800456a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800456e:	d02e      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xe02>
 8004570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004574:	d828      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 8004576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457a:	d02a      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
 800457c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004580:	d822      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 8004582:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004586:	d026      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
 8004588:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800458c:	d81c      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 800458e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004592:	d010      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xdea>
 8004594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004598:	d816      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 800459a:	2b00      	cmp	r3, #0
 800459c:	d01d      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 800459e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045a2:	d111      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3304      	adds	r3, #4
 80045a8:	2100      	movs	r1, #0
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fb1a 	bl	8004be4 <RCCEx_PLL2_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80045b4:	e012      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xe10>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3324      	adds	r3, #36	; 0x24
 80045ba:	2102      	movs	r1, #2
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fc33 	bl	8004e28 <RCCEx_PLL3_Config>
 80045c2:	4603      	mov	r3, r0
 80045c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80045c6:	e009      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	75fb      	strb	r3, [r7, #23]
      break;
 80045cc:	e006      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 80045ce:	bf00      	nop
 80045d0:	e004      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 80045d2:	bf00      	nop
 80045d4:	e002      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 80045d6:	bf00      	nop
 80045d8:	e000      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 80045da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045dc:	7dfb      	ldrb	r3, [r7, #23]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045e2:	4bb2      	ldr	r3, [pc, #712]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80045e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f0:	49ae      	ldr	r1, [pc, #696]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	654b      	str	r3, [r1, #84]	; 0x54
 80045f6:	e001      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xe30>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
 80045fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004604:	2b00      	cmp	r3, #0
 8004606:	d04b      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xed4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800460e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004612:	d02e      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xea6>
 8004614:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004618:	d828      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461e:	d02a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
 8004620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004624:	d822      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004626:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800462a:	d026      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xeae>
 800462c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004630:	d81c      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004636:	d010      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
 8004638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800463c:	d816      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d01d      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xeb2>
 8004642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004646:	d111      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xea0>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	2100      	movs	r1, #0
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fac8 	bl	8004be4 <RCCEx_PLL2_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004658:	e012      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xeb4>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3324      	adds	r3, #36	; 0x24
 800465e:	2102      	movs	r1, #2
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fbe1 	bl	8004e28 <RCCEx_PLL3_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800466a:	e009      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	75fb      	strb	r3, [r7, #23]
      break;
 8004670:	e006      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 8004672:	bf00      	nop
 8004674:	e004      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 8004676:	bf00      	nop
 8004678:	e002      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 800467a:	bf00      	nop
 800467c:	e000      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 800467e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10a      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xed0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004686:	4b89      	ldr	r3, [pc, #548]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004694:	4985      	ldr	r1, [pc, #532]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004696:	4313      	orrs	r3, r2
 8004698:	658b      	str	r3, [r1, #88]	; 0x58
 800469a:	e001      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469c:	7dfb      	ldrb	r3, [r7, #23]
 800469e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d04b      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xf78>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046b6:	d02e      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80046b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046bc:	d828      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xf44>
 80046be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c2:	d02a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xf4e>
 80046c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c8:	d822      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xf44>
 80046ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046ce:	d026      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xf52>
 80046d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046d4:	d81c      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xf44>
 80046d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046da:	d010      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xf32>
 80046dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046e0:	d816      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xf44>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d01d      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xf56>
 80046e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ea:	d111      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xf44>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	2100      	movs	r1, #0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fa76 	bl	8004be4 <RCCEx_PLL2_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80046fc:	e012      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xf58>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3324      	adds	r3, #36	; 0x24
 8004702:	2102      	movs	r1, #2
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fb8f 	bl	8004e28 <RCCEx_PLL3_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800470e:	e009      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	75fb      	strb	r3, [r7, #23]
      break;
 8004714:	e006      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 8004716:	bf00      	nop
 8004718:	e004      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 800471a:	bf00      	nop
 800471c:	e002      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 800471e:	bf00      	nop
 8004720:	e000      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 8004722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10a      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xf74>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800472a:	4b60      	ldr	r3, [pc, #384]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800472c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004738:	495c      	ldr	r1, [pc, #368]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800473a:	4313      	orrs	r3, r2
 800473c:	658b      	str	r3, [r1, #88]	; 0x58
 800473e:	e001      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xf78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004740:	7dfb      	ldrb	r3, [r7, #23]
 8004742:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d036      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xff2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475a:	d015      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004766:	d00f      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004778:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800477c:	d004      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 800477e:	f240 510f 	movw	r1, #1295	; 0x50f
 8004782:	484b      	ldr	r0, [pc, #300]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
 8004784:	f7fc fb07 	bl	8000d96 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800478e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004792:	d10a      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xfde>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3324      	adds	r3, #36	; 0x24
 8004798:	2102      	movs	r1, #2
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fb44 	bl	8004e28 <RCCEx_PLL3_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xfde>
        {
          status = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047aa:	4b40      	ldr	r3, [pc, #256]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80047ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047b8:	493c      	ldr	r1, [pc, #240]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d036      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x106c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d4:	d015      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e0:	d00f      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047f6:	d004      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 80047f8:	f240 5122 	movw	r1, #1314	; 0x522
 80047fc:	482c      	ldr	r0, [pc, #176]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
 80047fe:	f7fc faca 	bl	8000d96 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480c:	d10a      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1058>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3324      	adds	r3, #36	; 0x24
 8004812:	2102      	movs	r1, #2
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fb07 	bl	8004e28 <RCCEx_PLL3_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1058>
      {
        status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004824:	4b21      	ldr	r3, [pc, #132]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004832:	491e      	ldr	r1, [pc, #120]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004834:	4313      	orrs	r3, r2
 8004836:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d039      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x10ec>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800484a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800484e:	d01d      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8004850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004854:	d817      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1096>
 800485a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800485e:	d009      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 8004860:	e011      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3304      	adds	r3, #4
 8004866:	2100      	movs	r1, #0
 8004868:	4618      	mov	r0, r3
 800486a:	f000 f9bb 	bl	8004be4 <RCCEx_PLL2_Config>
 800486e:	4603      	mov	r3, r0
 8004870:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004872:	e00c      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x10c2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3324      	adds	r3, #36	; 0x24
 8004878:	2102      	movs	r1, #2
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fad4 	bl	8004e28 <RCCEx_PLL3_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004884:	e003      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	75fb      	strb	r3, [r7, #23]
      break;
 800488a:	e000      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      break;
 800488c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800488e:	7dfb      	ldrb	r3, [r7, #23]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10f      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x10e8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004898:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048a2:	4902      	ldr	r1, [pc, #8]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	658b      	str	r3, [r1, #88]	; 0x58
 80048a8:	e006      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x10ec>
 80048aa:	bf00      	nop
 80048ac:	58024400 	.word	0x58024400
 80048b0:	08008f44 	.word	0x08008f44
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b4:	7dfb      	ldrb	r3, [r7, #23]
 80048b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d033      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x1160>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048ce:	d01c      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x113e>
 80048d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048d4:	d816      	bhi.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x1138>
 80048d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048da:	d003      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1118>
 80048dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048e0:	d007      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x1126>
 80048e2:	e00f      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x1138>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e4:	4b53      	ldr	r3, [pc, #332]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	4a52      	ldr	r2, [pc, #328]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 80048ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80048f0:	e00c      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1140>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3324      	adds	r3, #36	; 0x24
 80048f6:	2101      	movs	r1, #1
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fa95 	bl	8004e28 <RCCEx_PLL3_Config>
 80048fe:	4603      	mov	r3, r0
 8004900:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004902:	e003      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1140>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	75fb      	strb	r3, [r7, #23]
      break;
 8004908:	e000      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1140>
      break;
 800490a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800490c:	7dfb      	ldrb	r3, [r7, #23]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10a      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x115c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004912:	4b48      	ldr	r3, [pc, #288]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004916:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004920:	4944      	ldr	r1, [pc, #272]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004922:	4313      	orrs	r3, r2
 8004924:	654b      	str	r3, [r1, #84]	; 0x54
 8004926:	e001      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x1160>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004928:	7dfb      	ldrb	r3, [r7, #23]
 800492a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d037      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d009      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004948:	d004      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800494a:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 800494e:	483a      	ldr	r0, [pc, #232]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x126c>)
 8004950:	f7fc fa21 	bl	8000d96 <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x1198>
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004960:	d007      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x11a6>
 8004962:	e00f      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x11b8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004964:	4b33      	ldr	r3, [pc, #204]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	4a32      	ldr	r2, [pc, #200]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800496a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800496e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004970:	e00b      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x11be>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3304      	adds	r3, #4
 8004976:	2102      	movs	r1, #2
 8004978:	4618      	mov	r0, r3
 800497a:	f000 f933 	bl	8004be4 <RCCEx_PLL2_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004982:	e002      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x11be>

    default:
      ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	75fb      	strb	r3, [r7, #23]
      break;
 8004988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800498a:	7dfb      	ldrb	r3, [r7, #23]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x11d8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004990:	4b28      	ldr	r3, [pc, #160]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004994:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499c:	4925      	ldr	r1, [pc, #148]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80049a2:	e001      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a4:	7dfb      	ldrb	r3, [r7, #23]
 80049a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x11fe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3324      	adds	r3, #36	; 0x24
 80049b8:	2102      	movs	r1, #2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fa34 	bl	8004e28 <RCCEx_PLL3_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x11fe>
    {
      status=HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d034      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1274>
  {

    switch(PeriphClkInit->RngClockSelection)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049de:	d017      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1244>
 80049e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049e4:	d811      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x123e>
 80049e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ea:	d013      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1248>
 80049ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f0:	d80b      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x123e>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d010      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80049f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fa:	d106      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x123e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049fc:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	4a0c      	ldr	r2, [pc, #48]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004a08:	e007      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x124e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a0e:	e004      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x124e>
      break;
 8004a10:	bf00      	nop
 8004a12:	e002      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x124e>
      break;
 8004a14:	bf00      	nop
 8004a16:	e000      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x124e>
      break;
 8004a18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10d      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1270>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a20:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a2c:	4901      	ldr	r1, [pc, #4]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	654b      	str	r3, [r1, #84]	; 0x54
 8004a32:	e005      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1274>
 8004a34:	58024400 	.word	0x58024400
 8004a38:	08008f44 	.word	0x08008f44
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
 8004a3e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d016      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x12ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d009      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x129c>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a5c:	d004      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x129c>
 8004a5e:	f240 51e7 	movw	r1, #1511	; 0x5e7
 8004a62:	485e      	ldr	r0, [pc, #376]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a64:	f7fc f997 	bl	8000d96 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a68:	4b5d      	ldr	r3, [pc, #372]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a74:	495a      	ldr	r1, [pc, #360]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d019      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x12ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x12da>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a9a:	d004      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x12da>
 8004a9c:	f240 51f1 	movw	r1, #1521	; 0x5f1
 8004aa0:	484e      	ldr	r0, [pc, #312]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aa2:	f7fc f978 	bl	8000d96 <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004aa6:	4b4e      	ldr	r3, [pc, #312]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ab4:	494a      	ldr	r1, [pc, #296]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d016      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ad2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ad6:	d004      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8004ad8:	f240 51fb 	movw	r1, #1531	; 0x5fb
 8004adc:	483f      	ldr	r0, [pc, #252]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ade:	f7fc f95a 	bl	8000d96 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ae2:	4b3f      	ldr	r3, [pc, #252]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aee:	493c      	ldr	r1, [pc, #240]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01d      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1354>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b14:	d004      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1354>
 8004b16:	f240 6111 	movw	r1, #1553	; 0x611
 8004b1a:	4830      	ldr	r0, [pc, #192]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b1c:	f7fc f93b 	bl	8000d96 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b20:	4b2f      	ldr	r3, [pc, #188]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	4a2e      	ldr	r2, [pc, #184]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004b26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b2a:	6113      	str	r3, [r2, #16]
 8004b2c:	4b2c      	ldr	r3, [pc, #176]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004b36:	492a      	ldr	r1, [pc, #168]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	da1b      	bge.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x13b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00e      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x139e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b54:	d009      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x139e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b5e:	d004      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x139e>
 8004b60:	f240 611b 	movw	r1, #1563	; 0x61b
 8004b64:	481d      	ldr	r0, [pc, #116]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b66:	f7fc f916 	bl	8000d96 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b6a:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b76:	491a      	ldr	r1, [pc, #104]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01f      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x13fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d010      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ba8:	d004      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004baa:	f240 6125 	movw	r1, #1573	; 0x625
 8004bae:	480b      	ldr	r0, [pc, #44]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bb0:	f7fc f8f1 	bl	8000d96 <assert_failed>

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bb4:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc2:	4907      	ldr	r1, [pc, #28]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004bc8:	7dbb      	ldrb	r3, [r7, #22]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1406>
  {
    return HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	e000      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1408>
  }
  return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	08008f44 	.word	0x08008f44
 8004be0:	58024400 	.word	0x58024400

08004be4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <RCCEx_PLL2_Config+0x1e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b3f      	cmp	r3, #63	; 0x3f
 8004c00:	d904      	bls.n	8004c0c <RCCEx_PLL2_Config+0x28>
 8004c02:	f640 51c2 	movw	r1, #3522	; 0xdc2
 8004c06:	4885      	ldr	r0, [pc, #532]	; (8004e1c <RCCEx_PLL2_Config+0x238>)
 8004c08:	f7fc f8c5 	bl	8000d96 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d904      	bls.n	8004c1e <RCCEx_PLL2_Config+0x3a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c1c:	d904      	bls.n	8004c28 <RCCEx_PLL2_Config+0x44>
 8004c1e:	f640 51c3 	movw	r1, #3523	; 0xdc3
 8004c22:	487e      	ldr	r0, [pc, #504]	; (8004e1c <RCCEx_PLL2_Config+0x238>)
 8004c24:	f7fc f8b7 	bl	8000d96 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <RCCEx_PLL2_Config+0x54>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b80      	cmp	r3, #128	; 0x80
 8004c36:	d904      	bls.n	8004c42 <RCCEx_PLL2_Config+0x5e>
 8004c38:	f640 51c4 	movw	r1, #3524	; 0xdc4
 8004c3c:	4877      	ldr	r0, [pc, #476]	; (8004e1c <RCCEx_PLL2_Config+0x238>)
 8004c3e:	f7fc f8aa 	bl	8000d96 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <RCCEx_PLL2_Config+0x6e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b80      	cmp	r3, #128	; 0x80
 8004c50:	d904      	bls.n	8004c5c <RCCEx_PLL2_Config+0x78>
 8004c52:	f640 51c5 	movw	r1, #3525	; 0xdc5
 8004c56:	4871      	ldr	r0, [pc, #452]	; (8004e1c <RCCEx_PLL2_Config+0x238>)
 8004c58:	f7fc f89d 	bl	8000d96 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <RCCEx_PLL2_Config+0x88>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	2b80      	cmp	r3, #128	; 0x80
 8004c6a:	d904      	bls.n	8004c76 <RCCEx_PLL2_Config+0x92>
 8004c6c:	f640 51c6 	movw	r1, #3526	; 0xdc6
 8004c70:	486a      	ldr	r0, [pc, #424]	; (8004e1c <RCCEx_PLL2_Config+0x238>)
 8004c72:	f7fc f890 	bl	8000d96 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d010      	beq.n	8004ca0 <RCCEx_PLL2_Config+0xbc>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	2b40      	cmp	r3, #64	; 0x40
 8004c84:	d00c      	beq.n	8004ca0 <RCCEx_PLL2_Config+0xbc>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	2b80      	cmp	r3, #128	; 0x80
 8004c8c:	d008      	beq.n	8004ca0 <RCCEx_PLL2_Config+0xbc>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	2bc0      	cmp	r3, #192	; 0xc0
 8004c94:	d004      	beq.n	8004ca0 <RCCEx_PLL2_Config+0xbc>
 8004c96:	f640 51c7 	movw	r1, #3527	; 0xdc7
 8004c9a:	4860      	ldr	r0, [pc, #384]	; (8004e1c <RCCEx_PLL2_Config+0x238>)
 8004c9c:	f7fc f87b 	bl	8000d96 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <RCCEx_PLL2_Config+0xd6>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d004      	beq.n	8004cba <RCCEx_PLL2_Config+0xd6>
 8004cb0:	f640 51c8 	movw	r1, #3528	; 0xdc8
 8004cb4:	4859      	ldr	r0, [pc, #356]	; (8004e1c <RCCEx_PLL2_Config+0x238>)
 8004cb6:	f7fc f86e 	bl	8000d96 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc2:	d304      	bcc.n	8004cce <RCCEx_PLL2_Config+0xea>
 8004cc4:	f640 51c9 	movw	r1, #3529	; 0xdc9
 8004cc8:	4854      	ldr	r0, [pc, #336]	; (8004e1c <RCCEx_PLL2_Config+0x238>)
 8004cca:	f7fc f864 	bl	8000d96 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cce:	4b54      	ldr	r3, [pc, #336]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d101      	bne.n	8004cde <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e099      	b.n	8004e12 <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004cde:	4b50      	ldr	r3, [pc, #320]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a4f      	ldr	r2, [pc, #316]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004ce4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ce8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cea:	f7fc fc4f 	bl	800158c <HAL_GetTick>
 8004cee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cf0:	e008      	b.n	8004d04 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004cf2:	f7fc fc4b 	bl	800158c <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e086      	b.n	8004e12 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d04:	4b46      	ldr	r3, [pc, #280]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1f0      	bne.n	8004cf2 <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d10:	4b43      	ldr	r3, [pc, #268]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	031b      	lsls	r3, r3, #12
 8004d1e:	4940      	ldr	r1, [pc, #256]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	628b      	str	r3, [r1, #40]	; 0x28
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	025b      	lsls	r3, r3, #9
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	041b      	lsls	r3, r3, #16
 8004d42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	061b      	lsls	r3, r3, #24
 8004d50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d54:	4932      	ldr	r1, [pc, #200]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d5a:	4b31      	ldr	r3, [pc, #196]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	492e      	ldr	r1, [pc, #184]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d6c:	4b2c      	ldr	r3, [pc, #176]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	f023 0220 	bic.w	r2, r3, #32
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	4929      	ldr	r1, [pc, #164]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d7e:	4b28      	ldr	r3, [pc, #160]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	4a27      	ldr	r2, [pc, #156]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004d84:	f023 0310 	bic.w	r3, r3, #16
 8004d88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d8a:	4b25      	ldr	r3, [pc, #148]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d8e:	4b25      	ldr	r3, [pc, #148]	; (8004e24 <RCCEx_PLL2_Config+0x240>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	69d2      	ldr	r2, [r2, #28]
 8004d96:	00d2      	lsls	r2, r2, #3
 8004d98:	4921      	ldr	r1, [pc, #132]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d9e:	4b20      	ldr	r3, [pc, #128]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	4a1f      	ldr	r2, [pc, #124]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004da4:	f043 0310 	orr.w	r3, r3, #16
 8004da8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d106      	bne.n	8004dbe <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004db0:	4b1b      	ldr	r3, [pc, #108]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	4a1a      	ldr	r2, [pc, #104]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004db6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004dbc:	e00f      	b.n	8004dde <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d106      	bne.n	8004dd2 <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004dc4:	4b16      	ldr	r3, [pc, #88]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004dd0:	e005      	b.n	8004dde <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004dd2:	4b13      	ldr	r3, [pc, #76]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd6:	4a12      	ldr	r2, [pc, #72]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004dd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ddc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004dde:	4b10      	ldr	r3, [pc, #64]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a0f      	ldr	r2, [pc, #60]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004de4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004de8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dea:	f7fc fbcf 	bl	800158c <HAL_GetTick>
 8004dee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004df0:	e008      	b.n	8004e04 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004df2:	f7fc fbcb 	bl	800158c <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e006      	b.n	8004e12 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <RCCEx_PLL2_Config+0x23c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f0      	beq.n	8004df2 <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	08008f44 	.word	0x08008f44
 8004e20:	58024400 	.word	0x58024400
 8004e24:	ffff0007 	.word	0xffff0007

08004e28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <RCCEx_PLL3_Config+0x1e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b3f      	cmp	r3, #63	; 0x3f
 8004e44:	d904      	bls.n	8004e50 <RCCEx_PLL3_Config+0x28>
 8004e46:	f640 612a 	movw	r1, #3626	; 0xe2a
 8004e4a:	4887      	ldr	r0, [pc, #540]	; (8005068 <RCCEx_PLL3_Config+0x240>)
 8004e4c:	f7fb ffa3 	bl	8000d96 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d904      	bls.n	8004e62 <RCCEx_PLL3_Config+0x3a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e60:	d904      	bls.n	8004e6c <RCCEx_PLL3_Config+0x44>
 8004e62:	f640 612b 	movw	r1, #3627	; 0xe2b
 8004e66:	4880      	ldr	r0, [pc, #512]	; (8005068 <RCCEx_PLL3_Config+0x240>)
 8004e68:	f7fb ff95 	bl	8000d96 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <RCCEx_PLL3_Config+0x54>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b80      	cmp	r3, #128	; 0x80
 8004e7a:	d904      	bls.n	8004e86 <RCCEx_PLL3_Config+0x5e>
 8004e7c:	f640 612c 	movw	r1, #3628	; 0xe2c
 8004e80:	4879      	ldr	r0, [pc, #484]	; (8005068 <RCCEx_PLL3_Config+0x240>)
 8004e82:	f7fb ff88 	bl	8000d96 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <RCCEx_PLL3_Config+0x6e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	2b80      	cmp	r3, #128	; 0x80
 8004e94:	d904      	bls.n	8004ea0 <RCCEx_PLL3_Config+0x78>
 8004e96:	f640 612d 	movw	r1, #3629	; 0xe2d
 8004e9a:	4873      	ldr	r0, [pc, #460]	; (8005068 <RCCEx_PLL3_Config+0x240>)
 8004e9c:	f7fb ff7b 	bl	8000d96 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <RCCEx_PLL3_Config+0x88>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	2b80      	cmp	r3, #128	; 0x80
 8004eae:	d904      	bls.n	8004eba <RCCEx_PLL3_Config+0x92>
 8004eb0:	f640 612e 	movw	r1, #3630	; 0xe2e
 8004eb4:	486c      	ldr	r0, [pc, #432]	; (8005068 <RCCEx_PLL3_Config+0x240>)
 8004eb6:	f7fb ff6e 	bl	8000d96 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d013      	beq.n	8004eea <RCCEx_PLL3_Config+0xc2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eca:	d00e      	beq.n	8004eea <RCCEx_PLL3_Config+0xc2>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed4:	d009      	beq.n	8004eea <RCCEx_PLL3_Config+0xc2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ede:	d004      	beq.n	8004eea <RCCEx_PLL3_Config+0xc2>
 8004ee0:	f640 612f 	movw	r1, #3631	; 0xe2f
 8004ee4:	4860      	ldr	r0, [pc, #384]	; (8005068 <RCCEx_PLL3_Config+0x240>)
 8004ee6:	f7fb ff56 	bl	8000d96 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d009      	beq.n	8004f06 <RCCEx_PLL3_Config+0xde>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004efa:	d004      	beq.n	8004f06 <RCCEx_PLL3_Config+0xde>
 8004efc:	f44f 6163 	mov.w	r1, #3632	; 0xe30
 8004f00:	4859      	ldr	r0, [pc, #356]	; (8005068 <RCCEx_PLL3_Config+0x240>)
 8004f02:	f7fb ff48 	bl	8000d96 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0e:	d304      	bcc.n	8004f1a <RCCEx_PLL3_Config+0xf2>
 8004f10:	f640 6131 	movw	r1, #3633	; 0xe31
 8004f14:	4854      	ldr	r0, [pc, #336]	; (8005068 <RCCEx_PLL3_Config+0x240>)
 8004f16:	f7fb ff3e 	bl	8000d96 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f1a:	4b54      	ldr	r3, [pc, #336]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d101      	bne.n	8004f2a <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e099      	b.n	800505e <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f2a:	4b50      	ldr	r3, [pc, #320]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a4f      	ldr	r2, [pc, #316]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f36:	f7fc fb29 	bl	800158c <HAL_GetTick>
 8004f3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f3c:	e008      	b.n	8004f50 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004f3e:	f7fc fb25 	bl	800158c <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e086      	b.n	800505e <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f50:	4b46      	ldr	r3, [pc, #280]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1f0      	bne.n	8004f3e <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f5c:	4b43      	ldr	r3, [pc, #268]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f60:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	051b      	lsls	r3, r3, #20
 8004f6a:	4940      	ldr	r1, [pc, #256]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	628b      	str	r3, [r1, #40]	; 0x28
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	025b      	lsls	r3, r3, #9
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	041b      	lsls	r3, r3, #16
 8004f8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	061b      	lsls	r3, r3, #24
 8004f9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fa0:	4932      	ldr	r1, [pc, #200]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004fa6:	4b31      	ldr	r3, [pc, #196]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	492e      	ldr	r1, [pc, #184]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004fb8:	4b2c      	ldr	r3, [pc, #176]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	4929      	ldr	r1, [pc, #164]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004fca:	4b28      	ldr	r3, [pc, #160]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	4a27      	ldr	r2, [pc, #156]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004fd6:	4b25      	ldr	r3, [pc, #148]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fda:	4b25      	ldr	r3, [pc, #148]	; (8005070 <RCCEx_PLL3_Config+0x248>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	69d2      	ldr	r2, [r2, #28]
 8004fe2:	00d2      	lsls	r2, r2, #3
 8004fe4:	4921      	ldr	r1, [pc, #132]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004fea:	4b20      	ldr	r3, [pc, #128]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	4a1f      	ldr	r2, [pc, #124]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d106      	bne.n	800500a <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ffc:	4b1b      	ldr	r3, [pc, #108]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	4a1a      	ldr	r2, [pc, #104]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8005002:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005006:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005008:	e00f      	b.n	800502a <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d106      	bne.n	800501e <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005010:	4b16      	ldr	r3, [pc, #88]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	4a15      	ldr	r2, [pc, #84]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8005016:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800501a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800501c:	e005      	b.n	800502a <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800501e:	4b13      	ldr	r3, [pc, #76]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	4a12      	ldr	r2, [pc, #72]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8005024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005028:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800502a:	4b10      	ldr	r3, [pc, #64]	; (800506c <RCCEx_PLL3_Config+0x244>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a0f      	ldr	r2, [pc, #60]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8005030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005036:	f7fc faa9 	bl	800158c <HAL_GetTick>
 800503a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800503c:	e008      	b.n	8005050 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800503e:	f7fc faa5 	bl	800158c <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e006      	b.n	800505e <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005050:	4b06      	ldr	r3, [pc, #24]	; (800506c <RCCEx_PLL3_Config+0x244>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0f0      	beq.n	800503e <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 800505c:	7bfb      	ldrb	r3, [r7, #15]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	08008f44 	.word	0x08008f44
 800506c:	58024400 	.word	0x58024400
 8005070:	ffff0007 	.word	0xffff0007

08005074 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e292      	b.n	80055b0 <HAL_SPI_Init+0x53c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a97      	ldr	r2, [pc, #604]	; (80052ec <HAL_SPI_Init+0x278>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d01c      	beq.n	80050ce <HAL_SPI_Init+0x5a>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a95      	ldr	r2, [pc, #596]	; (80052f0 <HAL_SPI_Init+0x27c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d017      	beq.n	80050ce <HAL_SPI_Init+0x5a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a94      	ldr	r2, [pc, #592]	; (80052f4 <HAL_SPI_Init+0x280>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d012      	beq.n	80050ce <HAL_SPI_Init+0x5a>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a92      	ldr	r2, [pc, #584]	; (80052f8 <HAL_SPI_Init+0x284>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00d      	beq.n	80050ce <HAL_SPI_Init+0x5a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a91      	ldr	r2, [pc, #580]	; (80052fc <HAL_SPI_Init+0x288>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d008      	beq.n	80050ce <HAL_SPI_Init+0x5a>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a8f      	ldr	r2, [pc, #572]	; (8005300 <HAL_SPI_Init+0x28c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d003      	beq.n	80050ce <HAL_SPI_Init+0x5a>
 80050c6:	21fb      	movs	r1, #251	; 0xfb
 80050c8:	488e      	ldr	r0, [pc, #568]	; (8005304 <HAL_SPI_Init+0x290>)
 80050ca:	f7fb fe64 	bl	8000d96 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d008      	beq.n	80050e8 <HAL_SPI_Init+0x74>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050de:	d003      	beq.n	80050e8 <HAL_SPI_Init+0x74>
 80050e0:	21fc      	movs	r1, #252	; 0xfc
 80050e2:	4888      	ldr	r0, [pc, #544]	; (8005304 <HAL_SPI_Init+0x290>)
 80050e4:	f7fb fe57 	bl	8000d96 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d012      	beq.n	8005116 <HAL_SPI_Init+0xa2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050f8:	d00d      	beq.n	8005116 <HAL_SPI_Init+0xa2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005102:	d008      	beq.n	8005116 <HAL_SPI_Init+0xa2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800510c:	d003      	beq.n	8005116 <HAL_SPI_Init+0xa2>
 800510e:	21fd      	movs	r1, #253	; 0xfd
 8005110:	487c      	ldr	r0, [pc, #496]	; (8005304 <HAL_SPI_Init+0x290>)
 8005112:	f7fb fe40 	bl	8000d96 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b1f      	cmp	r3, #31
 800511c:	d077      	beq.n	800520e <HAL_SPI_Init+0x19a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b1e      	cmp	r3, #30
 8005124:	d073      	beq.n	800520e <HAL_SPI_Init+0x19a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	2b1d      	cmp	r3, #29
 800512c:	d06f      	beq.n	800520e <HAL_SPI_Init+0x19a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	2b1c      	cmp	r3, #28
 8005134:	d06b      	beq.n	800520e <HAL_SPI_Init+0x19a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	2b1b      	cmp	r3, #27
 800513c:	d067      	beq.n	800520e <HAL_SPI_Init+0x19a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	2b1a      	cmp	r3, #26
 8005144:	d063      	beq.n	800520e <HAL_SPI_Init+0x19a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2b19      	cmp	r3, #25
 800514c:	d05f      	beq.n	800520e <HAL_SPI_Init+0x19a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	2b18      	cmp	r3, #24
 8005154:	d05b      	beq.n	800520e <HAL_SPI_Init+0x19a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	2b17      	cmp	r3, #23
 800515c:	d057      	beq.n	800520e <HAL_SPI_Init+0x19a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	2b16      	cmp	r3, #22
 8005164:	d053      	beq.n	800520e <HAL_SPI_Init+0x19a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	2b15      	cmp	r3, #21
 800516c:	d04f      	beq.n	800520e <HAL_SPI_Init+0x19a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	2b14      	cmp	r3, #20
 8005174:	d04b      	beq.n	800520e <HAL_SPI_Init+0x19a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	2b13      	cmp	r3, #19
 800517c:	d047      	beq.n	800520e <HAL_SPI_Init+0x19a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	2b15      	cmp	r3, #21
 8005184:	d043      	beq.n	800520e <HAL_SPI_Init+0x19a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	2b12      	cmp	r3, #18
 800518c:	d03f      	beq.n	800520e <HAL_SPI_Init+0x19a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	2b11      	cmp	r3, #17
 8005194:	d03b      	beq.n	800520e <HAL_SPI_Init+0x19a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	2b10      	cmp	r3, #16
 800519c:	d037      	beq.n	800520e <HAL_SPI_Init+0x19a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	2b0f      	cmp	r3, #15
 80051a4:	d033      	beq.n	800520e <HAL_SPI_Init+0x19a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	2b0e      	cmp	r3, #14
 80051ac:	d02f      	beq.n	800520e <HAL_SPI_Init+0x19a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	2b0d      	cmp	r3, #13
 80051b4:	d02b      	beq.n	800520e <HAL_SPI_Init+0x19a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	2b0c      	cmp	r3, #12
 80051bc:	d027      	beq.n	800520e <HAL_SPI_Init+0x19a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	2b0b      	cmp	r3, #11
 80051c4:	d023      	beq.n	800520e <HAL_SPI_Init+0x19a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2b0a      	cmp	r3, #10
 80051cc:	d01f      	beq.n	800520e <HAL_SPI_Init+0x19a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	2b09      	cmp	r3, #9
 80051d4:	d01b      	beq.n	800520e <HAL_SPI_Init+0x19a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d017      	beq.n	800520e <HAL_SPI_Init+0x19a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	2b07      	cmp	r3, #7
 80051e4:	d013      	beq.n	800520e <HAL_SPI_Init+0x19a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	2b06      	cmp	r3, #6
 80051ec:	d00f      	beq.n	800520e <HAL_SPI_Init+0x19a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	2b05      	cmp	r3, #5
 80051f4:	d00b      	beq.n	800520e <HAL_SPI_Init+0x19a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d007      	beq.n	800520e <HAL_SPI_Init+0x19a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2b03      	cmp	r3, #3
 8005204:	d003      	beq.n	800520e <HAL_SPI_Init+0x19a>
 8005206:	21fe      	movs	r1, #254	; 0xfe
 8005208:	483e      	ldr	r0, [pc, #248]	; (8005304 <HAL_SPI_Init+0x290>)
 800520a:	f7fb fdc4 	bl	8000d96 <assert_failed>
  assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d047      	beq.n	80052a6 <HAL_SPI_Init+0x232>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521a:	2b20      	cmp	r3, #32
 800521c:	d043      	beq.n	80052a6 <HAL_SPI_Init+0x232>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005222:	2b40      	cmp	r3, #64	; 0x40
 8005224:	d03f      	beq.n	80052a6 <HAL_SPI_Init+0x232>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522a:	2b60      	cmp	r3, #96	; 0x60
 800522c:	d03b      	beq.n	80052a6 <HAL_SPI_Init+0x232>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005232:	2b80      	cmp	r3, #128	; 0x80
 8005234:	d037      	beq.n	80052a6 <HAL_SPI_Init+0x232>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523a:	2ba0      	cmp	r3, #160	; 0xa0
 800523c:	d033      	beq.n	80052a6 <HAL_SPI_Init+0x232>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005242:	2bc0      	cmp	r3, #192	; 0xc0
 8005244:	d02f      	beq.n	80052a6 <HAL_SPI_Init+0x232>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524a:	2be0      	cmp	r3, #224	; 0xe0
 800524c:	d02b      	beq.n	80052a6 <HAL_SPI_Init+0x232>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005256:	d026      	beq.n	80052a6 <HAL_SPI_Init+0x232>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8005260:	d021      	beq.n	80052a6 <HAL_SPI_Init+0x232>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005266:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800526a:	d01c      	beq.n	80052a6 <HAL_SPI_Init+0x232>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005270:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8005274:	d017      	beq.n	80052a6 <HAL_SPI_Init+0x232>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800527e:	d012      	beq.n	80052a6 <HAL_SPI_Init+0x232>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005284:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8005288:	d00d      	beq.n	80052a6 <HAL_SPI_Init+0x232>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8005292:	d008      	beq.n	80052a6 <HAL_SPI_Init+0x232>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005298:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800529c:	d003      	beq.n	80052a6 <HAL_SPI_Init+0x232>
 800529e:	21ff      	movs	r1, #255	; 0xff
 80052a0:	4818      	ldr	r0, [pc, #96]	; (8005304 <HAL_SPI_Init+0x290>)
 80052a2:	f7fb fd78 	bl	8000d96 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ae:	d00d      	beq.n	80052cc <HAL_SPI_Init+0x258>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d009      	beq.n	80052cc <HAL_SPI_Init+0x258>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052c0:	d004      	beq.n	80052cc <HAL_SPI_Init+0x258>
 80052c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052c6:	480f      	ldr	r0, [pc, #60]	; (8005304 <HAL_SPI_Init+0x290>)
 80052c8:	f7fb fd65 	bl	8000d96 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d4:	d018      	beq.n	8005308 <HAL_SPI_Init+0x294>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d014      	beq.n	8005308 <HAL_SPI_Init+0x294>
 80052de:	f240 1101 	movw	r1, #257	; 0x101
 80052e2:	4808      	ldr	r0, [pc, #32]	; (8005304 <HAL_SPI_Init+0x290>)
 80052e4:	f7fb fd57 	bl	8000d96 <assert_failed>
 80052e8:	e00e      	b.n	8005308 <HAL_SPI_Init+0x294>
 80052ea:	bf00      	nop
 80052ec:	40013000 	.word	0x40013000
 80052f0:	40003800 	.word	0x40003800
 80052f4:	40003c00 	.word	0x40003c00
 80052f8:	40013400 	.word	0x40013400
 80052fc:	40015000 	.word	0x40015000
 8005300:	58001400 	.word	0x58001400
 8005304:	08008f80 	.word	0x08008f80
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d027      	beq.n	8005360 <HAL_SPI_Init+0x2ec>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005318:	d022      	beq.n	8005360 <HAL_SPI_Init+0x2ec>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005322:	d01d      	beq.n	8005360 <HAL_SPI_Init+0x2ec>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800532c:	d018      	beq.n	8005360 <HAL_SPI_Init+0x2ec>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005336:	d013      	beq.n	8005360 <HAL_SPI_Init+0x2ec>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005340:	d00e      	beq.n	8005360 <HAL_SPI_Init+0x2ec>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800534a:	d009      	beq.n	8005360 <HAL_SPI_Init+0x2ec>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	f1b3 4fe0 	cmp.w	r3, #1879048192	; 0x70000000
 8005354:	d004      	beq.n	8005360 <HAL_SPI_Init+0x2ec>
 8005356:	f44f 7181 	mov.w	r1, #258	; 0x102
 800535a:	4897      	ldr	r0, [pc, #604]	; (80055b8 <HAL_SPI_Init+0x544>)
 800535c:	f7fb fd1b 	bl	8000d96 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d009      	beq.n	800537c <HAL_SPI_Init+0x308>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005370:	d004      	beq.n	800537c <HAL_SPI_Init+0x308>
 8005372:	f240 1103 	movw	r1, #259	; 0x103
 8005376:	4890      	ldr	r0, [pc, #576]	; (80055b8 <HAL_SPI_Init+0x544>)
 8005378:	f7fb fd0d 	bl	8000d96 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	2b00      	cmp	r3, #0
 8005382:	d009      	beq.n	8005398 <HAL_SPI_Init+0x324>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800538c:	d004      	beq.n	8005398 <HAL_SPI_Init+0x324>
 800538e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005392:	4889      	ldr	r0, [pc, #548]	; (80055b8 <HAL_SPI_Init+0x544>)
 8005394:	f7fb fcff 	bl	8000d96 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	2b00      	cmp	r3, #0
 800539e:	d11b      	bne.n	80053d8 <HAL_SPI_Init+0x364>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d009      	beq.n	80053bc <HAL_SPI_Init+0x348>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053b0:	d004      	beq.n	80053bc <HAL_SPI_Init+0x348>
 80053b2:	f240 1107 	movw	r1, #263	; 0x107
 80053b6:	4880      	ldr	r0, [pc, #512]	; (80055b8 <HAL_SPI_Init+0x544>)
 80053b8:	f7fb fced 	bl	8000d96 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d009      	beq.n	80053d8 <HAL_SPI_Init+0x364>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053cc:	d004      	beq.n	80053d8 <HAL_SPI_Init+0x364>
 80053ce:	f44f 7184 	mov.w	r1, #264	; 0x108
 80053d2:	4879      	ldr	r0, [pc, #484]	; (80055b8 <HAL_SPI_Init+0x544>)
 80053d4:	f7fb fcdf 	bl	8000d96 <assert_failed>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a76      	ldr	r2, [pc, #472]	; (80055bc <HAL_SPI_Init+0x548>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00f      	beq.n	8005408 <HAL_SPI_Init+0x394>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a74      	ldr	r2, [pc, #464]	; (80055c0 <HAL_SPI_Init+0x54c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00a      	beq.n	8005408 <HAL_SPI_Init+0x394>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a73      	ldr	r2, [pc, #460]	; (80055c4 <HAL_SPI_Init+0x550>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d005      	beq.n	8005408 <HAL_SPI_Init+0x394>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	2b0f      	cmp	r3, #15
 8005402:	d901      	bls.n	8005408 <HAL_SPI_Init+0x394>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e0d3      	b.n	80055b0 <HAL_SPI_Init+0x53c>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fbb1 	bl	8005b70 <SPI_GetPacketSize>
 800540e:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a69      	ldr	r2, [pc, #420]	; (80055bc <HAL_SPI_Init+0x548>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00c      	beq.n	8005434 <HAL_SPI_Init+0x3c0>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a68      	ldr	r2, [pc, #416]	; (80055c0 <HAL_SPI_Init+0x54c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d007      	beq.n	8005434 <HAL_SPI_Init+0x3c0>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a66      	ldr	r2, [pc, #408]	; (80055c4 <HAL_SPI_Init+0x550>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d002      	beq.n	8005434 <HAL_SPI_Init+0x3c0>
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d811      	bhi.n	8005458 <HAL_SPI_Init+0x3e4>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005438:	4a60      	ldr	r2, [pc, #384]	; (80055bc <HAL_SPI_Init+0x548>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d009      	beq.n	8005452 <HAL_SPI_Init+0x3de>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a5f      	ldr	r2, [pc, #380]	; (80055c0 <HAL_SPI_Init+0x54c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_SPI_Init+0x3de>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a5d      	ldr	r2, [pc, #372]	; (80055c4 <HAL_SPI_Init+0x550>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d104      	bne.n	800545c <HAL_SPI_Init+0x3e8>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b10      	cmp	r3, #16
 8005456:	d901      	bls.n	800545c <HAL_SPI_Init+0x3e8>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0a9      	b.n	80055b0 <HAL_SPI_Init+0x53c>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d106      	bne.n	8005476 <HAL_SPI_Init+0x402>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7fb fcf3 	bl	8000e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2202      	movs	r2, #2
 800547a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0201 	bic.w	r2, r2, #1
 800548c:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005496:	d119      	bne.n	80054cc <HAL_SPI_Init+0x458>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054a0:	d103      	bne.n	80054aa <HAL_SPI_Init+0x436>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d008      	beq.n	80054bc <HAL_SPI_Init+0x448>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10c      	bne.n	80054cc <HAL_SPI_Init+0x458>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ba:	d107      	bne.n	80054cc <HAL_SPI_Init+0x458>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054ca:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	431a      	orrs	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054de:	ea42 0103 	orr.w	r1, r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800552c:	ea42 0103 	orr.w	r1, r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d113      	bne.n	800556c <HAL_SPI_Init+0x4f8>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005556:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800556a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0201 	bic.w	r2, r2, #1
 800557a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <HAL_SPI_Init+0x52a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	08008f80 	.word	0x08008f80
 80055bc:	40013000 	.word	0x40013000
 80055c0:	40003800 	.word	0x40003800
 80055c4:	40003c00 	.word	0x40003c00

080055c8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	4613      	mov	r3, r2
 80055d6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3320      	adds	r3, #32
 80055de:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00e      	beq.n	800560a <HAL_SPI_Transmit+0x42>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80055f4:	d009      	beq.n	800560a <HAL_SPI_Transmit+0x42>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055fe:	d004      	beq.n	800560a <HAL_SPI_Transmit+0x42>
 8005600:	f240 311e 	movw	r1, #798	; 0x31e
 8005604:	4899      	ldr	r0, [pc, #612]	; (800586c <HAL_SPI_Transmit+0x2a4>)
 8005606:	f7fb fbc6 	bl	8000d96 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_SPI_Transmit+0x50>
 8005614:	2302      	movs	r3, #2
 8005616:	e1d8      	b.n	80059ca <HAL_SPI_Transmit+0x402>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005620:	f7fb ffb4 	bl	800158c <HAL_GetTick>
 8005624:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b01      	cmp	r3, #1
 8005630:	d007      	beq.n	8005642 <HAL_SPI_Transmit+0x7a>
  {
    errorcode = HAL_BUSY;
 8005632:	2302      	movs	r3, #2
 8005634:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800563e:	7efb      	ldrb	r3, [r7, #27]
 8005640:	e1c3      	b.n	80059ca <HAL_SPI_Transmit+0x402>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <HAL_SPI_Transmit+0x86>
 8005648:	88fb      	ldrh	r3, [r7, #6]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d107      	bne.n	800565e <HAL_SPI_Transmit+0x96>
  {
    errorcode = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800565a:	7efb      	ldrb	r3, [r7, #27]
 800565c:	e1b5      	b.n	80059ca <HAL_SPI_Transmit+0x402>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2203      	movs	r2, #3
 8005662:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	88fa      	ldrh	r2, [r7, #6]
 8005678:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	88fa      	ldrh	r2, [r7, #6]
 8005680:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80056ae:	d107      	bne.n	80056c0 <HAL_SPI_Transmit+0xf8>
  {
    SPI_1LINE_TX(hspi);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056be:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	4b6a      	ldr	r3, [pc, #424]	; (8005870 <HAL_SPI_Transmit+0x2a8>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	88f9      	ldrh	r1, [r7, #6]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	430b      	orrs	r3, r1
 80056d2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ec:	d107      	bne.n	80056fe <HAL_SPI_Transmit+0x136>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	2b0f      	cmp	r3, #15
 8005704:	d947      	bls.n	8005796 <HAL_SPI_Transmit+0x1ce>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005706:	e03f      	b.n	8005788 <HAL_SPI_Transmit+0x1c0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b02      	cmp	r3, #2
 8005714:	d114      	bne.n	8005740 <HAL_SPI_Transmit+0x178>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6812      	ldr	r2, [r2, #0]
 8005720:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005726:	1d1a      	adds	r2, r3, #4
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800573e:	e023      	b.n	8005788 <HAL_SPI_Transmit+0x1c0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005740:	f7fb ff24 	bl	800158c <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d803      	bhi.n	8005758 <HAL_SPI_Transmit+0x190>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005756:	d102      	bne.n	800575e <HAL_SPI_Transmit+0x196>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d114      	bne.n	8005788 <HAL_SPI_Transmit+0x1c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f938 	bl	80059d4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005772:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e120      	b.n	80059ca <HAL_SPI_Transmit+0x402>
    while (hspi->TxXferCount > 0UL)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1b9      	bne.n	8005708 <HAL_SPI_Transmit+0x140>
 8005794:	e0f3      	b.n	800597e <HAL_SPI_Transmit+0x3b6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	2b07      	cmp	r3, #7
 800579c:	f240 80e8 	bls.w	8005970 <HAL_SPI_Transmit+0x3a8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80057a0:	e05d      	b.n	800585e <HAL_SPI_Transmit+0x296>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d132      	bne.n	8005816 <HAL_SPI_Transmit+0x24e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d918      	bls.n	80057ee <HAL_SPI_Transmit+0x226>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d014      	beq.n	80057ee <HAL_SPI_Transmit+0x226>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6812      	ldr	r2, [r2, #0]
 80057ce:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d4:	1d1a      	adds	r2, r3, #4
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b02      	subs	r3, #2
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80057ec:	e037      	b.n	800585e <HAL_SPI_Transmit+0x296>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f2:	881a      	ldrh	r2, [r3, #0]
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fc:	1c9a      	adds	r2, r3, #2
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005814:	e023      	b.n	800585e <HAL_SPI_Transmit+0x296>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005816:	f7fb feb9 	bl	800158c <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d803      	bhi.n	800582e <HAL_SPI_Transmit+0x266>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800582c:	d102      	bne.n	8005834 <HAL_SPI_Transmit+0x26c>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d114      	bne.n	800585e <HAL_SPI_Transmit+0x296>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f8cd 	bl	80059d4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005848:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e0b5      	b.n	80059ca <HAL_SPI_Transmit+0x402>
    while (hspi->TxXferCount > 0UL)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d19b      	bne.n	80057a2 <HAL_SPI_Transmit+0x1da>
 800586a:	e088      	b.n	800597e <HAL_SPI_Transmit+0x3b6>
 800586c:	08008f80 	.word	0x08008f80
 8005870:	ffff0000 	.word	0xffff0000
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b02      	cmp	r3, #2
 8005880:	d152      	bne.n	8005928 <HAL_SPI_Transmit+0x360>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b03      	cmp	r3, #3
 800588c:	d918      	bls.n	80058c0 <HAL_SPI_Transmit+0x2f8>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005892:	2b40      	cmp	r3, #64	; 0x40
 8005894:	d914      	bls.n	80058c0 <HAL_SPI_Transmit+0x2f8>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a6:	1d1a      	adds	r2, r3, #4
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	3b04      	subs	r3, #4
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80058be:	e057      	b.n	8005970 <HAL_SPI_Transmit+0x3a8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d917      	bls.n	80058fc <HAL_SPI_Transmit+0x334>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d013      	beq.n	80058fc <HAL_SPI_Transmit+0x334>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d8:	881a      	ldrh	r2, [r3, #0]
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e2:	1c9a      	adds	r2, r3, #2
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b02      	subs	r3, #2
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80058fa:	e039      	b.n	8005970 <HAL_SPI_Transmit+0x3a8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3320      	adds	r3, #32
 8005906:	7812      	ldrb	r2, [r2, #0]
 8005908:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005926:	e023      	b.n	8005970 <HAL_SPI_Transmit+0x3a8>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005928:	f7fb fe30 	bl	800158c <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	429a      	cmp	r2, r3
 8005936:	d803      	bhi.n	8005940 <HAL_SPI_Transmit+0x378>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800593e:	d102      	bne.n	8005946 <HAL_SPI_Transmit+0x37e>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d114      	bne.n	8005970 <HAL_SPI_Transmit+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 f844 	bl	80059d4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800595a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e02c      	b.n	80059ca <HAL_SPI_Transmit+0x402>
    while (hspi->TxXferCount > 0UL)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	f47f af7b 	bne.w	8005874 <HAL_SPI_Transmit+0x2ac>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2200      	movs	r2, #0
 8005986:	2108      	movs	r1, #8
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f8c3 	bl	8005b14 <SPI_WaitOnFlagUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <HAL_SPI_Transmit+0x3dc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800599a:	f043 0220 	orr.w	r2, r3, #32
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f815 	bl	80059d4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <HAL_SPI_Transmit+0x400>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e000      	b.n	80059ca <HAL_SPI_Transmit+0x402>
  }
  return errorcode;
 80059c8:	7efb      	ldrb	r3, [r7, #27]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop

080059d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699a      	ldr	r2, [r3, #24]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0208 	orr.w	r2, r2, #8
 80059f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0210 	orr.w	r2, r2, #16
 8005a02:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6919      	ldr	r1, [r3, #16]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b3c      	ldr	r3, [pc, #240]	; (8005b10 <SPI_CloseTransfer+0x13c>)
 8005a20:	400b      	ands	r3, r1
 8005a22:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005a32:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d014      	beq.n	8005a6a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00f      	beq.n	8005a6a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	699a      	ldr	r2, [r3, #24]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f042 0220 	orr.w	r2, r2, #32
 8005a68:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	d014      	beq.n	8005aa0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00f      	beq.n	8005aa0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a86:	f043 0204 	orr.w	r2, r3, #4
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a9e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00f      	beq.n	8005aca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab0:	f043 0201 	orr.w	r2, r3, #1
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699a      	ldr	r2, [r3, #24]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00f      	beq.n	8005af4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ada:	f043 0208 	orr.w	r2, r3, #8
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005af2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005b04:	bf00      	nop
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	fffffc90 	.word	0xfffffc90

08005b14 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	603b      	str	r3, [r7, #0]
 8005b20:	4613      	mov	r3, r2
 8005b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005b24:	e010      	b.n	8005b48 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b26:	f7fb fd31 	bl	800158c <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d803      	bhi.n	8005b3e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b3c:	d102      	bne.n	8005b44 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e00f      	b.n	8005b68 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695a      	ldr	r2, [r3, #20]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	4013      	ands	r3, r2
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	bf0c      	ite	eq
 8005b58:	2301      	moveq	r3, #1
 8005b5a:	2300      	movne	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	461a      	mov	r2, r3
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d0df      	beq.n	8005b26 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7c:	095b      	lsrs	r3, r3, #5
 8005b7e:	3301      	adds	r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	3301      	adds	r3, #1
 8005b88:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	3307      	adds	r3, #7
 8005b8e:	08db      	lsrs	r3, r3, #3
 8005b90:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	fb02 f303 	mul.w	r3, r2, r3
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
	...

08005ba8 <_ZN5ColorC1ERKS_>:
 */

#ifndef COLOR_HPP_
#define COLOR_HPP_

class Color
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
 8005bb2:	4a0d      	ldr	r2, [pc, #52]	; (8005be8 <_ZN5ColorC1ERKS_+0x40>)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	605a      	str	r2, [r3, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	609a      	str	r2, [r3, #8]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60da      	str	r2, [r3, #12]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	611a      	str	r2, [r3, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	080094a0 	.word	0x080094a0

08005bec <_ZN5ColorC1Efff>:
    this->r = 0;
    this->g = 0;
    this->b = 0;
}

Color::Color(float r, float g, float b)
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	ed87 0a02 	vstr	s0, [r7, #8]
 8005bf8:	edc7 0a01 	vstr	s1, [r7, #4]
 8005bfc:	ed87 1a00 	vstr	s2, [r7]
 8005c00:	4a2c      	ldr	r2, [pc, #176]	; (8005cb4 <_ZN5ColorC1Efff+0xc8>)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	601a      	str	r2, [r3, #0]
{
    this->a = 1;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005c0c:	605a      	str	r2, [r3, #4]
    this->r = CLIPVALUE(r, 0, 1);
 8005c0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c1a:	d502      	bpl.n	8005c22 <_ZN5ColorC1Efff+0x36>
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	e00c      	b.n	8005c3c <_ZN5ColorC1Efff+0x50>
 8005c22:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c32:	dd02      	ble.n	8005c3a <_ZN5ColorC1Efff+0x4e>
 8005c34:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005c38:	e000      	b.n	8005c3c <_ZN5ColorC1Efff+0x50>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	6093      	str	r3, [r2, #8]
    this->g = CLIPVALUE(g, 0, 1);
 8005c40:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c4c:	d502      	bpl.n	8005c54 <_ZN5ColorC1Efff+0x68>
 8005c4e:	f04f 0300 	mov.w	r3, #0
 8005c52:	e00c      	b.n	8005c6e <_ZN5ColorC1Efff+0x82>
 8005c54:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c64:	dd02      	ble.n	8005c6c <_ZN5ColorC1Efff+0x80>
 8005c66:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005c6a:	e000      	b.n	8005c6e <_ZN5ColorC1Efff+0x82>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	60d3      	str	r3, [r2, #12]
    this->b = CLIPVALUE(b, 0, 1);
 8005c72:	edd7 7a00 	vldr	s15, [r7]
 8005c76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c7e:	d502      	bpl.n	8005c86 <_ZN5ColorC1Efff+0x9a>
 8005c80:	f04f 0300 	mov.w	r3, #0
 8005c84:	e00c      	b.n	8005ca0 <_ZN5ColorC1Efff+0xb4>
 8005c86:	edd7 7a00 	vldr	s15, [r7]
 8005c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c96:	dd02      	ble.n	8005c9e <_ZN5ColorC1Efff+0xb2>
 8005c98:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005c9c:	e000      	b.n	8005ca0 <_ZN5ColorC1Efff+0xb4>
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	6113      	str	r3, [r2, #16]
}
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	080094a0 	.word	0x080094a0

08005cb8 <_ZN5ColorD1Ev>:
    this->r = CLIPVALUE(r, 0, 1);
    this->g = CLIPVALUE(g, 0, 1);
    this->b = CLIPVALUE(b, 0, 1);
}

Color::~Color()
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	4a04      	ldr	r2, [pc, #16]	; (8005cd4 <_ZN5ColorD1Ev+0x1c>)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	601a      	str	r2, [r3, #0]
{
    // TODO Auto-generated destructor stub
}
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	080094a0 	.word	0x080094a0

08005cd8 <_ZN5ColorD0Ev>:
Color::~Color()
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
}
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff ffe9 	bl	8005cb8 <_ZN5ColorD1Ev>
 8005ce6:	2114      	movs	r1, #20
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f001 f86f 	bl	8006dcc <_ZdlPvj>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <_ZN6PencilC1ER7Display>:
#include <base/list.hpp>

#define ABS(v) (((v) >= 0) ? (v) : -(v))
#define PI 3.14159265359

Pencil::Pencil(Display &display)
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
 8005d02:	4a0f      	ldr	r2, [pc, #60]	; (8005d40 <_ZN6PencilC1ER7Display+0x48>)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	601a      	str	r2, [r3, #0]
{
    this->display = &display;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	605a      	str	r2, [r3, #4]
    this->w = display.getWidth();
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3304      	adds	r3, #4
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6838      	ldr	r0, [r7, #0]
 8005d18:	4798      	blx	r3
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	609a      	str	r2, [r3, #8]
    this->h = display.getHeight();
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3308      	adds	r3, #8
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6838      	ldr	r0, [r7, #0]
 8005d2c:	4798      	blx	r3
 8005d2e:	4603      	mov	r3, r0
 8005d30:	461a      	mov	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60da      	str	r2, [r3, #12]
}
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	080094b0 	.word	0x080094b0

08005d44 <_ZN6PencilD1Ev>:

Pencil::~Pencil()
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	4a04      	ldr	r2, [pc, #16]	; (8005d60 <_ZN6PencilD1Ev+0x1c>)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	601a      	str	r2, [r3, #0]
{

}
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	080094b0 	.word	0x080094b0

08005d64 <_ZN6PencilD0Ev>:
Pencil::~Pencil()
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
}
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff ffe9 	bl	8005d44 <_ZN6PencilD1Ev>
 8005d72:	2110      	movs	r1, #16
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f001 f829 	bl	8006dcc <_ZdlPvj>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <_ZN6Pencil9drawPixelEff5Color>:

void Pencil::drawPixel(float x, float y, Color color)
{
 8005d84:	b5b0      	push	{r4, r5, r7, lr}
 8005d86:	ed2d 8b02 	vpush	{d8}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d94:	edc7 0a01 	vstr	s1, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
    this->display->drawPixel(roundf(x), roundf(y), color.r, color.g, color.b);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	685d      	ldr	r5, [r3, #4]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3334      	adds	r3, #52	; 0x34
 8005da6:	681c      	ldr	r4, [r3, #0]
 8005da8:	ed97 0a02 	vldr	s0, [r7, #8]
 8005dac:	f001 f9a6 	bl	80070fc <roundf>
 8005db0:	eef0 7a40 	vmov.f32	s15, s0
 8005db4:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8005db8:	ed97 0a01 	vldr	s0, [r7, #4]
 8005dbc:	f001 f99e 	bl	80070fc <roundf>
 8005dc0:	eef0 7a40 	vmov.f32	s15, s0
 8005dc4:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	edd3 7a02 	vldr	s15, [r3, #8]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	ed93 7a03 	vldr	s14, [r3, #12]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	edd3 6a04 	vldr	s13, [r3, #16]
 8005dda:	eeb0 1a66 	vmov.f32	s2, s13
 8005dde:	eef0 0a47 	vmov.f32	s1, s14
 8005de2:	eeb0 0a67 	vmov.f32	s0, s15
 8005de6:	ee16 2a10 	vmov	r2, s12
 8005dea:	ee18 1a10 	vmov	r1, s16
 8005dee:	4628      	mov	r0, r5
 8005df0:	47a0      	blx	r4
}
 8005df2:	bf00      	nop
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	ecbd 8b02 	vpop	{d8}
 8005dfc:	bdb0      	pop	{r4, r5, r7, pc}

08005dfe <_ZN6Pencil8drawLineEffff5Color>:

void Pencil::drawLine(float x1, float y1, float x2, float y2, Color color)
{
 8005dfe:	b590      	push	{r4, r7, lr}
 8005e00:	ed2d 8b02 	vpush	{d8}
 8005e04:	b09b      	sub	sp, #108	; 0x6c
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6178      	str	r0, [r7, #20]
 8005e0a:	ed87 0a04 	vstr	s0, [r7, #16]
 8005e0e:	edc7 0a03 	vstr	s1, [r7, #12]
 8005e12:	ed87 1a02 	vstr	s2, [r7, #8]
 8005e16:	edc7 1a01 	vstr	s3, [r7, #4]
 8005e1a:	6039      	str	r1, [r7, #0]
    float a = (y2-y1)/(x2-x1);
 8005e1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005e20:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e24:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005e28:	ed97 7a02 	vldr	s14, [r7, #8]
 8005e2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e38:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

    if(ABS(a) < 1)
 8005e3c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005e40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e48:	db02      	blt.n	8005e50 <_ZN6Pencil8drawLineEffff5Color+0x52>
 8005e4a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005e4e:	e003      	b.n	8005e58 <_ZN6Pencil8drawLineEffff5Color+0x5a>
 8005e50:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005e54:	eef1 7a67 	vneg.f32	s15, s15
 8005e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e64:	d55f      	bpl.n	8005f26 <_ZN6Pencil8drawLineEffff5Color+0x128>
    {
        float bx = (x1 > x2) ? x1 : x2; //bigger x
 8005e66:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e76:	dd01      	ble.n	8005e7c <_ZN6Pencil8drawLineEffff5Color+0x7e>
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	e000      	b.n	8005e7e <_ZN6Pencil8drawLineEffff5Color+0x80>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	64bb      	str	r3, [r7, #72]	; 0x48
        float sx = (x1 > x2) ? x2 : x1; //smaller x
 8005e80:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e84:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e90:	dd01      	ble.n	8005e96 <_ZN6Pencil8drawLineEffff5Color+0x98>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	e000      	b.n	8005e98 <_ZN6Pencil8drawLineEffff5Color+0x9a>
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	647b      	str	r3, [r7, #68]	; 0x44
        float b = y1 - a*x1;
 8005e9a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005e9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea6:	ed97 7a03 	vldr	s14, [r7, #12]
 8005eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        for(float x = floorf(sx); x <= bx; x+=1)
 8005eb2:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8005eb6:	f001 f8df 	bl	8007078 <floorf>
 8005eba:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
 8005ebe:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8005ec2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005ec6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ece:	d900      	bls.n	8005ed2 <_ZN6Pencil8drawLineEffff5Color+0xd4>
        {
            this->drawPixel(ai*y+bi, y, color);
        }
    }

}
 8005ed0:	e099      	b.n	8006006 <_ZN6Pencil8drawLineEffff5Color+0x208>
            this->drawPixel(x, a*x+b, color);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681c      	ldr	r4, [r3, #0]
 8005ed8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005edc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ee4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005ee8:	ee37 8a27 	vadd.f32	s16, s14, s15
 8005eec:	f107 0318 	add.w	r3, r7, #24
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff fe58 	bl	8005ba8 <_ZN5ColorC1ERKS_>
 8005ef8:	f107 0318 	add.w	r3, r7, #24
 8005efc:	4619      	mov	r1, r3
 8005efe:	eef0 0a48 	vmov.f32	s1, s16
 8005f02:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 8005f06:	6978      	ldr	r0, [r7, #20]
 8005f08:	47a0      	blx	r4
 8005f0a:	f107 0318 	add.w	r3, r7, #24
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff fed2 	bl	8005cb8 <_ZN5ColorD1Ev>
        for(float x = floorf(sx); x <= bx; x+=1)
 8005f14:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f20:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
 8005f24:	e7cb      	b.n	8005ebe <_ZN6Pencil8drawLineEffff5Color+0xc0>
        float by = (y1 > y2) ? y1 : y2; //bigger y
 8005f26:	ed97 7a03 	vldr	s14, [r7, #12]
 8005f2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f36:	dd01      	ble.n	8005f3c <_ZN6Pencil8drawLineEffff5Color+0x13e>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	e000      	b.n	8005f3e <_ZN6Pencil8drawLineEffff5Color+0x140>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	65bb      	str	r3, [r7, #88]	; 0x58
        float sy = (y1 > y2) ? y2 : y1; //smaller y
 8005f40:	ed97 7a03 	vldr	s14, [r7, #12]
 8005f44:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f50:	dd01      	ble.n	8005f56 <_ZN6Pencil8drawLineEffff5Color+0x158>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	e000      	b.n	8005f58 <_ZN6Pencil8drawLineEffff5Color+0x15a>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	657b      	str	r3, [r7, #84]	; 0x54
        float ai = (x2-x1)/(y2-y1);
 8005f5a:	ed97 7a02 	vldr	s14, [r7, #8]
 8005f5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f62:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005f66:	ed97 7a01 	vldr	s14, [r7, #4]
 8005f6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f76:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        float bi = x1 - ai*y1;
 8005f7a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005f7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f86:	ed97 7a04 	vldr	s14, [r7, #16]
 8005f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f8e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        for(float y = floorf(sy); y <= by; y+=1)
 8005f92:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8005f96:	f001 f86f 	bl	8007078 <floorf>
 8005f9a:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
 8005f9e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005fa2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fae:	d900      	bls.n	8005fb2 <_ZN6Pencil8drawLineEffff5Color+0x1b4>
}
 8005fb0:	e029      	b.n	8006006 <_ZN6Pencil8drawLineEffff5Color+0x208>
            this->drawPixel(ai*y+bi, y, color);
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681c      	ldr	r4, [r3, #0]
 8005fb8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005fbc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fc4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005fc8:	ee37 8a27 	vadd.f32	s16, s14, s15
 8005fcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff fde8 	bl	8005ba8 <_ZN5ColorC1ERKS_>
 8005fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fdc:	4619      	mov	r1, r3
 8005fde:	edd7 0a18 	vldr	s1, [r7, #96]	; 0x60
 8005fe2:	eeb0 0a48 	vmov.f32	s0, s16
 8005fe6:	6978      	ldr	r0, [r7, #20]
 8005fe8:	47a0      	blx	r4
 8005fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff fe62 	bl	8005cb8 <_ZN5ColorD1Ev>
        for(float y = floorf(sy); y <= by; y+=1)
 8005ff4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005ff8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ffc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006000:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8006004:	e7cb      	b.n	8005f9e <_ZN6Pencil8drawLineEffff5Color+0x1a0>
}
 8006006:	376c      	adds	r7, #108	; 0x6c
 8006008:	46bd      	mov	sp, r7
 800600a:	ecbd 8b02 	vpop	{d8}
 800600e:	bd90      	pop	{r4, r7, pc}

08006010 <_ZN6Pencil13drawRectangleEffff5Color>:

void Pencil::drawRectangle(float x, float y, float w, float h, Color color)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	ed2d 8b04 	vpush	{d8-d9}
 8006016:	b09a      	sub	sp, #104	; 0x68
 8006018:	af00      	add	r7, sp, #0
 800601a:	6178      	str	r0, [r7, #20]
 800601c:	ed87 0a04 	vstr	s0, [r7, #16]
 8006020:	edc7 0a03 	vstr	s1, [r7, #12]
 8006024:	ed87 1a02 	vstr	s2, [r7, #8]
 8006028:	edc7 1a01 	vstr	s3, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
    assert(w >= 0);
 800602e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006032:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800603a:	da05      	bge.n	8006048 <_ZN6Pencil13drawRectangleEffff5Color+0x38>
 800603c:	4b5e      	ldr	r3, [pc, #376]	; (80061b8 <_ZN6Pencil13drawRectangleEffff5Color+0x1a8>)
 800603e:	4a5f      	ldr	r2, [pc, #380]	; (80061bc <_ZN6Pencil13drawRectangleEffff5Color+0x1ac>)
 8006040:	2141      	movs	r1, #65	; 0x41
 8006042:	485f      	ldr	r0, [pc, #380]	; (80061c0 <_ZN6Pencil13drawRectangleEffff5Color+0x1b0>)
 8006044:	f001 feea 	bl	8007e1c <__assert_func>
    assert(h >= 0);
 8006048:	edd7 7a01 	vldr	s15, [r7, #4]
 800604c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006054:	da05      	bge.n	8006062 <_ZN6Pencil13drawRectangleEffff5Color+0x52>
 8006056:	4b5b      	ldr	r3, [pc, #364]	; (80061c4 <_ZN6Pencil13drawRectangleEffff5Color+0x1b4>)
 8006058:	4a58      	ldr	r2, [pc, #352]	; (80061bc <_ZN6Pencil13drawRectangleEffff5Color+0x1ac>)
 800605a:	2142      	movs	r1, #66	; 0x42
 800605c:	4858      	ldr	r0, [pc, #352]	; (80061c0 <_ZN6Pencil13drawRectangleEffff5Color+0x1b0>)
 800605e:	f001 fedd 	bl	8007e1c <__assert_func>

    if(w > 0 and h > 0)
 8006062:	edd7 7a02 	vldr	s15, [r7, #8]
 8006066:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800606a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800606e:	dc00      	bgt.n	8006072 <_ZN6Pencil13drawRectangleEffff5Color+0x62>

        //Vertical lines
        this->drawLine(x, y, x, y+h, color);
        this->drawLine(x+w, y, x+w, y+h, color);
    }
}
 8006070:	e09b      	b.n	80061aa <_ZN6Pencil13drawRectangleEffff5Color+0x19a>
    if(w > 0 and h > 0)
 8006072:	edd7 7a01 	vldr	s15, [r7, #4]
 8006076:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800607a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800607e:	dc00      	bgt.n	8006082 <_ZN6Pencil13drawRectangleEffff5Color+0x72>
}
 8006080:	e093      	b.n	80061aa <_ZN6Pencil13drawRectangleEffff5Color+0x19a>
        this->drawLine(x, y, x+w, y, color);
 8006082:	ed97 7a04 	vldr	s14, [r7, #16]
 8006086:	edd7 7a02 	vldr	s15, [r7, #8]
 800608a:	ee37 8a27 	vadd.f32	s16, s14, s15
 800608e:	f107 0318 	add.w	r3, r7, #24
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff fd87 	bl	8005ba8 <_ZN5ColorC1ERKS_>
 800609a:	f107 0318 	add.w	r3, r7, #24
 800609e:	4619      	mov	r1, r3
 80060a0:	edd7 1a03 	vldr	s3, [r7, #12]
 80060a4:	eeb0 1a48 	vmov.f32	s2, s16
 80060a8:	edd7 0a03 	vldr	s1, [r7, #12]
 80060ac:	ed97 0a04 	vldr	s0, [r7, #16]
 80060b0:	6978      	ldr	r0, [r7, #20]
 80060b2:	f7ff fea4 	bl	8005dfe <_ZN6Pencil8drawLineEffff5Color>
 80060b6:	f107 0318 	add.w	r3, r7, #24
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff fdfc 	bl	8005cb8 <_ZN5ColorD1Ev>
        this->drawLine(x, y+h, x+w, y+h, color);
 80060c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80060c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80060c8:	ee37 8a27 	vadd.f32	s16, s14, s15
 80060cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80060d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80060d4:	ee77 8a27 	vadd.f32	s17, s14, s15
 80060d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80060dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80060e0:	ee37 9a27 	vadd.f32	s18, s14, s15
 80060e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060e8:	6839      	ldr	r1, [r7, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff fd5c 	bl	8005ba8 <_ZN5ColorC1ERKS_>
 80060f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060f4:	4619      	mov	r1, r3
 80060f6:	eef0 1a49 	vmov.f32	s3, s18
 80060fa:	eeb0 1a68 	vmov.f32	s2, s17
 80060fe:	eef0 0a48 	vmov.f32	s1, s16
 8006102:	ed97 0a04 	vldr	s0, [r7, #16]
 8006106:	6978      	ldr	r0, [r7, #20]
 8006108:	f7ff fe79 	bl	8005dfe <_ZN6Pencil8drawLineEffff5Color>
 800610c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fdd1 	bl	8005cb8 <_ZN5ColorD1Ev>
        this->drawLine(x, y, x, y+h, color);
 8006116:	ed97 7a03 	vldr	s14, [r7, #12]
 800611a:	edd7 7a01 	vldr	s15, [r7, #4]
 800611e:	ee37 8a27 	vadd.f32	s16, s14, s15
 8006122:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff fd3d 	bl	8005ba8 <_ZN5ColorC1ERKS_>
 800612e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006132:	4619      	mov	r1, r3
 8006134:	eef0 1a48 	vmov.f32	s3, s16
 8006138:	ed97 1a04 	vldr	s2, [r7, #16]
 800613c:	edd7 0a03 	vldr	s1, [r7, #12]
 8006140:	ed97 0a04 	vldr	s0, [r7, #16]
 8006144:	6978      	ldr	r0, [r7, #20]
 8006146:	f7ff fe5a 	bl	8005dfe <_ZN6Pencil8drawLineEffff5Color>
 800614a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fdb2 	bl	8005cb8 <_ZN5ColorD1Ev>
        this->drawLine(x+w, y, x+w, y+h, color);
 8006154:	ed97 7a04 	vldr	s14, [r7, #16]
 8006158:	edd7 7a02 	vldr	s15, [r7, #8]
 800615c:	ee37 8a27 	vadd.f32	s16, s14, s15
 8006160:	ed97 7a04 	vldr	s14, [r7, #16]
 8006164:	edd7 7a02 	vldr	s15, [r7, #8]
 8006168:	ee77 8a27 	vadd.f32	s17, s14, s15
 800616c:	ed97 7a03 	vldr	s14, [r7, #12]
 8006170:	edd7 7a01 	vldr	s15, [r7, #4]
 8006174:	ee37 9a27 	vadd.f32	s18, s14, s15
 8006178:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff fd12 	bl	8005ba8 <_ZN5ColorC1ERKS_>
 8006184:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006188:	4619      	mov	r1, r3
 800618a:	eef0 1a49 	vmov.f32	s3, s18
 800618e:	eeb0 1a68 	vmov.f32	s2, s17
 8006192:	edd7 0a03 	vldr	s1, [r7, #12]
 8006196:	eeb0 0a48 	vmov.f32	s0, s16
 800619a:	6978      	ldr	r0, [r7, #20]
 800619c:	f7ff fe2f 	bl	8005dfe <_ZN6Pencil8drawLineEffff5Color>
 80061a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff fd87 	bl	8005cb8 <_ZN5ColorD1Ev>
}
 80061aa:	bf00      	nop
 80061ac:	3768      	adds	r7, #104	; 0x68
 80061ae:	46bd      	mov	sp, r7
 80061b0:	ecbd 8b04 	vpop	{d8-d9}
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	08008fb8 	.word	0x08008fb8
 80061bc:	08008fc0 	.word	0x08008fc0
 80061c0:	08009000 	.word	0x08009000
 80061c4:	08009014 	.word	0x08009014

080061c8 <_ZN6Pencil11drawEllipseEffff5Colorm>:
        this->drawLine(_x_prev, _y_prev, _x, _y, color);
    }
}

void Pencil::drawEllipse(float x, float y, float w, float h, Color color, uint32_t vertices)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b09c      	sub	sp, #112	; 0x70
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	61f8      	str	r0, [r7, #28]
 80061d0:	ed87 0a06 	vstr	s0, [r7, #24]
 80061d4:	edc7 0a05 	vstr	s1, [r7, #20]
 80061d8:	ed87 1a04 	vstr	s2, [r7, #16]
 80061dc:	edc7 1a03 	vstr	s3, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
    assert(w >= 0);
 80061e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80061e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f0:	da05      	bge.n	80061fe <_ZN6Pencil11drawEllipseEffff5Colorm+0x36>
 80061f2:	4b6f      	ldr	r3, [pc, #444]	; (80063b0 <_ZN6Pencil11drawEllipseEffff5Colorm+0x1e8>)
 80061f4:	4a6f      	ldr	r2, [pc, #444]	; (80063b4 <_ZN6Pencil11drawEllipseEffff5Colorm+0x1ec>)
 80061f6:	216c      	movs	r1, #108	; 0x6c
 80061f8:	486f      	ldr	r0, [pc, #444]	; (80063b8 <_ZN6Pencil11drawEllipseEffff5Colorm+0x1f0>)
 80061fa:	f001 fe0f 	bl	8007e1c <__assert_func>
    assert(h >= 0);
 80061fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8006202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620a:	da05      	bge.n	8006218 <_ZN6Pencil11drawEllipseEffff5Colorm+0x50>
 800620c:	4b6b      	ldr	r3, [pc, #428]	; (80063bc <_ZN6Pencil11drawEllipseEffff5Colorm+0x1f4>)
 800620e:	4a69      	ldr	r2, [pc, #420]	; (80063b4 <_ZN6Pencil11drawEllipseEffff5Colorm+0x1ec>)
 8006210:	216d      	movs	r1, #109	; 0x6d
 8006212:	4869      	ldr	r0, [pc, #420]	; (80063b8 <_ZN6Pencil11drawEllipseEffff5Colorm+0x1f0>)
 8006214:	f001 fe02 	bl	8007e1c <__assert_func>
    assert(vertices > 2);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b02      	cmp	r3, #2
 800621c:	d805      	bhi.n	800622a <_ZN6Pencil11drawEllipseEffff5Colorm+0x62>
 800621e:	4b68      	ldr	r3, [pc, #416]	; (80063c0 <_ZN6Pencil11drawEllipseEffff5Colorm+0x1f8>)
 8006220:	4a64      	ldr	r2, [pc, #400]	; (80063b4 <_ZN6Pencil11drawEllipseEffff5Colorm+0x1ec>)
 8006222:	216e      	movs	r1, #110	; 0x6e
 8006224:	4864      	ldr	r0, [pc, #400]	; (80063b8 <_ZN6Pencil11drawEllipseEffff5Colorm+0x1f0>)
 8006226:	f001 fdf9 	bl	8007e1c <__assert_func>

    if(w > 0 and h > 0)
 800622a:	edd7 7a04 	vldr	s15, [r7, #16]
 800622e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006236:	dc00      	bgt.n	800623a <_ZN6Pencil11drawEllipseEffff5Colorm+0x72>

        float _x = x + xr*cosf(2*PI);
        float _y = y + yr*sinf(2*PI);
        this->drawLine(_x_prev, _y_prev, _x, _y, color);
    }
}
 8006238:	e0b0      	b.n	800639c <_ZN6Pencil11drawEllipseEffff5Colorm+0x1d4>
    if(w > 0 and h > 0)
 800623a:	edd7 7a03 	vldr	s15, [r7, #12]
 800623e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006246:	dc00      	bgt.n	800624a <_ZN6Pencil11drawEllipseEffff5Colorm+0x82>
}
 8006248:	e0a8      	b.n	800639c <_ZN6Pencil11drawEllipseEffff5Colorm+0x1d4>
        float step = 2*PI/(float)vertices;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	ee07 3a90 	vmov	s15, r3
 8006250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006254:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8006258:	ed9f 5b53 	vldr	d5, [pc, #332]	; 80063a8 <_ZN6Pencil11drawEllipseEffff5Colorm+0x1e0>
 800625c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006260:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006264:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        float xr = w/2; //x-axis radius
 8006268:	ed97 7a04 	vldr	s14, [r7, #16]
 800626c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006270:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006274:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        float yr = h/2; //y-axis radius
 8006278:	ed97 7a03 	vldr	s14, [r7, #12]
 800627c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006280:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006284:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        float _x_prev = x + xr;
 8006288:	ed97 7a06 	vldr	s14, [r7, #24]
 800628c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006294:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
        float _y_prev = y;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	66bb      	str	r3, [r7, #104]	; 0x68
        for(float theta = step; theta < 2*PI; theta += step)
 800629c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800629e:	667b      	str	r3, [r7, #100]	; 0x64
 80062a0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80062a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80062a8:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 80063a8 <_ZN6Pencil11drawEllipseEffff5Colorm+0x1e0>
 80062ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80062b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b4:	d545      	bpl.n	8006342 <_ZN6Pencil11drawEllipseEffff5Colorm+0x17a>
            float _x = x + xr*cosf(theta);
 80062b6:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 80062ba:	f000 fde5 	bl	8006e88 <cosf>
 80062be:	eeb0 7a40 	vmov.f32	s14, s0
 80062c2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80062c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ca:	ed97 7a06 	vldr	s14, [r7, #24]
 80062ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062d2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            float _y = y + yr*sinf(theta);
 80062d6:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 80062da:	f000 ff61 	bl	80071a0 <sinf>
 80062de:	eeb0 7a40 	vmov.f32	s14, s0
 80062e2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80062e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80062ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062f2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
            this->drawLine(_x_prev, _y_prev, _x, _y, color);
 80062f6:	f107 0320 	add.w	r3, r7, #32
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff fc53 	bl	8005ba8 <_ZN5ColorC1ERKS_>
 8006302:	f107 0320 	add.w	r3, r7, #32
 8006306:	4619      	mov	r1, r3
 8006308:	edd7 1a12 	vldr	s3, [r7, #72]	; 0x48
 800630c:	ed97 1a13 	vldr	s2, [r7, #76]	; 0x4c
 8006310:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 8006314:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8006318:	69f8      	ldr	r0, [r7, #28]
 800631a:	f7ff fd70 	bl	8005dfe <_ZN6Pencil8drawLineEffff5Color>
 800631e:	f107 0320 	add.w	r3, r7, #32
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff fcc8 	bl	8005cb8 <_ZN5ColorD1Ev>
            _x_prev = _x;
 8006328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800632a:	66fb      	str	r3, [r7, #108]	; 0x6c
            _y_prev = _y;
 800632c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800632e:	66bb      	str	r3, [r7, #104]	; 0x68
        for(float theta = step; theta < 2*PI; theta += step)
 8006330:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8006334:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800633c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
 8006340:	e7ae      	b.n	80062a0 <_ZN6Pencil11drawEllipseEffff5Colorm+0xd8>
        float _x = x + xr*cosf(2*PI);
 8006342:	ed97 7a06 	vldr	s14, [r7, #24]
 8006346:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800634a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800634e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        float _y = y + yr*sinf(2*PI);
 8006352:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006356:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80063c4 <_ZN6Pencil11drawEllipseEffff5Colorm+0x1fc>
 800635a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800635e:	ed97 7a05 	vldr	s14, [r7, #20]
 8006362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006366:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        this->drawLine(_x_prev, _y_prev, _x, _y, color);
 800636a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800636e:	68b9      	ldr	r1, [r7, #8]
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff fc19 	bl	8005ba8 <_ZN5ColorC1ERKS_>
 8006376:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800637a:	4619      	mov	r1, r3
 800637c:	edd7 1a14 	vldr	s3, [r7, #80]	; 0x50
 8006380:	ed97 1a15 	vldr	s2, [r7, #84]	; 0x54
 8006384:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 8006388:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 800638c:	69f8      	ldr	r0, [r7, #28]
 800638e:	f7ff fd36 	bl	8005dfe <_ZN6Pencil8drawLineEffff5Color>
 8006392:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff fc8e 	bl	8005cb8 <_ZN5ColorD1Ev>
}
 800639c:	bf00      	nop
 800639e:	3770      	adds	r7, #112	; 0x70
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	f3af 8000 	nop.w
 80063a8:	54442eea 	.word	0x54442eea
 80063ac:	401921fb 	.word	0x401921fb
 80063b0:	08008fb8 	.word	0x08008fb8
 80063b4:	08009078 	.word	0x08009078
 80063b8:	08009000 	.word	0x08009000
 80063bc:	08009014 	.word	0x08009014
 80063c0:	08009068 	.word	0x08009068
 80063c4:	343bbd2e 	.word	0x343bbd2e

080063c8 <_ZN7DisplayC1Ev>:

/**
 * @brief Abstract class to display devices.
 * 
 */
class Display
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <_ZN7DisplayC1Ev+0x1c>)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	08009534 	.word	0x08009534

080063e8 <_ZN6ST7735C1Ev>:

#define ST7735_COLOR565(r, g, b) (((r & 0x1F) << 11) | ((g & 0x3F) << 5) | ((b & 0x1F)))

#define CLIPVALUE(v, min, max) ((v < min) ? min : ((v > max) ? max : v))

ST7735::ST7735()
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff ffe8 	bl	80063c8 <_ZN7DisplayC1Ev>
 80063f8:	4a0b      	ldr	r2, [pc, #44]	; (8006428 <_ZN6ST7735C1Ev+0x40>)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	601a      	str	r2, [r3, #0]
{
	//1.8 inch display dimensions
	this->orientation = Orientation::V;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	605a      	str	r2, [r3, #4]
	this->v_width_dots = 128;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2280      	movs	r2, #128	; 0x80
 8006408:	609a      	str	r2, [r3, #8]
	this->v_height_dots = 160;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	22a0      	movs	r2, #160	; 0xa0
 800640e:	60da      	str	r2, [r3, #12]
	this->v_width_mm = 28.03;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a06      	ldr	r2, [pc, #24]	; (800642c <_ZN6ST7735C1Ev+0x44>)
 8006414:	611a      	str	r2, [r3, #16]
	this->v_height_mm = 35.04;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a05      	ldr	r2, [pc, #20]	; (8006430 <_ZN6ST7735C1Ev+0x48>)
 800641a:	615a      	str	r2, [r3, #20]
}
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	080094c4 	.word	0x080094c4
 800642c:	41e03d71 	.word	0x41e03d71
 8006430:	420c28f6 	.word	0x420c28f6

08006434 <_ZN6ST7735D1Ev>:

ST7735::~ST7735()
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	4a05      	ldr	r2, [pc, #20]	; (8006454 <_ZN6ST7735D1Ev+0x20>)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4618      	mov	r0, r3
 8006446:	f000 fcb1 	bl	8006dac <_ZN7DisplayD1Ev>
{
	// TODO Auto-generated destructor stub
}
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	080094c4 	.word	0x080094c4

08006458 <_ZN6ST773511sendCommandEh>:

void ST7735::sendCommand(uint8_t cmd)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	70fb      	strb	r3, [r7, #3]
	this->dcPinReset();
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3354      	adds	r3, #84	; 0x54
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	4798      	blx	r3
	this->sendByte(cmd);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3360      	adds	r3, #96	; 0x60
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	78fa      	ldrb	r2, [r7, #3]
 800647a:	4611      	mov	r1, r2
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	4798      	blx	r3
}
 8006480:	bf00      	nop
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <_ZN6ST77358sendDataEh>:

void ST7735::sendData(uint8_t data)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	70fb      	strb	r3, [r7, #3]
	this->dcPinSet();
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3350      	adds	r3, #80	; 0x50
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	4798      	blx	r3
	this->sendByte(data);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3360      	adds	r3, #96	; 0x60
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	78fa      	ldrb	r2, [r7, #3]
 80064aa:	4611      	mov	r1, r2
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
}
 80064b0:	bf00      	nop
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <_ZN6ST77354initEv>:

void ST7735::init()
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	this->initIO();
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3344      	adds	r3, #68	; 0x44
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	4798      	blx	r3
	this->reset();
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3328      	adds	r3, #40	; 0x28
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	4798      	blx	r3
}
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <_ZN6ST773512initCommand1Ev>:

void ST7735::initCommand1()
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
	this->sendCommand(ST7735_SWRESET); //1: Software reset
 80064e8:	2101      	movs	r1, #1
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff ffb4 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->delay(150);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3364      	adds	r3, #100	; 0x64
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2196      	movs	r1, #150	; 0x96
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
	this->sendCommand(ST7735_SLPOUT); //2: Out of sleep mode
 80064fe:	2111      	movs	r1, #17
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff ffa9 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->delay(500);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3364      	adds	r3, #100	; 0x64
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	21f4      	movs	r1, #244	; 0xf4
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	4798      	blx	r3
	this->sendCommand(ST7735_FRMCTR1); //3: Frame rate ctrl - normal mode
 8006514:	21b1      	movs	r1, #177	; 0xb1
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7ff ff9e 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0x01); //Rate = fosc/(1x2+40) * (LINE+2C+2D)
 800651c:	2101      	movs	r1, #1
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff ffb2 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x2C);
 8006524:	212c      	movs	r1, #44	; 0x2c
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7ff ffae 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 800652c:	212d      	movs	r1, #45	; 0x2d
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff ffaa 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_FRMCTR2); //4: Frame rate control - idle mode
 8006534:	21b2      	movs	r1, #178	; 0xb2
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff ff8e 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0x01); //Rate = fosc/(1x2+40) * (LINE+2C+2D)
 800653c:	2101      	movs	r1, #1
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff ffa2 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x2C);
 8006544:	212c      	movs	r1, #44	; 0x2c
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7ff ff9e 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 800654c:	212d      	movs	r1, #45	; 0x2d
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7ff ff9a 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_FRMCTR3); //5: Frame rate ctrl - partial mode
 8006554:	21b3      	movs	r1, #179	; 0xb3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff ff7e 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0x01); //Dot inversion mode
 800655c:	2101      	movs	r1, #1
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7ff ff92 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x2C);
 8006564:	212c      	movs	r1, #44	; 0x2c
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7ff ff8e 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 800656c:	212d      	movs	r1, #45	; 0x2d
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff ff8a 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x01); //Line inversion mode
 8006574:	2101      	movs	r1, #1
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff ff86 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x2C);
 800657c:	212c      	movs	r1, #44	; 0x2c
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff ff82 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 8006584:	212d      	movs	r1, #45	; 0x2d
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff ff7e 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_INVCTR); //6: Display inversion ctrl
 800658c:	21b4      	movs	r1, #180	; 0xb4
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff ff62 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0x07); //No inversion
 8006594:	2107      	movs	r1, #7
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7ff ff76 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_PWCTR1); //7: Power control
 800659c:	21c0      	movs	r1, #192	; 0xc0
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7ff ff5a 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0xA2);
 80065a4:	21a2      	movs	r1, #162	; 0xa2
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff ff6e 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x02); // -4.6V
 80065ac:	2102      	movs	r1, #2
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7ff ff6a 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x84); // AUTO mode
 80065b4:	2184      	movs	r1, #132	; 0x84
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff ff66 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_PWCTR2); // 8: Power control
 80065bc:	21c1      	movs	r1, #193	; 0xc1
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff ff4a 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0xC5); // VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 80065c4:	21c5      	movs	r1, #197	; 0xc5
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff ff5e 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_PWCTR3); // 9: Power control
 80065cc:	21c2      	movs	r1, #194	; 0xc2
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7ff ff42 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0x0A); // Opamp current small
 80065d4:	210a      	movs	r1, #10
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff ff56 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x00); // Boost frequency
 80065dc:	2100      	movs	r1, #0
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff ff52 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_PWCTR4); // 10: Power control
 80065e4:	21c3      	movs	r1, #195	; 0xc3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff ff36 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0x8A); // BCLK/2, Opamp current small & Medium low
 80065ec:	218a      	movs	r1, #138	; 0x8a
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff ff4a 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x2A);
 80065f4:	212a      	movs	r1, #42	; 0x2a
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff ff46 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_PWCTR5); // 11: Power control
 80065fc:	21c4      	movs	r1, #196	; 0xc4
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff ff2a 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0x8A);
 8006604:	218a      	movs	r1, #138	; 0x8a
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff ff3e 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0xEE);
 800660c:	21ee      	movs	r1, #238	; 0xee
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7ff ff3a 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_VMCTR1); // 12: Power control
 8006614:	21c5      	movs	r1, #197	; 0xc5
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7ff ff1e 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0x0E);
 800661c:	210e      	movs	r1, #14
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff ff32 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_INVOFF); // 13: Don't invert display
 8006624:	2120      	movs	r1, #32
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff ff16 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendCommand(ST7735_MADCTL); // 14: Memory access control (directions)
 800662c:	2136      	movs	r1, #54	; 0x36
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff ff12 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(ST7735_ROTATION); // row addr/col addr, bottom to top refresh
 8006634:	21c0      	movs	r1, #192	; 0xc0
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7ff ff26 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_COLMOD); // 15: set color mode
 800663c:	213a      	movs	r1, #58	; 0x3a
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7ff ff0a 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0x05); // 16-bit color
 8006644:	2105      	movs	r1, #5
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff ff1e 	bl	8006488 <_ZN6ST77358sendDataEh>
}
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <_ZN6ST773512initCommand2Ev>:

void ST7735::initCommand2()
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
	this->sendCommand(ST7735_CASET); // 1: Column addr set
 800665c:	212a      	movs	r1, #42	; 0x2a
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff fefa 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0x00); // XSTART = 0
 8006664:	2100      	movs	r1, #0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7ff ff0e 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 800666c:	2100      	movs	r1, #0
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7ff ff0a 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x00); // XEND = 127
 8006674:	2100      	movs	r1, #0
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7ff ff06 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x7F);
 800667c:	217f      	movs	r1, #127	; 0x7f
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff ff02 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_RASET); // 2: Row addr set
 8006684:	212b      	movs	r1, #43	; 0x2b
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff fee6 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0x00); // XSTART = 0
 800668c:	2100      	movs	r1, #0
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff fefa 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 8006694:	2100      	movs	r1, #0
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff fef6 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x00); // XEND = 127
 800669c:	2100      	movs	r1, #0
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff fef2 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x7F);
 80066a4:	217f      	movs	r1, #127	; 0x7f
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff feee 	bl	8006488 <_ZN6ST77358sendDataEh>
}
 80066ac:	bf00      	nop
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <_ZN6ST773512initCommand3Ev>:

void ST7735::initCommand3()
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	this->sendCommand(ST7735_GMCTRP1); // 1: Magical unicorn dust
 80066bc:	21e0      	movs	r1, #224	; 0xe0
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff feca 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0x02);
 80066c4:	2102      	movs	r1, #2
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7ff fede 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x1C);
 80066cc:	211c      	movs	r1, #28
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff feda 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x07);
 80066d4:	2107      	movs	r1, #7
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff fed6 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x12);
 80066dc:	2112      	movs	r1, #18
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff fed2 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x37);
 80066e4:	2137      	movs	r1, #55	; 0x37
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff fece 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x32);
 80066ec:	2132      	movs	r1, #50	; 0x32
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff feca 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x29);
 80066f4:	2129      	movs	r1, #41	; 0x29
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff fec6 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 80066fc:	212d      	movs	r1, #45	; 0x2d
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7ff fec2 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x29);
 8006704:	2129      	movs	r1, #41	; 0x29
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff febe 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x25);
 800670c:	2125      	movs	r1, #37	; 0x25
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7ff feba 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x2B);
 8006714:	212b      	movs	r1, #43	; 0x2b
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7ff feb6 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x39);
 800671c:	2139      	movs	r1, #57	; 0x39
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7ff feb2 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 8006724:	2100      	movs	r1, #0
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff feae 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x01);
 800672c:	2101      	movs	r1, #1
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff feaa 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x03);
 8006734:	2103      	movs	r1, #3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff fea6 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x10);
 800673c:	2110      	movs	r1, #16
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7ff fea2 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_GMCTRN1); // 2: Sparkles and rainbows
 8006744:	21e1      	movs	r1, #225	; 0xe1
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff fe86 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0x03);
 800674c:	2103      	movs	r1, #3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff fe9a 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x1D);
 8006754:	211d      	movs	r1, #29
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff fe96 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x07);
 800675c:	2107      	movs	r1, #7
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff fe92 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x06);
 8006764:	2106      	movs	r1, #6
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7ff fe8e 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x2E);
 800676c:	212e      	movs	r1, #46	; 0x2e
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff fe8a 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x2C);
 8006774:	212c      	movs	r1, #44	; 0x2c
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff fe86 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x29);
 800677c:	2129      	movs	r1, #41	; 0x29
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff fe82 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 8006784:	212d      	movs	r1, #45	; 0x2d
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff fe7e 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x2E);
 800678c:	212e      	movs	r1, #46	; 0x2e
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff fe7a 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x2E);
 8006794:	212e      	movs	r1, #46	; 0x2e
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff fe76 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x37);
 800679c:	2137      	movs	r1, #55	; 0x37
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7ff fe72 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x3F);
 80067a4:	213f      	movs	r1, #63	; 0x3f
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff fe6e 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 80067ac:	2100      	movs	r1, #0
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7ff fe6a 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 80067b4:	2100      	movs	r1, #0
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff fe66 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x02);
 80067bc:	2102      	movs	r1, #2
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7ff fe62 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x10);
 80067c4:	2110      	movs	r1, #16
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7ff fe5e 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_NORON);
 80067cc:	2113      	movs	r1, #19
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7ff fe42 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->delay(10);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3364      	adds	r3, #100	; 0x64
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	210a      	movs	r1, #10
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
	this->sendCommand(ST7735_DISPON);
 80067e2:	2129      	movs	r1, #41	; 0x29
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff fe37 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->delay(100);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3364      	adds	r3, #100	; 0x64
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2164      	movs	r1, #100	; 0x64
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	4798      	blx	r3
}
 80067f8:	bf00      	nop
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <_ZN6ST77357getNameEv>:

const char *ST7735::getName()
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
	return "ST7735";
 8006808:	4b03      	ldr	r3, [pc, #12]	; (8006818 <_ZN6ST77357getNameEv+0x18>)
}
 800680a:	4618      	mov	r0, r3
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	08009410 	.word	0x08009410

0800681c <_ZN6ST77358getWidthEv>:

uint32_t ST7735::getWidth()
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	if(this->orientation == Orientation::V)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d102      	bne.n	8006832 <_ZN6ST77358getWidthEv+0x16>
		return this->v_width_dots;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	e001      	b.n	8006836 <_ZN6ST77358getWidthEv+0x1a>
	else
		return this->v_height_dots;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
}
 8006836:	4618      	mov	r0, r3
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <_ZN6ST77359getHeightEv>:

uint32_t ST7735::getHeight()
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
	if(this->orientation == Orientation::V)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d102      	bne.n	8006858 <_ZN6ST77359getHeightEv+0x16>
		return this->v_height_dots;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	e001      	b.n	800685c <_ZN6ST77359getHeightEv+0x1a>
	else
		return this->v_width_dots;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
}
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <_ZN6ST77358getDPMMXEv>:

float ST7735::getDPMMX()
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
	if(this->orientation == Orientation::V)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10b      	bne.n	8006890 <_ZN6ST77358getDPMMXEv+0x28>
		return (float)this->v_width_dots/this->v_width_mm;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	ee07 3a90 	vmov	s15, r3
 8006880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	ed93 7a04 	vldr	s14, [r3, #16]
 800688a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800688e:	e00a      	b.n	80068a6 <_ZN6ST77358getDPMMXEv+0x3e>
	else
		return (float)this->v_height_dots/this->v_height_mm;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	ee07 3a90 	vmov	s15, r3
 8006898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	ed93 7a05 	vldr	s14, [r3, #20]
 80068a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 80068a6:	eeb0 0a67 	vmov.f32	s0, s15
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <_ZN6ST77358getDPMMYEv>:

float ST7735::getDPMMY()
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
	if(this->orientation == Orientation::V)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10b      	bne.n	80068dc <_ZN6ST77358getDPMMYEv+0x28>
		return (float)this->v_height_dots/this->v_height_mm;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	ee07 3a90 	vmov	s15, r3
 80068cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	ed93 7a05 	vldr	s14, [r3, #20]
 80068d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068da:	e00a      	b.n	80068f2 <_ZN6ST77358getDPMMYEv+0x3e>
	else
		return (float)this->v_width_dots/this->v_width_mm;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	ee07 3a90 	vmov	s15, r3
 80068e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	ed93 7a04 	vldr	s14, [r3, #16]
 80068ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 80068f2:	eeb0 0a67 	vmov.f32	s0, s15
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <_ZN6ST773513setBrightnessEf>:

void ST7735::setBrightness(float v)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	ed87 0a00 	vstr	s0, [r7]
	//TODO
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <_ZN6ST773513getBrightnessEv>:

float ST7735::getBrightness()
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
	//TODO
	return 1;
 8006920:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006924:	ee07 3a90 	vmov	s15, r3
}
 8006928:	eeb0 0a67 	vmov.f32	s0, s15
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <_ZN6ST773514setOrientationE11Orientation>:

void ST7735::setOrientation(Orientation orientation)
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]
	this->orientation = orientation;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	605a      	str	r2, [r3, #4]
}
 8006946:	bf00      	nop
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <_ZN6ST773514getOrientationEv>:

Orientation ST7735::getOrientation()
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
	return this->orientation;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
}
 800695e:	4618      	mov	r0, r3
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <_ZN6ST77355resetEv>:

void ST7735::reset()
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
	//select
	this->csPinReset();
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	335c      	adds	r3, #92	; 0x5c
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	4798      	blx	r3

	//reset
	this->rstPinReset();
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	334c      	adds	r3, #76	; 0x4c
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	4798      	blx	r3
	this->delay(7);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3364      	adds	r3, #100	; 0x64
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2107      	movs	r1, #7
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	4798      	blx	r3
	this->rstPinSet();
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3348      	adds	r3, #72	; 0x48
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	4798      	blx	r3

	//configure
	this->initCommand1();
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff fd9b 	bl	80064e0 <_ZN6ST773512initCommand1Ev>
	this->initCommand2();
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff fe52 	bl	8006654 <_ZN6ST773512initCommand2Ev>
	this->initCommand3();
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7ff fe7f 	bl	80066b4 <_ZN6ST773512initCommand3Ev>

	//unselect
	this->csPinSet();
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3358      	adds	r3, #88	; 0x58
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	4798      	blx	r3
}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <_ZN6ST77356selectEv>:

void ST7735::select()
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b082      	sub	sp, #8
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
	this->selected = true;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	761a      	strb	r2, [r3, #24]
	this->csPinReset();
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	335c      	adds	r3, #92	; 0x5c
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	4798      	blx	r3
}
 80069e4:	bf00      	nop
 80069e6:	3708      	adds	r7, #8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <_ZN6ST77358unselectEv>:

void ST7735::unselect()
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
	this->selected = false;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	761a      	strb	r2, [r3, #24]
	this->csPinSet();
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3358      	adds	r3, #88	; 0x58
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	4798      	blx	r3
}
 8006a06:	bf00      	nop
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <_ZN6ST773516setAddressWindowEhhhh>:

void ST7735::setAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b082      	sub	sp, #8
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	4608      	mov	r0, r1
 8006a18:	4611      	mov	r1, r2
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	70fb      	strb	r3, [r7, #3]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70bb      	strb	r3, [r7, #2]
 8006a24:	4613      	mov	r3, r2
 8006a26:	707b      	strb	r3, [r7, #1]
    this->sendCommand(ST7735_CASET); // Column addr set
 8006a28:	212a      	movs	r1, #42	; 0x2a
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7ff fd14 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0x00);            // XS15 ~ XS8
 8006a30:	2100      	movs	r1, #0
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff fd28 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(x0+ST7735_XSTART);     // XSTART       XS7 ~ XS0
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff fd23 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);            // XE15 ~ XE8
 8006a42:	2100      	movs	r1, #0
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff fd1f 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(x1+ST7735_XSTART);     // XEND         XE7 ~ XE0
 8006a4a:	787b      	ldrb	r3, [r7, #1]
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7ff fd1a 	bl	8006488 <_ZN6ST77358sendDataEh>

	this->sendCommand(ST7735_RASET); // Row addr set
 8006a54:	212b      	movs	r1, #43	; 0x2b
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff fcfe 	bl	8006458 <_ZN6ST773511sendCommandEh>
	this->sendData(0x00);
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff fd12 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(y0+ST7735_YSTART);     // YSTART
 8006a64:	78bb      	ldrb	r3, [r7, #2]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff fd0d 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 8006a6e:	2100      	movs	r1, #0
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff fd09 	bl	8006488 <_ZN6ST77358sendDataEh>
	this->sendData(y1+ST7735_YSTART);     // YEND
 8006a76:	7c3b      	ldrb	r3, [r7, #16]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff fd04 	bl	8006488 <_ZN6ST77358sendDataEh>

	this->sendCommand(ST7735_RAMWR);
 8006a80:	212c      	movs	r1, #44	; 0x2c
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7ff fce8 	bl	8006458 <_ZN6ST773511sendCommandEh>
}
 8006a88:	bf00      	nop
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <_ZN6ST773512convertColorEfff>:

uint16_t ST7735::convertColor(float r, float g, float b)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	ed87 0a03 	vstr	s0, [r7, #12]
 8006a9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8006a9e:	ed87 1a01 	vstr	s2, [r7, #4]
	r = CLIPVALUE(r, 0, 1);
 8006aa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8006aa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aae:	d502      	bpl.n	8006ab6 <_ZN6ST773512convertColorEfff+0x26>
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	e00c      	b.n	8006ad0 <_ZN6ST773512convertColorEfff+0x40>
 8006ab6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006aba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac6:	dd02      	ble.n	8006ace <_ZN6ST773512convertColorEfff+0x3e>
 8006ac8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006acc:	e000      	b.n	8006ad0 <_ZN6ST773512convertColorEfff+0x40>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	60fb      	str	r3, [r7, #12]
	g = CLIPVALUE(g, 0, 1);
 8006ad2:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ad6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ade:	d502      	bpl.n	8006ae6 <_ZN6ST773512convertColorEfff+0x56>
 8006ae0:	f04f 0300 	mov.w	r3, #0
 8006ae4:	e00c      	b.n	8006b00 <_ZN6ST773512convertColorEfff+0x70>
 8006ae6:	edd7 7a02 	vldr	s15, [r7, #8]
 8006aea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af6:	dd02      	ble.n	8006afe <_ZN6ST773512convertColorEfff+0x6e>
 8006af8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006afc:	e000      	b.n	8006b00 <_ZN6ST773512convertColorEfff+0x70>
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	60bb      	str	r3, [r7, #8]
	b = CLIPVALUE(b, 0, 1);
 8006b02:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b0e:	d502      	bpl.n	8006b16 <_ZN6ST773512convertColorEfff+0x86>
 8006b10:	f04f 0300 	mov.w	r3, #0
 8006b14:	e00c      	b.n	8006b30 <_ZN6ST773512convertColorEfff+0xa0>
 8006b16:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b26:	dd02      	ble.n	8006b2e <_ZN6ST773512convertColorEfff+0x9e>
 8006b28:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006b2c:	e000      	b.n	8006b30 <_ZN6ST773512convertColorEfff+0xa0>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	607b      	str	r3, [r7, #4]
	uint8_t R = 0x1F * r;
 8006b32:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b36:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8006b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b42:	edc7 7a00 	vstr	s15, [r7]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	75fb      	strb	r3, [r7, #23]
	uint8_t G = 0x3F * g;
 8006b4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8006b4e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006bb0 <_ZN6ST773512convertColorEfff+0x120>
 8006b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b5a:	edc7 7a00 	vstr	s15, [r7]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	75bb      	strb	r3, [r7, #22]
	uint8_t B = 0x1F * b;
 8006b62:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b66:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8006b6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b72:	edc7 7a00 	vstr	s15, [r7]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	757b      	strb	r3, [r7, #21]
	uint16_t color = ST7735_COLOR565(R,G,B);
 8006b7a:	7dfb      	ldrb	r3, [r7, #23]
 8006b7c:	02db      	lsls	r3, r3, #11
 8006b7e:	b21a      	sxth	r2, r3
 8006b80:	7dbb      	ldrb	r3, [r7, #22]
 8006b82:	015b      	lsls	r3, r3, #5
 8006b84:	b21b      	sxth	r3, r3
 8006b86:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8006b8a:	b21b      	sxth	r3, r3
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	b21a      	sxth	r2, r3
 8006b90:	7d7b      	ldrb	r3, [r7, #21]
 8006b92:	b21b      	sxth	r3, r3
 8006b94:	f003 031f 	and.w	r3, r3, #31
 8006b98:	b21b      	sxth	r3, r3
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	b21b      	sxth	r3, r3
 8006b9e:	827b      	strh	r3, [r7, #18]
	return color;
 8006ba0:	8a7b      	ldrh	r3, [r7, #18]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	427c0000 	.word	0x427c0000

08006bb4 <_ZN6ST77359drawPixelEiifff>:


bool ST7735::drawPixel(int x, int y, float r, float g, float b)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08a      	sub	sp, #40	; 0x28
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	6178      	str	r0, [r7, #20]
 8006bbc:	6139      	str	r1, [r7, #16]
 8006bbe:	60fa      	str	r2, [r7, #12]
 8006bc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8006bc4:	edc7 0a01 	vstr	s1, [r7, #4]
 8006bc8:	ed87 1a00 	vstr	s2, [r7]
    if(this->selected)
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	7e1b      	ldrb	r3, [r3, #24]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d04a      	beq.n	8006c6a <_ZN6ST77359drawPixelEiifff+0xb6>
    {
    	if(x >= this->getWidth() or y >= this->getHeight() or x < 0 or y < 0)
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3304      	adds	r3, #4
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6978      	ldr	r0, [r7, #20]
 8006bde:	4798      	blx	r3
 8006be0:	4602      	mov	r2, r0
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d90f      	bls.n	8006c08 <_ZN6ST77359drawPixelEiifff+0x54>
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3308      	adds	r3, #8
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6978      	ldr	r0, [r7, #20]
 8006bf2:	4798      	blx	r3
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d905      	bls.n	8006c08 <_ZN6ST77359drawPixelEiifff+0x54>
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	db02      	blt.n	8006c08 <_ZN6ST77359drawPixelEiifff+0x54>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	da01      	bge.n	8006c0c <_ZN6ST77359drawPixelEiifff+0x58>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <_ZN6ST77359drawPixelEiifff+0x5a>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <_ZN6ST77359drawPixelEiifff+0x62>
    		return false;
 8006c12:	2300      	movs	r3, #0
 8006c14:	e02a      	b.n	8006c6c <_ZN6ST77359drawPixelEiifff+0xb8>

    	uint16_t color = ST7735::convertColor(r, g, b);
 8006c16:	ed97 1a00 	vldr	s2, [r7]
 8006c1a:	edd7 0a01 	vldr	s1, [r7, #4]
 8006c1e:	ed97 0a02 	vldr	s0, [r7, #8]
 8006c22:	f7ff ff35 	bl	8006a90 <_ZN6ST773512convertColorEfff>
 8006c26:	4603      	mov	r3, r0
 8006c28:	83fb      	strh	r3, [r7, #30]
    	this->setAddressWindow(x, y, x+1, y+1);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	b2d9      	uxtb	r1, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	3301      	adds	r3, #1
 8006c38:	b2d8      	uxtb	r0, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	3301      	adds	r3, #1
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	4603      	mov	r3, r0
 8006c46:	6978      	ldr	r0, [r7, #20]
 8006c48:	f7ff fee1 	bl	8006a0e <_ZN6ST773516setAddressWindowEhhhh>
    	uint8_t data[2];
    	this->sendData(color >> 8);
 8006c4c:	8bfb      	ldrh	r3, [r7, #30]
 8006c4e:	121b      	asrs	r3, r3, #8
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	4619      	mov	r1, r3
 8006c54:	6978      	ldr	r0, [r7, #20]
 8006c56:	f7ff fc17 	bl	8006488 <_ZN6ST77358sendDataEh>
    	this->sendData(color & 0xFF);
 8006c5a:	8bfb      	ldrh	r3, [r7, #30]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6978      	ldr	r0, [r7, #20]
 8006c62:	f7ff fc11 	bl	8006488 <_ZN6ST77358sendDataEh>
    	return true;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <_ZN6ST77359drawPixelEiifff+0xb8>
    }
    else
    {
    	return false;
 8006c6a:	2300      	movs	r3, #0
    }
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3720      	adds	r7, #32
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <_ZN6ST77358drawAreaEiiiifff>:

bool ST7735::drawArea(int x1, int y1, int x2, int y2, float r, float g, float b)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b090      	sub	sp, #64	; 0x40
 8006c78:	af02      	add	r7, sp, #8
 8006c7a:	61f8      	str	r0, [r7, #28]
 8006c7c:	61b9      	str	r1, [r7, #24]
 8006c7e:	617a      	str	r2, [r7, #20]
 8006c80:	613b      	str	r3, [r7, #16]
 8006c82:	ed87 0a03 	vstr	s0, [r7, #12]
 8006c86:	edc7 0a02 	vstr	s1, [r7, #8]
 8006c8a:	ed87 1a01 	vstr	s2, [r7, #4]
    if(this->selected)
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	7e1b      	ldrb	r3, [r3, #24]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 8084 	beq.w	8006da0 <_ZN6ST77358drawAreaEiiiifff+0x12c>
    {
    	uint32_t w = this->getWidth();
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	69f8      	ldr	r0, [r7, #28]
 8006ca2:	4798      	blx	r3
 8006ca4:	62f8      	str	r0, [r7, #44]	; 0x2c
    	uint32_t h = this->getHeight();
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3308      	adds	r3, #8
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69f8      	ldr	r0, [r7, #28]
 8006cb0:	4798      	blx	r3
 8006cb2:	62b8      	str	r0, [r7, #40]	; 0x28

    	if(x1 >= w or y1 >= h or x1 >= x2 or y1 >= y2)
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d90b      	bls.n	8006cd4 <_ZN6ST77358drawAreaEiiiifff+0x60>
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d907      	bls.n	8006cd4 <_ZN6ST77358drawAreaEiiiifff+0x60>
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	da03      	bge.n	8006cd4 <_ZN6ST77358drawAreaEiiiifff+0x60>
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	db01      	blt.n	8006cd8 <_ZN6ST77358drawAreaEiiiifff+0x64>
    		return false;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	e064      	b.n	8006da2 <_ZN6ST77358drawAreaEiiiifff+0x12e>

    	x1 = (x1 < 0) ? 0 : x1;
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006cde:	61bb      	str	r3, [r7, #24]
    	y1 = (y1 < 0) ? 0 : y1;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ce6:	617b      	str	r3, [r7, #20]
    	x2 = CLIPVALUE(x2, x1, w);
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	db07      	blt.n	8006d00 <_ZN6ST77358drawAreaEiiiifff+0x8c>
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d201      	bcs.n	8006cfc <_ZN6ST77358drawAreaEiiiifff+0x88>
 8006cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfa:	e002      	b.n	8006d02 <_ZN6ST77358drawAreaEiiiifff+0x8e>
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	e000      	b.n	8006d02 <_ZN6ST77358drawAreaEiiiifff+0x8e>
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	613b      	str	r3, [r7, #16]
    	y2 = CLIPVALUE(y2, y1, h);
 8006d04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	db07      	blt.n	8006d1c <_ZN6ST77358drawAreaEiiiifff+0xa8>
 8006d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d201      	bcs.n	8006d18 <_ZN6ST77358drawAreaEiiiifff+0xa4>
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	e002      	b.n	8006d1e <_ZN6ST77358drawAreaEiiiifff+0xaa>
 8006d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d1a:	e000      	b.n	8006d1e <_ZN6ST77358drawAreaEiiiifff+0xaa>
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	643b      	str	r3, [r7, #64]	; 0x40

    	uint16_t color = ST7735::convertColor(r, g, b);
 8006d20:	ed97 1a01 	vldr	s2, [r7, #4]
 8006d24:	edd7 0a02 	vldr	s1, [r7, #8]
 8006d28:	ed97 0a03 	vldr	s0, [r7, #12]
 8006d2c:	f7ff feb0 	bl	8006a90 <_ZN6ST773512convertColorEfff>
 8006d30:	4603      	mov	r3, r0
 8006d32:	84fb      	strh	r3, [r7, #38]	; 0x26
    	this->setAddressWindow(x1, y1, x2, y2);
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	b2d9      	uxtb	r1, r3
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	b2d8      	uxtb	r0, r3
 8006d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	4603      	mov	r3, r0
 8006d48:	69f8      	ldr	r0, [r7, #28]
 8006d4a:	f7ff fe60 	bl	8006a0e <_ZN6ST773516setAddressWindowEhhhh>
    	this->dcPinSet();
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3350      	adds	r3, #80	; 0x50
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69f8      	ldr	r0, [r7, #28]
 8006d58:	4798      	blx	r3

    	for(int i = x1; i <= x2; i += 1 )
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	dc1a      	bgt.n	8006d9c <_ZN6ST77358drawAreaEiiiifff+0x128>
    	{
    		for(int j = y1; j <= y2; j += 1)
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	633b      	str	r3, [r7, #48]	; 0x30
 8006d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	dc10      	bgt.n	8006d94 <_ZN6ST77358drawAreaEiiiifff+0x120>
    		{
    			this->sendData(color >> 8);
 8006d72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d74:	121b      	asrs	r3, r3, #8
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	4619      	mov	r1, r3
 8006d7a:	69f8      	ldr	r0, [r7, #28]
 8006d7c:	f7ff fb84 	bl	8006488 <_ZN6ST77358sendDataEh>
    			this->sendData(color & 0xFF);
 8006d80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	4619      	mov	r1, r3
 8006d86:	69f8      	ldr	r0, [r7, #28]
 8006d88:	f7ff fb7e 	bl	8006488 <_ZN6ST77358sendDataEh>
    		for(int j = y1; j <= y2; j += 1)
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	3301      	adds	r3, #1
 8006d90:	633b      	str	r3, [r7, #48]	; 0x30
 8006d92:	e7ea      	b.n	8006d6a <_ZN6ST77358drawAreaEiiiifff+0xf6>
    	for(int i = x1; i <= x2; i += 1 )
 8006d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d96:	3301      	adds	r3, #1
 8006d98:	637b      	str	r3, [r7, #52]	; 0x34
 8006d9a:	e7e0      	b.n	8006d5e <_ZN6ST77358drawAreaEiiiifff+0xea>
    		}
    	}

    	return true;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e000      	b.n	8006da2 <_ZN6ST77358drawAreaEiiiifff+0x12e>
    }
    else
    {
    	return false;
 8006da0:	2300      	movs	r3, #0
    }
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3738      	adds	r7, #56	; 0x38
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <_ZN7DisplayD1Ev>:
 *      Author: Filipe Chagas
 */

#include "display.hpp"

Display::~Display()
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	4a04      	ldr	r2, [pc, #16]	; (8006dc8 <_ZN7DisplayD1Ev+0x1c>)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	08009534 	.word	0x08009534

08006dcc <_ZdlPvj>:
 8006dcc:	f000 b814 	b.w	8006df8 <_ZdlPv>

08006dd0 <_Znwj>:
 8006dd0:	2801      	cmp	r0, #1
 8006dd2:	bf38      	it	cc
 8006dd4:	2001      	movcc	r0, #1
 8006dd6:	b510      	push	{r4, lr}
 8006dd8:	4604      	mov	r4, r0
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f001 f878 	bl	8007ed0 <malloc>
 8006de0:	b930      	cbnz	r0, 8006df0 <_Znwj+0x20>
 8006de2:	f000 f81d 	bl	8006e20 <_ZSt15get_new_handlerv>
 8006de6:	b908      	cbnz	r0, 8006dec <_Znwj+0x1c>
 8006de8:	f001 f810 	bl	8007e0c <abort>
 8006dec:	4780      	blx	r0
 8006dee:	e7f4      	b.n	8006dda <_Znwj+0xa>
 8006df0:	bd10      	pop	{r4, pc}

08006df2 <__cxa_pure_virtual>:
 8006df2:	b508      	push	{r3, lr}
 8006df4:	f000 f80e 	bl	8006e14 <_ZSt9terminatev>

08006df8 <_ZdlPv>:
 8006df8:	f001 b872 	b.w	8007ee0 <free>

08006dfc <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006dfc:	b508      	push	{r3, lr}
 8006dfe:	4780      	blx	r0
 8006e00:	f001 f804 	bl	8007e0c <abort>

08006e04 <_ZSt13get_terminatev>:
 8006e04:	4b02      	ldr	r3, [pc, #8]	; (8006e10 <_ZSt13get_terminatev+0xc>)
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	f3bf 8f5b 	dmb	ish
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	20000010 	.word	0x20000010

08006e14 <_ZSt9terminatev>:
 8006e14:	b508      	push	{r3, lr}
 8006e16:	f7ff fff5 	bl	8006e04 <_ZSt13get_terminatev>
 8006e1a:	f7ff ffef 	bl	8006dfc <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08006e20 <_ZSt15get_new_handlerv>:
 8006e20:	4b02      	ldr	r3, [pc, #8]	; (8006e2c <_ZSt15get_new_handlerv+0xc>)
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	f3bf 8f5b 	dmb	ish
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	20000098 	.word	0x20000098

08006e30 <sinf_poly>:
 8006e30:	07cb      	lsls	r3, r1, #31
 8006e32:	d412      	bmi.n	8006e5a <sinf_poly+0x2a>
 8006e34:	ee21 6b00 	vmul.f64	d6, d1, d0
 8006e38:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 8006e3c:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8006e40:	eea5 7b01 	vfma.f64	d7, d5, d1
 8006e44:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 8006e48:	ee21 1b06 	vmul.f64	d1, d1, d6
 8006e4c:	eea5 0b06 	vfma.f64	d0, d5, d6
 8006e50:	eea7 0b01 	vfma.f64	d0, d7, d1
 8006e54:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006e58:	4770      	bx	lr
 8006e5a:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 8006e5e:	ee21 6b01 	vmul.f64	d6, d1, d1
 8006e62:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8006e66:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8006e6a:	eea1 7b05 	vfma.f64	d7, d1, d5
 8006e6e:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 8006e72:	eea1 0b05 	vfma.f64	d0, d1, d5
 8006e76:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 8006e7a:	ee21 1b06 	vmul.f64	d1, d1, d6
 8006e7e:	eea6 0b05 	vfma.f64	d0, d6, d5
 8006e82:	e7e5      	b.n	8006e50 <sinf_poly+0x20>
 8006e84:	0000      	movs	r0, r0
	...

08006e88 <cosf>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	ee10 4a10 	vmov	r4, s0
 8006e8e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8006e92:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8006e96:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8006e9a:	d20c      	bcs.n	8006eb6 <cosf+0x2e>
 8006e9c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8006ea0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8006ea4:	d378      	bcc.n	8006f98 <cosf+0x110>
 8006ea6:	eeb0 0b46 	vmov.f64	d0, d6
 8006eaa:	483f      	ldr	r0, [pc, #252]	; (8006fa8 <cosf+0x120>)
 8006eac:	2101      	movs	r1, #1
 8006eae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006eb2:	f7ff bfbd 	b.w	8006e30 <sinf_poly>
 8006eb6:	f240 422e 	movw	r2, #1070	; 0x42e
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d826      	bhi.n	8006f0c <cosf+0x84>
 8006ebe:	4b3a      	ldr	r3, [pc, #232]	; (8006fa8 <cosf+0x120>)
 8006ec0:	ed93 7b08 	vldr	d7, [r3, #32]
 8006ec4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006ec8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006ecc:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8006ed0:	ee17 1a90 	vmov	r1, s15
 8006ed4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8006ed8:	1609      	asrs	r1, r1, #24
 8006eda:	ee07 1a90 	vmov	s15, r1
 8006ede:	f001 0203 	and.w	r2, r1, #3
 8006ee2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006ee6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006eea:	ed92 0b00 	vldr	d0, [r2]
 8006eee:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006ef2:	f011 0f02 	tst.w	r1, #2
 8006ef6:	eea5 6b47 	vfms.f64	d6, d5, d7
 8006efa:	f081 0101 	eor.w	r1, r1, #1
 8006efe:	bf08      	it	eq
 8006f00:	4618      	moveq	r0, r3
 8006f02:	ee26 1b06 	vmul.f64	d1, d6, d6
 8006f06:	ee20 0b06 	vmul.f64	d0, d0, d6
 8006f0a:	e7d0      	b.n	8006eae <cosf+0x26>
 8006f0c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8006f10:	d23e      	bcs.n	8006f90 <cosf+0x108>
 8006f12:	4b26      	ldr	r3, [pc, #152]	; (8006fac <cosf+0x124>)
 8006f14:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8006f18:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8006f1c:	f3c4 0116 	ubfx	r1, r4, #0, #23
 8006f20:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8006f24:	6a06      	ldr	r6, [r0, #32]
 8006f26:	6900      	ldr	r0, [r0, #16]
 8006f28:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006f2c:	40a9      	lsls	r1, r5
 8006f2e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8006f32:	fba1 6706 	umull	r6, r7, r1, r6
 8006f36:	fb05 f301 	mul.w	r3, r5, r1
 8006f3a:	463a      	mov	r2, r7
 8006f3c:	fbe0 2301 	umlal	r2, r3, r0, r1
 8006f40:	1c11      	adds	r1, r2, #0
 8006f42:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 8006f46:	2000      	movs	r0, #0
 8006f48:	1a10      	subs	r0, r2, r0
 8006f4a:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 8006f4e:	eb63 0101 	sbc.w	r1, r3, r1
 8006f52:	f7f9 fba3 	bl	800069c <__aeabi_l2d>
 8006f56:	0fb5      	lsrs	r5, r6, #30
 8006f58:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <cosf+0x120>)
 8006f5a:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8006f5e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8006fa0 <cosf+0x118>
 8006f62:	ec41 0b17 	vmov	d7, r0, r1
 8006f66:	f004 0203 	and.w	r2, r4, #3
 8006f6a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006f6e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8006f72:	ed92 7b00 	vldr	d7, [r2]
 8006f76:	ee20 1b00 	vmul.f64	d1, d0, d0
 8006f7a:	f014 0f02 	tst.w	r4, #2
 8006f7e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8006f82:	f085 0101 	eor.w	r1, r5, #1
 8006f86:	bf08      	it	eq
 8006f88:	4618      	moveq	r0, r3
 8006f8a:	ee27 0b00 	vmul.f64	d0, d7, d0
 8006f8e:	e78e      	b.n	8006eae <cosf+0x26>
 8006f90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f94:	f000 b817 	b.w	8006fc6 <__math_invalidf>
 8006f98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	54442d18 	.word	0x54442d18
 8006fa4:	3c1921fb 	.word	0x3c1921fb
 8006fa8:	080095d8 	.word	0x080095d8
 8006fac:	08009578 	.word	0x08009578

08006fb0 <with_errnof>:
 8006fb0:	b513      	push	{r0, r1, r4, lr}
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006fb8:	f000 ff4e 	bl	8007e58 <__errno>
 8006fbc:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006fc0:	6004      	str	r4, [r0, #0]
 8006fc2:	b002      	add	sp, #8
 8006fc4:	bd10      	pop	{r4, pc}

08006fc6 <__math_invalidf>:
 8006fc6:	eef0 7a40 	vmov.f32	s15, s0
 8006fca:	ee30 7a40 	vsub.f32	s14, s0, s0
 8006fce:	eef4 7a67 	vcmp.f32	s15, s15
 8006fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd6:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8006fda:	d602      	bvs.n	8006fe2 <__math_invalidf+0x1c>
 8006fdc:	2021      	movs	r0, #33	; 0x21
 8006fde:	f7ff bfe7 	b.w	8006fb0 <with_errnof>
 8006fe2:	4770      	bx	lr
 8006fe4:	0000      	movs	r0, r0
	...

08006fe8 <sin>:
 8006fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fea:	eeb0 7b40 	vmov.f64	d7, d0
 8006fee:	ee17 3a90 	vmov	r3, s15
 8006ff2:	4a1f      	ldr	r2, [pc, #124]	; (8007070 <sin+0x88>)
 8006ff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	dc05      	bgt.n	8007008 <sin+0x20>
 8006ffc:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8007068 <sin+0x80>
 8007000:	2000      	movs	r0, #0
 8007002:	f000 fd99 	bl	8007b38 <__kernel_sin>
 8007006:	e004      	b.n	8007012 <sin+0x2a>
 8007008:	4a1a      	ldr	r2, [pc, #104]	; (8007074 <sin+0x8c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	dd04      	ble.n	8007018 <sin+0x30>
 800700e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8007012:	b005      	add	sp, #20
 8007014:	f85d fb04 	ldr.w	pc, [sp], #4
 8007018:	4668      	mov	r0, sp
 800701a:	f000 f961 	bl	80072e0 <__ieee754_rem_pio2>
 800701e:	f000 0003 	and.w	r0, r0, #3
 8007022:	2801      	cmp	r0, #1
 8007024:	d008      	beq.n	8007038 <sin+0x50>
 8007026:	2802      	cmp	r0, #2
 8007028:	d00d      	beq.n	8007046 <sin+0x5e>
 800702a:	b9b0      	cbnz	r0, 800705a <sin+0x72>
 800702c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007030:	ed9d 0b00 	vldr	d0, [sp]
 8007034:	2001      	movs	r0, #1
 8007036:	e7e4      	b.n	8007002 <sin+0x1a>
 8007038:	ed9d 1b02 	vldr	d1, [sp, #8]
 800703c:	ed9d 0b00 	vldr	d0, [sp]
 8007040:	f000 fa8e 	bl	8007560 <__kernel_cos>
 8007044:	e7e5      	b.n	8007012 <sin+0x2a>
 8007046:	ed9d 1b02 	vldr	d1, [sp, #8]
 800704a:	ed9d 0b00 	vldr	d0, [sp]
 800704e:	2001      	movs	r0, #1
 8007050:	f000 fd72 	bl	8007b38 <__kernel_sin>
 8007054:	eeb1 0b40 	vneg.f64	d0, d0
 8007058:	e7db      	b.n	8007012 <sin+0x2a>
 800705a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800705e:	ed9d 0b00 	vldr	d0, [sp]
 8007062:	f000 fa7d 	bl	8007560 <__kernel_cos>
 8007066:	e7f5      	b.n	8007054 <sin+0x6c>
	...
 8007070:	3fe921fb 	.word	0x3fe921fb
 8007074:	7fefffff 	.word	0x7fefffff

08007078 <floorf>:
 8007078:	ee10 3a10 	vmov	r3, s0
 800707c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007080:	3a7f      	subs	r2, #127	; 0x7f
 8007082:	2a16      	cmp	r2, #22
 8007084:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007088:	dc2a      	bgt.n	80070e0 <floorf+0x68>
 800708a:	2a00      	cmp	r2, #0
 800708c:	da11      	bge.n	80070b2 <floorf+0x3a>
 800708e:	eddf 7a18 	vldr	s15, [pc, #96]	; 80070f0 <floorf+0x78>
 8007092:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007096:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800709a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800709e:	dd05      	ble.n	80070ac <floorf+0x34>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	da23      	bge.n	80070ec <floorf+0x74>
 80070a4:	4a13      	ldr	r2, [pc, #76]	; (80070f4 <floorf+0x7c>)
 80070a6:	2900      	cmp	r1, #0
 80070a8:	bf18      	it	ne
 80070aa:	4613      	movne	r3, r2
 80070ac:	ee00 3a10 	vmov	s0, r3
 80070b0:	4770      	bx	lr
 80070b2:	4911      	ldr	r1, [pc, #68]	; (80070f8 <floorf+0x80>)
 80070b4:	4111      	asrs	r1, r2
 80070b6:	420b      	tst	r3, r1
 80070b8:	d0fa      	beq.n	80070b0 <floorf+0x38>
 80070ba:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80070f0 <floorf+0x78>
 80070be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80070c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80070c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ca:	ddef      	ble.n	80070ac <floorf+0x34>
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	bfbe      	ittt	lt
 80070d0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80070d4:	fa40 f202 	asrlt.w	r2, r0, r2
 80070d8:	189b      	addlt	r3, r3, r2
 80070da:	ea23 0301 	bic.w	r3, r3, r1
 80070de:	e7e5      	b.n	80070ac <floorf+0x34>
 80070e0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80070e4:	d3e4      	bcc.n	80070b0 <floorf+0x38>
 80070e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80070ea:	4770      	bx	lr
 80070ec:	2300      	movs	r3, #0
 80070ee:	e7dd      	b.n	80070ac <floorf+0x34>
 80070f0:	7149f2ca 	.word	0x7149f2ca
 80070f4:	bf800000 	.word	0xbf800000
 80070f8:	007fffff 	.word	0x007fffff

080070fc <roundf>:
 80070fc:	ee10 0a10 	vmov	r0, s0
 8007100:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007104:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8007108:	2a16      	cmp	r2, #22
 800710a:	dc15      	bgt.n	8007138 <roundf+0x3c>
 800710c:	2a00      	cmp	r2, #0
 800710e:	da08      	bge.n	8007122 <roundf+0x26>
 8007110:	3201      	adds	r2, #1
 8007112:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007116:	d101      	bne.n	800711c <roundf+0x20>
 8007118:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800711c:	ee00 3a10 	vmov	s0, r3
 8007120:	4770      	bx	lr
 8007122:	4908      	ldr	r1, [pc, #32]	; (8007144 <roundf+0x48>)
 8007124:	4111      	asrs	r1, r2
 8007126:	4208      	tst	r0, r1
 8007128:	d0fa      	beq.n	8007120 <roundf+0x24>
 800712a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800712e:	4113      	asrs	r3, r2
 8007130:	4403      	add	r3, r0
 8007132:	ea23 0301 	bic.w	r3, r3, r1
 8007136:	e7f1      	b.n	800711c <roundf+0x20>
 8007138:	2a80      	cmp	r2, #128	; 0x80
 800713a:	d1f1      	bne.n	8007120 <roundf+0x24>
 800713c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	007fffff 	.word	0x007fffff

08007148 <sinf_poly>:
 8007148:	07cb      	lsls	r3, r1, #31
 800714a:	d412      	bmi.n	8007172 <sinf_poly+0x2a>
 800714c:	ee21 6b00 	vmul.f64	d6, d1, d0
 8007150:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 8007154:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8007158:	eea5 7b01 	vfma.f64	d7, d5, d1
 800715c:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 8007160:	ee21 1b06 	vmul.f64	d1, d1, d6
 8007164:	eea5 0b06 	vfma.f64	d0, d5, d6
 8007168:	eea7 0b01 	vfma.f64	d0, d7, d1
 800716c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007170:	4770      	bx	lr
 8007172:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 8007176:	ee21 6b01 	vmul.f64	d6, d1, d1
 800717a:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800717e:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8007182:	eea1 7b05 	vfma.f64	d7, d1, d5
 8007186:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800718a:	eea1 0b05 	vfma.f64	d0, d1, d5
 800718e:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 8007192:	ee21 1b06 	vmul.f64	d1, d1, d6
 8007196:	eea6 0b05 	vfma.f64	d0, d6, d5
 800719a:	e7e5      	b.n	8007168 <sinf_poly+0x20>
 800719c:	0000      	movs	r0, r0
	...

080071a0 <sinf>:
 80071a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071a2:	ee10 4a10 	vmov	r4, s0
 80071a6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80071aa:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80071ae:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80071b2:	eef0 7a40 	vmov.f32	s15, s0
 80071b6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 80071ba:	d218      	bcs.n	80071ee <sinf+0x4e>
 80071bc:	ee26 1b06 	vmul.f64	d1, d6, d6
 80071c0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 80071c4:	d20a      	bcs.n	80071dc <sinf+0x3c>
 80071c6:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 80071ca:	d103      	bne.n	80071d4 <sinf+0x34>
 80071cc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 80071d0:	ed8d 1a01 	vstr	s2, [sp, #4]
 80071d4:	eeb0 0a67 	vmov.f32	s0, s15
 80071d8:	b003      	add	sp, #12
 80071da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071dc:	483e      	ldr	r0, [pc, #248]	; (80072d8 <sinf+0x138>)
 80071de:	eeb0 0b46 	vmov.f64	d0, d6
 80071e2:	2100      	movs	r1, #0
 80071e4:	b003      	add	sp, #12
 80071e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80071ea:	f7ff bfad 	b.w	8007148 <sinf_poly>
 80071ee:	f240 422e 	movw	r2, #1070	; 0x42e
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d824      	bhi.n	8007240 <sinf+0xa0>
 80071f6:	4b38      	ldr	r3, [pc, #224]	; (80072d8 <sinf+0x138>)
 80071f8:	ed93 7b08 	vldr	d7, [r3, #32]
 80071fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007200:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007204:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8007208:	ee17 1a90 	vmov	r1, s15
 800720c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8007210:	1609      	asrs	r1, r1, #24
 8007212:	ee07 1a90 	vmov	s15, r1
 8007216:	f001 0203 	and.w	r2, r1, #3
 800721a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800721e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8007222:	ed92 0b00 	vldr	d0, [r2]
 8007226:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800722a:	f011 0f02 	tst.w	r1, #2
 800722e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8007232:	bf08      	it	eq
 8007234:	4618      	moveq	r0, r3
 8007236:	ee26 1b06 	vmul.f64	d1, d6, d6
 800723a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800723e:	e7d1      	b.n	80071e4 <sinf+0x44>
 8007240:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8007244:	d23d      	bcs.n	80072c2 <sinf+0x122>
 8007246:	4b25      	ldr	r3, [pc, #148]	; (80072dc <sinf+0x13c>)
 8007248:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800724c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8007250:	f3c4 0116 	ubfx	r1, r4, #0, #23
 8007254:	6a06      	ldr	r6, [r0, #32]
 8007256:	6900      	ldr	r0, [r0, #16]
 8007258:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800725c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007260:	40a9      	lsls	r1, r5
 8007262:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8007266:	fba1 6706 	umull	r6, r7, r1, r6
 800726a:	fb05 f301 	mul.w	r3, r5, r1
 800726e:	463a      	mov	r2, r7
 8007270:	fbe0 2301 	umlal	r2, r3, r0, r1
 8007274:	1c11      	adds	r1, r2, #0
 8007276:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800727a:	2000      	movs	r0, #0
 800727c:	1a10      	subs	r0, r2, r0
 800727e:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 8007282:	eb63 0101 	sbc.w	r1, r3, r1
 8007286:	f7f9 fa09 	bl	800069c <__aeabi_l2d>
 800728a:	0fb5      	lsrs	r5, r6, #30
 800728c:	4a12      	ldr	r2, [pc, #72]	; (80072d8 <sinf+0x138>)
 800728e:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 8007292:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80072d0 <sinf+0x130>
 8007296:	ec41 0b17 	vmov	d7, r0, r1
 800729a:	f003 0103 	and.w	r1, r3, #3
 800729e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80072a2:	ee27 0b00 	vmul.f64	d0, d7, d0
 80072a6:	ed91 7b00 	vldr	d7, [r1]
 80072aa:	ee20 1b00 	vmul.f64	d1, d0, d0
 80072ae:	f013 0f02 	tst.w	r3, #2
 80072b2:	f102 0070 	add.w	r0, r2, #112	; 0x70
 80072b6:	4629      	mov	r1, r5
 80072b8:	bf08      	it	eq
 80072ba:	4610      	moveq	r0, r2
 80072bc:	ee27 0b00 	vmul.f64	d0, d7, d0
 80072c0:	e790      	b.n	80071e4 <sinf+0x44>
 80072c2:	b003      	add	sp, #12
 80072c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80072c8:	f7ff be7d 	b.w	8006fc6 <__math_invalidf>
 80072cc:	f3af 8000 	nop.w
 80072d0:	54442d18 	.word	0x54442d18
 80072d4:	3c1921fb 	.word	0x3c1921fb
 80072d8:	080095d8 	.word	0x080095d8
 80072dc:	08009578 	.word	0x08009578

080072e0 <__ieee754_rem_pio2>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	eeb0 7b40 	vmov.f64	d7, d0
 80072e6:	ee17 5a90 	vmov	r5, s15
 80072ea:	4b97      	ldr	r3, [pc, #604]	; (8007548 <__ieee754_rem_pio2+0x268>)
 80072ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80072f0:	429e      	cmp	r6, r3
 80072f2:	b088      	sub	sp, #32
 80072f4:	4604      	mov	r4, r0
 80072f6:	dc07      	bgt.n	8007308 <__ieee754_rem_pio2+0x28>
 80072f8:	2200      	movs	r2, #0
 80072fa:	2300      	movs	r3, #0
 80072fc:	ed84 0b00 	vstr	d0, [r4]
 8007300:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007304:	2000      	movs	r0, #0
 8007306:	e01b      	b.n	8007340 <__ieee754_rem_pio2+0x60>
 8007308:	4b90      	ldr	r3, [pc, #576]	; (800754c <__ieee754_rem_pio2+0x26c>)
 800730a:	429e      	cmp	r6, r3
 800730c:	dc3b      	bgt.n	8007386 <__ieee754_rem_pio2+0xa6>
 800730e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8007312:	2d00      	cmp	r5, #0
 8007314:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8007508 <__ieee754_rem_pio2+0x228>
 8007318:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800731c:	dd19      	ble.n	8007352 <__ieee754_rem_pio2+0x72>
 800731e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8007322:	429e      	cmp	r6, r3
 8007324:	d00e      	beq.n	8007344 <__ieee754_rem_pio2+0x64>
 8007326:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8007510 <__ieee754_rem_pio2+0x230>
 800732a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800732e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8007332:	ed84 5b00 	vstr	d5, [r4]
 8007336:	ee37 7b46 	vsub.f64	d7, d7, d6
 800733a:	ed84 7b02 	vstr	d7, [r4, #8]
 800733e:	2001      	movs	r0, #1
 8007340:	b008      	add	sp, #32
 8007342:	bd70      	pop	{r4, r5, r6, pc}
 8007344:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8007518 <__ieee754_rem_pio2+0x238>
 8007348:	ee37 7b46 	vsub.f64	d7, d7, d6
 800734c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8007520 <__ieee754_rem_pio2+0x240>
 8007350:	e7eb      	b.n	800732a <__ieee754_rem_pio2+0x4a>
 8007352:	429e      	cmp	r6, r3
 8007354:	ee30 7b06 	vadd.f64	d7, d0, d6
 8007358:	d00e      	beq.n	8007378 <__ieee754_rem_pio2+0x98>
 800735a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8007510 <__ieee754_rem_pio2+0x230>
 800735e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8007362:	ee37 7b45 	vsub.f64	d7, d7, d5
 8007366:	ed84 5b00 	vstr	d5, [r4]
 800736a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800736e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007372:	ed84 7b02 	vstr	d7, [r4, #8]
 8007376:	e7e3      	b.n	8007340 <__ieee754_rem_pio2+0x60>
 8007378:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8007518 <__ieee754_rem_pio2+0x238>
 800737c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007380:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8007520 <__ieee754_rem_pio2+0x240>
 8007384:	e7eb      	b.n	800735e <__ieee754_rem_pio2+0x7e>
 8007386:	4b72      	ldr	r3, [pc, #456]	; (8007550 <__ieee754_rem_pio2+0x270>)
 8007388:	429e      	cmp	r6, r3
 800738a:	dc6e      	bgt.n	800746a <__ieee754_rem_pio2+0x18a>
 800738c:	f000 fc2c 	bl	8007be8 <fabs>
 8007390:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8007394:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8007528 <__ieee754_rem_pio2+0x248>
 8007398:	eea0 7b06 	vfma.f64	d7, d0, d6
 800739c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80073a0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80073a4:	ee17 0a90 	vmov	r0, s15
 80073a8:	eeb1 4b45 	vneg.f64	d4, d5
 80073ac:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8007508 <__ieee754_rem_pio2+0x228>
 80073b0:	eea5 0b47 	vfms.f64	d0, d5, d7
 80073b4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8007510 <__ieee754_rem_pio2+0x230>
 80073b8:	281f      	cmp	r0, #31
 80073ba:	ee25 7b07 	vmul.f64	d7, d5, d7
 80073be:	ee30 6b47 	vsub.f64	d6, d0, d7
 80073c2:	dc08      	bgt.n	80073d6 <__ieee754_rem_pio2+0xf6>
 80073c4:	4b63      	ldr	r3, [pc, #396]	; (8007554 <__ieee754_rem_pio2+0x274>)
 80073c6:	1e42      	subs	r2, r0, #1
 80073c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073cc:	42b3      	cmp	r3, r6
 80073ce:	d002      	beq.n	80073d6 <__ieee754_rem_pio2+0xf6>
 80073d0:	ed84 6b00 	vstr	d6, [r4]
 80073d4:	e024      	b.n	8007420 <__ieee754_rem_pio2+0x140>
 80073d6:	ee16 3a90 	vmov	r3, s13
 80073da:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80073de:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80073e2:	2b10      	cmp	r3, #16
 80073e4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80073e8:	ddf2      	ble.n	80073d0 <__ieee754_rem_pio2+0xf0>
 80073ea:	eeb0 6b40 	vmov.f64	d6, d0
 80073ee:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8007518 <__ieee754_rem_pio2+0x238>
 80073f2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80073f6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80073fa:	eea4 7b03 	vfma.f64	d7, d4, d3
 80073fe:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8007520 <__ieee754_rem_pio2+0x240>
 8007402:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8007406:	ee36 3b47 	vsub.f64	d3, d6, d7
 800740a:	ee13 3a90 	vmov	r3, s7
 800740e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b31      	cmp	r3, #49	; 0x31
 8007416:	dc17      	bgt.n	8007448 <__ieee754_rem_pio2+0x168>
 8007418:	eeb0 0b46 	vmov.f64	d0, d6
 800741c:	ed84 3b00 	vstr	d3, [r4]
 8007420:	ed94 6b00 	vldr	d6, [r4]
 8007424:	2d00      	cmp	r5, #0
 8007426:	ee30 0b46 	vsub.f64	d0, d0, d6
 800742a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800742e:	ed84 7b02 	vstr	d7, [r4, #8]
 8007432:	da85      	bge.n	8007340 <__ieee754_rem_pio2+0x60>
 8007434:	eeb1 6b46 	vneg.f64	d6, d6
 8007438:	ed84 6b00 	vstr	d6, [r4]
 800743c:	eeb1 7b47 	vneg.f64	d7, d7
 8007440:	4240      	negs	r0, r0
 8007442:	ed84 7b02 	vstr	d7, [r4, #8]
 8007446:	e77b      	b.n	8007340 <__ieee754_rem_pio2+0x60>
 8007448:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8007530 <__ieee754_rem_pio2+0x250>
 800744c:	eeb0 0b46 	vmov.f64	d0, d6
 8007450:	eea4 0b03 	vfma.f64	d0, d4, d3
 8007454:	ee36 7b40 	vsub.f64	d7, d6, d0
 8007458:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8007538 <__ieee754_rem_pio2+0x258>
 800745c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8007460:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8007464:	ee30 6b47 	vsub.f64	d6, d0, d7
 8007468:	e7b2      	b.n	80073d0 <__ieee754_rem_pio2+0xf0>
 800746a:	4b3b      	ldr	r3, [pc, #236]	; (8007558 <__ieee754_rem_pio2+0x278>)
 800746c:	429e      	cmp	r6, r3
 800746e:	dd06      	ble.n	800747e <__ieee754_rem_pio2+0x19e>
 8007470:	ee30 7b40 	vsub.f64	d7, d0, d0
 8007474:	ed80 7b02 	vstr	d7, [r0, #8]
 8007478:	ed80 7b00 	vstr	d7, [r0]
 800747c:	e742      	b.n	8007304 <__ieee754_rem_pio2+0x24>
 800747e:	1532      	asrs	r2, r6, #20
 8007480:	ee10 0a10 	vmov	r0, s0
 8007484:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8007488:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800748c:	ec41 0b17 	vmov	d7, r0, r1
 8007490:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8007494:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8007540 <__ieee754_rem_pio2+0x260>
 8007498:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800749c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80074a0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80074a4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80074a8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80074ac:	a902      	add	r1, sp, #8
 80074ae:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80074b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80074b6:	ed8d 6b04 	vstr	d6, [sp, #16]
 80074ba:	ee27 7b05 	vmul.f64	d7, d7, d5
 80074be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80074c2:	2603      	movs	r6, #3
 80074c4:	4608      	mov	r0, r1
 80074c6:	ed91 7b04 	vldr	d7, [r1, #16]
 80074ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80074ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d2:	4633      	mov	r3, r6
 80074d4:	f1a1 0108 	sub.w	r1, r1, #8
 80074d8:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 80074dc:	d0f3      	beq.n	80074c6 <__ieee754_rem_pio2+0x1e6>
 80074de:	491f      	ldr	r1, [pc, #124]	; (800755c <__ieee754_rem_pio2+0x27c>)
 80074e0:	9101      	str	r1, [sp, #4]
 80074e2:	2102      	movs	r1, #2
 80074e4:	9100      	str	r1, [sp, #0]
 80074e6:	4621      	mov	r1, r4
 80074e8:	f000 f8a6 	bl	8007638 <__kernel_rem_pio2>
 80074ec:	2d00      	cmp	r5, #0
 80074ee:	f6bf af27 	bge.w	8007340 <__ieee754_rem_pio2+0x60>
 80074f2:	ed94 7b00 	vldr	d7, [r4]
 80074f6:	eeb1 7b47 	vneg.f64	d7, d7
 80074fa:	ed84 7b00 	vstr	d7, [r4]
 80074fe:	ed94 7b02 	vldr	d7, [r4, #8]
 8007502:	e79b      	b.n	800743c <__ieee754_rem_pio2+0x15c>
 8007504:	f3af 8000 	nop.w
 8007508:	54400000 	.word	0x54400000
 800750c:	3ff921fb 	.word	0x3ff921fb
 8007510:	1a626331 	.word	0x1a626331
 8007514:	3dd0b461 	.word	0x3dd0b461
 8007518:	1a600000 	.word	0x1a600000
 800751c:	3dd0b461 	.word	0x3dd0b461
 8007520:	2e037073 	.word	0x2e037073
 8007524:	3ba3198a 	.word	0x3ba3198a
 8007528:	6dc9c883 	.word	0x6dc9c883
 800752c:	3fe45f30 	.word	0x3fe45f30
 8007530:	2e000000 	.word	0x2e000000
 8007534:	3ba3198a 	.word	0x3ba3198a
 8007538:	252049c1 	.word	0x252049c1
 800753c:	397b839a 	.word	0x397b839a
 8007540:	00000000 	.word	0x00000000
 8007544:	41700000 	.word	0x41700000
 8007548:	3fe921fb 	.word	0x3fe921fb
 800754c:	4002d97b 	.word	0x4002d97b
 8007550:	413921fb 	.word	0x413921fb
 8007554:	080096b8 	.word	0x080096b8
 8007558:	7fefffff 	.word	0x7fefffff
 800755c:	08009738 	.word	0x08009738

08007560 <__kernel_cos>:
 8007560:	ee10 1a90 	vmov	r1, s1
 8007564:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8007568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800756c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8007570:	da05      	bge.n	800757e <__kernel_cos+0x1e>
 8007572:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8007576:	ee17 3a90 	vmov	r3, s15
 800757a:	2b00      	cmp	r3, #0
 800757c:	d03d      	beq.n	80075fa <__kernel_cos+0x9a>
 800757e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8007582:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8007600 <__kernel_cos+0xa0>
 8007586:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8007608 <__kernel_cos+0xa8>
 800758a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800758e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8007610 <__kernel_cos+0xb0>
 8007592:	eea6 7b03 	vfma.f64	d7, d6, d3
 8007596:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8007618 <__kernel_cos+0xb8>
 800759a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800759e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8007620 <__kernel_cos+0xc0>
 80075a2:	4b23      	ldr	r3, [pc, #140]	; (8007630 <__kernel_cos+0xd0>)
 80075a4:	eea6 7b03 	vfma.f64	d7, d6, d3
 80075a8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8007628 <__kernel_cos+0xc8>
 80075ac:	4299      	cmp	r1, r3
 80075ae:	eea7 6b03 	vfma.f64	d6, d7, d3
 80075b2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80075b6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80075ba:	ee23 7b07 	vmul.f64	d7, d3, d7
 80075be:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80075c2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80075c6:	dc04      	bgt.n	80075d2 <__kernel_cos+0x72>
 80075c8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80075cc:	ee34 0b46 	vsub.f64	d0, d4, d6
 80075d0:	4770      	bx	lr
 80075d2:	4b18      	ldr	r3, [pc, #96]	; (8007634 <__kernel_cos+0xd4>)
 80075d4:	4299      	cmp	r1, r3
 80075d6:	dc0d      	bgt.n	80075f4 <__kernel_cos+0x94>
 80075d8:	2200      	movs	r2, #0
 80075da:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80075de:	ec43 2b15 	vmov	d5, r2, r3
 80075e2:	ee34 0b45 	vsub.f64	d0, d4, d5
 80075e6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80075ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80075ee:	ee30 0b47 	vsub.f64	d0, d0, d7
 80075f2:	4770      	bx	lr
 80075f4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80075f8:	e7f3      	b.n	80075e2 <__kernel_cos+0x82>
 80075fa:	eeb0 0b44 	vmov.f64	d0, d4
 80075fe:	4770      	bx	lr
 8007600:	be8838d4 	.word	0xbe8838d4
 8007604:	bda8fae9 	.word	0xbda8fae9
 8007608:	bdb4b1c4 	.word	0xbdb4b1c4
 800760c:	3e21ee9e 	.word	0x3e21ee9e
 8007610:	809c52ad 	.word	0x809c52ad
 8007614:	be927e4f 	.word	0xbe927e4f
 8007618:	19cb1590 	.word	0x19cb1590
 800761c:	3efa01a0 	.word	0x3efa01a0
 8007620:	16c15177 	.word	0x16c15177
 8007624:	bf56c16c 	.word	0xbf56c16c
 8007628:	5555554c 	.word	0x5555554c
 800762c:	3fa55555 	.word	0x3fa55555
 8007630:	3fd33332 	.word	0x3fd33332
 8007634:	3fe90000 	.word	0x3fe90000

08007638 <__kernel_rem_pio2>:
 8007638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	ed2d 8b06 	vpush	{d8-d10}
 8007640:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8007644:	469b      	mov	fp, r3
 8007646:	460f      	mov	r7, r1
 8007648:	4bcf      	ldr	r3, [pc, #828]	; (8007988 <__kernel_rem_pio2+0x350>)
 800764a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800764c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8007650:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8007654:	9000      	str	r0, [sp, #0]
 8007656:	f112 0f14 	cmn.w	r2, #20
 800765a:	bfa8      	it	ge
 800765c:	2318      	movge	r3, #24
 800765e:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 8007662:	bfb8      	it	lt
 8007664:	2300      	movlt	r3, #0
 8007666:	f06f 0417 	mvn.w	r4, #23
 800766a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8007970 <__kernel_rem_pio2+0x338>
 800766e:	bfa4      	itt	ge
 8007670:	f1a2 0a03 	subge.w	sl, r2, #3
 8007674:	fb9a f3f3 	sdivge	r3, sl, r3
 8007678:	fb03 4404 	mla	r4, r3, r4, r4
 800767c:	1a5d      	subs	r5, r3, r1
 800767e:	4414      	add	r4, r2
 8007680:	eb09 0601 	add.w	r6, r9, r1
 8007684:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8007688:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800768c:	2200      	movs	r2, #0
 800768e:	42b2      	cmp	r2, r6
 8007690:	dd12      	ble.n	80076b8 <__kernel_rem_pio2+0x80>
 8007692:	aa18      	add	r2, sp, #96	; 0x60
 8007694:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8007698:	460e      	mov	r6, r1
 800769a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800769e:	f1cb 0a01 	rsb	sl, fp, #1
 80076a2:	eb0a 0006 	add.w	r0, sl, r6
 80076a6:	4581      	cmp	r9, r0
 80076a8:	db25      	blt.n	80076f6 <__kernel_rem_pio2+0xbe>
 80076aa:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8007970 <__kernel_rem_pio2+0x338>
 80076ae:	f8dd e000 	ldr.w	lr, [sp]
 80076b2:	4615      	mov	r5, r2
 80076b4:	2000      	movs	r0, #0
 80076b6:	e015      	b.n	80076e4 <__kernel_rem_pio2+0xac>
 80076b8:	42d5      	cmn	r5, r2
 80076ba:	d409      	bmi.n	80076d0 <__kernel_rem_pio2+0x98>
 80076bc:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 80076c0:	ee07 0a90 	vmov	s15, r0
 80076c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80076c8:	eca8 7b02 	vstmia	r8!, {d7}
 80076cc:	3201      	adds	r2, #1
 80076ce:	e7de      	b.n	800768e <__kernel_rem_pio2+0x56>
 80076d0:	eeb0 7b46 	vmov.f64	d7, d6
 80076d4:	e7f8      	b.n	80076c8 <__kernel_rem_pio2+0x90>
 80076d6:	ecbe 5b02 	vldmia	lr!, {d5}
 80076da:	ed95 6b00 	vldr	d6, [r5]
 80076de:	3001      	adds	r0, #1
 80076e0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80076e4:	4288      	cmp	r0, r1
 80076e6:	f1a5 0508 	sub.w	r5, r5, #8
 80076ea:	ddf4      	ble.n	80076d6 <__kernel_rem_pio2+0x9e>
 80076ec:	eca8 7b02 	vstmia	r8!, {d7}
 80076f0:	3208      	adds	r2, #8
 80076f2:	3601      	adds	r6, #1
 80076f4:	e7d5      	b.n	80076a2 <__kernel_rem_pio2+0x6a>
 80076f6:	aa04      	add	r2, sp, #16
 80076f8:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8007978 <__kernel_rem_pio2+0x340>
 80076fc:	ed9f aba0 	vldr	d10, [pc, #640]	; 8007980 <__kernel_rem_pio2+0x348>
 8007700:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8007704:	9201      	str	r2, [sp, #4]
 8007706:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800770a:	464e      	mov	r6, r9
 800770c:	ab90      	add	r3, sp, #576	; 0x240
 800770e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007712:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8007716:	ab04      	add	r3, sp, #16
 8007718:	4618      	mov	r0, r3
 800771a:	4632      	mov	r2, r6
 800771c:	2a00      	cmp	r2, #0
 800771e:	dc4e      	bgt.n	80077be <__kernel_rem_pio2+0x186>
 8007720:	4620      	mov	r0, r4
 8007722:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8007726:	f000 fadf 	bl	8007ce8 <scalbn>
 800772a:	eeb0 8b40 	vmov.f64	d8, d0
 800772e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8007732:	ee28 0b00 	vmul.f64	d0, d8, d0
 8007736:	f000 fa63 	bl	8007c00 <floor>
 800773a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800773e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8007742:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8007746:	2c00      	cmp	r4, #0
 8007748:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800774c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8007750:	ee38 8b40 	vsub.f64	d8, d8, d0
 8007754:	ee17 8a90 	vmov	r8, s15
 8007758:	dd46      	ble.n	80077e8 <__kernel_rem_pio2+0x1b0>
 800775a:	1e70      	subs	r0, r6, #1
 800775c:	aa04      	add	r2, sp, #16
 800775e:	f1c4 0c18 	rsb	ip, r4, #24
 8007762:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8007766:	fa45 f20c 	asr.w	r2, r5, ip
 800776a:	4490      	add	r8, r2
 800776c:	fa02 f20c 	lsl.w	r2, r2, ip
 8007770:	1aad      	subs	r5, r5, r2
 8007772:	aa04      	add	r2, sp, #16
 8007774:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8007778:	f1c4 0217 	rsb	r2, r4, #23
 800777c:	4115      	asrs	r5, r2
 800777e:	2d00      	cmp	r5, #0
 8007780:	dd41      	ble.n	8007806 <__kernel_rem_pio2+0x1ce>
 8007782:	f04f 0c00 	mov.w	ip, #0
 8007786:	f108 0801 	add.w	r8, r8, #1
 800778a:	4660      	mov	r0, ip
 800778c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8007790:	4566      	cmp	r6, ip
 8007792:	dc69      	bgt.n	8007868 <__kernel_rem_pio2+0x230>
 8007794:	2c00      	cmp	r4, #0
 8007796:	dd03      	ble.n	80077a0 <__kernel_rem_pio2+0x168>
 8007798:	2c01      	cmp	r4, #1
 800779a:	d076      	beq.n	800788a <__kernel_rem_pio2+0x252>
 800779c:	2c02      	cmp	r4, #2
 800779e:	d07f      	beq.n	80078a0 <__kernel_rem_pio2+0x268>
 80077a0:	2d02      	cmp	r5, #2
 80077a2:	d130      	bne.n	8007806 <__kernel_rem_pio2+0x1ce>
 80077a4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80077a8:	ee30 8b48 	vsub.f64	d8, d0, d8
 80077ac:	b358      	cbz	r0, 8007806 <__kernel_rem_pio2+0x1ce>
 80077ae:	4620      	mov	r0, r4
 80077b0:	9102      	str	r1, [sp, #8]
 80077b2:	f000 fa99 	bl	8007ce8 <scalbn>
 80077b6:	9902      	ldr	r1, [sp, #8]
 80077b8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80077bc:	e023      	b.n	8007806 <__kernel_rem_pio2+0x1ce>
 80077be:	ee20 7b09 	vmul.f64	d7, d0, d9
 80077c2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80077c6:	3a01      	subs	r2, #1
 80077c8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80077cc:	ad68      	add	r5, sp, #416	; 0x1a0
 80077ce:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80077d2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80077d6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 80077da:	eca0 0a01 	vstmia	r0!, {s0}
 80077de:	ed95 0b00 	vldr	d0, [r5]
 80077e2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80077e6:	e799      	b.n	800771c <__kernel_rem_pio2+0xe4>
 80077e8:	d105      	bne.n	80077f6 <__kernel_rem_pio2+0x1be>
 80077ea:	1e72      	subs	r2, r6, #1
 80077ec:	a804      	add	r0, sp, #16
 80077ee:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 80077f2:	15ed      	asrs	r5, r5, #23
 80077f4:	e7c3      	b.n	800777e <__kernel_rem_pio2+0x146>
 80077f6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80077fa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80077fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007802:	da2f      	bge.n	8007864 <__kernel_rem_pio2+0x22c>
 8007804:	2500      	movs	r5, #0
 8007806:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800780a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800780e:	f040 8087 	bne.w	8007920 <__kernel_rem_pio2+0x2e8>
 8007812:	1e73      	subs	r3, r6, #1
 8007814:	4618      	mov	r0, r3
 8007816:	f04f 0c00 	mov.w	ip, #0
 800781a:	4548      	cmp	r0, r9
 800781c:	da47      	bge.n	80078ae <__kernel_rem_pio2+0x276>
 800781e:	f1bc 0f00 	cmp.w	ip, #0
 8007822:	d070      	beq.n	8007906 <__kernel_rem_pio2+0x2ce>
 8007824:	aa04      	add	r2, sp, #16
 8007826:	3c18      	subs	r4, #24
 8007828:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800782c:	2a00      	cmp	r2, #0
 800782e:	d075      	beq.n	800791c <__kernel_rem_pio2+0x2e4>
 8007830:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007834:	4620      	mov	r0, r4
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	f000 fa56 	bl	8007ce8 <scalbn>
 800783c:	9b00      	ldr	r3, [sp, #0]
 800783e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8007978 <__kernel_rem_pio2+0x340>
 8007842:	461a      	mov	r2, r3
 8007844:	2a00      	cmp	r2, #0
 8007846:	f280 80ac 	bge.w	80079a2 <__kernel_rem_pio2+0x36a>
 800784a:	4619      	mov	r1, r3
 800784c:	2000      	movs	r0, #0
 800784e:	2900      	cmp	r1, #0
 8007850:	f2c0 80cd 	blt.w	80079ee <__kernel_rem_pio2+0x3b6>
 8007854:	aa68      	add	r2, sp, #416	; 0x1a0
 8007856:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800785a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8007970 <__kernel_rem_pio2+0x338>
 800785e:	4e4b      	ldr	r6, [pc, #300]	; (800798c <__kernel_rem_pio2+0x354>)
 8007860:	2200      	movs	r2, #0
 8007862:	e0b8      	b.n	80079d6 <__kernel_rem_pio2+0x39e>
 8007864:	2502      	movs	r5, #2
 8007866:	e78c      	b.n	8007782 <__kernel_rem_pio2+0x14a>
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	b948      	cbnz	r0, 8007880 <__kernel_rem_pio2+0x248>
 800786c:	b11a      	cbz	r2, 8007876 <__kernel_rem_pio2+0x23e>
 800786e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	2201      	movs	r2, #1
 8007876:	f10c 0c01 	add.w	ip, ip, #1
 800787a:	3304      	adds	r3, #4
 800787c:	4610      	mov	r0, r2
 800787e:	e787      	b.n	8007790 <__kernel_rem_pio2+0x158>
 8007880:	ebae 0202 	sub.w	r2, lr, r2
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	4602      	mov	r2, r0
 8007888:	e7f5      	b.n	8007876 <__kernel_rem_pio2+0x23e>
 800788a:	1e72      	subs	r2, r6, #1
 800788c:	ab04      	add	r3, sp, #16
 800788e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007892:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007896:	f10d 0c10 	add.w	ip, sp, #16
 800789a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800789e:	e77f      	b.n	80077a0 <__kernel_rem_pio2+0x168>
 80078a0:	1e72      	subs	r2, r6, #1
 80078a2:	ab04      	add	r3, sp, #16
 80078a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80078ac:	e7f3      	b.n	8007896 <__kernel_rem_pio2+0x25e>
 80078ae:	aa04      	add	r2, sp, #16
 80078b0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80078b4:	3801      	subs	r0, #1
 80078b6:	ea4c 0c02 	orr.w	ip, ip, r2
 80078ba:	e7ae      	b.n	800781a <__kernel_rem_pio2+0x1e2>
 80078bc:	3001      	adds	r0, #1
 80078be:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80078c2:	2a00      	cmp	r2, #0
 80078c4:	d0fa      	beq.n	80078bc <__kernel_rem_pio2+0x284>
 80078c6:	eb06 020b 	add.w	r2, r6, fp
 80078ca:	ad18      	add	r5, sp, #96	; 0x60
 80078cc:	1c73      	adds	r3, r6, #1
 80078ce:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80078d2:	4406      	add	r6, r0
 80078d4:	429e      	cmp	r6, r3
 80078d6:	f6ff af19 	blt.w	800770c <__kernel_rem_pio2+0xd4>
 80078da:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 80078de:	9d00      	ldr	r5, [sp, #0]
 80078e0:	ee07 0a90 	vmov	s15, r0
 80078e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80078e8:	2000      	movs	r0, #0
 80078ea:	eca2 7b02 	vstmia	r2!, {d7}
 80078ee:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8007970 <__kernel_rem_pio2+0x338>
 80078f2:	4694      	mov	ip, r2
 80078f4:	4288      	cmp	r0, r1
 80078f6:	dd09      	ble.n	800790c <__kernel_rem_pio2+0x2d4>
 80078f8:	a868      	add	r0, sp, #416	; 0x1a0
 80078fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80078fe:	ed80 7b00 	vstr	d7, [r0]
 8007902:	3301      	adds	r3, #1
 8007904:	e7e6      	b.n	80078d4 <__kernel_rem_pio2+0x29c>
 8007906:	9b01      	ldr	r3, [sp, #4]
 8007908:	2001      	movs	r0, #1
 800790a:	e7d8      	b.n	80078be <__kernel_rem_pio2+0x286>
 800790c:	ecb5 5b02 	vldmia	r5!, {d5}
 8007910:	ed3c 6b02 	vldmdb	ip!, {d6}
 8007914:	3001      	adds	r0, #1
 8007916:	eea5 7b06 	vfma.f64	d7, d5, d6
 800791a:	e7eb      	b.n	80078f4 <__kernel_rem_pio2+0x2bc>
 800791c:	3b01      	subs	r3, #1
 800791e:	e781      	b.n	8007824 <__kernel_rem_pio2+0x1ec>
 8007920:	4260      	negs	r0, r4
 8007922:	eeb0 0b48 	vmov.f64	d0, d8
 8007926:	f000 f9df 	bl	8007ce8 <scalbn>
 800792a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8007980 <__kernel_rem_pio2+0x348>
 800792e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8007932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007936:	db2b      	blt.n	8007990 <__kernel_rem_pio2+0x358>
 8007938:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8007978 <__kernel_rem_pio2+0x340>
 800793c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007940:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8007944:	aa04      	add	r2, sp, #16
 8007946:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800794a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800794e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007952:	a904      	add	r1, sp, #16
 8007954:	ee10 3a10 	vmov	r3, s0
 8007958:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800795c:	ee17 2a10 	vmov	r2, s14
 8007960:	1c73      	adds	r3, r6, #1
 8007962:	3418      	adds	r4, #24
 8007964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007968:	e762      	b.n	8007830 <__kernel_rem_pio2+0x1f8>
 800796a:	bf00      	nop
 800796c:	f3af 8000 	nop.w
	...
 800797c:	3e700000 	.word	0x3e700000
 8007980:	00000000 	.word	0x00000000
 8007984:	41700000 	.word	0x41700000
 8007988:	08009880 	.word	0x08009880
 800798c:	08009840 	.word	0x08009840
 8007990:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007994:	aa04      	add	r2, sp, #16
 8007996:	ee10 3a10 	vmov	r3, s0
 800799a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800799e:	4633      	mov	r3, r6
 80079a0:	e746      	b.n	8007830 <__kernel_rem_pio2+0x1f8>
 80079a2:	a804      	add	r0, sp, #16
 80079a4:	a968      	add	r1, sp, #416	; 0x1a0
 80079a6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80079aa:	9000      	str	r0, [sp, #0]
 80079ac:	ee07 0a90 	vmov	s15, r0
 80079b0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80079b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80079b8:	3a01      	subs	r2, #1
 80079ba:	ee27 7b00 	vmul.f64	d7, d7, d0
 80079be:	ee20 0b06 	vmul.f64	d0, d0, d6
 80079c2:	ed81 7b00 	vstr	d7, [r1]
 80079c6:	e73d      	b.n	8007844 <__kernel_rem_pio2+0x20c>
 80079c8:	ecb6 5b02 	vldmia	r6!, {d5}
 80079cc:	ecb4 6b02 	vldmia	r4!, {d6}
 80079d0:	3201      	adds	r2, #1
 80079d2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80079d6:	454a      	cmp	r2, r9
 80079d8:	dc01      	bgt.n	80079de <__kernel_rem_pio2+0x3a6>
 80079da:	4290      	cmp	r0, r2
 80079dc:	daf4      	bge.n	80079c8 <__kernel_rem_pio2+0x390>
 80079de:	aa40      	add	r2, sp, #256	; 0x100
 80079e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80079e4:	ed82 7b00 	vstr	d7, [r2]
 80079e8:	3901      	subs	r1, #1
 80079ea:	3001      	adds	r0, #1
 80079ec:	e72f      	b.n	800784e <__kernel_rem_pio2+0x216>
 80079ee:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80079f0:	2a02      	cmp	r2, #2
 80079f2:	dc0a      	bgt.n	8007a0a <__kernel_rem_pio2+0x3d2>
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	dc5a      	bgt.n	8007aae <__kernel_rem_pio2+0x476>
 80079f8:	d039      	beq.n	8007a6e <__kernel_rem_pio2+0x436>
 80079fa:	f008 0007 	and.w	r0, r8, #7
 80079fe:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8007a02:	ecbd 8b06 	vpop	{d8-d10}
 8007a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8007a0c:	2a03      	cmp	r2, #3
 8007a0e:	d1f4      	bne.n	80079fa <__kernel_rem_pio2+0x3c2>
 8007a10:	aa40      	add	r2, sp, #256	; 0x100
 8007a12:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007a16:	4611      	mov	r1, r2
 8007a18:	4618      	mov	r0, r3
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	f1a1 0108 	sub.w	r1, r1, #8
 8007a20:	dc52      	bgt.n	8007ac8 <__kernel_rem_pio2+0x490>
 8007a22:	4619      	mov	r1, r3
 8007a24:	2901      	cmp	r1, #1
 8007a26:	f1a2 0208 	sub.w	r2, r2, #8
 8007a2a:	dc5d      	bgt.n	8007ae8 <__kernel_rem_pio2+0x4b0>
 8007a2c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8007b30 <__kernel_rem_pio2+0x4f8>
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	dc69      	bgt.n	8007b08 <__kernel_rem_pio2+0x4d0>
 8007a34:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8007a38:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8007a3c:	2d00      	cmp	r5, #0
 8007a3e:	d16c      	bne.n	8007b1a <__kernel_rem_pio2+0x4e2>
 8007a40:	ed87 5b00 	vstr	d5, [r7]
 8007a44:	ed87 6b02 	vstr	d6, [r7, #8]
 8007a48:	ed87 7b04 	vstr	d7, [r7, #16]
 8007a4c:	e7d5      	b.n	80079fa <__kernel_rem_pio2+0x3c2>
 8007a4e:	aa40      	add	r2, sp, #256	; 0x100
 8007a50:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007a54:	ed92 6b00 	vldr	d6, [r2]
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	daf5      	bge.n	8007a4e <__kernel_rem_pio2+0x416>
 8007a62:	b10d      	cbz	r5, 8007a68 <__kernel_rem_pio2+0x430>
 8007a64:	eeb1 7b47 	vneg.f64	d7, d7
 8007a68:	ed87 7b00 	vstr	d7, [r7]
 8007a6c:	e7c5      	b.n	80079fa <__kernel_rem_pio2+0x3c2>
 8007a6e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8007b30 <__kernel_rem_pio2+0x4f8>
 8007a72:	e7f4      	b.n	8007a5e <__kernel_rem_pio2+0x426>
 8007a74:	a940      	add	r1, sp, #256	; 0x100
 8007a76:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007a7a:	ed91 7b00 	vldr	d7, [r1]
 8007a7e:	3a01      	subs	r2, #1
 8007a80:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007a84:	2a00      	cmp	r2, #0
 8007a86:	daf5      	bge.n	8007a74 <__kernel_rem_pio2+0x43c>
 8007a88:	b1ad      	cbz	r5, 8007ab6 <__kernel_rem_pio2+0x47e>
 8007a8a:	eeb1 7b46 	vneg.f64	d7, d6
 8007a8e:	ed87 7b00 	vstr	d7, [r7]
 8007a92:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8007a96:	a942      	add	r1, sp, #264	; 0x108
 8007a98:	2201      	movs	r2, #1
 8007a9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	da0c      	bge.n	8007abc <__kernel_rem_pio2+0x484>
 8007aa2:	b10d      	cbz	r5, 8007aa8 <__kernel_rem_pio2+0x470>
 8007aa4:	eeb1 7b47 	vneg.f64	d7, d7
 8007aa8:	ed87 7b02 	vstr	d7, [r7, #8]
 8007aac:	e7a5      	b.n	80079fa <__kernel_rem_pio2+0x3c2>
 8007aae:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8007b30 <__kernel_rem_pio2+0x4f8>
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	e7e6      	b.n	8007a84 <__kernel_rem_pio2+0x44c>
 8007ab6:	eeb0 7b46 	vmov.f64	d7, d6
 8007aba:	e7e8      	b.n	8007a8e <__kernel_rem_pio2+0x456>
 8007abc:	ecb1 6b02 	vldmia	r1!, {d6}
 8007ac0:	3201      	adds	r2, #1
 8007ac2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007ac6:	e7ea      	b.n	8007a9e <__kernel_rem_pio2+0x466>
 8007ac8:	ed91 7b00 	vldr	d7, [r1]
 8007acc:	ed91 5b02 	vldr	d5, [r1, #8]
 8007ad0:	3801      	subs	r0, #1
 8007ad2:	ee37 6b05 	vadd.f64	d6, d7, d5
 8007ad6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007ada:	ed81 6b00 	vstr	d6, [r1]
 8007ade:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007ae2:	ed81 7b02 	vstr	d7, [r1, #8]
 8007ae6:	e798      	b.n	8007a1a <__kernel_rem_pio2+0x3e2>
 8007ae8:	ed92 7b00 	vldr	d7, [r2]
 8007aec:	ed92 5b02 	vldr	d5, [r2, #8]
 8007af0:	3901      	subs	r1, #1
 8007af2:	ee37 6b05 	vadd.f64	d6, d7, d5
 8007af6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007afa:	ed82 6b00 	vstr	d6, [r2]
 8007afe:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007b02:	ed82 7b02 	vstr	d7, [r2, #8]
 8007b06:	e78d      	b.n	8007a24 <__kernel_rem_pio2+0x3ec>
 8007b08:	aa40      	add	r2, sp, #256	; 0x100
 8007b0a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007b0e:	ed92 6b00 	vldr	d6, [r2]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007b18:	e78a      	b.n	8007a30 <__kernel_rem_pio2+0x3f8>
 8007b1a:	eeb1 5b45 	vneg.f64	d5, d5
 8007b1e:	eeb1 6b46 	vneg.f64	d6, d6
 8007b22:	ed87 5b00 	vstr	d5, [r7]
 8007b26:	eeb1 7b47 	vneg.f64	d7, d7
 8007b2a:	ed87 6b02 	vstr	d6, [r7, #8]
 8007b2e:	e78b      	b.n	8007a48 <__kernel_rem_pio2+0x410>
	...

08007b38 <__kernel_sin>:
 8007b38:	ee10 3a90 	vmov	r3, s1
 8007b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b40:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007b44:	da04      	bge.n	8007b50 <__kernel_sin+0x18>
 8007b46:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8007b4a:	ee17 3a90 	vmov	r3, s15
 8007b4e:	b35b      	cbz	r3, 8007ba8 <__kernel_sin+0x70>
 8007b50:	ee20 6b00 	vmul.f64	d6, d0, d0
 8007b54:	ee20 5b06 	vmul.f64	d5, d0, d6
 8007b58:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8007bb0 <__kernel_sin+0x78>
 8007b5c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007bb8 <__kernel_sin+0x80>
 8007b60:	eea6 4b07 	vfma.f64	d4, d6, d7
 8007b64:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007bc0 <__kernel_sin+0x88>
 8007b68:	eea4 7b06 	vfma.f64	d7, d4, d6
 8007b6c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007bc8 <__kernel_sin+0x90>
 8007b70:	eea7 4b06 	vfma.f64	d4, d7, d6
 8007b74:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007bd0 <__kernel_sin+0x98>
 8007b78:	eea4 7b06 	vfma.f64	d7, d4, d6
 8007b7c:	b930      	cbnz	r0, 8007b8c <__kernel_sin+0x54>
 8007b7e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007bd8 <__kernel_sin+0xa0>
 8007b82:	eea6 4b07 	vfma.f64	d4, d6, d7
 8007b86:	eea4 0b05 	vfma.f64	d0, d4, d5
 8007b8a:	4770      	bx	lr
 8007b8c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8007b90:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8007b94:	eea1 7b04 	vfma.f64	d7, d1, d4
 8007b98:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8007b9c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007be0 <__kernel_sin+0xa8>
 8007ba0:	eea5 1b07 	vfma.f64	d1, d5, d7
 8007ba4:	ee30 0b41 	vsub.f64	d0, d0, d1
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	f3af 8000 	nop.w
 8007bb0:	5acfd57c 	.word	0x5acfd57c
 8007bb4:	3de5d93a 	.word	0x3de5d93a
 8007bb8:	8a2b9ceb 	.word	0x8a2b9ceb
 8007bbc:	be5ae5e6 	.word	0xbe5ae5e6
 8007bc0:	57b1fe7d 	.word	0x57b1fe7d
 8007bc4:	3ec71de3 	.word	0x3ec71de3
 8007bc8:	19c161d5 	.word	0x19c161d5
 8007bcc:	bf2a01a0 	.word	0xbf2a01a0
 8007bd0:	1110f8a6 	.word	0x1110f8a6
 8007bd4:	3f811111 	.word	0x3f811111
 8007bd8:	55555549 	.word	0x55555549
 8007bdc:	bfc55555 	.word	0xbfc55555
 8007be0:	55555549 	.word	0x55555549
 8007be4:	3fc55555 	.word	0x3fc55555

08007be8 <fabs>:
 8007be8:	ec51 0b10 	vmov	r0, r1, d0
 8007bec:	ee10 2a10 	vmov	r2, s0
 8007bf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007bf4:	ec43 2b10 	vmov	d0, r2, r3
 8007bf8:	4770      	bx	lr
 8007bfa:	0000      	movs	r0, r0
 8007bfc:	0000      	movs	r0, r0
	...

08007c00 <floor>:
 8007c00:	ee10 1a90 	vmov	r1, s1
 8007c04:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c08:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8007c0c:	2b13      	cmp	r3, #19
 8007c0e:	b530      	push	{r4, r5, lr}
 8007c10:	ee10 0a10 	vmov	r0, s0
 8007c14:	ee10 5a10 	vmov	r5, s0
 8007c18:	dc31      	bgt.n	8007c7e <floor+0x7e>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	da15      	bge.n	8007c4a <floor+0x4a>
 8007c1e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007cd8 <floor+0xd8>
 8007c22:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007c26:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c2e:	dd07      	ble.n	8007c40 <floor+0x40>
 8007c30:	2900      	cmp	r1, #0
 8007c32:	da4e      	bge.n	8007cd2 <floor+0xd2>
 8007c34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007c38:	4318      	orrs	r0, r3
 8007c3a:	d001      	beq.n	8007c40 <floor+0x40>
 8007c3c:	4928      	ldr	r1, [pc, #160]	; (8007ce0 <floor+0xe0>)
 8007c3e:	2000      	movs	r0, #0
 8007c40:	460b      	mov	r3, r1
 8007c42:	4602      	mov	r2, r0
 8007c44:	ec43 2b10 	vmov	d0, r2, r3
 8007c48:	e020      	b.n	8007c8c <floor+0x8c>
 8007c4a:	4a26      	ldr	r2, [pc, #152]	; (8007ce4 <floor+0xe4>)
 8007c4c:	411a      	asrs	r2, r3
 8007c4e:	ea01 0402 	and.w	r4, r1, r2
 8007c52:	4304      	orrs	r4, r0
 8007c54:	d01a      	beq.n	8007c8c <floor+0x8c>
 8007c56:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8007cd8 <floor+0xd8>
 8007c5a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007c5e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c66:	ddeb      	ble.n	8007c40 <floor+0x40>
 8007c68:	2900      	cmp	r1, #0
 8007c6a:	bfbe      	ittt	lt
 8007c6c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8007c70:	fa40 f303 	asrlt.w	r3, r0, r3
 8007c74:	18c9      	addlt	r1, r1, r3
 8007c76:	ea21 0102 	bic.w	r1, r1, r2
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	e7e0      	b.n	8007c40 <floor+0x40>
 8007c7e:	2b33      	cmp	r3, #51	; 0x33
 8007c80:	dd05      	ble.n	8007c8e <floor+0x8e>
 8007c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c86:	d101      	bne.n	8007c8c <floor+0x8c>
 8007c88:	ee30 0b00 	vadd.f64	d0, d0, d0
 8007c8c:	bd30      	pop	{r4, r5, pc}
 8007c8e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8007c92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c96:	40e2      	lsrs	r2, r4
 8007c98:	4202      	tst	r2, r0
 8007c9a:	d0f7      	beq.n	8007c8c <floor+0x8c>
 8007c9c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8007cd8 <floor+0xd8>
 8007ca0:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007ca4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cac:	ddc8      	ble.n	8007c40 <floor+0x40>
 8007cae:	2900      	cmp	r1, #0
 8007cb0:	da02      	bge.n	8007cb8 <floor+0xb8>
 8007cb2:	2b14      	cmp	r3, #20
 8007cb4:	d103      	bne.n	8007cbe <floor+0xbe>
 8007cb6:	3101      	adds	r1, #1
 8007cb8:	ea20 0002 	bic.w	r0, r0, r2
 8007cbc:	e7c0      	b.n	8007c40 <floor+0x40>
 8007cbe:	2401      	movs	r4, #1
 8007cc0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007cc4:	fa04 f303 	lsl.w	r3, r4, r3
 8007cc8:	4418      	add	r0, r3
 8007cca:	42a8      	cmp	r0, r5
 8007ccc:	bf38      	it	cc
 8007cce:	1909      	addcc	r1, r1, r4
 8007cd0:	e7f2      	b.n	8007cb8 <floor+0xb8>
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	4601      	mov	r1, r0
 8007cd6:	e7b3      	b.n	8007c40 <floor+0x40>
 8007cd8:	8800759c 	.word	0x8800759c
 8007cdc:	7e37e43c 	.word	0x7e37e43c
 8007ce0:	bff00000 	.word	0xbff00000
 8007ce4:	000fffff 	.word	0x000fffff

08007ce8 <scalbn>:
 8007ce8:	b082      	sub	sp, #8
 8007cea:	ed8d 0b00 	vstr	d0, [sp]
 8007cee:	9b01      	ldr	r3, [sp, #4]
 8007cf0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007cf4:	b9a2      	cbnz	r2, 8007d20 <scalbn+0x38>
 8007cf6:	9a00      	ldr	r2, [sp, #0]
 8007cf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	d03a      	beq.n	8007d76 <scalbn+0x8e>
 8007d00:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8007dd8 <scalbn+0xf0>
 8007d04:	4b40      	ldr	r3, [pc, #256]	; (8007e08 <scalbn+0x120>)
 8007d06:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007d0a:	4298      	cmp	r0, r3
 8007d0c:	ed8d 7b00 	vstr	d7, [sp]
 8007d10:	da11      	bge.n	8007d36 <scalbn+0x4e>
 8007d12:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8007de0 <scalbn+0xf8>
 8007d16:	ed9d 6b00 	vldr	d6, [sp]
 8007d1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d1e:	e007      	b.n	8007d30 <scalbn+0x48>
 8007d20:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007d24:	428a      	cmp	r2, r1
 8007d26:	d10a      	bne.n	8007d3e <scalbn+0x56>
 8007d28:	ed9d 7b00 	vldr	d7, [sp]
 8007d2c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007d30:	ed8d 7b00 	vstr	d7, [sp]
 8007d34:	e01f      	b.n	8007d76 <scalbn+0x8e>
 8007d36:	9b01      	ldr	r3, [sp, #4]
 8007d38:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007d3c:	3a36      	subs	r2, #54	; 0x36
 8007d3e:	4402      	add	r2, r0
 8007d40:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007d44:	428a      	cmp	r2, r1
 8007d46:	dd0a      	ble.n	8007d5e <scalbn+0x76>
 8007d48:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8007de8 <scalbn+0x100>
 8007d4c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8007df0 <scalbn+0x108>
 8007d50:	eeb0 6b47 	vmov.f64	d6, d7
 8007d54:	9b01      	ldr	r3, [sp, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	fe27 7b05 	vselge.f64	d7, d7, d5
 8007d5c:	e7dd      	b.n	8007d1a <scalbn+0x32>
 8007d5e:	2a00      	cmp	r2, #0
 8007d60:	dd0d      	ble.n	8007d7e <scalbn+0x96>
 8007d62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d6a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d6e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007d72:	e9cd 0100 	strd	r0, r1, [sp]
 8007d76:	ed9d 0b00 	vldr	d0, [sp]
 8007d7a:	b002      	add	sp, #8
 8007d7c:	4770      	bx	lr
 8007d7e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007d82:	da18      	bge.n	8007db6 <scalbn+0xce>
 8007d84:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d88:	4298      	cmp	r0, r3
 8007d8a:	9b01      	ldr	r3, [sp, #4]
 8007d8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d90:	dd09      	ble.n	8007da6 <scalbn+0xbe>
 8007d92:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8007de8 <scalbn+0x100>
 8007d96:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8007df0 <scalbn+0x108>
 8007d9a:	eeb0 6b47 	vmov.f64	d6, d7
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8007da4:	e7b9      	b.n	8007d1a <scalbn+0x32>
 8007da6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8007de0 <scalbn+0xf8>
 8007daa:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8007df8 <scalbn+0x110>
 8007dae:	eeb0 6b47 	vmov.f64	d6, d7
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	e7f4      	b.n	8007da0 <scalbn+0xb8>
 8007db6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007dbe:	3236      	adds	r2, #54	; 0x36
 8007dc0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007dc4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007dc8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8007e00 <scalbn+0x118>
 8007dcc:	ec41 0b17 	vmov	d7, r0, r1
 8007dd0:	e7a3      	b.n	8007d1a <scalbn+0x32>
 8007dd2:	bf00      	nop
 8007dd4:	f3af 8000 	nop.w
 8007dd8:	00000000 	.word	0x00000000
 8007ddc:	43500000 	.word	0x43500000
 8007de0:	c2f8f359 	.word	0xc2f8f359
 8007de4:	01a56e1f 	.word	0x01a56e1f
 8007de8:	8800759c 	.word	0x8800759c
 8007dec:	7e37e43c 	.word	0x7e37e43c
 8007df0:	8800759c 	.word	0x8800759c
 8007df4:	fe37e43c 	.word	0xfe37e43c
 8007df8:	c2f8f359 	.word	0xc2f8f359
 8007dfc:	81a56e1f 	.word	0x81a56e1f
 8007e00:	00000000 	.word	0x00000000
 8007e04:	3c900000 	.word	0x3c900000
 8007e08:	ffff3cb0 	.word	0xffff3cb0

08007e0c <abort>:
 8007e0c:	b508      	push	{r3, lr}
 8007e0e:	2006      	movs	r0, #6
 8007e10:	f000 fc46 	bl	80086a0 <raise>
 8007e14:	2001      	movs	r0, #1
 8007e16:	f7f9 f9d0 	bl	80011ba <_exit>
	...

08007e1c <__assert_func>:
 8007e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e1e:	4614      	mov	r4, r2
 8007e20:	461a      	mov	r2, r3
 8007e22:	4b09      	ldr	r3, [pc, #36]	; (8007e48 <__assert_func+0x2c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4605      	mov	r5, r0
 8007e28:	68d8      	ldr	r0, [r3, #12]
 8007e2a:	b14c      	cbz	r4, 8007e40 <__assert_func+0x24>
 8007e2c:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <__assert_func+0x30>)
 8007e2e:	9100      	str	r1, [sp, #0]
 8007e30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e34:	4906      	ldr	r1, [pc, #24]	; (8007e50 <__assert_func+0x34>)
 8007e36:	462b      	mov	r3, r5
 8007e38:	f000 f814 	bl	8007e64 <fiprintf>
 8007e3c:	f7ff ffe6 	bl	8007e0c <abort>
 8007e40:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <__assert_func+0x38>)
 8007e42:	461c      	mov	r4, r3
 8007e44:	e7f3      	b.n	8007e2e <__assert_func+0x12>
 8007e46:	bf00      	nop
 8007e48:	20000014 	.word	0x20000014
 8007e4c:	08009890 	.word	0x08009890
 8007e50:	0800989d 	.word	0x0800989d
 8007e54:	080098cb 	.word	0x080098cb

08007e58 <__errno>:
 8007e58:	4b01      	ldr	r3, [pc, #4]	; (8007e60 <__errno+0x8>)
 8007e5a:	6818      	ldr	r0, [r3, #0]
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	20000014 	.word	0x20000014

08007e64 <fiprintf>:
 8007e64:	b40e      	push	{r1, r2, r3}
 8007e66:	b503      	push	{r0, r1, lr}
 8007e68:	4601      	mov	r1, r0
 8007e6a:	ab03      	add	r3, sp, #12
 8007e6c:	4805      	ldr	r0, [pc, #20]	; (8007e84 <fiprintf+0x20>)
 8007e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e72:	6800      	ldr	r0, [r0, #0]
 8007e74:	9301      	str	r3, [sp, #4]
 8007e76:	f000 f917 	bl	80080a8 <_vfiprintf_r>
 8007e7a:	b002      	add	sp, #8
 8007e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e80:	b003      	add	sp, #12
 8007e82:	4770      	bx	lr
 8007e84:	20000014 	.word	0x20000014

08007e88 <__libc_init_array>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	4d0d      	ldr	r5, [pc, #52]	; (8007ec0 <__libc_init_array+0x38>)
 8007e8c:	4c0d      	ldr	r4, [pc, #52]	; (8007ec4 <__libc_init_array+0x3c>)
 8007e8e:	1b64      	subs	r4, r4, r5
 8007e90:	10a4      	asrs	r4, r4, #2
 8007e92:	2600      	movs	r6, #0
 8007e94:	42a6      	cmp	r6, r4
 8007e96:	d109      	bne.n	8007eac <__libc_init_array+0x24>
 8007e98:	4d0b      	ldr	r5, [pc, #44]	; (8007ec8 <__libc_init_array+0x40>)
 8007e9a:	4c0c      	ldr	r4, [pc, #48]	; (8007ecc <__libc_init_array+0x44>)
 8007e9c:	f000 ffb2 	bl	8008e04 <_init>
 8007ea0:	1b64      	subs	r4, r4, r5
 8007ea2:	10a4      	asrs	r4, r4, #2
 8007ea4:	2600      	movs	r6, #0
 8007ea6:	42a6      	cmp	r6, r4
 8007ea8:	d105      	bne.n	8007eb6 <__libc_init_array+0x2e>
 8007eaa:	bd70      	pop	{r4, r5, r6, pc}
 8007eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb0:	4798      	blx	r3
 8007eb2:	3601      	adds	r6, #1
 8007eb4:	e7ee      	b.n	8007e94 <__libc_init_array+0xc>
 8007eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eba:	4798      	blx	r3
 8007ebc:	3601      	adds	r6, #1
 8007ebe:	e7f2      	b.n	8007ea6 <__libc_init_array+0x1e>
 8007ec0:	08009964 	.word	0x08009964
 8007ec4:	08009964 	.word	0x08009964
 8007ec8:	08009964 	.word	0x08009964
 8007ecc:	08009968 	.word	0x08009968

08007ed0 <malloc>:
 8007ed0:	4b02      	ldr	r3, [pc, #8]	; (8007edc <malloc+0xc>)
 8007ed2:	4601      	mov	r1, r0
 8007ed4:	6818      	ldr	r0, [r3, #0]
 8007ed6:	f000 b863 	b.w	8007fa0 <_malloc_r>
 8007eda:	bf00      	nop
 8007edc:	20000014 	.word	0x20000014

08007ee0 <free>:
 8007ee0:	4b02      	ldr	r3, [pc, #8]	; (8007eec <free+0xc>)
 8007ee2:	4601      	mov	r1, r0
 8007ee4:	6818      	ldr	r0, [r3, #0]
 8007ee6:	f000 b80b 	b.w	8007f00 <_free_r>
 8007eea:	bf00      	nop
 8007eec:	20000014 	.word	0x20000014

08007ef0 <memset>:
 8007ef0:	4402      	add	r2, r0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d100      	bne.n	8007efa <memset+0xa>
 8007ef8:	4770      	bx	lr
 8007efa:	f803 1b01 	strb.w	r1, [r3], #1
 8007efe:	e7f9      	b.n	8007ef4 <memset+0x4>

08007f00 <_free_r>:
 8007f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f02:	2900      	cmp	r1, #0
 8007f04:	d048      	beq.n	8007f98 <_free_r+0x98>
 8007f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f0a:	9001      	str	r0, [sp, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f12:	bfb8      	it	lt
 8007f14:	18e4      	addlt	r4, r4, r3
 8007f16:	f000 febd 	bl	8008c94 <__malloc_lock>
 8007f1a:	4a20      	ldr	r2, [pc, #128]	; (8007f9c <_free_r+0x9c>)
 8007f1c:	9801      	ldr	r0, [sp, #4]
 8007f1e:	6813      	ldr	r3, [r2, #0]
 8007f20:	4615      	mov	r5, r2
 8007f22:	b933      	cbnz	r3, 8007f32 <_free_r+0x32>
 8007f24:	6063      	str	r3, [r4, #4]
 8007f26:	6014      	str	r4, [r2, #0]
 8007f28:	b003      	add	sp, #12
 8007f2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f2e:	f000 beb7 	b.w	8008ca0 <__malloc_unlock>
 8007f32:	42a3      	cmp	r3, r4
 8007f34:	d90b      	bls.n	8007f4e <_free_r+0x4e>
 8007f36:	6821      	ldr	r1, [r4, #0]
 8007f38:	1862      	adds	r2, r4, r1
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	bf04      	itt	eq
 8007f3e:	681a      	ldreq	r2, [r3, #0]
 8007f40:	685b      	ldreq	r3, [r3, #4]
 8007f42:	6063      	str	r3, [r4, #4]
 8007f44:	bf04      	itt	eq
 8007f46:	1852      	addeq	r2, r2, r1
 8007f48:	6022      	streq	r2, [r4, #0]
 8007f4a:	602c      	str	r4, [r5, #0]
 8007f4c:	e7ec      	b.n	8007f28 <_free_r+0x28>
 8007f4e:	461a      	mov	r2, r3
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	b10b      	cbz	r3, 8007f58 <_free_r+0x58>
 8007f54:	42a3      	cmp	r3, r4
 8007f56:	d9fa      	bls.n	8007f4e <_free_r+0x4e>
 8007f58:	6811      	ldr	r1, [r2, #0]
 8007f5a:	1855      	adds	r5, r2, r1
 8007f5c:	42a5      	cmp	r5, r4
 8007f5e:	d10b      	bne.n	8007f78 <_free_r+0x78>
 8007f60:	6824      	ldr	r4, [r4, #0]
 8007f62:	4421      	add	r1, r4
 8007f64:	1854      	adds	r4, r2, r1
 8007f66:	42a3      	cmp	r3, r4
 8007f68:	6011      	str	r1, [r2, #0]
 8007f6a:	d1dd      	bne.n	8007f28 <_free_r+0x28>
 8007f6c:	681c      	ldr	r4, [r3, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	6053      	str	r3, [r2, #4]
 8007f72:	4421      	add	r1, r4
 8007f74:	6011      	str	r1, [r2, #0]
 8007f76:	e7d7      	b.n	8007f28 <_free_r+0x28>
 8007f78:	d902      	bls.n	8007f80 <_free_r+0x80>
 8007f7a:	230c      	movs	r3, #12
 8007f7c:	6003      	str	r3, [r0, #0]
 8007f7e:	e7d3      	b.n	8007f28 <_free_r+0x28>
 8007f80:	6825      	ldr	r5, [r4, #0]
 8007f82:	1961      	adds	r1, r4, r5
 8007f84:	428b      	cmp	r3, r1
 8007f86:	bf04      	itt	eq
 8007f88:	6819      	ldreq	r1, [r3, #0]
 8007f8a:	685b      	ldreq	r3, [r3, #4]
 8007f8c:	6063      	str	r3, [r4, #4]
 8007f8e:	bf04      	itt	eq
 8007f90:	1949      	addeq	r1, r1, r5
 8007f92:	6021      	streq	r1, [r4, #0]
 8007f94:	6054      	str	r4, [r2, #4]
 8007f96:	e7c7      	b.n	8007f28 <_free_r+0x28>
 8007f98:	b003      	add	sp, #12
 8007f9a:	bd30      	pop	{r4, r5, pc}
 8007f9c:	2000009c 	.word	0x2000009c

08007fa0 <_malloc_r>:
 8007fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa2:	1ccd      	adds	r5, r1, #3
 8007fa4:	f025 0503 	bic.w	r5, r5, #3
 8007fa8:	3508      	adds	r5, #8
 8007faa:	2d0c      	cmp	r5, #12
 8007fac:	bf38      	it	cc
 8007fae:	250c      	movcc	r5, #12
 8007fb0:	2d00      	cmp	r5, #0
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	db01      	blt.n	8007fba <_malloc_r+0x1a>
 8007fb6:	42a9      	cmp	r1, r5
 8007fb8:	d903      	bls.n	8007fc2 <_malloc_r+0x22>
 8007fba:	230c      	movs	r3, #12
 8007fbc:	6033      	str	r3, [r6, #0]
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fc2:	f000 fe67 	bl	8008c94 <__malloc_lock>
 8007fc6:	4921      	ldr	r1, [pc, #132]	; (800804c <_malloc_r+0xac>)
 8007fc8:	680a      	ldr	r2, [r1, #0]
 8007fca:	4614      	mov	r4, r2
 8007fcc:	b99c      	cbnz	r4, 8007ff6 <_malloc_r+0x56>
 8007fce:	4f20      	ldr	r7, [pc, #128]	; (8008050 <_malloc_r+0xb0>)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	b923      	cbnz	r3, 8007fde <_malloc_r+0x3e>
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f000 fb2a 	bl	8008630 <_sbrk_r>
 8007fdc:	6038      	str	r0, [r7, #0]
 8007fde:	4629      	mov	r1, r5
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f000 fb25 	bl	8008630 <_sbrk_r>
 8007fe6:	1c43      	adds	r3, r0, #1
 8007fe8:	d123      	bne.n	8008032 <_malloc_r+0x92>
 8007fea:	230c      	movs	r3, #12
 8007fec:	6033      	str	r3, [r6, #0]
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f000 fe56 	bl	8008ca0 <__malloc_unlock>
 8007ff4:	e7e3      	b.n	8007fbe <_malloc_r+0x1e>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	1b5b      	subs	r3, r3, r5
 8007ffa:	d417      	bmi.n	800802c <_malloc_r+0x8c>
 8007ffc:	2b0b      	cmp	r3, #11
 8007ffe:	d903      	bls.n	8008008 <_malloc_r+0x68>
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	441c      	add	r4, r3
 8008004:	6025      	str	r5, [r4, #0]
 8008006:	e004      	b.n	8008012 <_malloc_r+0x72>
 8008008:	6863      	ldr	r3, [r4, #4]
 800800a:	42a2      	cmp	r2, r4
 800800c:	bf0c      	ite	eq
 800800e:	600b      	streq	r3, [r1, #0]
 8008010:	6053      	strne	r3, [r2, #4]
 8008012:	4630      	mov	r0, r6
 8008014:	f000 fe44 	bl	8008ca0 <__malloc_unlock>
 8008018:	f104 000b 	add.w	r0, r4, #11
 800801c:	1d23      	adds	r3, r4, #4
 800801e:	f020 0007 	bic.w	r0, r0, #7
 8008022:	1ac2      	subs	r2, r0, r3
 8008024:	d0cc      	beq.n	8007fc0 <_malloc_r+0x20>
 8008026:	1a1b      	subs	r3, r3, r0
 8008028:	50a3      	str	r3, [r4, r2]
 800802a:	e7c9      	b.n	8007fc0 <_malloc_r+0x20>
 800802c:	4622      	mov	r2, r4
 800802e:	6864      	ldr	r4, [r4, #4]
 8008030:	e7cc      	b.n	8007fcc <_malloc_r+0x2c>
 8008032:	1cc4      	adds	r4, r0, #3
 8008034:	f024 0403 	bic.w	r4, r4, #3
 8008038:	42a0      	cmp	r0, r4
 800803a:	d0e3      	beq.n	8008004 <_malloc_r+0x64>
 800803c:	1a21      	subs	r1, r4, r0
 800803e:	4630      	mov	r0, r6
 8008040:	f000 faf6 	bl	8008630 <_sbrk_r>
 8008044:	3001      	adds	r0, #1
 8008046:	d1dd      	bne.n	8008004 <_malloc_r+0x64>
 8008048:	e7cf      	b.n	8007fea <_malloc_r+0x4a>
 800804a:	bf00      	nop
 800804c:	2000009c 	.word	0x2000009c
 8008050:	200000a0 	.word	0x200000a0

08008054 <__sfputc_r>:
 8008054:	6893      	ldr	r3, [r2, #8]
 8008056:	3b01      	subs	r3, #1
 8008058:	2b00      	cmp	r3, #0
 800805a:	b410      	push	{r4}
 800805c:	6093      	str	r3, [r2, #8]
 800805e:	da08      	bge.n	8008072 <__sfputc_r+0x1e>
 8008060:	6994      	ldr	r4, [r2, #24]
 8008062:	42a3      	cmp	r3, r4
 8008064:	db01      	blt.n	800806a <__sfputc_r+0x16>
 8008066:	290a      	cmp	r1, #10
 8008068:	d103      	bne.n	8008072 <__sfputc_r+0x1e>
 800806a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800806e:	f000 bb33 	b.w	80086d8 <__swbuf_r>
 8008072:	6813      	ldr	r3, [r2, #0]
 8008074:	1c58      	adds	r0, r3, #1
 8008076:	6010      	str	r0, [r2, #0]
 8008078:	7019      	strb	r1, [r3, #0]
 800807a:	4608      	mov	r0, r1
 800807c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008080:	4770      	bx	lr

08008082 <__sfputs_r>:
 8008082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008084:	4606      	mov	r6, r0
 8008086:	460f      	mov	r7, r1
 8008088:	4614      	mov	r4, r2
 800808a:	18d5      	adds	r5, r2, r3
 800808c:	42ac      	cmp	r4, r5
 800808e:	d101      	bne.n	8008094 <__sfputs_r+0x12>
 8008090:	2000      	movs	r0, #0
 8008092:	e007      	b.n	80080a4 <__sfputs_r+0x22>
 8008094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008098:	463a      	mov	r2, r7
 800809a:	4630      	mov	r0, r6
 800809c:	f7ff ffda 	bl	8008054 <__sfputc_r>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d1f3      	bne.n	800808c <__sfputs_r+0xa>
 80080a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080a8 <_vfiprintf_r>:
 80080a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ac:	460d      	mov	r5, r1
 80080ae:	b09d      	sub	sp, #116	; 0x74
 80080b0:	4614      	mov	r4, r2
 80080b2:	4698      	mov	r8, r3
 80080b4:	4606      	mov	r6, r0
 80080b6:	b118      	cbz	r0, 80080c0 <_vfiprintf_r+0x18>
 80080b8:	6983      	ldr	r3, [r0, #24]
 80080ba:	b90b      	cbnz	r3, 80080c0 <_vfiprintf_r+0x18>
 80080bc:	f000 fce6 	bl	8008a8c <__sinit>
 80080c0:	4b89      	ldr	r3, [pc, #548]	; (80082e8 <_vfiprintf_r+0x240>)
 80080c2:	429d      	cmp	r5, r3
 80080c4:	d11b      	bne.n	80080fe <_vfiprintf_r+0x56>
 80080c6:	6875      	ldr	r5, [r6, #4]
 80080c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080ca:	07d9      	lsls	r1, r3, #31
 80080cc:	d405      	bmi.n	80080da <_vfiprintf_r+0x32>
 80080ce:	89ab      	ldrh	r3, [r5, #12]
 80080d0:	059a      	lsls	r2, r3, #22
 80080d2:	d402      	bmi.n	80080da <_vfiprintf_r+0x32>
 80080d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080d6:	f000 fd77 	bl	8008bc8 <__retarget_lock_acquire_recursive>
 80080da:	89ab      	ldrh	r3, [r5, #12]
 80080dc:	071b      	lsls	r3, r3, #28
 80080de:	d501      	bpl.n	80080e4 <_vfiprintf_r+0x3c>
 80080e0:	692b      	ldr	r3, [r5, #16]
 80080e2:	b9eb      	cbnz	r3, 8008120 <_vfiprintf_r+0x78>
 80080e4:	4629      	mov	r1, r5
 80080e6:	4630      	mov	r0, r6
 80080e8:	f000 fb48 	bl	800877c <__swsetup_r>
 80080ec:	b1c0      	cbz	r0, 8008120 <_vfiprintf_r+0x78>
 80080ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080f0:	07dc      	lsls	r4, r3, #31
 80080f2:	d50e      	bpl.n	8008112 <_vfiprintf_r+0x6a>
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080f8:	b01d      	add	sp, #116	; 0x74
 80080fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fe:	4b7b      	ldr	r3, [pc, #492]	; (80082ec <_vfiprintf_r+0x244>)
 8008100:	429d      	cmp	r5, r3
 8008102:	d101      	bne.n	8008108 <_vfiprintf_r+0x60>
 8008104:	68b5      	ldr	r5, [r6, #8]
 8008106:	e7df      	b.n	80080c8 <_vfiprintf_r+0x20>
 8008108:	4b79      	ldr	r3, [pc, #484]	; (80082f0 <_vfiprintf_r+0x248>)
 800810a:	429d      	cmp	r5, r3
 800810c:	bf08      	it	eq
 800810e:	68f5      	ldreq	r5, [r6, #12]
 8008110:	e7da      	b.n	80080c8 <_vfiprintf_r+0x20>
 8008112:	89ab      	ldrh	r3, [r5, #12]
 8008114:	0598      	lsls	r0, r3, #22
 8008116:	d4ed      	bmi.n	80080f4 <_vfiprintf_r+0x4c>
 8008118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800811a:	f000 fd56 	bl	8008bca <__retarget_lock_release_recursive>
 800811e:	e7e9      	b.n	80080f4 <_vfiprintf_r+0x4c>
 8008120:	2300      	movs	r3, #0
 8008122:	9309      	str	r3, [sp, #36]	; 0x24
 8008124:	2320      	movs	r3, #32
 8008126:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800812a:	f8cd 800c 	str.w	r8, [sp, #12]
 800812e:	2330      	movs	r3, #48	; 0x30
 8008130:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80082f4 <_vfiprintf_r+0x24c>
 8008134:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008138:	f04f 0901 	mov.w	r9, #1
 800813c:	4623      	mov	r3, r4
 800813e:	469a      	mov	sl, r3
 8008140:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008144:	b10a      	cbz	r2, 800814a <_vfiprintf_r+0xa2>
 8008146:	2a25      	cmp	r2, #37	; 0x25
 8008148:	d1f9      	bne.n	800813e <_vfiprintf_r+0x96>
 800814a:	ebba 0b04 	subs.w	fp, sl, r4
 800814e:	d00b      	beq.n	8008168 <_vfiprintf_r+0xc0>
 8008150:	465b      	mov	r3, fp
 8008152:	4622      	mov	r2, r4
 8008154:	4629      	mov	r1, r5
 8008156:	4630      	mov	r0, r6
 8008158:	f7ff ff93 	bl	8008082 <__sfputs_r>
 800815c:	3001      	adds	r0, #1
 800815e:	f000 80aa 	beq.w	80082b6 <_vfiprintf_r+0x20e>
 8008162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008164:	445a      	add	r2, fp
 8008166:	9209      	str	r2, [sp, #36]	; 0x24
 8008168:	f89a 3000 	ldrb.w	r3, [sl]
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 80a2 	beq.w	80082b6 <_vfiprintf_r+0x20e>
 8008172:	2300      	movs	r3, #0
 8008174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800817c:	f10a 0a01 	add.w	sl, sl, #1
 8008180:	9304      	str	r3, [sp, #16]
 8008182:	9307      	str	r3, [sp, #28]
 8008184:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008188:	931a      	str	r3, [sp, #104]	; 0x68
 800818a:	4654      	mov	r4, sl
 800818c:	2205      	movs	r2, #5
 800818e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008192:	4858      	ldr	r0, [pc, #352]	; (80082f4 <_vfiprintf_r+0x24c>)
 8008194:	f7f8 f8a4 	bl	80002e0 <memchr>
 8008198:	9a04      	ldr	r2, [sp, #16]
 800819a:	b9d8      	cbnz	r0, 80081d4 <_vfiprintf_r+0x12c>
 800819c:	06d1      	lsls	r1, r2, #27
 800819e:	bf44      	itt	mi
 80081a0:	2320      	movmi	r3, #32
 80081a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081a6:	0713      	lsls	r3, r2, #28
 80081a8:	bf44      	itt	mi
 80081aa:	232b      	movmi	r3, #43	; 0x2b
 80081ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081b0:	f89a 3000 	ldrb.w	r3, [sl]
 80081b4:	2b2a      	cmp	r3, #42	; 0x2a
 80081b6:	d015      	beq.n	80081e4 <_vfiprintf_r+0x13c>
 80081b8:	9a07      	ldr	r2, [sp, #28]
 80081ba:	4654      	mov	r4, sl
 80081bc:	2000      	movs	r0, #0
 80081be:	f04f 0c0a 	mov.w	ip, #10
 80081c2:	4621      	mov	r1, r4
 80081c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081c8:	3b30      	subs	r3, #48	; 0x30
 80081ca:	2b09      	cmp	r3, #9
 80081cc:	d94e      	bls.n	800826c <_vfiprintf_r+0x1c4>
 80081ce:	b1b0      	cbz	r0, 80081fe <_vfiprintf_r+0x156>
 80081d0:	9207      	str	r2, [sp, #28]
 80081d2:	e014      	b.n	80081fe <_vfiprintf_r+0x156>
 80081d4:	eba0 0308 	sub.w	r3, r0, r8
 80081d8:	fa09 f303 	lsl.w	r3, r9, r3
 80081dc:	4313      	orrs	r3, r2
 80081de:	9304      	str	r3, [sp, #16]
 80081e0:	46a2      	mov	sl, r4
 80081e2:	e7d2      	b.n	800818a <_vfiprintf_r+0xe2>
 80081e4:	9b03      	ldr	r3, [sp, #12]
 80081e6:	1d19      	adds	r1, r3, #4
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	9103      	str	r1, [sp, #12]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	bfbb      	ittet	lt
 80081f0:	425b      	neglt	r3, r3
 80081f2:	f042 0202 	orrlt.w	r2, r2, #2
 80081f6:	9307      	strge	r3, [sp, #28]
 80081f8:	9307      	strlt	r3, [sp, #28]
 80081fa:	bfb8      	it	lt
 80081fc:	9204      	strlt	r2, [sp, #16]
 80081fe:	7823      	ldrb	r3, [r4, #0]
 8008200:	2b2e      	cmp	r3, #46	; 0x2e
 8008202:	d10c      	bne.n	800821e <_vfiprintf_r+0x176>
 8008204:	7863      	ldrb	r3, [r4, #1]
 8008206:	2b2a      	cmp	r3, #42	; 0x2a
 8008208:	d135      	bne.n	8008276 <_vfiprintf_r+0x1ce>
 800820a:	9b03      	ldr	r3, [sp, #12]
 800820c:	1d1a      	adds	r2, r3, #4
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	9203      	str	r2, [sp, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	bfb8      	it	lt
 8008216:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800821a:	3402      	adds	r4, #2
 800821c:	9305      	str	r3, [sp, #20]
 800821e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008304 <_vfiprintf_r+0x25c>
 8008222:	7821      	ldrb	r1, [r4, #0]
 8008224:	2203      	movs	r2, #3
 8008226:	4650      	mov	r0, sl
 8008228:	f7f8 f85a 	bl	80002e0 <memchr>
 800822c:	b140      	cbz	r0, 8008240 <_vfiprintf_r+0x198>
 800822e:	2340      	movs	r3, #64	; 0x40
 8008230:	eba0 000a 	sub.w	r0, r0, sl
 8008234:	fa03 f000 	lsl.w	r0, r3, r0
 8008238:	9b04      	ldr	r3, [sp, #16]
 800823a:	4303      	orrs	r3, r0
 800823c:	3401      	adds	r4, #1
 800823e:	9304      	str	r3, [sp, #16]
 8008240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008244:	482c      	ldr	r0, [pc, #176]	; (80082f8 <_vfiprintf_r+0x250>)
 8008246:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800824a:	2206      	movs	r2, #6
 800824c:	f7f8 f848 	bl	80002e0 <memchr>
 8008250:	2800      	cmp	r0, #0
 8008252:	d03f      	beq.n	80082d4 <_vfiprintf_r+0x22c>
 8008254:	4b29      	ldr	r3, [pc, #164]	; (80082fc <_vfiprintf_r+0x254>)
 8008256:	bb1b      	cbnz	r3, 80082a0 <_vfiprintf_r+0x1f8>
 8008258:	9b03      	ldr	r3, [sp, #12]
 800825a:	3307      	adds	r3, #7
 800825c:	f023 0307 	bic.w	r3, r3, #7
 8008260:	3308      	adds	r3, #8
 8008262:	9303      	str	r3, [sp, #12]
 8008264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008266:	443b      	add	r3, r7
 8008268:	9309      	str	r3, [sp, #36]	; 0x24
 800826a:	e767      	b.n	800813c <_vfiprintf_r+0x94>
 800826c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008270:	460c      	mov	r4, r1
 8008272:	2001      	movs	r0, #1
 8008274:	e7a5      	b.n	80081c2 <_vfiprintf_r+0x11a>
 8008276:	2300      	movs	r3, #0
 8008278:	3401      	adds	r4, #1
 800827a:	9305      	str	r3, [sp, #20]
 800827c:	4619      	mov	r1, r3
 800827e:	f04f 0c0a 	mov.w	ip, #10
 8008282:	4620      	mov	r0, r4
 8008284:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008288:	3a30      	subs	r2, #48	; 0x30
 800828a:	2a09      	cmp	r2, #9
 800828c:	d903      	bls.n	8008296 <_vfiprintf_r+0x1ee>
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0c5      	beq.n	800821e <_vfiprintf_r+0x176>
 8008292:	9105      	str	r1, [sp, #20]
 8008294:	e7c3      	b.n	800821e <_vfiprintf_r+0x176>
 8008296:	fb0c 2101 	mla	r1, ip, r1, r2
 800829a:	4604      	mov	r4, r0
 800829c:	2301      	movs	r3, #1
 800829e:	e7f0      	b.n	8008282 <_vfiprintf_r+0x1da>
 80082a0:	ab03      	add	r3, sp, #12
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	462a      	mov	r2, r5
 80082a6:	4b16      	ldr	r3, [pc, #88]	; (8008300 <_vfiprintf_r+0x258>)
 80082a8:	a904      	add	r1, sp, #16
 80082aa:	4630      	mov	r0, r6
 80082ac:	f3af 8000 	nop.w
 80082b0:	4607      	mov	r7, r0
 80082b2:	1c78      	adds	r0, r7, #1
 80082b4:	d1d6      	bne.n	8008264 <_vfiprintf_r+0x1bc>
 80082b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082b8:	07d9      	lsls	r1, r3, #31
 80082ba:	d405      	bmi.n	80082c8 <_vfiprintf_r+0x220>
 80082bc:	89ab      	ldrh	r3, [r5, #12]
 80082be:	059a      	lsls	r2, r3, #22
 80082c0:	d402      	bmi.n	80082c8 <_vfiprintf_r+0x220>
 80082c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082c4:	f000 fc81 	bl	8008bca <__retarget_lock_release_recursive>
 80082c8:	89ab      	ldrh	r3, [r5, #12]
 80082ca:	065b      	lsls	r3, r3, #25
 80082cc:	f53f af12 	bmi.w	80080f4 <_vfiprintf_r+0x4c>
 80082d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082d2:	e711      	b.n	80080f8 <_vfiprintf_r+0x50>
 80082d4:	ab03      	add	r3, sp, #12
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	462a      	mov	r2, r5
 80082da:	4b09      	ldr	r3, [pc, #36]	; (8008300 <_vfiprintf_r+0x258>)
 80082dc:	a904      	add	r1, sp, #16
 80082de:	4630      	mov	r0, r6
 80082e0:	f000 f880 	bl	80083e4 <_printf_i>
 80082e4:	e7e4      	b.n	80082b0 <_vfiprintf_r+0x208>
 80082e6:	bf00      	nop
 80082e8:	08009924 	.word	0x08009924
 80082ec:	08009944 	.word	0x08009944
 80082f0:	08009904 	.word	0x08009904
 80082f4:	080098d0 	.word	0x080098d0
 80082f8:	080098da 	.word	0x080098da
 80082fc:	00000000 	.word	0x00000000
 8008300:	08008083 	.word	0x08008083
 8008304:	080098d6 	.word	0x080098d6

08008308 <_printf_common>:
 8008308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800830c:	4616      	mov	r6, r2
 800830e:	4699      	mov	r9, r3
 8008310:	688a      	ldr	r2, [r1, #8]
 8008312:	690b      	ldr	r3, [r1, #16]
 8008314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008318:	4293      	cmp	r3, r2
 800831a:	bfb8      	it	lt
 800831c:	4613      	movlt	r3, r2
 800831e:	6033      	str	r3, [r6, #0]
 8008320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008324:	4607      	mov	r7, r0
 8008326:	460c      	mov	r4, r1
 8008328:	b10a      	cbz	r2, 800832e <_printf_common+0x26>
 800832a:	3301      	adds	r3, #1
 800832c:	6033      	str	r3, [r6, #0]
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	0699      	lsls	r1, r3, #26
 8008332:	bf42      	ittt	mi
 8008334:	6833      	ldrmi	r3, [r6, #0]
 8008336:	3302      	addmi	r3, #2
 8008338:	6033      	strmi	r3, [r6, #0]
 800833a:	6825      	ldr	r5, [r4, #0]
 800833c:	f015 0506 	ands.w	r5, r5, #6
 8008340:	d106      	bne.n	8008350 <_printf_common+0x48>
 8008342:	f104 0a19 	add.w	sl, r4, #25
 8008346:	68e3      	ldr	r3, [r4, #12]
 8008348:	6832      	ldr	r2, [r6, #0]
 800834a:	1a9b      	subs	r3, r3, r2
 800834c:	42ab      	cmp	r3, r5
 800834e:	dc26      	bgt.n	800839e <_printf_common+0x96>
 8008350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008354:	1e13      	subs	r3, r2, #0
 8008356:	6822      	ldr	r2, [r4, #0]
 8008358:	bf18      	it	ne
 800835a:	2301      	movne	r3, #1
 800835c:	0692      	lsls	r2, r2, #26
 800835e:	d42b      	bmi.n	80083b8 <_printf_common+0xb0>
 8008360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008364:	4649      	mov	r1, r9
 8008366:	4638      	mov	r0, r7
 8008368:	47c0      	blx	r8
 800836a:	3001      	adds	r0, #1
 800836c:	d01e      	beq.n	80083ac <_printf_common+0xa4>
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	68e5      	ldr	r5, [r4, #12]
 8008372:	6832      	ldr	r2, [r6, #0]
 8008374:	f003 0306 	and.w	r3, r3, #6
 8008378:	2b04      	cmp	r3, #4
 800837a:	bf08      	it	eq
 800837c:	1aad      	subeq	r5, r5, r2
 800837e:	68a3      	ldr	r3, [r4, #8]
 8008380:	6922      	ldr	r2, [r4, #16]
 8008382:	bf0c      	ite	eq
 8008384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008388:	2500      	movne	r5, #0
 800838a:	4293      	cmp	r3, r2
 800838c:	bfc4      	itt	gt
 800838e:	1a9b      	subgt	r3, r3, r2
 8008390:	18ed      	addgt	r5, r5, r3
 8008392:	2600      	movs	r6, #0
 8008394:	341a      	adds	r4, #26
 8008396:	42b5      	cmp	r5, r6
 8008398:	d11a      	bne.n	80083d0 <_printf_common+0xc8>
 800839a:	2000      	movs	r0, #0
 800839c:	e008      	b.n	80083b0 <_printf_common+0xa8>
 800839e:	2301      	movs	r3, #1
 80083a0:	4652      	mov	r2, sl
 80083a2:	4649      	mov	r1, r9
 80083a4:	4638      	mov	r0, r7
 80083a6:	47c0      	blx	r8
 80083a8:	3001      	adds	r0, #1
 80083aa:	d103      	bne.n	80083b4 <_printf_common+0xac>
 80083ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b4:	3501      	adds	r5, #1
 80083b6:	e7c6      	b.n	8008346 <_printf_common+0x3e>
 80083b8:	18e1      	adds	r1, r4, r3
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	2030      	movs	r0, #48	; 0x30
 80083be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083c2:	4422      	add	r2, r4
 80083c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083cc:	3302      	adds	r3, #2
 80083ce:	e7c7      	b.n	8008360 <_printf_common+0x58>
 80083d0:	2301      	movs	r3, #1
 80083d2:	4622      	mov	r2, r4
 80083d4:	4649      	mov	r1, r9
 80083d6:	4638      	mov	r0, r7
 80083d8:	47c0      	blx	r8
 80083da:	3001      	adds	r0, #1
 80083dc:	d0e6      	beq.n	80083ac <_printf_common+0xa4>
 80083de:	3601      	adds	r6, #1
 80083e0:	e7d9      	b.n	8008396 <_printf_common+0x8e>
	...

080083e4 <_printf_i>:
 80083e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083e8:	460c      	mov	r4, r1
 80083ea:	4691      	mov	r9, r2
 80083ec:	7e27      	ldrb	r7, [r4, #24]
 80083ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083f0:	2f78      	cmp	r7, #120	; 0x78
 80083f2:	4680      	mov	r8, r0
 80083f4:	469a      	mov	sl, r3
 80083f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083fa:	d807      	bhi.n	800840c <_printf_i+0x28>
 80083fc:	2f62      	cmp	r7, #98	; 0x62
 80083fe:	d80a      	bhi.n	8008416 <_printf_i+0x32>
 8008400:	2f00      	cmp	r7, #0
 8008402:	f000 80d8 	beq.w	80085b6 <_printf_i+0x1d2>
 8008406:	2f58      	cmp	r7, #88	; 0x58
 8008408:	f000 80a3 	beq.w	8008552 <_printf_i+0x16e>
 800840c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008414:	e03a      	b.n	800848c <_printf_i+0xa8>
 8008416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800841a:	2b15      	cmp	r3, #21
 800841c:	d8f6      	bhi.n	800840c <_printf_i+0x28>
 800841e:	a001      	add	r0, pc, #4	; (adr r0, 8008424 <_printf_i+0x40>)
 8008420:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008424:	0800847d 	.word	0x0800847d
 8008428:	08008491 	.word	0x08008491
 800842c:	0800840d 	.word	0x0800840d
 8008430:	0800840d 	.word	0x0800840d
 8008434:	0800840d 	.word	0x0800840d
 8008438:	0800840d 	.word	0x0800840d
 800843c:	08008491 	.word	0x08008491
 8008440:	0800840d 	.word	0x0800840d
 8008444:	0800840d 	.word	0x0800840d
 8008448:	0800840d 	.word	0x0800840d
 800844c:	0800840d 	.word	0x0800840d
 8008450:	0800859d 	.word	0x0800859d
 8008454:	080084c1 	.word	0x080084c1
 8008458:	0800857f 	.word	0x0800857f
 800845c:	0800840d 	.word	0x0800840d
 8008460:	0800840d 	.word	0x0800840d
 8008464:	080085bf 	.word	0x080085bf
 8008468:	0800840d 	.word	0x0800840d
 800846c:	080084c1 	.word	0x080084c1
 8008470:	0800840d 	.word	0x0800840d
 8008474:	0800840d 	.word	0x0800840d
 8008478:	08008587 	.word	0x08008587
 800847c:	680b      	ldr	r3, [r1, #0]
 800847e:	1d1a      	adds	r2, r3, #4
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	600a      	str	r2, [r1, #0]
 8008484:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800848c:	2301      	movs	r3, #1
 800848e:	e0a3      	b.n	80085d8 <_printf_i+0x1f4>
 8008490:	6825      	ldr	r5, [r4, #0]
 8008492:	6808      	ldr	r0, [r1, #0]
 8008494:	062e      	lsls	r6, r5, #24
 8008496:	f100 0304 	add.w	r3, r0, #4
 800849a:	d50a      	bpl.n	80084b2 <_printf_i+0xce>
 800849c:	6805      	ldr	r5, [r0, #0]
 800849e:	600b      	str	r3, [r1, #0]
 80084a0:	2d00      	cmp	r5, #0
 80084a2:	da03      	bge.n	80084ac <_printf_i+0xc8>
 80084a4:	232d      	movs	r3, #45	; 0x2d
 80084a6:	426d      	negs	r5, r5
 80084a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084ac:	485e      	ldr	r0, [pc, #376]	; (8008628 <_printf_i+0x244>)
 80084ae:	230a      	movs	r3, #10
 80084b0:	e019      	b.n	80084e6 <_printf_i+0x102>
 80084b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80084b6:	6805      	ldr	r5, [r0, #0]
 80084b8:	600b      	str	r3, [r1, #0]
 80084ba:	bf18      	it	ne
 80084bc:	b22d      	sxthne	r5, r5
 80084be:	e7ef      	b.n	80084a0 <_printf_i+0xbc>
 80084c0:	680b      	ldr	r3, [r1, #0]
 80084c2:	6825      	ldr	r5, [r4, #0]
 80084c4:	1d18      	adds	r0, r3, #4
 80084c6:	6008      	str	r0, [r1, #0]
 80084c8:	0628      	lsls	r0, r5, #24
 80084ca:	d501      	bpl.n	80084d0 <_printf_i+0xec>
 80084cc:	681d      	ldr	r5, [r3, #0]
 80084ce:	e002      	b.n	80084d6 <_printf_i+0xf2>
 80084d0:	0669      	lsls	r1, r5, #25
 80084d2:	d5fb      	bpl.n	80084cc <_printf_i+0xe8>
 80084d4:	881d      	ldrh	r5, [r3, #0]
 80084d6:	4854      	ldr	r0, [pc, #336]	; (8008628 <_printf_i+0x244>)
 80084d8:	2f6f      	cmp	r7, #111	; 0x6f
 80084da:	bf0c      	ite	eq
 80084dc:	2308      	moveq	r3, #8
 80084de:	230a      	movne	r3, #10
 80084e0:	2100      	movs	r1, #0
 80084e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084e6:	6866      	ldr	r6, [r4, #4]
 80084e8:	60a6      	str	r6, [r4, #8]
 80084ea:	2e00      	cmp	r6, #0
 80084ec:	bfa2      	ittt	ge
 80084ee:	6821      	ldrge	r1, [r4, #0]
 80084f0:	f021 0104 	bicge.w	r1, r1, #4
 80084f4:	6021      	strge	r1, [r4, #0]
 80084f6:	b90d      	cbnz	r5, 80084fc <_printf_i+0x118>
 80084f8:	2e00      	cmp	r6, #0
 80084fa:	d04d      	beq.n	8008598 <_printf_i+0x1b4>
 80084fc:	4616      	mov	r6, r2
 80084fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8008502:	fb03 5711 	mls	r7, r3, r1, r5
 8008506:	5dc7      	ldrb	r7, [r0, r7]
 8008508:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800850c:	462f      	mov	r7, r5
 800850e:	42bb      	cmp	r3, r7
 8008510:	460d      	mov	r5, r1
 8008512:	d9f4      	bls.n	80084fe <_printf_i+0x11a>
 8008514:	2b08      	cmp	r3, #8
 8008516:	d10b      	bne.n	8008530 <_printf_i+0x14c>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	07df      	lsls	r7, r3, #31
 800851c:	d508      	bpl.n	8008530 <_printf_i+0x14c>
 800851e:	6923      	ldr	r3, [r4, #16]
 8008520:	6861      	ldr	r1, [r4, #4]
 8008522:	4299      	cmp	r1, r3
 8008524:	bfde      	ittt	le
 8008526:	2330      	movle	r3, #48	; 0x30
 8008528:	f806 3c01 	strble.w	r3, [r6, #-1]
 800852c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008530:	1b92      	subs	r2, r2, r6
 8008532:	6122      	str	r2, [r4, #16]
 8008534:	f8cd a000 	str.w	sl, [sp]
 8008538:	464b      	mov	r3, r9
 800853a:	aa03      	add	r2, sp, #12
 800853c:	4621      	mov	r1, r4
 800853e:	4640      	mov	r0, r8
 8008540:	f7ff fee2 	bl	8008308 <_printf_common>
 8008544:	3001      	adds	r0, #1
 8008546:	d14c      	bne.n	80085e2 <_printf_i+0x1fe>
 8008548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800854c:	b004      	add	sp, #16
 800854e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008552:	4835      	ldr	r0, [pc, #212]	; (8008628 <_printf_i+0x244>)
 8008554:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	680e      	ldr	r6, [r1, #0]
 800855c:	061f      	lsls	r7, r3, #24
 800855e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008562:	600e      	str	r6, [r1, #0]
 8008564:	d514      	bpl.n	8008590 <_printf_i+0x1ac>
 8008566:	07d9      	lsls	r1, r3, #31
 8008568:	bf44      	itt	mi
 800856a:	f043 0320 	orrmi.w	r3, r3, #32
 800856e:	6023      	strmi	r3, [r4, #0]
 8008570:	b91d      	cbnz	r5, 800857a <_printf_i+0x196>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	f023 0320 	bic.w	r3, r3, #32
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	2310      	movs	r3, #16
 800857c:	e7b0      	b.n	80084e0 <_printf_i+0xfc>
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	f043 0320 	orr.w	r3, r3, #32
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	2378      	movs	r3, #120	; 0x78
 8008588:	4828      	ldr	r0, [pc, #160]	; (800862c <_printf_i+0x248>)
 800858a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800858e:	e7e3      	b.n	8008558 <_printf_i+0x174>
 8008590:	065e      	lsls	r6, r3, #25
 8008592:	bf48      	it	mi
 8008594:	b2ad      	uxthmi	r5, r5
 8008596:	e7e6      	b.n	8008566 <_printf_i+0x182>
 8008598:	4616      	mov	r6, r2
 800859a:	e7bb      	b.n	8008514 <_printf_i+0x130>
 800859c:	680b      	ldr	r3, [r1, #0]
 800859e:	6826      	ldr	r6, [r4, #0]
 80085a0:	6960      	ldr	r0, [r4, #20]
 80085a2:	1d1d      	adds	r5, r3, #4
 80085a4:	600d      	str	r5, [r1, #0]
 80085a6:	0635      	lsls	r5, r6, #24
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	d501      	bpl.n	80085b0 <_printf_i+0x1cc>
 80085ac:	6018      	str	r0, [r3, #0]
 80085ae:	e002      	b.n	80085b6 <_printf_i+0x1d2>
 80085b0:	0671      	lsls	r1, r6, #25
 80085b2:	d5fb      	bpl.n	80085ac <_printf_i+0x1c8>
 80085b4:	8018      	strh	r0, [r3, #0]
 80085b6:	2300      	movs	r3, #0
 80085b8:	6123      	str	r3, [r4, #16]
 80085ba:	4616      	mov	r6, r2
 80085bc:	e7ba      	b.n	8008534 <_printf_i+0x150>
 80085be:	680b      	ldr	r3, [r1, #0]
 80085c0:	1d1a      	adds	r2, r3, #4
 80085c2:	600a      	str	r2, [r1, #0]
 80085c4:	681e      	ldr	r6, [r3, #0]
 80085c6:	6862      	ldr	r2, [r4, #4]
 80085c8:	2100      	movs	r1, #0
 80085ca:	4630      	mov	r0, r6
 80085cc:	f7f7 fe88 	bl	80002e0 <memchr>
 80085d0:	b108      	cbz	r0, 80085d6 <_printf_i+0x1f2>
 80085d2:	1b80      	subs	r0, r0, r6
 80085d4:	6060      	str	r0, [r4, #4]
 80085d6:	6863      	ldr	r3, [r4, #4]
 80085d8:	6123      	str	r3, [r4, #16]
 80085da:	2300      	movs	r3, #0
 80085dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085e0:	e7a8      	b.n	8008534 <_printf_i+0x150>
 80085e2:	6923      	ldr	r3, [r4, #16]
 80085e4:	4632      	mov	r2, r6
 80085e6:	4649      	mov	r1, r9
 80085e8:	4640      	mov	r0, r8
 80085ea:	47d0      	blx	sl
 80085ec:	3001      	adds	r0, #1
 80085ee:	d0ab      	beq.n	8008548 <_printf_i+0x164>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	079b      	lsls	r3, r3, #30
 80085f4:	d413      	bmi.n	800861e <_printf_i+0x23a>
 80085f6:	68e0      	ldr	r0, [r4, #12]
 80085f8:	9b03      	ldr	r3, [sp, #12]
 80085fa:	4298      	cmp	r0, r3
 80085fc:	bfb8      	it	lt
 80085fe:	4618      	movlt	r0, r3
 8008600:	e7a4      	b.n	800854c <_printf_i+0x168>
 8008602:	2301      	movs	r3, #1
 8008604:	4632      	mov	r2, r6
 8008606:	4649      	mov	r1, r9
 8008608:	4640      	mov	r0, r8
 800860a:	47d0      	blx	sl
 800860c:	3001      	adds	r0, #1
 800860e:	d09b      	beq.n	8008548 <_printf_i+0x164>
 8008610:	3501      	adds	r5, #1
 8008612:	68e3      	ldr	r3, [r4, #12]
 8008614:	9903      	ldr	r1, [sp, #12]
 8008616:	1a5b      	subs	r3, r3, r1
 8008618:	42ab      	cmp	r3, r5
 800861a:	dcf2      	bgt.n	8008602 <_printf_i+0x21e>
 800861c:	e7eb      	b.n	80085f6 <_printf_i+0x212>
 800861e:	2500      	movs	r5, #0
 8008620:	f104 0619 	add.w	r6, r4, #25
 8008624:	e7f5      	b.n	8008612 <_printf_i+0x22e>
 8008626:	bf00      	nop
 8008628:	080098e1 	.word	0x080098e1
 800862c:	080098f2 	.word	0x080098f2

08008630 <_sbrk_r>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	4d06      	ldr	r5, [pc, #24]	; (800864c <_sbrk_r+0x1c>)
 8008634:	2300      	movs	r3, #0
 8008636:	4604      	mov	r4, r0
 8008638:	4608      	mov	r0, r1
 800863a:	602b      	str	r3, [r5, #0]
 800863c:	f7f8 fe34 	bl	80012a8 <_sbrk>
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	d102      	bne.n	800864a <_sbrk_r+0x1a>
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	b103      	cbz	r3, 800864a <_sbrk_r+0x1a>
 8008648:	6023      	str	r3, [r4, #0]
 800864a:	bd38      	pop	{r3, r4, r5, pc}
 800864c:	20000150 	.word	0x20000150

08008650 <_raise_r>:
 8008650:	291f      	cmp	r1, #31
 8008652:	b538      	push	{r3, r4, r5, lr}
 8008654:	4604      	mov	r4, r0
 8008656:	460d      	mov	r5, r1
 8008658:	d904      	bls.n	8008664 <_raise_r+0x14>
 800865a:	2316      	movs	r3, #22
 800865c:	6003      	str	r3, [r0, #0]
 800865e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008662:	bd38      	pop	{r3, r4, r5, pc}
 8008664:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008666:	b112      	cbz	r2, 800866e <_raise_r+0x1e>
 8008668:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800866c:	b94b      	cbnz	r3, 8008682 <_raise_r+0x32>
 800866e:	4620      	mov	r0, r4
 8008670:	f000 f830 	bl	80086d4 <_getpid_r>
 8008674:	462a      	mov	r2, r5
 8008676:	4601      	mov	r1, r0
 8008678:	4620      	mov	r0, r4
 800867a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800867e:	f000 b817 	b.w	80086b0 <_kill_r>
 8008682:	2b01      	cmp	r3, #1
 8008684:	d00a      	beq.n	800869c <_raise_r+0x4c>
 8008686:	1c59      	adds	r1, r3, #1
 8008688:	d103      	bne.n	8008692 <_raise_r+0x42>
 800868a:	2316      	movs	r3, #22
 800868c:	6003      	str	r3, [r0, #0]
 800868e:	2001      	movs	r0, #1
 8008690:	e7e7      	b.n	8008662 <_raise_r+0x12>
 8008692:	2400      	movs	r4, #0
 8008694:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008698:	4628      	mov	r0, r5
 800869a:	4798      	blx	r3
 800869c:	2000      	movs	r0, #0
 800869e:	e7e0      	b.n	8008662 <_raise_r+0x12>

080086a0 <raise>:
 80086a0:	4b02      	ldr	r3, [pc, #8]	; (80086ac <raise+0xc>)
 80086a2:	4601      	mov	r1, r0
 80086a4:	6818      	ldr	r0, [r3, #0]
 80086a6:	f7ff bfd3 	b.w	8008650 <_raise_r>
 80086aa:	bf00      	nop
 80086ac:	20000014 	.word	0x20000014

080086b0 <_kill_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4d07      	ldr	r5, [pc, #28]	; (80086d0 <_kill_r+0x20>)
 80086b4:	2300      	movs	r3, #0
 80086b6:	4604      	mov	r4, r0
 80086b8:	4608      	mov	r0, r1
 80086ba:	4611      	mov	r1, r2
 80086bc:	602b      	str	r3, [r5, #0]
 80086be:	f7f8 fd6c 	bl	800119a <_kill>
 80086c2:	1c43      	adds	r3, r0, #1
 80086c4:	d102      	bne.n	80086cc <_kill_r+0x1c>
 80086c6:	682b      	ldr	r3, [r5, #0]
 80086c8:	b103      	cbz	r3, 80086cc <_kill_r+0x1c>
 80086ca:	6023      	str	r3, [r4, #0]
 80086cc:	bd38      	pop	{r3, r4, r5, pc}
 80086ce:	bf00      	nop
 80086d0:	20000150 	.word	0x20000150

080086d4 <_getpid_r>:
 80086d4:	f7f8 bd59 	b.w	800118a <_getpid>

080086d8 <__swbuf_r>:
 80086d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086da:	460e      	mov	r6, r1
 80086dc:	4614      	mov	r4, r2
 80086de:	4605      	mov	r5, r0
 80086e0:	b118      	cbz	r0, 80086ea <__swbuf_r+0x12>
 80086e2:	6983      	ldr	r3, [r0, #24]
 80086e4:	b90b      	cbnz	r3, 80086ea <__swbuf_r+0x12>
 80086e6:	f000 f9d1 	bl	8008a8c <__sinit>
 80086ea:	4b21      	ldr	r3, [pc, #132]	; (8008770 <__swbuf_r+0x98>)
 80086ec:	429c      	cmp	r4, r3
 80086ee:	d12b      	bne.n	8008748 <__swbuf_r+0x70>
 80086f0:	686c      	ldr	r4, [r5, #4]
 80086f2:	69a3      	ldr	r3, [r4, #24]
 80086f4:	60a3      	str	r3, [r4, #8]
 80086f6:	89a3      	ldrh	r3, [r4, #12]
 80086f8:	071a      	lsls	r2, r3, #28
 80086fa:	d52f      	bpl.n	800875c <__swbuf_r+0x84>
 80086fc:	6923      	ldr	r3, [r4, #16]
 80086fe:	b36b      	cbz	r3, 800875c <__swbuf_r+0x84>
 8008700:	6923      	ldr	r3, [r4, #16]
 8008702:	6820      	ldr	r0, [r4, #0]
 8008704:	1ac0      	subs	r0, r0, r3
 8008706:	6963      	ldr	r3, [r4, #20]
 8008708:	b2f6      	uxtb	r6, r6
 800870a:	4283      	cmp	r3, r0
 800870c:	4637      	mov	r7, r6
 800870e:	dc04      	bgt.n	800871a <__swbuf_r+0x42>
 8008710:	4621      	mov	r1, r4
 8008712:	4628      	mov	r0, r5
 8008714:	f000 f926 	bl	8008964 <_fflush_r>
 8008718:	bb30      	cbnz	r0, 8008768 <__swbuf_r+0x90>
 800871a:	68a3      	ldr	r3, [r4, #8]
 800871c:	3b01      	subs	r3, #1
 800871e:	60a3      	str	r3, [r4, #8]
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	6022      	str	r2, [r4, #0]
 8008726:	701e      	strb	r6, [r3, #0]
 8008728:	6963      	ldr	r3, [r4, #20]
 800872a:	3001      	adds	r0, #1
 800872c:	4283      	cmp	r3, r0
 800872e:	d004      	beq.n	800873a <__swbuf_r+0x62>
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	07db      	lsls	r3, r3, #31
 8008734:	d506      	bpl.n	8008744 <__swbuf_r+0x6c>
 8008736:	2e0a      	cmp	r6, #10
 8008738:	d104      	bne.n	8008744 <__swbuf_r+0x6c>
 800873a:	4621      	mov	r1, r4
 800873c:	4628      	mov	r0, r5
 800873e:	f000 f911 	bl	8008964 <_fflush_r>
 8008742:	b988      	cbnz	r0, 8008768 <__swbuf_r+0x90>
 8008744:	4638      	mov	r0, r7
 8008746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008748:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <__swbuf_r+0x9c>)
 800874a:	429c      	cmp	r4, r3
 800874c:	d101      	bne.n	8008752 <__swbuf_r+0x7a>
 800874e:	68ac      	ldr	r4, [r5, #8]
 8008750:	e7cf      	b.n	80086f2 <__swbuf_r+0x1a>
 8008752:	4b09      	ldr	r3, [pc, #36]	; (8008778 <__swbuf_r+0xa0>)
 8008754:	429c      	cmp	r4, r3
 8008756:	bf08      	it	eq
 8008758:	68ec      	ldreq	r4, [r5, #12]
 800875a:	e7ca      	b.n	80086f2 <__swbuf_r+0x1a>
 800875c:	4621      	mov	r1, r4
 800875e:	4628      	mov	r0, r5
 8008760:	f000 f80c 	bl	800877c <__swsetup_r>
 8008764:	2800      	cmp	r0, #0
 8008766:	d0cb      	beq.n	8008700 <__swbuf_r+0x28>
 8008768:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800876c:	e7ea      	b.n	8008744 <__swbuf_r+0x6c>
 800876e:	bf00      	nop
 8008770:	08009924 	.word	0x08009924
 8008774:	08009944 	.word	0x08009944
 8008778:	08009904 	.word	0x08009904

0800877c <__swsetup_r>:
 800877c:	4b32      	ldr	r3, [pc, #200]	; (8008848 <__swsetup_r+0xcc>)
 800877e:	b570      	push	{r4, r5, r6, lr}
 8008780:	681d      	ldr	r5, [r3, #0]
 8008782:	4606      	mov	r6, r0
 8008784:	460c      	mov	r4, r1
 8008786:	b125      	cbz	r5, 8008792 <__swsetup_r+0x16>
 8008788:	69ab      	ldr	r3, [r5, #24]
 800878a:	b913      	cbnz	r3, 8008792 <__swsetup_r+0x16>
 800878c:	4628      	mov	r0, r5
 800878e:	f000 f97d 	bl	8008a8c <__sinit>
 8008792:	4b2e      	ldr	r3, [pc, #184]	; (800884c <__swsetup_r+0xd0>)
 8008794:	429c      	cmp	r4, r3
 8008796:	d10f      	bne.n	80087b8 <__swsetup_r+0x3c>
 8008798:	686c      	ldr	r4, [r5, #4]
 800879a:	89a3      	ldrh	r3, [r4, #12]
 800879c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087a0:	0719      	lsls	r1, r3, #28
 80087a2:	d42c      	bmi.n	80087fe <__swsetup_r+0x82>
 80087a4:	06dd      	lsls	r5, r3, #27
 80087a6:	d411      	bmi.n	80087cc <__swsetup_r+0x50>
 80087a8:	2309      	movs	r3, #9
 80087aa:	6033      	str	r3, [r6, #0]
 80087ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087b0:	81a3      	strh	r3, [r4, #12]
 80087b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087b6:	e03e      	b.n	8008836 <__swsetup_r+0xba>
 80087b8:	4b25      	ldr	r3, [pc, #148]	; (8008850 <__swsetup_r+0xd4>)
 80087ba:	429c      	cmp	r4, r3
 80087bc:	d101      	bne.n	80087c2 <__swsetup_r+0x46>
 80087be:	68ac      	ldr	r4, [r5, #8]
 80087c0:	e7eb      	b.n	800879a <__swsetup_r+0x1e>
 80087c2:	4b24      	ldr	r3, [pc, #144]	; (8008854 <__swsetup_r+0xd8>)
 80087c4:	429c      	cmp	r4, r3
 80087c6:	bf08      	it	eq
 80087c8:	68ec      	ldreq	r4, [r5, #12]
 80087ca:	e7e6      	b.n	800879a <__swsetup_r+0x1e>
 80087cc:	0758      	lsls	r0, r3, #29
 80087ce:	d512      	bpl.n	80087f6 <__swsetup_r+0x7a>
 80087d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087d2:	b141      	cbz	r1, 80087e6 <__swsetup_r+0x6a>
 80087d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087d8:	4299      	cmp	r1, r3
 80087da:	d002      	beq.n	80087e2 <__swsetup_r+0x66>
 80087dc:	4630      	mov	r0, r6
 80087de:	f7ff fb8f 	bl	8007f00 <_free_r>
 80087e2:	2300      	movs	r3, #0
 80087e4:	6363      	str	r3, [r4, #52]	; 0x34
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087ec:	81a3      	strh	r3, [r4, #12]
 80087ee:	2300      	movs	r3, #0
 80087f0:	6063      	str	r3, [r4, #4]
 80087f2:	6923      	ldr	r3, [r4, #16]
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	89a3      	ldrh	r3, [r4, #12]
 80087f8:	f043 0308 	orr.w	r3, r3, #8
 80087fc:	81a3      	strh	r3, [r4, #12]
 80087fe:	6923      	ldr	r3, [r4, #16]
 8008800:	b94b      	cbnz	r3, 8008816 <__swsetup_r+0x9a>
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800880c:	d003      	beq.n	8008816 <__swsetup_r+0x9a>
 800880e:	4621      	mov	r1, r4
 8008810:	4630      	mov	r0, r6
 8008812:	f000 f9ff 	bl	8008c14 <__smakebuf_r>
 8008816:	89a0      	ldrh	r0, [r4, #12]
 8008818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800881c:	f010 0301 	ands.w	r3, r0, #1
 8008820:	d00a      	beq.n	8008838 <__swsetup_r+0xbc>
 8008822:	2300      	movs	r3, #0
 8008824:	60a3      	str	r3, [r4, #8]
 8008826:	6963      	ldr	r3, [r4, #20]
 8008828:	425b      	negs	r3, r3
 800882a:	61a3      	str	r3, [r4, #24]
 800882c:	6923      	ldr	r3, [r4, #16]
 800882e:	b943      	cbnz	r3, 8008842 <__swsetup_r+0xc6>
 8008830:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008834:	d1ba      	bne.n	80087ac <__swsetup_r+0x30>
 8008836:	bd70      	pop	{r4, r5, r6, pc}
 8008838:	0781      	lsls	r1, r0, #30
 800883a:	bf58      	it	pl
 800883c:	6963      	ldrpl	r3, [r4, #20]
 800883e:	60a3      	str	r3, [r4, #8]
 8008840:	e7f4      	b.n	800882c <__swsetup_r+0xb0>
 8008842:	2000      	movs	r0, #0
 8008844:	e7f7      	b.n	8008836 <__swsetup_r+0xba>
 8008846:	bf00      	nop
 8008848:	20000014 	.word	0x20000014
 800884c:	08009924 	.word	0x08009924
 8008850:	08009944 	.word	0x08009944
 8008854:	08009904 	.word	0x08009904

08008858 <__sflush_r>:
 8008858:	898a      	ldrh	r2, [r1, #12]
 800885a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885e:	4605      	mov	r5, r0
 8008860:	0710      	lsls	r0, r2, #28
 8008862:	460c      	mov	r4, r1
 8008864:	d458      	bmi.n	8008918 <__sflush_r+0xc0>
 8008866:	684b      	ldr	r3, [r1, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	dc05      	bgt.n	8008878 <__sflush_r+0x20>
 800886c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800886e:	2b00      	cmp	r3, #0
 8008870:	dc02      	bgt.n	8008878 <__sflush_r+0x20>
 8008872:	2000      	movs	r0, #0
 8008874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800887a:	2e00      	cmp	r6, #0
 800887c:	d0f9      	beq.n	8008872 <__sflush_r+0x1a>
 800887e:	2300      	movs	r3, #0
 8008880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008884:	682f      	ldr	r7, [r5, #0]
 8008886:	602b      	str	r3, [r5, #0]
 8008888:	d032      	beq.n	80088f0 <__sflush_r+0x98>
 800888a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800888c:	89a3      	ldrh	r3, [r4, #12]
 800888e:	075a      	lsls	r2, r3, #29
 8008890:	d505      	bpl.n	800889e <__sflush_r+0x46>
 8008892:	6863      	ldr	r3, [r4, #4]
 8008894:	1ac0      	subs	r0, r0, r3
 8008896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008898:	b10b      	cbz	r3, 800889e <__sflush_r+0x46>
 800889a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800889c:	1ac0      	subs	r0, r0, r3
 800889e:	2300      	movs	r3, #0
 80088a0:	4602      	mov	r2, r0
 80088a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088a4:	6a21      	ldr	r1, [r4, #32]
 80088a6:	4628      	mov	r0, r5
 80088a8:	47b0      	blx	r6
 80088aa:	1c43      	adds	r3, r0, #1
 80088ac:	89a3      	ldrh	r3, [r4, #12]
 80088ae:	d106      	bne.n	80088be <__sflush_r+0x66>
 80088b0:	6829      	ldr	r1, [r5, #0]
 80088b2:	291d      	cmp	r1, #29
 80088b4:	d82c      	bhi.n	8008910 <__sflush_r+0xb8>
 80088b6:	4a2a      	ldr	r2, [pc, #168]	; (8008960 <__sflush_r+0x108>)
 80088b8:	40ca      	lsrs	r2, r1
 80088ba:	07d6      	lsls	r6, r2, #31
 80088bc:	d528      	bpl.n	8008910 <__sflush_r+0xb8>
 80088be:	2200      	movs	r2, #0
 80088c0:	6062      	str	r2, [r4, #4]
 80088c2:	04d9      	lsls	r1, r3, #19
 80088c4:	6922      	ldr	r2, [r4, #16]
 80088c6:	6022      	str	r2, [r4, #0]
 80088c8:	d504      	bpl.n	80088d4 <__sflush_r+0x7c>
 80088ca:	1c42      	adds	r2, r0, #1
 80088cc:	d101      	bne.n	80088d2 <__sflush_r+0x7a>
 80088ce:	682b      	ldr	r3, [r5, #0]
 80088d0:	b903      	cbnz	r3, 80088d4 <__sflush_r+0x7c>
 80088d2:	6560      	str	r0, [r4, #84]	; 0x54
 80088d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088d6:	602f      	str	r7, [r5, #0]
 80088d8:	2900      	cmp	r1, #0
 80088da:	d0ca      	beq.n	8008872 <__sflush_r+0x1a>
 80088dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088e0:	4299      	cmp	r1, r3
 80088e2:	d002      	beq.n	80088ea <__sflush_r+0x92>
 80088e4:	4628      	mov	r0, r5
 80088e6:	f7ff fb0b 	bl	8007f00 <_free_r>
 80088ea:	2000      	movs	r0, #0
 80088ec:	6360      	str	r0, [r4, #52]	; 0x34
 80088ee:	e7c1      	b.n	8008874 <__sflush_r+0x1c>
 80088f0:	6a21      	ldr	r1, [r4, #32]
 80088f2:	2301      	movs	r3, #1
 80088f4:	4628      	mov	r0, r5
 80088f6:	47b0      	blx	r6
 80088f8:	1c41      	adds	r1, r0, #1
 80088fa:	d1c7      	bne.n	800888c <__sflush_r+0x34>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0c4      	beq.n	800888c <__sflush_r+0x34>
 8008902:	2b1d      	cmp	r3, #29
 8008904:	d001      	beq.n	800890a <__sflush_r+0xb2>
 8008906:	2b16      	cmp	r3, #22
 8008908:	d101      	bne.n	800890e <__sflush_r+0xb6>
 800890a:	602f      	str	r7, [r5, #0]
 800890c:	e7b1      	b.n	8008872 <__sflush_r+0x1a>
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008914:	81a3      	strh	r3, [r4, #12]
 8008916:	e7ad      	b.n	8008874 <__sflush_r+0x1c>
 8008918:	690f      	ldr	r7, [r1, #16]
 800891a:	2f00      	cmp	r7, #0
 800891c:	d0a9      	beq.n	8008872 <__sflush_r+0x1a>
 800891e:	0793      	lsls	r3, r2, #30
 8008920:	680e      	ldr	r6, [r1, #0]
 8008922:	bf08      	it	eq
 8008924:	694b      	ldreq	r3, [r1, #20]
 8008926:	600f      	str	r7, [r1, #0]
 8008928:	bf18      	it	ne
 800892a:	2300      	movne	r3, #0
 800892c:	eba6 0807 	sub.w	r8, r6, r7
 8008930:	608b      	str	r3, [r1, #8]
 8008932:	f1b8 0f00 	cmp.w	r8, #0
 8008936:	dd9c      	ble.n	8008872 <__sflush_r+0x1a>
 8008938:	6a21      	ldr	r1, [r4, #32]
 800893a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800893c:	4643      	mov	r3, r8
 800893e:	463a      	mov	r2, r7
 8008940:	4628      	mov	r0, r5
 8008942:	47b0      	blx	r6
 8008944:	2800      	cmp	r0, #0
 8008946:	dc06      	bgt.n	8008956 <__sflush_r+0xfe>
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800894e:	81a3      	strh	r3, [r4, #12]
 8008950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008954:	e78e      	b.n	8008874 <__sflush_r+0x1c>
 8008956:	4407      	add	r7, r0
 8008958:	eba8 0800 	sub.w	r8, r8, r0
 800895c:	e7e9      	b.n	8008932 <__sflush_r+0xda>
 800895e:	bf00      	nop
 8008960:	20400001 	.word	0x20400001

08008964 <_fflush_r>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	690b      	ldr	r3, [r1, #16]
 8008968:	4605      	mov	r5, r0
 800896a:	460c      	mov	r4, r1
 800896c:	b913      	cbnz	r3, 8008974 <_fflush_r+0x10>
 800896e:	2500      	movs	r5, #0
 8008970:	4628      	mov	r0, r5
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	b118      	cbz	r0, 800897e <_fflush_r+0x1a>
 8008976:	6983      	ldr	r3, [r0, #24]
 8008978:	b90b      	cbnz	r3, 800897e <_fflush_r+0x1a>
 800897a:	f000 f887 	bl	8008a8c <__sinit>
 800897e:	4b14      	ldr	r3, [pc, #80]	; (80089d0 <_fflush_r+0x6c>)
 8008980:	429c      	cmp	r4, r3
 8008982:	d11b      	bne.n	80089bc <_fflush_r+0x58>
 8008984:	686c      	ldr	r4, [r5, #4]
 8008986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d0ef      	beq.n	800896e <_fflush_r+0xa>
 800898e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008990:	07d0      	lsls	r0, r2, #31
 8008992:	d404      	bmi.n	800899e <_fflush_r+0x3a>
 8008994:	0599      	lsls	r1, r3, #22
 8008996:	d402      	bmi.n	800899e <_fflush_r+0x3a>
 8008998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800899a:	f000 f915 	bl	8008bc8 <__retarget_lock_acquire_recursive>
 800899e:	4628      	mov	r0, r5
 80089a0:	4621      	mov	r1, r4
 80089a2:	f7ff ff59 	bl	8008858 <__sflush_r>
 80089a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089a8:	07da      	lsls	r2, r3, #31
 80089aa:	4605      	mov	r5, r0
 80089ac:	d4e0      	bmi.n	8008970 <_fflush_r+0xc>
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	059b      	lsls	r3, r3, #22
 80089b2:	d4dd      	bmi.n	8008970 <_fflush_r+0xc>
 80089b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089b6:	f000 f908 	bl	8008bca <__retarget_lock_release_recursive>
 80089ba:	e7d9      	b.n	8008970 <_fflush_r+0xc>
 80089bc:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <_fflush_r+0x70>)
 80089be:	429c      	cmp	r4, r3
 80089c0:	d101      	bne.n	80089c6 <_fflush_r+0x62>
 80089c2:	68ac      	ldr	r4, [r5, #8]
 80089c4:	e7df      	b.n	8008986 <_fflush_r+0x22>
 80089c6:	4b04      	ldr	r3, [pc, #16]	; (80089d8 <_fflush_r+0x74>)
 80089c8:	429c      	cmp	r4, r3
 80089ca:	bf08      	it	eq
 80089cc:	68ec      	ldreq	r4, [r5, #12]
 80089ce:	e7da      	b.n	8008986 <_fflush_r+0x22>
 80089d0:	08009924 	.word	0x08009924
 80089d4:	08009944 	.word	0x08009944
 80089d8:	08009904 	.word	0x08009904

080089dc <std>:
 80089dc:	2300      	movs	r3, #0
 80089de:	b510      	push	{r4, lr}
 80089e0:	4604      	mov	r4, r0
 80089e2:	e9c0 3300 	strd	r3, r3, [r0]
 80089e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089ea:	6083      	str	r3, [r0, #8]
 80089ec:	8181      	strh	r1, [r0, #12]
 80089ee:	6643      	str	r3, [r0, #100]	; 0x64
 80089f0:	81c2      	strh	r2, [r0, #14]
 80089f2:	6183      	str	r3, [r0, #24]
 80089f4:	4619      	mov	r1, r3
 80089f6:	2208      	movs	r2, #8
 80089f8:	305c      	adds	r0, #92	; 0x5c
 80089fa:	f7ff fa79 	bl	8007ef0 <memset>
 80089fe:	4b05      	ldr	r3, [pc, #20]	; (8008a14 <std+0x38>)
 8008a00:	6263      	str	r3, [r4, #36]	; 0x24
 8008a02:	4b05      	ldr	r3, [pc, #20]	; (8008a18 <std+0x3c>)
 8008a04:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a06:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <std+0x40>)
 8008a08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a0a:	4b05      	ldr	r3, [pc, #20]	; (8008a20 <std+0x44>)
 8008a0c:	6224      	str	r4, [r4, #32]
 8008a0e:	6323      	str	r3, [r4, #48]	; 0x30
 8008a10:	bd10      	pop	{r4, pc}
 8008a12:	bf00      	nop
 8008a14:	08008cad 	.word	0x08008cad
 8008a18:	08008ccf 	.word	0x08008ccf
 8008a1c:	08008d07 	.word	0x08008d07
 8008a20:	08008d2b 	.word	0x08008d2b

08008a24 <_cleanup_r>:
 8008a24:	4901      	ldr	r1, [pc, #4]	; (8008a2c <_cleanup_r+0x8>)
 8008a26:	f000 b8af 	b.w	8008b88 <_fwalk_reent>
 8008a2a:	bf00      	nop
 8008a2c:	08008965 	.word	0x08008965

08008a30 <__sfmoreglue>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	1e4a      	subs	r2, r1, #1
 8008a34:	2568      	movs	r5, #104	; 0x68
 8008a36:	4355      	muls	r5, r2
 8008a38:	460e      	mov	r6, r1
 8008a3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a3e:	f7ff faaf 	bl	8007fa0 <_malloc_r>
 8008a42:	4604      	mov	r4, r0
 8008a44:	b140      	cbz	r0, 8008a58 <__sfmoreglue+0x28>
 8008a46:	2100      	movs	r1, #0
 8008a48:	e9c0 1600 	strd	r1, r6, [r0]
 8008a4c:	300c      	adds	r0, #12
 8008a4e:	60a0      	str	r0, [r4, #8]
 8008a50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a54:	f7ff fa4c 	bl	8007ef0 <memset>
 8008a58:	4620      	mov	r0, r4
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}

08008a5c <__sfp_lock_acquire>:
 8008a5c:	4801      	ldr	r0, [pc, #4]	; (8008a64 <__sfp_lock_acquire+0x8>)
 8008a5e:	f000 b8b3 	b.w	8008bc8 <__retarget_lock_acquire_recursive>
 8008a62:	bf00      	nop
 8008a64:	2000014c 	.word	0x2000014c

08008a68 <__sfp_lock_release>:
 8008a68:	4801      	ldr	r0, [pc, #4]	; (8008a70 <__sfp_lock_release+0x8>)
 8008a6a:	f000 b8ae 	b.w	8008bca <__retarget_lock_release_recursive>
 8008a6e:	bf00      	nop
 8008a70:	2000014c 	.word	0x2000014c

08008a74 <__sinit_lock_acquire>:
 8008a74:	4801      	ldr	r0, [pc, #4]	; (8008a7c <__sinit_lock_acquire+0x8>)
 8008a76:	f000 b8a7 	b.w	8008bc8 <__retarget_lock_acquire_recursive>
 8008a7a:	bf00      	nop
 8008a7c:	20000147 	.word	0x20000147

08008a80 <__sinit_lock_release>:
 8008a80:	4801      	ldr	r0, [pc, #4]	; (8008a88 <__sinit_lock_release+0x8>)
 8008a82:	f000 b8a2 	b.w	8008bca <__retarget_lock_release_recursive>
 8008a86:	bf00      	nop
 8008a88:	20000147 	.word	0x20000147

08008a8c <__sinit>:
 8008a8c:	b510      	push	{r4, lr}
 8008a8e:	4604      	mov	r4, r0
 8008a90:	f7ff fff0 	bl	8008a74 <__sinit_lock_acquire>
 8008a94:	69a3      	ldr	r3, [r4, #24]
 8008a96:	b11b      	cbz	r3, 8008aa0 <__sinit+0x14>
 8008a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a9c:	f7ff bff0 	b.w	8008a80 <__sinit_lock_release>
 8008aa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008aa4:	6523      	str	r3, [r4, #80]	; 0x50
 8008aa6:	4b13      	ldr	r3, [pc, #76]	; (8008af4 <__sinit+0x68>)
 8008aa8:	4a13      	ldr	r2, [pc, #76]	; (8008af8 <__sinit+0x6c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	62a2      	str	r2, [r4, #40]	; 0x28
 8008aae:	42a3      	cmp	r3, r4
 8008ab0:	bf04      	itt	eq
 8008ab2:	2301      	moveq	r3, #1
 8008ab4:	61a3      	streq	r3, [r4, #24]
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f000 f820 	bl	8008afc <__sfp>
 8008abc:	6060      	str	r0, [r4, #4]
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 f81c 	bl	8008afc <__sfp>
 8008ac4:	60a0      	str	r0, [r4, #8]
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 f818 	bl	8008afc <__sfp>
 8008acc:	2200      	movs	r2, #0
 8008ace:	60e0      	str	r0, [r4, #12]
 8008ad0:	2104      	movs	r1, #4
 8008ad2:	6860      	ldr	r0, [r4, #4]
 8008ad4:	f7ff ff82 	bl	80089dc <std>
 8008ad8:	68a0      	ldr	r0, [r4, #8]
 8008ada:	2201      	movs	r2, #1
 8008adc:	2109      	movs	r1, #9
 8008ade:	f7ff ff7d 	bl	80089dc <std>
 8008ae2:	68e0      	ldr	r0, [r4, #12]
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	2112      	movs	r1, #18
 8008ae8:	f7ff ff78 	bl	80089dc <std>
 8008aec:	2301      	movs	r3, #1
 8008aee:	61a3      	str	r3, [r4, #24]
 8008af0:	e7d2      	b.n	8008a98 <__sinit+0xc>
 8008af2:	bf00      	nop
 8008af4:	080098cc 	.word	0x080098cc
 8008af8:	08008a25 	.word	0x08008a25

08008afc <__sfp>:
 8008afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afe:	4607      	mov	r7, r0
 8008b00:	f7ff ffac 	bl	8008a5c <__sfp_lock_acquire>
 8008b04:	4b1e      	ldr	r3, [pc, #120]	; (8008b80 <__sfp+0x84>)
 8008b06:	681e      	ldr	r6, [r3, #0]
 8008b08:	69b3      	ldr	r3, [r6, #24]
 8008b0a:	b913      	cbnz	r3, 8008b12 <__sfp+0x16>
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f7ff ffbd 	bl	8008a8c <__sinit>
 8008b12:	3648      	adds	r6, #72	; 0x48
 8008b14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	d503      	bpl.n	8008b24 <__sfp+0x28>
 8008b1c:	6833      	ldr	r3, [r6, #0]
 8008b1e:	b30b      	cbz	r3, 8008b64 <__sfp+0x68>
 8008b20:	6836      	ldr	r6, [r6, #0]
 8008b22:	e7f7      	b.n	8008b14 <__sfp+0x18>
 8008b24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b28:	b9d5      	cbnz	r5, 8008b60 <__sfp+0x64>
 8008b2a:	4b16      	ldr	r3, [pc, #88]	; (8008b84 <__sfp+0x88>)
 8008b2c:	60e3      	str	r3, [r4, #12]
 8008b2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b32:	6665      	str	r5, [r4, #100]	; 0x64
 8008b34:	f000 f847 	bl	8008bc6 <__retarget_lock_init_recursive>
 8008b38:	f7ff ff96 	bl	8008a68 <__sfp_lock_release>
 8008b3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b44:	6025      	str	r5, [r4, #0]
 8008b46:	61a5      	str	r5, [r4, #24]
 8008b48:	2208      	movs	r2, #8
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b50:	f7ff f9ce 	bl	8007ef0 <memset>
 8008b54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b60:	3468      	adds	r4, #104	; 0x68
 8008b62:	e7d9      	b.n	8008b18 <__sfp+0x1c>
 8008b64:	2104      	movs	r1, #4
 8008b66:	4638      	mov	r0, r7
 8008b68:	f7ff ff62 	bl	8008a30 <__sfmoreglue>
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	6030      	str	r0, [r6, #0]
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d1d5      	bne.n	8008b20 <__sfp+0x24>
 8008b74:	f7ff ff78 	bl	8008a68 <__sfp_lock_release>
 8008b78:	230c      	movs	r3, #12
 8008b7a:	603b      	str	r3, [r7, #0]
 8008b7c:	e7ee      	b.n	8008b5c <__sfp+0x60>
 8008b7e:	bf00      	nop
 8008b80:	080098cc 	.word	0x080098cc
 8008b84:	ffff0001 	.word	0xffff0001

08008b88 <_fwalk_reent>:
 8008b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	4688      	mov	r8, r1
 8008b90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b94:	2700      	movs	r7, #0
 8008b96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b9a:	f1b9 0901 	subs.w	r9, r9, #1
 8008b9e:	d505      	bpl.n	8008bac <_fwalk_reent+0x24>
 8008ba0:	6824      	ldr	r4, [r4, #0]
 8008ba2:	2c00      	cmp	r4, #0
 8008ba4:	d1f7      	bne.n	8008b96 <_fwalk_reent+0xe>
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bac:	89ab      	ldrh	r3, [r5, #12]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d907      	bls.n	8008bc2 <_fwalk_reent+0x3a>
 8008bb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	d003      	beq.n	8008bc2 <_fwalk_reent+0x3a>
 8008bba:	4629      	mov	r1, r5
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	47c0      	blx	r8
 8008bc0:	4307      	orrs	r7, r0
 8008bc2:	3568      	adds	r5, #104	; 0x68
 8008bc4:	e7e9      	b.n	8008b9a <_fwalk_reent+0x12>

08008bc6 <__retarget_lock_init_recursive>:
 8008bc6:	4770      	bx	lr

08008bc8 <__retarget_lock_acquire_recursive>:
 8008bc8:	4770      	bx	lr

08008bca <__retarget_lock_release_recursive>:
 8008bca:	4770      	bx	lr

08008bcc <__swhatbuf_r>:
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	460e      	mov	r6, r1
 8008bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	b096      	sub	sp, #88	; 0x58
 8008bd8:	4614      	mov	r4, r2
 8008bda:	461d      	mov	r5, r3
 8008bdc:	da07      	bge.n	8008bee <__swhatbuf_r+0x22>
 8008bde:	2300      	movs	r3, #0
 8008be0:	602b      	str	r3, [r5, #0]
 8008be2:	89b3      	ldrh	r3, [r6, #12]
 8008be4:	061a      	lsls	r2, r3, #24
 8008be6:	d410      	bmi.n	8008c0a <__swhatbuf_r+0x3e>
 8008be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bec:	e00e      	b.n	8008c0c <__swhatbuf_r+0x40>
 8008bee:	466a      	mov	r2, sp
 8008bf0:	f000 f8c2 	bl	8008d78 <_fstat_r>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	dbf2      	blt.n	8008bde <__swhatbuf_r+0x12>
 8008bf8:	9a01      	ldr	r2, [sp, #4]
 8008bfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c02:	425a      	negs	r2, r3
 8008c04:	415a      	adcs	r2, r3
 8008c06:	602a      	str	r2, [r5, #0]
 8008c08:	e7ee      	b.n	8008be8 <__swhatbuf_r+0x1c>
 8008c0a:	2340      	movs	r3, #64	; 0x40
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	6023      	str	r3, [r4, #0]
 8008c10:	b016      	add	sp, #88	; 0x58
 8008c12:	bd70      	pop	{r4, r5, r6, pc}

08008c14 <__smakebuf_r>:
 8008c14:	898b      	ldrh	r3, [r1, #12]
 8008c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c18:	079d      	lsls	r5, r3, #30
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	d507      	bpl.n	8008c30 <__smakebuf_r+0x1c>
 8008c20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	6123      	str	r3, [r4, #16]
 8008c28:	2301      	movs	r3, #1
 8008c2a:	6163      	str	r3, [r4, #20]
 8008c2c:	b002      	add	sp, #8
 8008c2e:	bd70      	pop	{r4, r5, r6, pc}
 8008c30:	ab01      	add	r3, sp, #4
 8008c32:	466a      	mov	r2, sp
 8008c34:	f7ff ffca 	bl	8008bcc <__swhatbuf_r>
 8008c38:	9900      	ldr	r1, [sp, #0]
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f7ff f9af 	bl	8007fa0 <_malloc_r>
 8008c42:	b948      	cbnz	r0, 8008c58 <__smakebuf_r+0x44>
 8008c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c48:	059a      	lsls	r2, r3, #22
 8008c4a:	d4ef      	bmi.n	8008c2c <__smakebuf_r+0x18>
 8008c4c:	f023 0303 	bic.w	r3, r3, #3
 8008c50:	f043 0302 	orr.w	r3, r3, #2
 8008c54:	81a3      	strh	r3, [r4, #12]
 8008c56:	e7e3      	b.n	8008c20 <__smakebuf_r+0xc>
 8008c58:	4b0d      	ldr	r3, [pc, #52]	; (8008c90 <__smakebuf_r+0x7c>)
 8008c5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	6020      	str	r0, [r4, #0]
 8008c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c64:	81a3      	strh	r3, [r4, #12]
 8008c66:	9b00      	ldr	r3, [sp, #0]
 8008c68:	6163      	str	r3, [r4, #20]
 8008c6a:	9b01      	ldr	r3, [sp, #4]
 8008c6c:	6120      	str	r0, [r4, #16]
 8008c6e:	b15b      	cbz	r3, 8008c88 <__smakebuf_r+0x74>
 8008c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c74:	4630      	mov	r0, r6
 8008c76:	f000 f891 	bl	8008d9c <_isatty_r>
 8008c7a:	b128      	cbz	r0, 8008c88 <__smakebuf_r+0x74>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	f023 0303 	bic.w	r3, r3, #3
 8008c82:	f043 0301 	orr.w	r3, r3, #1
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	89a0      	ldrh	r0, [r4, #12]
 8008c8a:	4305      	orrs	r5, r0
 8008c8c:	81a5      	strh	r5, [r4, #12]
 8008c8e:	e7cd      	b.n	8008c2c <__smakebuf_r+0x18>
 8008c90:	08008a25 	.word	0x08008a25

08008c94 <__malloc_lock>:
 8008c94:	4801      	ldr	r0, [pc, #4]	; (8008c9c <__malloc_lock+0x8>)
 8008c96:	f7ff bf97 	b.w	8008bc8 <__retarget_lock_acquire_recursive>
 8008c9a:	bf00      	nop
 8008c9c:	20000148 	.word	0x20000148

08008ca0 <__malloc_unlock>:
 8008ca0:	4801      	ldr	r0, [pc, #4]	; (8008ca8 <__malloc_unlock+0x8>)
 8008ca2:	f7ff bf92 	b.w	8008bca <__retarget_lock_release_recursive>
 8008ca6:	bf00      	nop
 8008ca8:	20000148 	.word	0x20000148

08008cac <__sread>:
 8008cac:	b510      	push	{r4, lr}
 8008cae:	460c      	mov	r4, r1
 8008cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb4:	f000 f894 	bl	8008de0 <_read_r>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	bfab      	itete	ge
 8008cbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8008cc0:	181b      	addge	r3, r3, r0
 8008cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cc6:	bfac      	ite	ge
 8008cc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cca:	81a3      	strhlt	r3, [r4, #12]
 8008ccc:	bd10      	pop	{r4, pc}

08008cce <__swrite>:
 8008cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd2:	461f      	mov	r7, r3
 8008cd4:	898b      	ldrh	r3, [r1, #12]
 8008cd6:	05db      	lsls	r3, r3, #23
 8008cd8:	4605      	mov	r5, r0
 8008cda:	460c      	mov	r4, r1
 8008cdc:	4616      	mov	r6, r2
 8008cde:	d505      	bpl.n	8008cec <__swrite+0x1e>
 8008ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f000 f868 	bl	8008dbc <_lseek_r>
 8008cec:	89a3      	ldrh	r3, [r4, #12]
 8008cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cf6:	81a3      	strh	r3, [r4, #12]
 8008cf8:	4632      	mov	r2, r6
 8008cfa:	463b      	mov	r3, r7
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d02:	f000 b817 	b.w	8008d34 <_write_r>

08008d06 <__sseek>:
 8008d06:	b510      	push	{r4, lr}
 8008d08:	460c      	mov	r4, r1
 8008d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d0e:	f000 f855 	bl	8008dbc <_lseek_r>
 8008d12:	1c43      	adds	r3, r0, #1
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	bf15      	itete	ne
 8008d18:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d22:	81a3      	strheq	r3, [r4, #12]
 8008d24:	bf18      	it	ne
 8008d26:	81a3      	strhne	r3, [r4, #12]
 8008d28:	bd10      	pop	{r4, pc}

08008d2a <__sclose>:
 8008d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d2e:	f000 b813 	b.w	8008d58 <_close_r>
	...

08008d34 <_write_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	4d07      	ldr	r5, [pc, #28]	; (8008d54 <_write_r+0x20>)
 8008d38:	4604      	mov	r4, r0
 8008d3a:	4608      	mov	r0, r1
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	2200      	movs	r2, #0
 8008d40:	602a      	str	r2, [r5, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	f7f8 fa60 	bl	8001208 <_write>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d102      	bne.n	8008d52 <_write_r+0x1e>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	b103      	cbz	r3, 8008d52 <_write_r+0x1e>
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	20000150 	.word	0x20000150

08008d58 <_close_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4d06      	ldr	r5, [pc, #24]	; (8008d74 <_close_r+0x1c>)
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	4604      	mov	r4, r0
 8008d60:	4608      	mov	r0, r1
 8008d62:	602b      	str	r3, [r5, #0]
 8008d64:	f7f8 fa6c 	bl	8001240 <_close>
 8008d68:	1c43      	adds	r3, r0, #1
 8008d6a:	d102      	bne.n	8008d72 <_close_r+0x1a>
 8008d6c:	682b      	ldr	r3, [r5, #0]
 8008d6e:	b103      	cbz	r3, 8008d72 <_close_r+0x1a>
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	bd38      	pop	{r3, r4, r5, pc}
 8008d74:	20000150 	.word	0x20000150

08008d78 <_fstat_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	4d07      	ldr	r5, [pc, #28]	; (8008d98 <_fstat_r+0x20>)
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4604      	mov	r4, r0
 8008d80:	4608      	mov	r0, r1
 8008d82:	4611      	mov	r1, r2
 8008d84:	602b      	str	r3, [r5, #0]
 8008d86:	f7f8 fa67 	bl	8001258 <_fstat>
 8008d8a:	1c43      	adds	r3, r0, #1
 8008d8c:	d102      	bne.n	8008d94 <_fstat_r+0x1c>
 8008d8e:	682b      	ldr	r3, [r5, #0]
 8008d90:	b103      	cbz	r3, 8008d94 <_fstat_r+0x1c>
 8008d92:	6023      	str	r3, [r4, #0]
 8008d94:	bd38      	pop	{r3, r4, r5, pc}
 8008d96:	bf00      	nop
 8008d98:	20000150 	.word	0x20000150

08008d9c <_isatty_r>:
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	4d06      	ldr	r5, [pc, #24]	; (8008db8 <_isatty_r+0x1c>)
 8008da0:	2300      	movs	r3, #0
 8008da2:	4604      	mov	r4, r0
 8008da4:	4608      	mov	r0, r1
 8008da6:	602b      	str	r3, [r5, #0]
 8008da8:	f7f8 fa66 	bl	8001278 <_isatty>
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	d102      	bne.n	8008db6 <_isatty_r+0x1a>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	b103      	cbz	r3, 8008db6 <_isatty_r+0x1a>
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	bd38      	pop	{r3, r4, r5, pc}
 8008db8:	20000150 	.word	0x20000150

08008dbc <_lseek_r>:
 8008dbc:	b538      	push	{r3, r4, r5, lr}
 8008dbe:	4d07      	ldr	r5, [pc, #28]	; (8008ddc <_lseek_r+0x20>)
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	4608      	mov	r0, r1
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	602a      	str	r2, [r5, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f7f8 fa5f 	bl	800128e <_lseek>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d102      	bne.n	8008dda <_lseek_r+0x1e>
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	b103      	cbz	r3, 8008dda <_lseek_r+0x1e>
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	20000150 	.word	0x20000150

08008de0 <_read_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4d07      	ldr	r5, [pc, #28]	; (8008e00 <_read_r+0x20>)
 8008de4:	4604      	mov	r4, r0
 8008de6:	4608      	mov	r0, r1
 8008de8:	4611      	mov	r1, r2
 8008dea:	2200      	movs	r2, #0
 8008dec:	602a      	str	r2, [r5, #0]
 8008dee:	461a      	mov	r2, r3
 8008df0:	f7f8 f9ed 	bl	80011ce <_read>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_read_r+0x1e>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_read_r+0x1e>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	20000150 	.word	0x20000150

08008e04 <_init>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	bf00      	nop
 8008e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0a:	bc08      	pop	{r3}
 8008e0c:	469e      	mov	lr, r3
 8008e0e:	4770      	bx	lr

08008e10 <_fini>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	bf00      	nop
 8008e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e16:	bc08      	pop	{r3}
 8008e18:	469e      	mov	lr, r3
 8008e1a:	4770      	bx	lr
