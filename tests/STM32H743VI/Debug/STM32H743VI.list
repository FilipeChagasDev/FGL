
STM32H743VI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008da8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  08009040  08009040  00019040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009658  08009658  00019658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800965c  0800965c  0001965c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08009660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000dc  20000078  080096d8  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000154  080096d8  00020154  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002312a  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000409b  00000000  00000000  000431d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d48  00000000  00000000  00047270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000c60  00000000  00000000  00047fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003ab91  00000000  00000000  00048c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001377b  00000000  00000000  000837a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00158bb4  00000000  00000000  00096f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001efad8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003b98  00000000  00000000  001efb2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000078 	.word	0x20000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009028 	.word	0x08009028

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000007c 	.word	0x2000007c
 80002d4:	08009028 	.word	0x08009028

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	ed87 0a01 	vstr	s0, [r7, #4]
 800065a:	ed97 0a01 	vldr	s0, [r7, #4]
 800065e:	f007 fc33 	bl	8007ec8 <cosf>
 8000662:	eef0 7a40 	vmov.f32	s15, s0
 8000666:	eeb0 0a67 	vmov.f32	s0, s15
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	ed87 0a01 	vstr	s0, [r7, #4]
 800067a:	ed97 0a01 	vldr	s0, [r7, #4]
 800067e:	f007 fd47 	bl	8008110 <sinf>
 8000682:	eef0 7a40 	vmov.f32	s15, s0
 8000686:	eeb0 0a67 	vmov.f32	s0, s15
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <_Z7cppMainv>:
#include <math.h>

#define PI 3.14159265359

void cppMain()
{
 8000690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000692:	ed2d 8b06 	vpush	{d8-d10}
 8000696:	b0a5      	sub	sp, #148	; 0x94
 8000698:	af04      	add	r7, sp, #16
											TFT_RST_Pin,
											TFT_A0_GPIO_Port,
											TFT_A0_Pin,
											TFT_CS_GPIO_Port,
											TFT_CS_Pin,
											&hspi1);
 800069a:	2038      	movs	r0, #56	; 0x38
 800069c:	f007 fbb6 	bl	8007e0c <_Znwj>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461c      	mov	r4, r3
 80006a4:	4bca      	ldr	r3, [pc, #808]	; (80009d0 <_Z7cppMainv+0x340>)
 80006a6:	9303      	str	r3, [sp, #12]
 80006a8:	2310      	movs	r3, #16
 80006aa:	9302      	str	r3, [sp, #8]
 80006ac:	4bc9      	ldr	r3, [pc, #804]	; (80009d4 <_Z7cppMainv+0x344>)
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	2340      	movs	r3, #64	; 0x40
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	4bc8      	ldr	r3, [pc, #800]	; (80009d8 <_Z7cppMainv+0x348>)
 80006b6:	2210      	movs	r2, #16
 80006b8:	49c7      	ldr	r1, [pc, #796]	; (80009d8 <_Z7cppMainv+0x348>)
 80006ba:	4620      	mov	r0, r4
 80006bc:	f000 fbd8 	bl	8000e70 <_ZN14STM32H7_ST7735C1EP12GPIO_TypeDeftS1_tS1_tP19__SPI_HandleTypeDef>
 80006c0:	67bc      	str	r4, [r7, #120]	; 0x78

	Canvas canvas(*tft, false, false);
 80006c2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80006c4:	4638      	mov	r0, r7
 80006c6:	2300      	movs	r3, #0
 80006c8:	2200      	movs	r2, #0
 80006ca:	f005 f9c7 	bl	8005a5c <_ZN6CanvasC1ER7Displaybb>

	tft->init();
 80006ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80006d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3324      	adds	r3, #36	; 0x24
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4610      	mov	r0, r2
 80006da:	4798      	blx	r3
	tft->select();
 80006dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80006de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	332c      	adds	r3, #44	; 0x2c
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4610      	mov	r0, r2
 80006e8:	4798      	blx	r3
	tft->drawArea(0,0, tft->getWidth()-1, tft->getHeight()-1, 0,0,0);
 80006ea:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 80006ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3338      	adds	r3, #56	; 0x38
 80006f2:	681c      	ldr	r4, [r3, #0]
 80006f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80006f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	3304      	adds	r3, #4
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4610      	mov	r0, r2
 8000700:	4798      	blx	r3
 8000702:	4603      	mov	r3, r0
 8000704:	3b01      	subs	r3, #1
 8000706:	461e      	mov	r6, r3
 8000708:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800070a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3308      	adds	r3, #8
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4610      	mov	r0, r2
 8000714:	4798      	blx	r3
 8000716:	4603      	mov	r3, r0
 8000718:	3b01      	subs	r3, #1
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 80009dc <_Z7cppMainv+0x34c>
 8000720:	eddf 0aae 	vldr	s1, [pc, #696]	; 80009dc <_Z7cppMainv+0x34c>
 8000724:	ed9f 0aad 	vldr	s0, [pc, #692]	; 80009dc <_Z7cppMainv+0x34c>
 8000728:	4633      	mov	r3, r6
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	4628      	mov	r0, r5
 8000730:	47a0      	blx	r4

	//canvas.drawLine(10, 10, 50, 60, Color(1,0,0));
	//canvas.drawLine(100, 30, 40, 90, Color(0,1,0));
	//canvas.drawLine(22, 30, 90, 70, Color(0,0,1));

	int mx = tft->getWidth()/2;
 8000732:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3304      	adds	r3, #4
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4610      	mov	r0, r2
 800073e:	4798      	blx	r3
 8000740:	4603      	mov	r3, r0
 8000742:	085b      	lsrs	r3, r3, #1
 8000744:	677b      	str	r3, [r7, #116]	; 0x74
	int my = tft->getHeight()/2;
 8000746:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000748:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3308      	adds	r3, #8
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4610      	mov	r0, r2
 8000752:	4798      	blx	r3
 8000754:	4603      	mov	r3, r0
 8000756:	085b      	lsrs	r3, r3, #1
 8000758:	673b      	str	r3, [r7, #112]	; 0x70

	canvas.drawRectangle(10,10,tft->getWidth()-20,tft->getHeight()-20, Color(1,1,1));
 800075a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800075c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3304      	adds	r3, #4
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4610      	mov	r0, r2
 8000766:	4798      	blx	r3
 8000768:	4603      	mov	r3, r0
 800076a:	3b14      	subs	r3, #20
 800076c:	ee07 3a90 	vmov	s15, r3
 8000770:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000774:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	3308      	adds	r3, #8
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4610      	mov	r0, r2
 8000780:	4798      	blx	r3
 8000782:	4603      	mov	r3, r0
 8000784:	3b14      	subs	r3, #20
 8000786:	ee07 3a90 	vmov	s15, r3
 800078a:	eef8 8a67 	vcvt.f32.u32	s17, s15
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000796:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800079a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800079e:	4618      	mov	r0, r3
 80007a0:	f006 fdaa 	bl	80072f8 <_ZN5ColorC1Efff>
 80007a4:	f107 0220 	add.w	r2, r7, #32
 80007a8:	463b      	mov	r3, r7
 80007aa:	4611      	mov	r1, r2
 80007ac:	eef0 1a68 	vmov.f32	s3, s17
 80007b0:	eeb0 1a48 	vmov.f32	s2, s16
 80007b4:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80007b8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80007bc:	4618      	mov	r0, r3
 80007be:	f006 fc4e 	bl	800705e <_ZN6Canvas13drawRectangleEffff5Color>
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	4618      	mov	r0, r3
 80007c8:	f006 fdfc 	bl	80073c4 <_ZN5ColorD1Ev>

	for(float theta = 0; theta < 2*PI; theta += 0.1)
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80007d2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80007d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007da:	ed9f 6b73 	vldr	d6, [pc, #460]	; 80009a8 <_Z7cppMainv+0x318>
 80007de:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80007e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e6:	f140 8086 	bpl.w	80008f6 <_Z7cppMainv+0x266>
	{
		canvas.drawLine(mx, my, mx+(double)50*cos(theta), my+(double)50*sin(theta), Color(sin(theta),sin(theta+PI/2),sin(theta+PI)));
 80007ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007ec:	ee07 3a90 	vmov	s15, r3
 80007f0:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 80007f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007f6:	ee07 3a90 	vmov	s15, r3
 80007fa:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 80007fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000808:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 800080c:	f7ff ff20 	bl	8000650 <_ZSt3cosf>
 8000810:	eef0 7a40 	vmov.f32	s15, s0
 8000814:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000818:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80009b0 <_Z7cppMainv+0x320>
 800081c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000820:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000824:	eeb7 abc7 	vcvt.f32.f64	s20, d7
 8000828:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800082a:	ee07 3a90 	vmov	s15, r3
 800082e:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000832:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8000836:	f7ff ff1b 	bl	8000670 <_ZSt3sinf>
 800083a:	eef0 7a40 	vmov.f32	s15, s0
 800083e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000842:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 80009b0 <_Z7cppMainv+0x320>
 8000846:	ee27 7b06 	vmul.f64	d7, d7, d6
 800084a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800084e:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
 8000852:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8000856:	f7ff ff0b 	bl	8000670 <_ZSt3sinf>
 800085a:	eef0 aa40 	vmov.f32	s21, s0
 800085e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000862:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000866:	ed9f 6b54 	vldr	d6, [pc, #336]	; 80009b8 <_Z7cppMainv+0x328>
 800086a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800086e:	eeb0 0b47 	vmov.f64	d0, d7
 8000872:	f007 fbd9 	bl	8008028 <sin>
 8000876:	eeb0 7b40 	vmov.f64	d7, d0
 800087a:	eef7 8bc7 	vcvt.f32.f64	s17, d7
 800087e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000882:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000886:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80009c0 <_Z7cppMainv+0x330>
 800088a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800088e:	eeb0 0b47 	vmov.f64	d0, d7
 8000892:	f007 fbc9 	bl	8008028 <sin>
 8000896:	eeb0 7b40 	vmov.f64	d7, d0
 800089a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800089e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008a2:	eeb0 1a67 	vmov.f32	s2, s15
 80008a6:	eef0 0a68 	vmov.f32	s1, s17
 80008aa:	eeb0 0a6a 	vmov.f32	s0, s21
 80008ae:	4618      	mov	r0, r3
 80008b0:	f006 fd22 	bl	80072f8 <_ZN5ColorC1Efff>
 80008b4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80008b8:	463b      	mov	r3, r7
 80008ba:	4611      	mov	r1, r2
 80008bc:	eef0 1a48 	vmov.f32	s3, s16
 80008c0:	eeb0 1a4a 	vmov.f32	s2, s20
 80008c4:	eef0 0a69 	vmov.f32	s1, s19
 80008c8:	eeb0 0a49 	vmov.f32	s0, s18
 80008cc:	4618      	mov	r0, r3
 80008ce:	f006 fac1 	bl	8006e54 <_ZN6Canvas8drawLineEffff5Color>
 80008d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008d6:	4618      	mov	r0, r3
 80008d8:	f006 fd74 	bl	80073c4 <_ZN5ColorD1Ev>
	for(float theta = 0; theta < 2*PI; theta += 0.1)
 80008dc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80008e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008e4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80009c8 <_Z7cppMainv+0x338>
 80008e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80008ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008f0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 80008f4:	e76d      	b.n	80007d2 <_Z7cppMainv+0x142>
	}

	canvas.drawEllipse(mx,my,50,100,Color(1,1,1));
 80008f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008f8:	ee07 3a90 	vmov	s15, r3
 80008fc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000902:	ee07 3a90 	vmov	s15, r3
 8000906:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800090a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800090e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000912:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000916:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800091a:	4618      	mov	r0, r3
 800091c:	f006 fcec 	bl	80072f8 <_ZN5ColorC1Efff>
 8000920:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000924:	463b      	mov	r3, r7
 8000926:	2164      	movs	r1, #100	; 0x64
 8000928:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 80009e0 <_Z7cppMainv+0x350>
 800092c:	eef0 0a68 	vmov.f32	s1, s17
 8000930:	eeb0 0a48 	vmov.f32	s0, s16
 8000934:	4618      	mov	r0, r3
 8000936:	f006 fc4b 	bl	80071d0 <_ZN6Canvas11drawEllipseEfffm5Color>
 800093a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800093e:	4618      	mov	r0, r3
 8000940:	f006 fd40 	bl	80073c4 <_ZN5ColorD1Ev>
	canvas.drawEllipse(mx,my,50.5,100,Color(1,1,1));
 8000944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000946:	ee07 3a90 	vmov	s15, r3
 800094a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800094e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000950:	ee07 3a90 	vmov	s15, r3
 8000954:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8000958:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800095c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000960:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000964:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000968:	4618      	mov	r0, r3
 800096a:	f006 fcc5 	bl	80072f8 <_ZN5ColorC1Efff>
 800096e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8000972:	463b      	mov	r3, r7
 8000974:	2164      	movs	r1, #100	; 0x64
 8000976:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80009e4 <_Z7cppMainv+0x354>
 800097a:	eef0 0a68 	vmov.f32	s1, s17
 800097e:	eeb0 0a48 	vmov.f32	s0, s16
 8000982:	4618      	mov	r0, r3
 8000984:	f006 fc24 	bl	80071d0 <_ZN6Canvas11drawEllipseEfffm5Color>
 8000988:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800098c:	4618      	mov	r0, r3
 800098e:	f006 fd19 	bl	80073c4 <_ZN5ColorD1Ev>

	tft->unselect();
 8000992:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	3330      	adds	r3, #48	; 0x30
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4610      	mov	r0, r2
 800099e:	4798      	blx	r3

	while(true)
 80009a0:	e7fe      	b.n	80009a0 <_Z7cppMainv+0x310>
 80009a2:	bf00      	nop
 80009a4:	f3af 8000 	nop.w
 80009a8:	54442eea 	.word	0x54442eea
 80009ac:	401921fb 	.word	0x401921fb
 80009b0:	00000000 	.word	0x00000000
 80009b4:	40490000 	.word	0x40490000
 80009b8:	54442eea 	.word	0x54442eea
 80009bc:	3ff921fb 	.word	0x3ff921fb
 80009c0:	54442eea 	.word	0x54442eea
 80009c4:	400921fb 	.word	0x400921fb
 80009c8:	9999999a 	.word	0x9999999a
 80009cc:	3fb99999 	.word	0x3fb99999
 80009d0:	200000b8 	.word	0x200000b8
 80009d4:	58020800 	.word	0x58020800
 80009d8:	58020000 	.word	0x58020000
 80009dc:	00000000 	.word	0x00000000
 80009e0:	42480000 	.word	0x42480000
 80009e4:	424a0000 	.word	0x424a0000

080009e8 <jumpToCPP>:

	}
}

extern "C" void jumpToCPP()
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	cppMain();
 80009ec:	f7ff fe50 	bl	8000690 <_Z7cppMainv>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2224      	movs	r2, #36	; 0x24
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f008 f9fd 	bl	8008e00 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_DAC1_Init+0x5c>)
 8000a08:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <MX_DAC1_Init+0x60>)
 8000a0a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a0c:	4810      	ldr	r0, [pc, #64]	; (8000a50 <MX_DAC1_Init+0x5c>)
 8000a0e:	f000 fe71 	bl	80016f4 <HAL_DAC_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a18:	f000 f95e 	bl	8000cd8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000a24:	2302      	movs	r3, #2
 8000a26:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2210      	movs	r2, #16
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_DAC1_Init+0x5c>)
 8000a38:	f000 fe8c 	bl	8001754 <HAL_DAC_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000a42:	f000 f949 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	; 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200000a4 	.word	0x200000a4
 8000a54:	40007400 	.word	0x40007400

08000a58 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <HAL_DAC_MspInit+0x3c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d10e      	bne.n	8000a88 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_DAC_MspInit+0x40>)
 8000a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a70:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <HAL_DAC_MspInit+0x40>)
 8000a72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <HAL_DAC_MspInit+0x40>)
 8000a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	40007400 	.word	0x40007400
 8000a98:	58024400 	.word	0x58024400

08000a9c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b3d      	ldr	r3, [pc, #244]	; (8000ba8 <MX_GPIO_Init+0x10c>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	4a3b      	ldr	r2, [pc, #236]	; (8000ba8 <MX_GPIO_Init+0x10c>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac2:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <MX_GPIO_Init+0x10c>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad0:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <MX_GPIO_Init+0x10c>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad6:	4a34      	ldr	r2, [pc, #208]	; (8000ba8 <MX_GPIO_Init+0x10c>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae0:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <MX_GPIO_Init+0x10c>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <MX_GPIO_Init+0x10c>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af4:	4a2c      	ldr	r2, [pc, #176]	; (8000ba8 <MX_GPIO_Init+0x10c>)
 8000af6:	f043 0308 	orr.w	r3, r3, #8
 8000afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afe:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <MX_GPIO_Init+0x10c>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b04:	f003 0308 	and.w	r3, r3, #8
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_RST_Pin|TFT_A0_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2150      	movs	r1, #80	; 0x50
 8000b10:	4826      	ldr	r0, [pc, #152]	; (8000bac <MX_GPIO_Init+0x110>)
 8000b12:	f001 fab3 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2110      	movs	r1, #16
 8000b1a:	4825      	ldr	r0, [pc, #148]	; (8000bb0 <MX_GPIO_Init+0x114>)
 8000b1c:	f001 faae 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin|TFT_A0_Pin;
 8000b20:	2350      	movs	r3, #80	; 0x50
 8000b22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	4619      	mov	r1, r3
 8000b36:	481d      	ldr	r0, [pc, #116]	; (8000bac <MX_GPIO_Init+0x110>)
 8000b38:	f000 fff0 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_CS_Pin;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TFT_CS_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	4619      	mov	r1, r3
 8000b52:	4817      	ldr	r0, [pc, #92]	; (8000bb0 <MX_GPIO_Init+0x114>)
 8000b54:	f000 ffe2 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_EXTI1_ENC_A_Pin|GPIO_EXT2_ENC_B_Pin|GPIO_EXTI3_ENC_SW_Pin;
 8000b58:	230e      	movs	r3, #14
 8000b5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_GPIO_Init+0x118>)
 8000b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4813      	ldr	r0, [pc, #76]	; (8000bb8 <MX_GPIO_Init+0x11c>)
 8000b6c:	f000 ffd6 	bl	8001b1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2007      	movs	r0, #7
 8000b76:	f000 fd6f 	bl	8001658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b7a:	2007      	movs	r0, #7
 8000b7c:	f000 fd96 	bl	80016ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	2008      	movs	r0, #8
 8000b86:	f000 fd67 	bl	8001658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b8a:	2008      	movs	r0, #8
 8000b8c:	f000 fd8e 	bl	80016ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2009      	movs	r0, #9
 8000b96:	f000 fd5f 	bl	8001658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b9a:	2009      	movs	r0, #9
 8000b9c:	f000 fd86 	bl	80016ac <HAL_NVIC_EnableIRQ>

}
 8000ba0:	bf00      	nop
 8000ba2:	3720      	adds	r7, #32
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	58024400 	.word	0x58024400
 8000bac:	58020000 	.word	0x58020000
 8000bb0:	58020800 	.word	0x58020800
 8000bb4:	11110000 	.word	0x11110000
 8000bb8:	58020c00 	.word	0x58020c00

08000bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc0:	f000 fb98 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc4:	f000 f80a 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc8:	f7ff ff68 	bl	8000a9c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bcc:	f000 f894 	bl	8000cf8 <MX_SPI1_Init>
  MX_DAC1_Init();
 8000bd0:	f7ff ff10 	bl	80009f4 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  jumpToCPP();
 8000bd4:	f7ff ff08 	bl	80009e8 <jumpToCPP>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <main+0x1c>
	...

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b09c      	sub	sp, #112	; 0x70
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	224c      	movs	r2, #76	; 0x4c
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f008 f908 	bl	8008e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f008 f902 	bl	8008e00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f001 fa97 	bl	8002130 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <SystemClock_Config+0xf4>)
 8000c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0a:	4a31      	ldr	r2, [pc, #196]	; (8000cd0 <SystemClock_Config+0xf4>)
 8000c0c:	f023 0301 	bic.w	r3, r3, #1
 8000c10:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c12:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <SystemClock_Config+0xf4>)
 8000c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <SystemClock_Config+0xf8>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c24:	4a2b      	ldr	r2, [pc, #172]	; (8000cd4 <SystemClock_Config+0xf8>)
 8000c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <SystemClock_Config+0xf8>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c38:	bf00      	nop
 8000c3a:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <SystemClock_Config+0xf8>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c46:	d1f8      	bne.n	8000c3a <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c50:	2340      	movs	r3, #64	; 0x40
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c54:	2302      	movs	r3, #2
 8000c56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000c60:	230c      	movs	r3, #12
 8000c62:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c70:	230c      	movs	r3, #12
 8000c72:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 fa9a 	bl	80021bc <HAL_RCC_OscConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c8e:	f000 f823 	bl	8000cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c92:	233f      	movs	r3, #63	; 0x3f
 8000c94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c96:	2303      	movs	r3, #3
 8000c98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 ffd8 	bl	8002c6c <HAL_RCC_ClockConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000cc2:	f000 f809 	bl	8000cd8 <Error_Handler>
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	3770      	adds	r7, #112	; 0x70
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	58000400 	.word	0x58000400
 8000cd4:	58024800 	.word	0x58024800

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>

08000ce2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cfc:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000cfe:	4a29      	ldr	r2, [pc, #164]	; (8000da4 <MX_SPI1_Init+0xac>)
 8000d00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d02:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000d0a:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d10:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d12:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d18:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d26:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d2e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000d32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d46:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d52:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_SPI1_Init+0xa8>)
 8000d8c:	f004 f8ac 	bl	8004ee8 <HAL_SPI_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000d96:	f7ff ff9f 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000b8 	.word	0x200000b8
 8000da4:	40013000 	.word	0x40013000

08000da8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0b8      	sub	sp, #224	; 0xe0
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	22bc      	movs	r2, #188	; 0xbc
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f008 f819 	bl	8008e00 <memset>
  if(spiHandle->Instance==SPI1)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a24      	ldr	r2, [pc, #144]	; (8000e64 <HAL_SPI_MspInit+0xbc>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d141      	bne.n	8000e5c <HAL_SPI_MspInit+0xb4>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ddc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 fc2a 	bl	8003640 <HAL_RCCEx_PeriphCLKConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000df2:	f7ff ff71 	bl	8000cd8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <HAL_SPI_MspInit+0xc0>)
 8000df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000dfc:	4a1a      	ldr	r2, [pc, #104]	; (8000e68 <HAL_SPI_MspInit+0xc0>)
 8000dfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_SPI_MspInit+0xc0>)
 8000e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_SPI_MspInit+0xc0>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <HAL_SPI_MspInit+0xc0>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_SPI_MspInit+0xc0>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e32:	23a0      	movs	r3, #160	; 0xa0
 8000e34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e54:	4619      	mov	r1, r3
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_SPI_MspInit+0xc4>)
 8000e58:	f000 fe60 	bl	8001b1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	37e0      	adds	r7, #224	; 0xe0
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40013000 	.word	0x40013000
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	58020000 	.word	0x58020000

08000e70 <_ZN14STM32H7_ST7735C1EP12GPIO_TypeDeftS1_tS1_tP19__SPI_HandleTypeDef>:
 *      Author: filipe
 */

#include <stm32h7_st7735.hpp>

STM32H7_ST7735::STM32H7_ST7735(GPIO_TypeDef *rst_port,
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	80fb      	strh	r3, [r7, #6]
		uint16_t rst_pin,
		GPIO_TypeDef *dc_port,
		uint16_t dc_pin,
		GPIO_TypeDef *cs_port,
		uint16_t cs_pin,
		SPI_HandleTypeDef *hspi) : ST7735()
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f006 face 	bl	8007424 <_ZN6ST7735C1Ev>
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <_ZN14STM32H7_ST7735C1EP12GPIO_TypeDeftS1_tS1_tP19__SPI_HandleTypeDef+0x54>)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	601a      	str	r2, [r3, #0]
{
	this->rst_port = rst_port;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	68ba      	ldr	r2, [r7, #8]
 8000e92:	61da      	str	r2, [r3, #28]
	this->rst_pin = rst_pin;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	88fa      	ldrh	r2, [r7, #6]
 8000e98:	841a      	strh	r2, [r3, #32]
	this->dc_port = dc_port;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
	this->dc_pin = dc_pin;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	8b3a      	ldrh	r2, [r7, #24]
 8000ea4:	851a      	strh	r2, [r3, #40]	; 0x28
	this->cs_port = cs_port;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	69fa      	ldr	r2, [r7, #28]
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
	this->cs_pin = cs_pin;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	8c3a      	ldrh	r2, [r7, #32]
 8000eb0:	861a      	strh	r2, [r3, #48]	; 0x30
	this->hspi = hspi;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	080091e8 	.word	0x080091e8

08000ec8 <_ZN14STM32H7_ST7735D1Ev>:

STM32H7_ST7735::~STM32H7_ST7735()
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <_ZN14STM32H7_ST7735D1Ev+0x20>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f006 fac9 	bl	8007470 <_ZN6ST7735D1Ev>
{
	// TODO Auto-generated destructor stub
}
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	080091e8 	.word	0x080091e8

08000eec <_ZN14STM32H7_ST7735D0Ev>:
STM32H7_ST7735::~STM32H7_ST7735()
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
}
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ffe7 	bl	8000ec8 <_ZN14STM32H7_ST7735D1Ev>
 8000efa:	2138      	movs	r1, #56	; 0x38
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f006 ff83 	bl	8007e08 <_ZdlPvj>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <_ZN14STM32H7_ST77356initIOEv>:

void STM32H7_ST7735::initIO()
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	HAL_SPI_Init(this->hspi);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 ffe5 	bl	8004ee8 <HAL_SPI_Init>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_ZN14STM32H7_ST77359rstPinSetEv>:

void STM32H7_ST7735::rstPinSet()
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->rst_port, this->rst_pin, GPIO_PIN_SET);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69d8      	ldr	r0, [r3, #28]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	8c1b      	ldrh	r3, [r3, #32]
 8000f36:	2201      	movs	r2, #1
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f001 f89f 	bl	800207c <HAL_GPIO_WritePin>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <_ZN14STM32H7_ST773511rstPinResetEv>:

void STM32H7_ST7735::rstPinReset()
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->rst_port, this->rst_pin, GPIO_PIN_RESET);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69d8      	ldr	r0, [r3, #28]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	8c1b      	ldrh	r3, [r3, #32]
 8000f56:	2200      	movs	r2, #0
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f001 f88f 	bl	800207c <HAL_GPIO_WritePin>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <_ZN14STM32H7_ST77358dcPinSetEv>:

void STM32H7_ST7735::dcPinSet()
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->dc_port, this->dc_pin, GPIO_PIN_SET);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f76:	2201      	movs	r2, #1
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f001 f87f 	bl	800207c <HAL_GPIO_WritePin>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <_ZN14STM32H7_ST773510dcPinResetEv>:

void STM32H7_ST7735::dcPinReset()
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->dc_port, this->dc_pin, GPIO_PIN_RESET);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f96:	2200      	movs	r2, #0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f001 f86f 	bl	800207c <HAL_GPIO_WritePin>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_ZN14STM32H7_ST77358csPinSetEv>:

void STM32H7_ST7735::csPinSet()
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->cs_port, this->cs_pin, GPIO_PIN_SET);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f001 f85f 	bl	800207c <HAL_GPIO_WritePin>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_ZN14STM32H7_ST773510csPinResetEv>:

void STM32H7_ST7735::csPinReset()
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->cs_port, this->cs_pin, GPIO_PIN_RESET);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f001 f84f 	bl	800207c <HAL_GPIO_WritePin>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_ZN14STM32H7_ST77358sendByteEh>:

void STM32H7_ST7735::sendByte(uint8_t data)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(this->hspi, &data, 1, 0x1);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000ff6:	1cf9      	adds	r1, r7, #3
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f004 fa1e 	bl	800543c <HAL_SPI_Transmit>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <_ZN14STM32H7_ST77355delayEh>:

void STM32H7_ST7735::delay(uint8_t ms)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
	HAL_Delay(ms);
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f9fe 	bl	8001418 <HAL_Delay>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_MspInit+0x30>)
 800102c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001030:	4a08      	ldr	r2, [pc, #32]	; (8001054 <HAL_MspInit+0x30>)
 8001032:	f043 0302 	orr.w	r3, r3, #2
 8001036:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_MspInit+0x30>)
 800103c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	58024400 	.word	0x58024400

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800105c:	e7fe      	b.n	800105c <NMI_Handler+0x4>

0800105e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>

0800106a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler+0x4>

08001076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a4:	f000 f998 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f001 f817 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}

080010ba <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80010be:	2004      	movs	r0, #4
 80010c0:	f001 f810 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80010cc:	2008      	movs	r0, #8
 80010ce:	f001 f809 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
	return 1;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <_kill>:

int _kill(int pid, int sig)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010f0:	f007 fe4c 	bl	8008d8c <__errno>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2216      	movs	r2, #22
 80010f8:	601a      	str	r2, [r3, #0]
	return -1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_exit>:

void _exit (int status)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800110e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffe7 	bl	80010e6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001118:	e7fe      	b.n	8001118 <_exit+0x12>
	...

0800111c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <_sbrk+0x5c>)
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <_sbrk+0x60>)
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <_sbrk+0x64>)
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <_sbrk+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	429a      	cmp	r2, r3
 800114a:	d207      	bcs.n	800115c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800114c:	f007 fe1e 	bl	8008d8c <__errno>
 8001150:	4603      	mov	r3, r0
 8001152:	220c      	movs	r2, #12
 8001154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800115a:	e009      	b.n	8001170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <_sbrk+0x64>)
 800116c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20020000 	.word	0x20020000
 800117c:	00000400 	.word	0x00000400
 8001180:	20000094 	.word	0x20000094
 8001184:	20000158 	.word	0x20000158

08001188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800118c:	4b39      	ldr	r3, [pc, #228]	; (8001274 <SystemInit+0xec>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001192:	4a38      	ldr	r2, [pc, #224]	; (8001274 <SystemInit+0xec>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800119c:	4b36      	ldr	r3, [pc, #216]	; (8001278 <SystemInit+0xf0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	2b06      	cmp	r3, #6
 80011a6:	d807      	bhi.n	80011b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011a8:	4b33      	ldr	r3, [pc, #204]	; (8001278 <SystemInit+0xf0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f023 030f 	bic.w	r3, r3, #15
 80011b0:	4a31      	ldr	r2, [pc, #196]	; (8001278 <SystemInit+0xf0>)
 80011b2:	f043 0307 	orr.w	r3, r3, #7
 80011b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <SystemInit+0xf4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a2f      	ldr	r2, [pc, #188]	; (800127c <SystemInit+0xf4>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011c4:	4b2d      	ldr	r3, [pc, #180]	; (800127c <SystemInit+0xf4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <SystemInit+0xf4>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	492b      	ldr	r1, [pc, #172]	; (800127c <SystemInit+0xf4>)
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <SystemInit+0xf8>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011d6:	4b28      	ldr	r3, [pc, #160]	; (8001278 <SystemInit+0xf0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d007      	beq.n	80011f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <SystemInit+0xf0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f023 030f 	bic.w	r3, r3, #15
 80011ea:	4a23      	ldr	r2, [pc, #140]	; (8001278 <SystemInit+0xf0>)
 80011ec:	f043 0307 	orr.w	r3, r3, #7
 80011f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <SystemInit+0xf4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011f8:	4b20      	ldr	r3, [pc, #128]	; (800127c <SystemInit+0xf4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <SystemInit+0xf4>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <SystemInit+0xf4>)
 8001206:	4a1f      	ldr	r2, [pc, #124]	; (8001284 <SystemInit+0xfc>)
 8001208:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <SystemInit+0xf4>)
 800120c:	4a1e      	ldr	r2, [pc, #120]	; (8001288 <SystemInit+0x100>)
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <SystemInit+0xf4>)
 8001212:	4a1e      	ldr	r2, [pc, #120]	; (800128c <SystemInit+0x104>)
 8001214:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <SystemInit+0xf4>)
 8001218:	2200      	movs	r2, #0
 800121a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <SystemInit+0xf4>)
 800121e:	4a1b      	ldr	r2, [pc, #108]	; (800128c <SystemInit+0x104>)
 8001220:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <SystemInit+0xf4>)
 8001224:	2200      	movs	r2, #0
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <SystemInit+0xf4>)
 800122a:	4a18      	ldr	r2, [pc, #96]	; (800128c <SystemInit+0x104>)
 800122c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <SystemInit+0xf4>)
 8001230:	2200      	movs	r2, #0
 8001232:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <SystemInit+0xf4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a10      	ldr	r2, [pc, #64]	; (800127c <SystemInit+0xf4>)
 800123a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <SystemInit+0xf4>)
 8001242:	2200      	movs	r2, #0
 8001244:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <SystemInit+0x108>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <SystemInit+0x10c>)
 800124c:	4013      	ands	r3, r2
 800124e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001252:	d202      	bcs.n	800125a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001254:	4b10      	ldr	r3, [pc, #64]	; (8001298 <SystemInit+0x110>)
 8001256:	2201      	movs	r2, #1
 8001258:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <SystemInit+0x114>)
 800125c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001260:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <SystemInit+0xec>)
 8001264:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001268:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00
 8001278:	52002000 	.word	0x52002000
 800127c:	58024400 	.word	0x58024400
 8001280:	eaf6ed7f 	.word	0xeaf6ed7f
 8001284:	02020200 	.word	0x02020200
 8001288:	01ff0000 	.word	0x01ff0000
 800128c:	01010280 	.word	0x01010280
 8001290:	5c001000 	.word	0x5c001000
 8001294:	ffff0000 	.word	0xffff0000
 8001298:	51008108 	.word	0x51008108
 800129c:	52004000 	.word	0x52004000

080012a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012a4:	f7ff ff70 	bl	8001188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012aa:	490d      	ldr	r1, [pc, #52]	; (80012e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c0:	4c0a      	ldr	r4, [pc, #40]	; (80012ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ce:	f007 fd63 	bl	8008d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d2:	f7ff fc73 	bl	8000bbc <main>
  bx  lr
 80012d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80012e4:	08009660 	.word	0x08009660
  ldr r2, =_sbss
 80012e8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80012ec:	20000154 	.word	0x20000154

080012f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC3_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f000 f98c 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001300:	f002 f824 	bl	800334c <HAL_RCC_GetSysClockFreq>
 8001304:	4602      	mov	r2, r0
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_Init+0x68>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	4913      	ldr	r1, [pc, #76]	; (8001360 <HAL_Init+0x6c>)
 8001312:	5ccb      	ldrb	r3, [r1, r3]
 8001314:	f003 031f 	and.w	r3, r3, #31
 8001318:	fa22 f303 	lsr.w	r3, r2, r3
 800131c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_Init+0x68>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <HAL_Init+0x6c>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	f003 031f 	and.w	r3, r3, #31
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <HAL_Init+0x70>)
 8001336:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <HAL_Init+0x74>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800133e:	2000      	movs	r0, #0
 8001340:	f000 f814 	bl	800136c <HAL_InitTick>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e002      	b.n	8001354 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800134e:	f7ff fe69 	bl	8001024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	58024400 	.word	0x58024400
 8001360:	08009250 	.word	0x08009250
 8001364:	20000004 	.word	0x20000004
 8001368:	20000000 	.word	0x20000000

0800136c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_InitTick+0x60>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e021      	b.n	80013c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_InitTick+0x64>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_InitTick+0x60>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f9a0 	bl	80016dc <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b4:	f000 f950 	bl	8001658 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <HAL_InitTick+0x68>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000000c 	.word	0x2000000c
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000008 	.word	0x20000008

080013d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_IncTick+0x24>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	2000000c 	.word	0x2000000c
 80013fc:	20000140 	.word	0x20000140

08001400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000140 	.word	0x20000140

08001418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff ffee 	bl	8001400 <HAL_GetTick>
 8001424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001430:	d005      	beq.n	800143e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_Delay+0x44>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143e:	bf00      	nop
 8001440:	f7ff ffde 	bl	8001400 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	429a      	cmp	r2, r3
 800144e:	d8f7      	bhi.n	8001440 <HAL_Delay+0x28>
  {
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000000c 	.word	0x2000000c

08001460 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <HAL_GetREVID+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0c1b      	lsrs	r3, r3, #16
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	5c001000 	.word	0x5c001000

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <__NVIC_SetPriorityGrouping+0x40>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <__NVIC_SetPriorityGrouping+0x40>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00
 80014bc:	05fa0000 	.word	0x05fa0000

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f8:	f7ff ff8e 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b07      	cmp	r3, #7
 8001624:	d00f      	beq.n	8001646 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b06      	cmp	r3, #6
 800162a:	d00c      	beq.n	8001646 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b05      	cmp	r3, #5
 8001630:	d009      	beq.n	8001646 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b04      	cmp	r3, #4
 8001636:	d006      	beq.n	8001646 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d003      	beq.n	8001646 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800163e:	2192      	movs	r1, #146	; 0x92
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001642:	f7ff fb4e 	bl	8000ce2 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff16 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	08009040 	.word	0x08009040

08001658 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	d903      	bls.n	8001674 <HAL_NVIC_SetPriority+0x1c>
 800166c:	21aa      	movs	r1, #170	; 0xaa
 800166e:	480e      	ldr	r0, [pc, #56]	; (80016a8 <HAL_NVIC_SetPriority+0x50>)
 8001670:	f7ff fb37 	bl	8000ce2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b0f      	cmp	r3, #15
 8001678:	d903      	bls.n	8001682 <HAL_NVIC_SetPriority+0x2a>
 800167a:	21ab      	movs	r1, #171	; 0xab
 800167c:	480a      	ldr	r0, [pc, #40]	; (80016a8 <HAL_NVIC_SetPriority+0x50>)
 800167e:	f7ff fb30 	bl	8000ce2 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8001682:	f7ff ff1d 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 8001686:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	68b9      	ldr	r1, [r7, #8]
 800168c:	6978      	ldr	r0, [r7, #20]
 800168e:	f7ff ff6d 	bl	800156c <NVIC_EncodePriority>
 8001692:	4602      	mov	r2, r0
 8001694:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff3c 	bl	8001518 <__NVIC_SetPriority>
}
 80016a0:	bf00      	nop
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	08009040 	.word	0x08009040

080016ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80016b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	da03      	bge.n	80016c6 <HAL_NVIC_EnableIRQ+0x1a>
 80016be:	21be      	movs	r1, #190	; 0xbe
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <HAL_NVIC_EnableIRQ+0x2c>)
 80016c2:	f7ff fb0e 	bl	8000ce2 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff06 	bl	80014dc <__NVIC_EnableIRQ>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	08009040 	.word	0x08009040

080016dc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff75 	bl	80015d4 <SysTick_Config>
 80016ea:	4603      	mov	r3, r0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e01e      	b.n	8001744 <HAL_DAC_Init+0x50>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a10      	ldr	r2, [pc, #64]	; (800174c <HAL_DAC_Init+0x58>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d004      	beq.n	800171a <HAL_DAC_Init+0x26>
 8001710:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8001714:	480e      	ldr	r0, [pc, #56]	; (8001750 <HAL_DAC_Init+0x5c>)
 8001716:	f7ff fae4 	bl	8000ce2 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	791b      	ldrb	r3, [r3, #4]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d105      	bne.n	8001730 <HAL_DAC_Init+0x3c>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff f994 	bl	8000a58 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2202      	movs	r2, #2
 8001734:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40007400 	.word	0x40007400
 8001750:	0800907c 	.word	0x0800907c

08001754 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d03c      	beq.n	80017e2 <HAL_DAC_ConfigChannel+0x8e>
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b06      	cmp	r3, #6
 800176e:	d038      	beq.n	80017e2 <HAL_DAC_ConfigChannel+0x8e>
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b0a      	cmp	r3, #10
 8001776:	d034      	beq.n	80017e2 <HAL_DAC_ConfigChannel+0x8e>
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b0e      	cmp	r3, #14
 800177e:	d030      	beq.n	80017e2 <HAL_DAC_ConfigChannel+0x8e>
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b12      	cmp	r3, #18
 8001786:	d02c      	beq.n	80017e2 <HAL_DAC_ConfigChannel+0x8e>
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b16      	cmp	r3, #22
 800178e:	d028      	beq.n	80017e2 <HAL_DAC_ConfigChannel+0x8e>
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b1a      	cmp	r3, #26
 8001796:	d024      	beq.n	80017e2 <HAL_DAC_ConfigChannel+0x8e>
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b1e      	cmp	r3, #30
 800179e:	d020      	beq.n	80017e2 <HAL_DAC_ConfigChannel+0x8e>
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b22      	cmp	r3, #34	; 0x22
 80017a6:	d01c      	beq.n	80017e2 <HAL_DAC_ConfigChannel+0x8e>
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b26      	cmp	r3, #38	; 0x26
 80017ae:	d018      	beq.n	80017e2 <HAL_DAC_ConfigChannel+0x8e>
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b2a      	cmp	r3, #42	; 0x2a
 80017b6:	d014      	beq.n	80017e2 <HAL_DAC_ConfigChannel+0x8e>
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b2e      	cmp	r3, #46	; 0x2e
 80017be:	d010      	beq.n	80017e2 <HAL_DAC_ConfigChannel+0x8e>
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b32      	cmp	r3, #50	; 0x32
 80017c6:	d00c      	beq.n	80017e2 <HAL_DAC_ConfigChannel+0x8e>
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b36      	cmp	r3, #54	; 0x36
 80017ce:	d008      	beq.n	80017e2 <HAL_DAC_ConfigChannel+0x8e>
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d004      	beq.n	80017e2 <HAL_DAC_ConfigChannel+0x8e>
 80017d8:	f240 31ee 	movw	r1, #1006	; 0x3ee
 80017dc:	489e      	ldr	r0, [pc, #632]	; (8001a58 <HAL_DAC_ConfigChannel+0x304>)
 80017de:	f7ff fa80 	bl	8000ce2 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d008      	beq.n	80017fc <HAL_DAC_ConfigChannel+0xa8>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d004      	beq.n	80017fc <HAL_DAC_ConfigChannel+0xa8>
 80017f2:	f240 31ef 	movw	r1, #1007	; 0x3ef
 80017f6:	4898      	ldr	r0, [pc, #608]	; (8001a58 <HAL_DAC_ConfigChannel+0x304>)
 80017f8:	f7ff fa73 	bl	8000ce2 <assert_failed>
  assert_param(IS_DAC_CHIP_CONNECTION(sConfig->DAC_ConnectOnChipPeripheral));
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d00c      	beq.n	800181e <HAL_DAC_ConfigChannel+0xca>
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d008      	beq.n	800181e <HAL_DAC_ConfigChannel+0xca>
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b04      	cmp	r3, #4
 8001812:	d004      	beq.n	800181e <HAL_DAC_ConfigChannel+0xca>
 8001814:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001818:	488f      	ldr	r0, [pc, #572]	; (8001a58 <HAL_DAC_ConfigChannel+0x304>)
 800181a:	f7ff fa62 	bl	8000ce2 <assert_failed>
  assert_param(IS_DAC_TRIMMING(sConfig->DAC_UserTrimming));
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d008      	beq.n	8001838 <HAL_DAC_ConfigChannel+0xe4>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d004      	beq.n	8001838 <HAL_DAC_ConfigChannel+0xe4>
 800182e:	f240 31f1 	movw	r1, #1009	; 0x3f1
 8001832:	4889      	ldr	r0, [pc, #548]	; (8001a58 <HAL_DAC_ConfigChannel+0x304>)
 8001834:	f7ff fa55 	bl	8000ce2 <assert_failed>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d108      	bne.n	8001852 <HAL_DAC_ConfigChannel+0xfe>
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	2b1f      	cmp	r3, #31
 8001846:	d904      	bls.n	8001852 <HAL_DAC_ConfigChannel+0xfe>
 8001848:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 800184c:	4882      	ldr	r0, [pc, #520]	; (8001a58 <HAL_DAC_ConfigChannel+0x304>)
 800184e:	f7ff fa48 	bl	8000ce2 <assert_failed>
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d008      	beq.n	800186c <HAL_DAC_ConfigChannel+0x118>
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b04      	cmp	r3, #4
 8001860:	d004      	beq.n	800186c <HAL_DAC_ConfigChannel+0x118>
 8001862:	f240 31f6 	movw	r1, #1014	; 0x3f6
 8001866:	487c      	ldr	r0, [pc, #496]	; (8001a58 <HAL_DAC_ConfigChannel+0x304>)
 8001868:	f7ff fa3b 	bl	8000ce2 <assert_failed>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b04      	cmp	r3, #4
 8001872:	d11c      	bne.n	80018ae <HAL_DAC_ConfigChannel+0x15a>
  {
    assert_param(IS_DAC_SAMPLETIME(sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime));
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800187c:	d304      	bcc.n	8001888 <HAL_DAC_ConfigChannel+0x134>
 800187e:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8001882:	4875      	ldr	r0, [pc, #468]	; (8001a58 <HAL_DAC_ConfigChannel+0x304>)
 8001884:	f7ff fa2d 	bl	8000ce2 <assert_failed>
    assert_param(IS_DAC_HOLDTIME(sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime));
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001890:	d304      	bcc.n	800189c <HAL_DAC_ConfigChannel+0x148>
 8001892:	f240 31fa 	movw	r1, #1018	; 0x3fa
 8001896:	4870      	ldr	r0, [pc, #448]	; (8001a58 <HAL_DAC_ConfigChannel+0x304>)
 8001898:	f7ff fa23 	bl	8000ce2 <assert_failed>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	2bff      	cmp	r3, #255	; 0xff
 80018a2:	d904      	bls.n	80018ae <HAL_DAC_ConfigChannel+0x15a>
 80018a4:	f240 31fb 	movw	r1, #1019	; 0x3fb
 80018a8:	486b      	ldr	r0, [pc, #428]	; (8001a58 <HAL_DAC_ConfigChannel+0x304>)
 80018aa:	f7ff fa1a 	bl	8000ce2 <assert_failed>
  }
  assert_param(IS_DAC_CHANNEL(Channel));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d007      	beq.n	80018c4 <HAL_DAC_ConfigChannel+0x170>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b10      	cmp	r3, #16
 80018b8:	d004      	beq.n	80018c4 <HAL_DAC_ConfigChannel+0x170>
 80018ba:	f240 31fd 	movw	r1, #1021	; 0x3fd
 80018be:	4866      	ldr	r0, [pc, #408]	; (8001a58 <HAL_DAC_ConfigChannel+0x304>)
 80018c0:	f7ff fa0f 	bl	8000ce2 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	795b      	ldrb	r3, [r3, #5]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_DAC_ConfigChannel+0x17c>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e121      	b.n	8001b14 <HAL_DAC_ConfigChannel+0x3c0>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2201      	movs	r2, #1
 80018d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2202      	movs	r2, #2
 80018da:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d174      	bne.n	80019ce <HAL_DAC_ConfigChannel+0x27a>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80018e4:	f7ff fd8c 	bl	8001400 <HAL_GetTick>
 80018e8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d134      	bne.n	800195a <HAL_DAC_ConfigChannel+0x206>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80018f0:	e011      	b.n	8001916 <HAL_DAC_ConfigChannel+0x1c2>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80018f2:	f7ff fd85 	bl	8001400 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d90a      	bls.n	8001916 <HAL_DAC_ConfigChannel+0x1c2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	f043 0208 	orr.w	r2, r3, #8
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2203      	movs	r2, #3
 8001910:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e0fe      	b.n	8001b14 <HAL_DAC_ConfigChannel+0x3c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800191c:	4b4f      	ldr	r3, [pc, #316]	; (8001a5c <HAL_DAC_ConfigChannel+0x308>)
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e6      	bne.n	80018f2 <HAL_DAC_ConfigChannel+0x19e>
        }
      }
      HAL_Delay(1);
 8001924:	2001      	movs	r0, #1
 8001926:	f7ff fd77 	bl	8001418 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	6992      	ldr	r2, [r2, #24]
 8001932:	641a      	str	r2, [r3, #64]	; 0x40
 8001934:	e01e      	b.n	8001974 <HAL_DAC_ConfigChannel+0x220>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001936:	f7ff fd63 	bl	8001400 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d90a      	bls.n	800195a <HAL_DAC_ConfigChannel+0x206>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	f043 0208 	orr.w	r2, r3, #8
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2203      	movs	r2, #3
 8001954:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e0dc      	b.n	8001b14 <HAL_DAC_ConfigChannel+0x3c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001960:	2b00      	cmp	r3, #0
 8001962:	dbe8      	blt.n	8001936 <HAL_DAC_ConfigChannel+0x1e2>
        }
      }
      HAL_Delay(1U);
 8001964:	2001      	movs	r0, #1
 8001966:	f7ff fd57 	bl	8001418 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	6992      	ldr	r2, [r2, #24]
 8001972:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	ea02 0103 	and.w	r1, r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	69da      	ldr	r2, [r3, #28]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	409a      	lsls	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	21ff      	movs	r1, #255	; 0xff
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	ea02 0103 	and.w	r1, r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	6a1a      	ldr	r2, [r3, #32]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	409a      	lsls	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d11d      	bne.n	8001a12 <HAL_DAC_ConfigChannel+0x2be>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019dc:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	221f      	movs	r2, #31
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	4013      	ands	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a18:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	2207      	movs	r2, #7
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d102      	bne.n	8001a3c <HAL_DAC_ConfigChannel+0x2e8>
  {
    connectOnChip = 0x00000000UL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	e013      	b.n	8001a64 <HAL_DAC_ConfigChannel+0x310>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d102      	bne.n	8001a4a <HAL_DAC_ConfigChannel+0x2f6>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001a44:	2301      	movs	r3, #1
 8001a46:	61fb      	str	r3, [r7, #28]
 8001a48:	e00c      	b.n	8001a64 <HAL_DAC_ConfigChannel+0x310>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_DAC_ConfigChannel+0x30c>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001a52:	2301      	movs	r3, #1
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	e005      	b.n	8001a64 <HAL_DAC_ConfigChannel+0x310>
 8001a58:	0800907c 	.word	0x0800907c
 8001a5c:	20008000 	.word	0x20008000
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	69fa      	ldr	r2, [r7, #28]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6819      	ldr	r1, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6819      	ldr	r1, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	22c0      	movs	r2, #192	; 0xc0
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43da      	mvns	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	400a      	ands	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_GPIO_Init+0x12c>)
 8001b2c:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a46      	ldr	r2, [pc, #280]	; (8001c4c <HAL_GPIO_Init+0x130>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d02b      	beq.n	8001b8e <HAL_GPIO_Init+0x72>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a45      	ldr	r2, [pc, #276]	; (8001c50 <HAL_GPIO_Init+0x134>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d027      	beq.n	8001b8e <HAL_GPIO_Init+0x72>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a44      	ldr	r2, [pc, #272]	; (8001c54 <HAL_GPIO_Init+0x138>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d023      	beq.n	8001b8e <HAL_GPIO_Init+0x72>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a43      	ldr	r2, [pc, #268]	; (8001c58 <HAL_GPIO_Init+0x13c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d01f      	beq.n	8001b8e <HAL_GPIO_Init+0x72>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a42      	ldr	r2, [pc, #264]	; (8001c5c <HAL_GPIO_Init+0x140>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01b      	beq.n	8001b8e <HAL_GPIO_Init+0x72>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a41      	ldr	r2, [pc, #260]	; (8001c60 <HAL_GPIO_Init+0x144>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d017      	beq.n	8001b8e <HAL_GPIO_Init+0x72>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a40      	ldr	r2, [pc, #256]	; (8001c64 <HAL_GPIO_Init+0x148>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0x72>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a3f      	ldr	r2, [pc, #252]	; (8001c68 <HAL_GPIO_Init+0x14c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00f      	beq.n	8001b8e <HAL_GPIO_Init+0x72>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a3e      	ldr	r2, [pc, #248]	; (8001c6c <HAL_GPIO_Init+0x150>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00b      	beq.n	8001b8e <HAL_GPIO_Init+0x72>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a3d      	ldr	r2, [pc, #244]	; (8001c70 <HAL_GPIO_Init+0x154>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <HAL_GPIO_Init+0x72>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a3c      	ldr	r2, [pc, #240]	; (8001c74 <HAL_GPIO_Init+0x158>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x72>
 8001b86:	21bb      	movs	r1, #187	; 0xbb
 8001b88:	483b      	ldr	r0, [pc, #236]	; (8001c78 <HAL_GPIO_Init+0x15c>)
 8001b8a:	f7ff f8aa 	bl	8000ce2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_GPIO_Init+0x88>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <HAL_GPIO_Init+0x160>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x90>
 8001ba4:	21bc      	movs	r1, #188	; 0xbc
 8001ba6:	4834      	ldr	r0, [pc, #208]	; (8001c78 <HAL_GPIO_Init+0x15c>)
 8001ba8:	f7ff f89b 	bl	8000ce2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d035      	beq.n	8001c20 <HAL_GPIO_Init+0x104>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d031      	beq.n	8001c20 <HAL_GPIO_Init+0x104>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b11      	cmp	r3, #17
 8001bc2:	d02d      	beq.n	8001c20 <HAL_GPIO_Init+0x104>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d029      	beq.n	8001c20 <HAL_GPIO_Init+0x104>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b12      	cmp	r3, #18
 8001bd2:	d025      	beq.n	8001c20 <HAL_GPIO_Init+0x104>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4a29      	ldr	r2, [pc, #164]	; (8001c80 <HAL_GPIO_Init+0x164>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d020      	beq.n	8001c20 <HAL_GPIO_Init+0x104>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4a28      	ldr	r2, [pc, #160]	; (8001c84 <HAL_GPIO_Init+0x168>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d01b      	beq.n	8001c20 <HAL_GPIO_Init+0x104>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4a26      	ldr	r2, [pc, #152]	; (8001c88 <HAL_GPIO_Init+0x16c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d016      	beq.n	8001c20 <HAL_GPIO_Init+0x104>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4a25      	ldr	r2, [pc, #148]	; (8001c8c <HAL_GPIO_Init+0x170>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d011      	beq.n	8001c20 <HAL_GPIO_Init+0x104>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a23      	ldr	r2, [pc, #140]	; (8001c90 <HAL_GPIO_Init+0x174>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00c      	beq.n	8001c20 <HAL_GPIO_Init+0x104>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4a22      	ldr	r2, [pc, #136]	; (8001c94 <HAL_GPIO_Init+0x178>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d007      	beq.n	8001c20 <HAL_GPIO_Init+0x104>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x104>
 8001c18:	21bd      	movs	r1, #189	; 0xbd
 8001c1a:	4817      	ldr	r0, [pc, #92]	; (8001c78 <HAL_GPIO_Init+0x15c>)
 8001c1c:	f7ff f861 	bl	8000ce2 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 821a 	beq.w	800205e <HAL_GPIO_Init+0x542>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	f000 8215 	beq.w	800205e <HAL_GPIO_Init+0x542>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	f000 8210 	beq.w	800205e <HAL_GPIO_Init+0x542>
 8001c3e:	21be      	movs	r1, #190	; 0xbe
 8001c40:	480d      	ldr	r0, [pc, #52]	; (8001c78 <HAL_GPIO_Init+0x15c>)
 8001c42:	f7ff f84e 	bl	8000ce2 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c46:	e20a      	b.n	800205e <HAL_GPIO_Init+0x542>
 8001c48:	58000080 	.word	0x58000080
 8001c4c:	58020000 	.word	0x58020000
 8001c50:	58020400 	.word	0x58020400
 8001c54:	58020800 	.word	0x58020800
 8001c58:	58020c00 	.word	0x58020c00
 8001c5c:	58021000 	.word	0x58021000
 8001c60:	58021400 	.word	0x58021400
 8001c64:	58021800 	.word	0x58021800
 8001c68:	58021c00 	.word	0x58021c00
 8001c6c:	58022000 	.word	0x58022000
 8001c70:	58022400 	.word	0x58022400
 8001c74:	58022800 	.word	0x58022800
 8001c78:	080090b4 	.word	0x080090b4
 8001c7c:	ffff0000 	.word	0xffff0000
 8001c80:	11110000 	.word	0x11110000
 8001c84:	11210000 	.word	0x11210000
 8001c88:	11310000 	.word	0x11310000
 8001c8c:	11120000 	.word	0x11120000
 8001c90:	11220000 	.word	0x11220000
 8001c94:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 81d4 	beq.w	8002058 <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d00b      	beq.n	8001cd0 <HAL_GPIO_Init+0x1b4>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d007      	beq.n	8001cd0 <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc4:	2b11      	cmp	r3, #17
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b12      	cmp	r3, #18
 8001cce:	d144      	bne.n	8001d5a <HAL_GPIO_Init+0x23e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00f      	beq.n	8001cf8 <HAL_GPIO_Init+0x1dc>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d00b      	beq.n	8001cf8 <HAL_GPIO_Init+0x1dc>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d007      	beq.n	8001cf8 <HAL_GPIO_Init+0x1dc>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x1dc>
 8001cf0:	21ce      	movs	r1, #206	; 0xce
 8001cf2:	4897      	ldr	r0, [pc, #604]	; (8001f50 <HAL_GPIO_Init+0x434>)
 8001cf4:	f7fe fff5 	bl	8000ce2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d2e:	2201      	movs	r2, #1
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	f003 0201 	and.w	r2, r3, #1
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2203      	movs	r2, #3
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x27e>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b12      	cmp	r3, #18
 8001d98:	d15b      	bne.n	8001e52 <HAL_GPIO_Init+0x336>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a6d      	ldr	r2, [pc, #436]	; (8001f54 <HAL_GPIO_Init+0x438>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d02b      	beq.n	8001dfa <HAL_GPIO_Init+0x2de>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a6c      	ldr	r2, [pc, #432]	; (8001f58 <HAL_GPIO_Init+0x43c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d027      	beq.n	8001dfa <HAL_GPIO_Init+0x2de>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a6b      	ldr	r2, [pc, #428]	; (8001f5c <HAL_GPIO_Init+0x440>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d023      	beq.n	8001dfa <HAL_GPIO_Init+0x2de>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a6a      	ldr	r2, [pc, #424]	; (8001f60 <HAL_GPIO_Init+0x444>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01f      	beq.n	8001dfa <HAL_GPIO_Init+0x2de>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a69      	ldr	r2, [pc, #420]	; (8001f64 <HAL_GPIO_Init+0x448>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d01b      	beq.n	8001dfa <HAL_GPIO_Init+0x2de>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a68      	ldr	r2, [pc, #416]	; (8001f68 <HAL_GPIO_Init+0x44c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d017      	beq.n	8001dfa <HAL_GPIO_Init+0x2de>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a67      	ldr	r2, [pc, #412]	; (8001f6c <HAL_GPIO_Init+0x450>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_GPIO_Init+0x2de>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a66      	ldr	r2, [pc, #408]	; (8001f70 <HAL_GPIO_Init+0x454>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00f      	beq.n	8001dfa <HAL_GPIO_Init+0x2de>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a65      	ldr	r2, [pc, #404]	; (8001f74 <HAL_GPIO_Init+0x458>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00b      	beq.n	8001dfa <HAL_GPIO_Init+0x2de>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a64      	ldr	r2, [pc, #400]	; (8001f78 <HAL_GPIO_Init+0x45c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d007      	beq.n	8001dfa <HAL_GPIO_Init+0x2de>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a63      	ldr	r2, [pc, #396]	; (8001f7c <HAL_GPIO_Init+0x460>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x2de>
 8001df2:	21e6      	movs	r1, #230	; 0xe6
 8001df4:	4856      	ldr	r0, [pc, #344]	; (8001f50 <HAL_GPIO_Init+0x434>)
 8001df6:	f7fe ff74 	bl	8000ce2 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	2b0f      	cmp	r3, #15
 8001e00:	d903      	bls.n	8001e0a <HAL_GPIO_Init+0x2ee>
 8001e02:	21e7      	movs	r1, #231	; 0xe7
 8001e04:	4852      	ldr	r0, [pc, #328]	; (8001f50 <HAL_GPIO_Init+0x434>)
 8001e06:	f7fe ff6c 	bl	8000ce2 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0203 	and.w	r2, r3, #3
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80e2 	beq.w	8002058 <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e94:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <HAL_GPIO_Init+0x464>)
 8001e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e9a:	4a39      	ldr	r2, [pc, #228]	; (8001f80 <HAL_GPIO_Init+0x464>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ea4:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <HAL_GPIO_Init+0x464>)
 8001ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb2:	4a34      	ldr	r2, [pc, #208]	; (8001f84 <HAL_GPIO_Init+0x468>)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a1e      	ldr	r2, [pc, #120]	; (8001f54 <HAL_GPIO_Init+0x438>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d054      	beq.n	8001f88 <HAL_GPIO_Init+0x46c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_GPIO_Init+0x43c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d031      	beq.n	8001f4a <HAL_GPIO_Init+0x42e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <HAL_GPIO_Init+0x440>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d02b      	beq.n	8001f46 <HAL_GPIO_Init+0x42a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1b      	ldr	r2, [pc, #108]	; (8001f60 <HAL_GPIO_Init+0x444>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d025      	beq.n	8001f42 <HAL_GPIO_Init+0x426>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1a      	ldr	r2, [pc, #104]	; (8001f64 <HAL_GPIO_Init+0x448>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01f      	beq.n	8001f3e <HAL_GPIO_Init+0x422>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <HAL_GPIO_Init+0x44c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d019      	beq.n	8001f3a <HAL_GPIO_Init+0x41e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a18      	ldr	r2, [pc, #96]	; (8001f6c <HAL_GPIO_Init+0x450>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0x41a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a17      	ldr	r2, [pc, #92]	; (8001f70 <HAL_GPIO_Init+0x454>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00d      	beq.n	8001f32 <HAL_GPIO_Init+0x416>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a16      	ldr	r2, [pc, #88]	; (8001f74 <HAL_GPIO_Init+0x458>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x412>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a15      	ldr	r2, [pc, #84]	; (8001f78 <HAL_GPIO_Init+0x45c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_GPIO_Init+0x40e>
 8001f26:	2309      	movs	r3, #9
 8001f28:	e02f      	b.n	8001f8a <HAL_GPIO_Init+0x46e>
 8001f2a:	230a      	movs	r3, #10
 8001f2c:	e02d      	b.n	8001f8a <HAL_GPIO_Init+0x46e>
 8001f2e:	2308      	movs	r3, #8
 8001f30:	e02b      	b.n	8001f8a <HAL_GPIO_Init+0x46e>
 8001f32:	2307      	movs	r3, #7
 8001f34:	e029      	b.n	8001f8a <HAL_GPIO_Init+0x46e>
 8001f36:	2306      	movs	r3, #6
 8001f38:	e027      	b.n	8001f8a <HAL_GPIO_Init+0x46e>
 8001f3a:	2305      	movs	r3, #5
 8001f3c:	e025      	b.n	8001f8a <HAL_GPIO_Init+0x46e>
 8001f3e:	2304      	movs	r3, #4
 8001f40:	e023      	b.n	8001f8a <HAL_GPIO_Init+0x46e>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e021      	b.n	8001f8a <HAL_GPIO_Init+0x46e>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e01f      	b.n	8001f8a <HAL_GPIO_Init+0x46e>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e01d      	b.n	8001f8a <HAL_GPIO_Init+0x46e>
 8001f4e:	bf00      	nop
 8001f50:	080090b4 	.word	0x080090b4
 8001f54:	58020000 	.word	0x58020000
 8001f58:	58020400 	.word	0x58020400
 8001f5c:	58020800 	.word	0x58020800
 8001f60:	58020c00 	.word	0x58020c00
 8001f64:	58021000 	.word	0x58021000
 8001f68:	58021400 	.word	0x58021400
 8001f6c:	58021800 	.word	0x58021800
 8001f70:	58021c00 	.word	0x58021c00
 8001f74:	58022000 	.word	0x58022000
 8001f78:	58022400 	.word	0x58022400
 8001f7c:	58022800 	.word	0x58022800
 8001f80:	58024400 	.word	0x58024400
 8001f84:	58000400 	.word	0x58000400
 8001f88:	2300      	movs	r3, #0
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	f002 0203 	and.w	r2, r2, #3
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	4093      	lsls	r3, r2
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f9a:	4937      	ldr	r1, [pc, #220]	; (8002078 <HAL_GPIO_Init+0x55c>)
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002022:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800202a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	3301      	adds	r3, #1
 800205c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	f47f ae15 	bne.w	8001c98 <HAL_GPIO_Init+0x17c>
  }
}
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	3720      	adds	r7, #32
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	58000400 	.word	0x58000400

0800207c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
 8002088:	4613      	mov	r3, r2
 800208a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d004      	beq.n	800209c <HAL_GPIO_WritePin+0x20>
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_GPIO_WritePin+0x60>)
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d004      	beq.n	80020a6 <HAL_GPIO_WritePin+0x2a>
 800209c:	f240 11ad 	movw	r1, #429	; 0x1ad
 80020a0:	480f      	ldr	r0, [pc, #60]	; (80020e0 <HAL_GPIO_WritePin+0x64>)
 80020a2:	f7fe fe1e 	bl	8000ce2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80020a6:	787b      	ldrb	r3, [r7, #1]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d007      	beq.n	80020bc <HAL_GPIO_WritePin+0x40>
 80020ac:	787b      	ldrb	r3, [r7, #1]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d004      	beq.n	80020bc <HAL_GPIO_WritePin+0x40>
 80020b2:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80020b6:	480a      	ldr	r0, [pc, #40]	; (80020e0 <HAL_GPIO_WritePin+0x64>)
 80020b8:	f7fe fe13 	bl	8000ce2 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80020bc:	787b      	ldrb	r3, [r7, #1]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020c8:	e003      	b.n	80020d2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020ca:	887b      	ldrh	r3, [r7, #2]
 80020cc:	041a      	lsls	r2, r3, #16
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	619a      	str	r2, [r3, #24]
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	ffff0000 	.word	0xffff0000
 80020e0:	080090b4 	.word	0x080090b4

080020e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80020ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f804 	bl	8002118 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d007      	beq.n	800214e <HAL_PWREx_ConfigSupply+0x1e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d004      	beq.n	800214e <HAL_PWREx_ConfigSupply+0x1e>
 8002144:	f240 113f 	movw	r1, #319	; 0x13f
 8002148:	481a      	ldr	r0, [pc, #104]	; (80021b4 <HAL_PWREx_ConfigSupply+0x84>)
 800214a:	f7fe fdca 	bl	8000ce2 <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800214e:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <HAL_PWREx_ConfigSupply+0x88>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b04      	cmp	r3, #4
 8002158:	d00a      	beq.n	8002170 <HAL_PWREx_ConfigSupply+0x40>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800215a:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <HAL_PWREx_ConfigSupply+0x88>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_PWREx_ConfigSupply+0x3c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e01f      	b.n	80021ac <HAL_PWREx_ConfigSupply+0x7c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	e01d      	b.n	80021ac <HAL_PWREx_ConfigSupply+0x7c>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_PWREx_ConfigSupply+0x88>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f023 0207 	bic.w	r2, r3, #7
 8002178:	490f      	ldr	r1, [pc, #60]	; (80021b8 <HAL_PWREx_ConfigSupply+0x88>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4313      	orrs	r3, r2
 800217e:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002180:	f7ff f93e 	bl	8001400 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002186:	e009      	b.n	800219c <HAL_PWREx_ConfigSupply+0x6c>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002188:	f7ff f93a 	bl	8001400 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002196:	d901      	bls.n	800219c <HAL_PWREx_ConfigSupply+0x6c>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e007      	b.n	80021ac <HAL_PWREx_ConfigSupply+0x7c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_PWREx_ConfigSupply+0x88>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021a8:	d1ee      	bne.n	8002188 <HAL_PWREx_ConfigSupply+0x58>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	080090f0 	.word	0x080090f0
 80021b8:	58024800 	.word	0x58024800

080021bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08c      	sub	sp, #48	; 0x30
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d102      	bne.n	80021d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f000 bd47 	b.w	8002c5e <HAL_RCC_OscConfig+0xaa2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d028      	beq.n	800222a <HAL_RCC_OscConfig+0x6e>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d122      	bne.n	800222a <HAL_RCC_OscConfig+0x6e>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d11c      	bne.n	800222a <HAL_RCC_OscConfig+0x6e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d116      	bne.n	800222a <HAL_RCC_OscConfig+0x6e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d110      	bne.n	800222a <HAL_RCC_OscConfig+0x6e>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10a      	bne.n	800222a <HAL_RCC_OscConfig+0x6e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d104      	bne.n	800222a <HAL_RCC_OscConfig+0x6e>
 8002220:	f240 11a3 	movw	r1, #419	; 0x1a3
 8002224:	489b      	ldr	r0, [pc, #620]	; (8002494 <HAL_RCC_OscConfig+0x2d8>)
 8002226:	f7fe fd5c 	bl	8000ce2 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 809d 	beq.w	8002372 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00e      	beq.n	800225e <HAL_RCC_OscConfig+0xa2>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002248:	d009      	beq.n	800225e <HAL_RCC_OscConfig+0xa2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002252:	d004      	beq.n	800225e <HAL_RCC_OscConfig+0xa2>
 8002254:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8002258:	488e      	ldr	r0, [pc, #568]	; (8002494 <HAL_RCC_OscConfig+0x2d8>)
 800225a:	f7fe fd42 	bl	8000ce2 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225e:	4b8e      	ldr	r3, [pc, #568]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002268:	4b8b      	ldr	r3, [pc, #556]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	2b10      	cmp	r3, #16
 8002272:	d007      	beq.n	8002284 <HAL_RCC_OscConfig+0xc8>
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	2b18      	cmp	r3, #24
 8002278:	d111      	bne.n	800229e <HAL_RCC_OscConfig+0xe2>
 800227a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d10c      	bne.n	800229e <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	4b84      	ldr	r3, [pc, #528]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d06f      	beq.n	8002370 <HAL_RCC_OscConfig+0x1b4>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d16b      	bne.n	8002370 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	f000 bce0 	b.w	8002c5e <HAL_RCC_OscConfig+0xaa2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0xfa>
 80022a8:	4b7b      	ldr	r3, [pc, #492]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a7a      	ldr	r2, [pc, #488]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	e02e      	b.n	8002314 <HAL_RCC_OscConfig+0x158>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x11c>
 80022be:	4b76      	ldr	r3, [pc, #472]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a75      	ldr	r2, [pc, #468]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 80022c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4b73      	ldr	r3, [pc, #460]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a72      	ldr	r2, [pc, #456]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 80022d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e01d      	b.n	8002314 <HAL_RCC_OscConfig+0x158>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x140>
 80022e2:	4b6d      	ldr	r3, [pc, #436]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6c      	ldr	r2, [pc, #432]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b6a      	ldr	r3, [pc, #424]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a69      	ldr	r2, [pc, #420]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0x158>
 80022fc:	4b66      	ldr	r3, [pc, #408]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a65      	ldr	r2, [pc, #404]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 8002302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b63      	ldr	r3, [pc, #396]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a62      	ldr	r2, [pc, #392]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 800230e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d014      	beq.n	8002346 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7ff f870 	bl	8001400 <HAL_GetTick>
 8002320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002322:	e009      	b.n	8002338 <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002324:	f7ff f86c 	bl	8001400 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d902      	bls.n	8002338 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	f000 bc93 	b.w	8002c5e <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002338:	4b57      	ldr	r3, [pc, #348]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ef      	beq.n	8002324 <HAL_RCC_OscConfig+0x168>
 8002344:	e015      	b.n	8002372 <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7ff f85b 	bl	8001400 <HAL_GetTick>
 800234a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800234c:	e009      	b.n	8002362 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800234e:	f7ff f857 	bl	8001400 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b64      	cmp	r3, #100	; 0x64
 800235a:	d902      	bls.n	8002362 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	f000 bc7e 	b.w	8002c5e <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002362:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1ef      	bne.n	800234e <HAL_RCC_OscConfig+0x192>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80d7 	beq.w	800252e <HAL_RCC_OscConfig+0x372>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d018      	beq.n	80023ba <HAL_RCC_OscConfig+0x1fe>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d014      	beq.n	80023ba <HAL_RCC_OscConfig+0x1fe>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d010      	beq.n	80023ba <HAL_RCC_OscConfig+0x1fe>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b09      	cmp	r3, #9
 800239e:	d00c      	beq.n	80023ba <HAL_RCC_OscConfig+0x1fe>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b11      	cmp	r3, #17
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_OscConfig+0x1fe>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2b19      	cmp	r3, #25
 80023ae:	d004      	beq.n	80023ba <HAL_RCC_OscConfig+0x1fe>
 80023b0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80023b4:	4837      	ldr	r0, [pc, #220]	; (8002494 <HAL_RCC_OscConfig+0x2d8>)
 80023b6:	f7fe fc94 	bl	8000ce2 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b7f      	cmp	r3, #127	; 0x7f
 80023c0:	d904      	bls.n	80023cc <HAL_RCC_OscConfig+0x210>
 80023c2:	f240 11dd 	movw	r1, #477	; 0x1dd
 80023c6:	4833      	ldr	r0, [pc, #204]	; (8002494 <HAL_RCC_OscConfig+0x2d8>)
 80023c8:	f7fe fc8b 	bl	8000ce2 <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023cc:	4b32      	ldr	r3, [pc, #200]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023d6:	4b30      	ldr	r3, [pc, #192]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_RCC_OscConfig+0x236>
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	2b18      	cmp	r3, #24
 80023e6:	d13b      	bne.n	8002460 <HAL_RCC_OscConfig+0x2a4>
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d136      	bne.n	8002460 <HAL_RCC_OscConfig+0x2a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023f2:	4b29      	ldr	r3, [pc, #164]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d006      	beq.n	800240c <HAL_RCC_OscConfig+0x250>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <HAL_RCC_OscConfig+0x250>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	f000 bc29 	b.w	8002c5e <HAL_RCC_OscConfig+0xaa2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240c:	f7ff f828 	bl	8001460 <HAL_GetREVID>
 8002410:	4603      	mov	r3, r0
 8002412:	f241 0203 	movw	r2, #4099	; 0x1003
 8002416:	4293      	cmp	r3, r2
 8002418:	d817      	bhi.n	800244a <HAL_RCC_OscConfig+0x28e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b40      	cmp	r3, #64	; 0x40
 8002420:	d108      	bne.n	8002434 <HAL_RCC_OscConfig+0x278>
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800242a:	4a1b      	ldr	r2, [pc, #108]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 800242c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002430:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002432:	e07c      	b.n	800252e <HAL_RCC_OscConfig+0x372>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b18      	ldr	r3, [pc, #96]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	031b      	lsls	r3, r3, #12
 8002442:	4915      	ldr	r1, [pc, #84]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002448:	e071      	b.n	800252e <HAL_RCC_OscConfig+0x372>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	061b      	lsls	r3, r3, #24
 8002458:	490f      	ldr	r1, [pc, #60]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800245e:	e066      	b.n	800252e <HAL_RCC_OscConfig+0x372>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d049      	beq.n	80024fc <HAL_RCC_OscConfig+0x340>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 0219 	bic.w	r2, r3, #25
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4908      	ldr	r1, [pc, #32]	; (8002498 <HAL_RCC_OscConfig+0x2dc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247a:	f7fe ffc1 	bl	8001400 <HAL_GetTick>
 800247e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002480:	e00c      	b.n	800249c <HAL_RCC_OscConfig+0x2e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002482:	f7fe ffbd 	bl	8001400 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d905      	bls.n	800249c <HAL_RCC_OscConfig+0x2e0>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e3e4      	b.n	8002c5e <HAL_RCC_OscConfig+0xaa2>
 8002494:	0800912c 	.word	0x0800912c
 8002498:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800249c:	4ba4      	ldr	r3, [pc, #656]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0ec      	beq.n	8002482 <HAL_RCC_OscConfig+0x2c6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a8:	f7fe ffda 	bl	8001460 <HAL_GetREVID>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d817      	bhi.n	80024e6 <HAL_RCC_OscConfig+0x32a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b40      	cmp	r3, #64	; 0x40
 80024bc:	d108      	bne.n	80024d0 <HAL_RCC_OscConfig+0x314>
 80024be:	4b9c      	ldr	r3, [pc, #624]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024c6:	4a9a      	ldr	r2, [pc, #616]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024cc:	6053      	str	r3, [r2, #4]
 80024ce:	e02e      	b.n	800252e <HAL_RCC_OscConfig+0x372>
 80024d0:	4b97      	ldr	r3, [pc, #604]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	031b      	lsls	r3, r3, #12
 80024de:	4994      	ldr	r1, [pc, #592]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
 80024e4:	e023      	b.n	800252e <HAL_RCC_OscConfig+0x372>
 80024e6:	4b92      	ldr	r3, [pc, #584]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	061b      	lsls	r3, r3, #24
 80024f4:	498e      	ldr	r1, [pc, #568]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
 80024fa:	e018      	b.n	800252e <HAL_RCC_OscConfig+0x372>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024fc:	4b8c      	ldr	r3, [pc, #560]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a8b      	ldr	r2, [pc, #556]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe ff7a 	bl	8001400 <HAL_GetTick>
 800250c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002510:	f7fe ff76 	bl	8001400 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e39d      	b.n	8002c5e <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002522:	4b83      	ldr	r3, [pc, #524]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x354>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80bf 	beq.w	80026ba <HAL_RCC_OscConfig+0x4fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCC_OscConfig+0x39a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2b80      	cmp	r3, #128	; 0x80
 800254a:	d004      	beq.n	8002556 <HAL_RCC_OscConfig+0x39a>
 800254c:	f240 211f 	movw	r1, #543	; 0x21f
 8002550:	4878      	ldr	r0, [pc, #480]	; (8002734 <HAL_RCC_OscConfig+0x578>)
 8002552:	f7fe fbc6 	bl	8000ce2 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	2b3f      	cmp	r3, #63	; 0x3f
 800255c:	d904      	bls.n	8002568 <HAL_RCC_OscConfig+0x3ac>
 800255e:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002562:	4874      	ldr	r0, [pc, #464]	; (8002734 <HAL_RCC_OscConfig+0x578>)
 8002564:	f7fe fbbd 	bl	8000ce2 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002568:	4b71      	ldr	r3, [pc, #452]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002570:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002572:	4b6f      	ldr	r3, [pc, #444]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2b08      	cmp	r3, #8
 800257c:	d007      	beq.n	800258e <HAL_RCC_OscConfig+0x3d2>
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2b18      	cmp	r3, #24
 8002582:	d13a      	bne.n	80025fa <HAL_RCC_OscConfig+0x43e>
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d135      	bne.n	80025fa <HAL_RCC_OscConfig+0x43e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800258e:	4b68      	ldr	r3, [pc, #416]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x3ea>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b80      	cmp	r3, #128	; 0x80
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x3ea>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e35b      	b.n	8002c5e <HAL_RCC_OscConfig+0xaa2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025a6:	f7fe ff5b 	bl	8001460 <HAL_GetREVID>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d817      	bhi.n	80025e4 <HAL_RCC_OscConfig+0x428>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d108      	bne.n	80025ce <HAL_RCC_OscConfig+0x412>
 80025bc:	4b5c      	ldr	r3, [pc, #368]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80025c4:	4a5a      	ldr	r2, [pc, #360]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 80025c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025ca:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025cc:	e075      	b.n	80026ba <HAL_RCC_OscConfig+0x4fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025ce:	4b58      	ldr	r3, [pc, #352]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	069b      	lsls	r3, r3, #26
 80025dc:	4954      	ldr	r1, [pc, #336]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025e2:	e06a      	b.n	80026ba <HAL_RCC_OscConfig+0x4fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025e4:	4b52      	ldr	r3, [pc, #328]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	061b      	lsls	r3, r3, #24
 80025f2:	494f      	ldr	r1, [pc, #316]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025f8:	e05f      	b.n	80026ba <HAL_RCC_OscConfig+0x4fe>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d042      	beq.n	8002688 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002602:	4b4b      	ldr	r3, [pc, #300]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a4a      	ldr	r2, [pc, #296]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 8002608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800260c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7fe fef7 	bl	8001400 <HAL_GetTick>
 8002612:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x46c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002616:	f7fe fef3 	bl	8001400 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e31a      	b.n	8002c5e <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002628:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x45a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002634:	f7fe ff14 	bl	8001460 <HAL_GetREVID>
 8002638:	4603      	mov	r3, r0
 800263a:	f241 0203 	movw	r2, #4099	; 0x1003
 800263e:	4293      	cmp	r3, r2
 8002640:	d817      	bhi.n	8002672 <HAL_RCC_OscConfig+0x4b6>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	2b20      	cmp	r3, #32
 8002648:	d108      	bne.n	800265c <HAL_RCC_OscConfig+0x4a0>
 800264a:	4b39      	ldr	r3, [pc, #228]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002652:	4a37      	ldr	r2, [pc, #220]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 8002654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002658:	6053      	str	r3, [r2, #4]
 800265a:	e02e      	b.n	80026ba <HAL_RCC_OscConfig+0x4fe>
 800265c:	4b34      	ldr	r3, [pc, #208]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	069b      	lsls	r3, r3, #26
 800266a:	4931      	ldr	r1, [pc, #196]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
 8002670:	e023      	b.n	80026ba <HAL_RCC_OscConfig+0x4fe>
 8002672:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	061b      	lsls	r3, r3, #24
 8002680:	492b      	ldr	r1, [pc, #172]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 8002682:	4313      	orrs	r3, r2
 8002684:	60cb      	str	r3, [r1, #12]
 8002686:	e018      	b.n	80026ba <HAL_RCC_OscConfig+0x4fe>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002688:	4b29      	ldr	r3, [pc, #164]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a28      	ldr	r2, [pc, #160]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 800268e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe feb4 	bl	8001400 <HAL_GetTick>
 8002698:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x4f2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800269c:	f7fe feb0 	bl	8001400 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x4f2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e2d7      	b.n	8002c5e <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d047      	beq.n	8002756 <HAL_RCC_OscConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_RCC_OscConfig+0x524>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d004      	beq.n	80026e0 <HAL_RCC_OscConfig+0x524>
 80026d6:	f240 2161 	movw	r1, #609	; 0x261
 80026da:	4816      	ldr	r0, [pc, #88]	; (8002734 <HAL_RCC_OscConfig+0x578>)
 80026dc:	f7fe fb01 	bl	8000ce2 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d019      	beq.n	800271c <HAL_RCC_OscConfig+0x560>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 80026ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ec:	4a10      	ldr	r2, [pc, #64]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f4:	f7fe fe84 	bl	8001400 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fc:	f7fe fe80 	bl	8001400 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e2a7      	b.n	8002c5e <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 8002710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x540>
 800271a:	e01c      	b.n	8002756 <HAL_RCC_OscConfig+0x59a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 800271e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002720:	4a03      	ldr	r2, [pc, #12]	; (8002730 <HAL_RCC_OscConfig+0x574>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7fe fe6a 	bl	8001400 <HAL_GetTick>
 800272c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800272e:	e00c      	b.n	800274a <HAL_RCC_OscConfig+0x58e>
 8002730:	58024400 	.word	0x58024400
 8002734:	0800912c 	.word	0x0800912c
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002738:	f7fe fe62 	bl	8001400 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x58e>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e289      	b.n	8002c5e <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800274a:	4b71      	ldr	r3, [pc, #452]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 800274c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x57c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b00      	cmp	r3, #0
 8002760:	d043      	beq.n	80027ea <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d008      	beq.n	800277c <HAL_RCC_OscConfig+0x5c0>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d004      	beq.n	800277c <HAL_RCC_OscConfig+0x5c0>
 8002772:	f44f 7123 	mov.w	r1, #652	; 0x28c
 8002776:	4867      	ldr	r0, [pc, #412]	; (8002914 <HAL_RCC_OscConfig+0x758>)
 8002778:	f7fe fab3 	bl	8000ce2 <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d019      	beq.n	80027b8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002784:	4b62      	ldr	r3, [pc, #392]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a61      	ldr	r2, [pc, #388]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 800278a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800278e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002790:	f7fe fe36 	bl	8001400 <HAL_GetTick>
 8002794:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x5ee>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002798:	f7fe fe32 	bl	8001400 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e259      	b.n	8002c5e <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027aa:	4b59      	ldr	r3, [pc, #356]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x5dc>
 80027b6:	e018      	b.n	80027ea <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027b8:	4b55      	ldr	r3, [pc, #340]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a54      	ldr	r2, [pc, #336]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 80027be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027c4:	f7fe fe1c 	bl	8001400 <HAL_GetTick>
 80027c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80027cc:	f7fe fe18 	bl	8001400 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e23f      	b.n	8002c5e <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027de:	4b4c      	ldr	r3, [pc, #304]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8098 	beq.w	8002928 <HAL_RCC_OscConfig+0x76c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00c      	beq.n	800281a <HAL_RCC_OscConfig+0x65e>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d008      	beq.n	800281a <HAL_RCC_OscConfig+0x65e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b05      	cmp	r3, #5
 800280e:	d004      	beq.n	800281a <HAL_RCC_OscConfig+0x65e>
 8002810:	f240 21b6 	movw	r1, #694	; 0x2b6
 8002814:	483f      	ldr	r0, [pc, #252]	; (8002914 <HAL_RCC_OscConfig+0x758>)
 8002816:	f7fe fa64 	bl	8000ce2 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800281a:	4b3f      	ldr	r3, [pc, #252]	; (8002918 <HAL_RCC_OscConfig+0x75c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a3e      	ldr	r2, [pc, #248]	; (8002918 <HAL_RCC_OscConfig+0x75c>)
 8002820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002824:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002826:	f7fe fdeb 	bl	8001400 <HAL_GetTick>
 800282a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x684>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800282e:	f7fe fde7 	bl	8001400 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b64      	cmp	r3, #100	; 0x64
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x684>
      {
        return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e20e      	b.n	8002c5e <HAL_RCC_OscConfig+0xaa2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002840:	4b35      	ldr	r3, [pc, #212]	; (8002918 <HAL_RCC_OscConfig+0x75c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x672>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d106      	bne.n	8002862 <HAL_RCC_OscConfig+0x6a6>
 8002854:	4b2e      	ldr	r3, [pc, #184]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	4a2d      	ldr	r2, [pc, #180]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	6713      	str	r3, [r2, #112]	; 0x70
 8002860:	e02d      	b.n	80028be <HAL_RCC_OscConfig+0x702>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x6c8>
 800286a:	4b29      	ldr	r3, [pc, #164]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286e:	4a28      	ldr	r2, [pc, #160]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	6713      	str	r3, [r2, #112]	; 0x70
 8002876:	4b26      	ldr	r3, [pc, #152]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	4a25      	ldr	r2, [pc, #148]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 800287c:	f023 0304 	bic.w	r3, r3, #4
 8002880:	6713      	str	r3, [r2, #112]	; 0x70
 8002882:	e01c      	b.n	80028be <HAL_RCC_OscConfig+0x702>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b05      	cmp	r3, #5
 800288a:	d10c      	bne.n	80028a6 <HAL_RCC_OscConfig+0x6ea>
 800288c:	4b20      	ldr	r3, [pc, #128]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 8002892:	f043 0304 	orr.w	r3, r3, #4
 8002896:	6713      	str	r3, [r2, #112]	; 0x70
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70
 80028a4:	e00b      	b.n	80028be <HAL_RCC_OscConfig+0x702>
 80028a6:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	4a19      	ldr	r2, [pc, #100]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	6713      	str	r3, [r2, #112]	; 0x70
 80028b2:	4b17      	ldr	r3, [pc, #92]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b6:	4a16      	ldr	r2, [pc, #88]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 80028b8:	f023 0304 	bic.w	r3, r3, #4
 80028bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d015      	beq.n	80028f2 <HAL_RCC_OscConfig+0x736>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c6:	f7fe fd9b 	bl	8001400 <HAL_GetTick>
 80028ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_OscConfig+0x728>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ce:	f7fe fd97 	bl	8001400 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028dc:	4293      	cmp	r3, r2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e1bc      	b.n	8002c5e <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <HAL_RCC_OscConfig+0x754>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0ee      	beq.n	80028ce <HAL_RCC_OscConfig+0x712>
 80028f0:	e01a      	b.n	8002928 <HAL_RCC_OscConfig+0x76c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f2:	f7fe fd85 	bl	8001400 <HAL_GetTick>
 80028f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028f8:	e010      	b.n	800291c <HAL_RCC_OscConfig+0x760>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fa:	f7fe fd81 	bl	8001400 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	f241 3288 	movw	r2, #5000	; 0x1388
 8002908:	4293      	cmp	r3, r2
 800290a:	d907      	bls.n	800291c <HAL_RCC_OscConfig+0x760>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e1a6      	b.n	8002c5e <HAL_RCC_OscConfig+0xaa2>
 8002910:	58024400 	.word	0x58024400
 8002914:	0800912c 	.word	0x0800912c
 8002918:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800291c:	4b9f      	ldr	r3, [pc, #636]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e8      	bne.n	80028fa <HAL_RCC_OscConfig+0x73e>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00c      	beq.n	800294a <HAL_RCC_OscConfig+0x78e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	2b01      	cmp	r3, #1
 8002936:	d008      	beq.n	800294a <HAL_RCC_OscConfig+0x78e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	2b02      	cmp	r3, #2
 800293e:	d004      	beq.n	800294a <HAL_RCC_OscConfig+0x78e>
 8002940:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 8002944:	4896      	ldr	r0, [pc, #600]	; (8002ba0 <HAL_RCC_OscConfig+0x9e4>)
 8002946:	f7fe f9cc 	bl	8000ce2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8184 	beq.w	8002c5c <HAL_RCC_OscConfig+0xaa0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002954:	4b91      	ldr	r3, [pc, #580]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800295c:	2b18      	cmp	r3, #24
 800295e:	f000 813f 	beq.w	8002be0 <HAL_RCC_OscConfig+0xa24>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2b02      	cmp	r3, #2
 8002968:	f040 8120 	bne.w	8002bac <HAL_RCC_OscConfig+0x9f0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	2b01      	cmp	r3, #1
 8002972:	d010      	beq.n	8002996 <HAL_RCC_OscConfig+0x7da>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00c      	beq.n	8002996 <HAL_RCC_OscConfig+0x7da>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	2b03      	cmp	r3, #3
 8002982:	d008      	beq.n	8002996 <HAL_RCC_OscConfig+0x7da>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	2b02      	cmp	r3, #2
 800298a:	d004      	beq.n	8002996 <HAL_RCC_OscConfig+0x7da>
 800298c:	f240 21f1 	movw	r1, #753	; 0x2f1
 8002990:	4883      	ldr	r0, [pc, #524]	; (8002ba0 <HAL_RCC_OscConfig+0x9e4>)
 8002992:	f7fe f9a6 	bl	8000ce2 <assert_failed>
        assert_param(IS_RCC_PLLRGE_VALUE(RCC_OscInitStruct->PLL.PLLRGE));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d010      	beq.n	80029c0 <HAL_RCC_OscConfig+0x804>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d00c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x804>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d008      	beq.n	80029c0 <HAL_RCC_OscConfig+0x804>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d004      	beq.n	80029c0 <HAL_RCC_OscConfig+0x804>
 80029b6:	f240 21f2 	movw	r1, #754	; 0x2f2
 80029ba:	4879      	ldr	r0, [pc, #484]	; (8002ba0 <HAL_RCC_OscConfig+0x9e4>)
 80029bc:	f7fe f991 	bl	8000ce2 <assert_failed>
        assert_param(IS_RCC_PLLVCO_VALUE(RCC_OscInitStruct->PLL.PLLVCOSEL));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_RCC_OscConfig+0x81e>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d004      	beq.n	80029da <HAL_RCC_OscConfig+0x81e>
 80029d0:	f240 21f3 	movw	r1, #755	; 0x2f3
 80029d4:	4872      	ldr	r0, [pc, #456]	; (8002ba0 <HAL_RCC_OscConfig+0x9e4>)
 80029d6:	f7fe f984 	bl	8000ce2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_RCC_OscConfig+0x82e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	2b3f      	cmp	r3, #63	; 0x3f
 80029e8:	d904      	bls.n	80029f4 <HAL_RCC_OscConfig+0x838>
 80029ea:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 80029ee:	486c      	ldr	r0, [pc, #432]	; (8002ba0 <HAL_RCC_OscConfig+0x9e4>)
 80029f0:	f7fe f977 	bl	8000ce2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d904      	bls.n	8002a06 <HAL_RCC_OscConfig+0x84a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a04:	d904      	bls.n	8002a10 <HAL_RCC_OscConfig+0x854>
 8002a06:	f240 21f5 	movw	r1, #757	; 0x2f5
 8002a0a:	4865      	ldr	r0, [pc, #404]	; (8002ba0 <HAL_RCC_OscConfig+0x9e4>)
 8002a0c:	f7fe f969 	bl	8000ce2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_RCC_OscConfig+0x864>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1c:	2b80      	cmp	r3, #128	; 0x80
 8002a1e:	d904      	bls.n	8002a2a <HAL_RCC_OscConfig+0x86e>
 8002a20:	f240 21f6 	movw	r1, #758	; 0x2f6
 8002a24:	485e      	ldr	r0, [pc, #376]	; (8002ba0 <HAL_RCC_OscConfig+0x9e4>)
 8002a26:	f7fe f95c 	bl	8000ce2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_RCC_OscConfig+0x87e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a36:	2b80      	cmp	r3, #128	; 0x80
 8002a38:	d904      	bls.n	8002a44 <HAL_RCC_OscConfig+0x888>
 8002a3a:	f240 21f7 	movw	r1, #759	; 0x2f7
 8002a3e:	4858      	ldr	r0, [pc, #352]	; (8002ba0 <HAL_RCC_OscConfig+0x9e4>)
 8002a40:	f7fe f94f 	bl	8000ce2 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_RCC_OscConfig+0x898>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a50:	2b80      	cmp	r3, #128	; 0x80
 8002a52:	d904      	bls.n	8002a5e <HAL_RCC_OscConfig+0x8a2>
 8002a54:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 8002a58:	4851      	ldr	r0, [pc, #324]	; (8002ba0 <HAL_RCC_OscConfig+0x9e4>)
 8002a5a:	f7fe f942 	bl	8000ce2 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a66:	d304      	bcc.n	8002a72 <HAL_RCC_OscConfig+0x8b6>
 8002a68:	f240 21f9 	movw	r1, #761	; 0x2f9
 8002a6c:	484c      	ldr	r0, [pc, #304]	; (8002ba0 <HAL_RCC_OscConfig+0x9e4>)
 8002a6e:	f7fe f938 	bl	8000ce2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a72:	4b4a      	ldr	r3, [pc, #296]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a49      	ldr	r2, [pc, #292]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002a78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fcbf 	bl	8001400 <HAL_GetTick>
 8002a82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x8dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a86:	f7fe fcbb 	bl	8001400 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x8dc>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e0e2      	b.n	8002c5e <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a98:	4b40      	ldr	r3, [pc, #256]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCC_OscConfig+0x8ca>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa4:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aa8:	4b3e      	ldr	r3, [pc, #248]	; (8002ba4 <HAL_RCC_OscConfig+0x9e8>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	4938      	ldr	r1, [pc, #224]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	628b      	str	r3, [r1, #40]	; 0x28
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002acc:	3b01      	subs	r3, #1
 8002ace:	025b      	lsls	r3, r3, #9
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	041b      	lsls	r3, r3, #16
 8002adc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	061b      	lsls	r3, r3, #24
 8002aea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002aee:	492b      	ldr	r1, [pc, #172]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002af4:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	4a28      	ldr	r2, [pc, #160]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b00:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b04:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <HAL_RCC_OscConfig+0x9ec>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b0c:	00d2      	lsls	r2, r2, #3
 8002b0e:	4923      	ldr	r1, [pc, #140]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b14:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	f023 020c 	bic.w	r2, r3, #12
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	491e      	ldr	r1, [pc, #120]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b26:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	f023 0202 	bic.w	r2, r3, #2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	491a      	ldr	r1, [pc, #104]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b38:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	4a17      	ldr	r2, [pc, #92]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b44:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	4a11      	ldr	r2, [pc, #68]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	4a0e      	ldr	r2, [pc, #56]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe fc44 	bl	8001400 <HAL_GetTick>
 8002b78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe fc40 	bl	8001400 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e067      	b.n	8002c5e <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b8e:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_RCC_OscConfig+0x9e0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x9c0>
 8002b9a:	e05f      	b.n	8002c5c <HAL_RCC_OscConfig+0xaa0>
 8002b9c:	58024400 	.word	0x58024400
 8002ba0:	0800912c 	.word	0x0800912c
 8002ba4:	fffffc0c 	.word	0xfffffc0c
 8002ba8:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bac:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <HAL_RCC_OscConfig+0xaac>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a2d      	ldr	r2, [pc, #180]	; (8002c68 <HAL_RCC_OscConfig+0xaac>)
 8002bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fc22 	bl	8001400 <HAL_GetTick>
 8002bbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xa16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe fc1e 	bl	8001400 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xa16>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e045      	b.n	8002c5e <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bd2:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <HAL_RCC_OscConfig+0xaac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xa04>
 8002bde:	e03d      	b.n	8002c5c <HAL_RCC_OscConfig+0xaa0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002be0:	4b21      	ldr	r3, [pc, #132]	; (8002c68 <HAL_RCC_OscConfig+0xaac>)
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002be6:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <HAL_RCC_OscConfig+0xaac>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d031      	beq.n	8002c58 <HAL_RCC_OscConfig+0xa9c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f003 0203 	and.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d12a      	bne.n	8002c58 <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d122      	bne.n	8002c58 <HAL_RCC_OscConfig+0xa9c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d11a      	bne.n	8002c58 <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	0a5b      	lsrs	r3, r3, #9
 8002c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d111      	bne.n	8002c58 <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	0c1b      	lsrs	r3, r3, #16
 8002c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d108      	bne.n	8002c58 <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	0e1b      	lsrs	r3, r3, #24
 8002c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c52:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_OscConfig+0xaa0>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0xaa2>
      }
    }
  }
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3730      	adds	r7, #48	; 0x30
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	58024400 	.word	0x58024400

08002c6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e354      	b.n	800332a <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x24>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b3f      	cmp	r3, #63	; 0x3f
 8002c8e:	d904      	bls.n	8002c9a <HAL_RCC_ClockConfig+0x2e>
 8002c90:	f240 3186 	movw	r1, #902	; 0x386
 8002c94:	4827      	ldr	r0, [pc, #156]	; (8002d34 <HAL_RCC_ClockConfig+0xc8>)
 8002c96:	f7fe f824 	bl	8000ce2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d031      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x98>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d02e      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x98>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d02b      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x98>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d028      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x98>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d025      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x98>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	d022      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x98>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b06      	cmp	r3, #6
 8002cc2:	d01f      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x98>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b07      	cmp	r3, #7
 8002cc8:	d01c      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x98>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d019      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x98>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b09      	cmp	r3, #9
 8002cd4:	d016      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x98>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b0a      	cmp	r3, #10
 8002cda:	d013      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x98>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b0b      	cmp	r3, #11
 8002ce0:	d010      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x98>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	d00d      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x98>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b0d      	cmp	r3, #13
 8002cec:	d00a      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x98>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b0e      	cmp	r3, #14
 8002cf2:	d007      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x98>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b0f      	cmp	r3, #15
 8002cf8:	d004      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x98>
 8002cfa:	f240 3187 	movw	r1, #903	; 0x387
 8002cfe:	480d      	ldr	r0, [pc, #52]	; (8002d34 <HAL_RCC_ClockConfig+0xc8>)
 8002d00:	f7fd ffef 	bl	8000ce2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <HAL_RCC_ClockConfig+0xcc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d914      	bls.n	8002d3c <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0xcc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 020f 	bic.w	r2, r3, #15
 8002d1a:	4907      	ldr	r1, [pc, #28]	; (8002d38 <HAL_RCC_ClockConfig+0xcc>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCC_ClockConfig+0xcc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e2fa      	b.n	800332a <HAL_RCC_ClockConfig+0x6be>
 8002d34:	0800912c 	.word	0x0800912c
 8002d38:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d029      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	4b9a      	ldr	r3, [pc, #616]	; (8002fb8 <HAL_RCC_ClockConfig+0x34c>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d921      	bls.n	8002d9c <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d014      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x11e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b40      	cmp	r3, #64	; 0x40
 8002d66:	d010      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x11e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b50      	cmp	r3, #80	; 0x50
 8002d6e:	d00c      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x11e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	2b60      	cmp	r3, #96	; 0x60
 8002d76:	d008      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x11e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b70      	cmp	r3, #112	; 0x70
 8002d7e:	d004      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x11e>
 8002d80:	f240 31a3 	movw	r1, #931	; 0x3a3
 8002d84:	488d      	ldr	r0, [pc, #564]	; (8002fbc <HAL_RCC_ClockConfig+0x350>)
 8002d86:	f7fd ffac 	bl	8000ce2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d8a:	4b8b      	ldr	r3, [pc, #556]	; (8002fb8 <HAL_RCC_ClockConfig+0x34c>)
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	4988      	ldr	r1, [pc, #544]	; (8002fb8 <HAL_RCC_ClockConfig+0x34c>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d029      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	4b82      	ldr	r3, [pc, #520]	; (8002fb8 <HAL_RCC_ClockConfig+0x34c>)
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d921      	bls.n	8002dfc <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d014      	beq.n	8002dea <HAL_RCC_ClockConfig+0x17e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	2b40      	cmp	r3, #64	; 0x40
 8002dc6:	d010      	beq.n	8002dea <HAL_RCC_ClockConfig+0x17e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	2b50      	cmp	r3, #80	; 0x50
 8002dce:	d00c      	beq.n	8002dea <HAL_RCC_ClockConfig+0x17e>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	2b60      	cmp	r3, #96	; 0x60
 8002dd6:	d008      	beq.n	8002dea <HAL_RCC_ClockConfig+0x17e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	2b70      	cmp	r3, #112	; 0x70
 8002dde:	d004      	beq.n	8002dea <HAL_RCC_ClockConfig+0x17e>
 8002de0:	f240 31b5 	movw	r1, #949	; 0x3b5
 8002de4:	4875      	ldr	r0, [pc, #468]	; (8002fbc <HAL_RCC_ClockConfig+0x350>)
 8002de6:	f7fd ff7c 	bl	8000ce2 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dea:	4b73      	ldr	r3, [pc, #460]	; (8002fb8 <HAL_RCC_ClockConfig+0x34c>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	4970      	ldr	r1, [pc, #448]	; (8002fb8 <HAL_RCC_ClockConfig+0x34c>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d02d      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	4b6a      	ldr	r3, [pc, #424]	; (8002fb8 <HAL_RCC_ClockConfig+0x34c>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d925      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d018      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x1e6>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e28:	d013      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x1e6>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002e32:	d00e      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x1e6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x1e6>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e46:	d004      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x1e6>
 8002e48:	f240 31c6 	movw	r1, #966	; 0x3c6
 8002e4c:	485b      	ldr	r0, [pc, #364]	; (8002fbc <HAL_RCC_ClockConfig+0x350>)
 8002e4e:	f7fd ff48 	bl	8000ce2 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e52:	4b59      	ldr	r3, [pc, #356]	; (8002fb8 <HAL_RCC_ClockConfig+0x34c>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	4956      	ldr	r1, [pc, #344]	; (8002fb8 <HAL_RCC_ClockConfig+0x34c>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d029      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69da      	ldr	r2, [r3, #28]
 8002e74:	4b50      	ldr	r3, [pc, #320]	; (8002fb8 <HAL_RCC_ClockConfig+0x34c>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d921      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d014      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x246>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d010      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x246>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	2b50      	cmp	r3, #80	; 0x50
 8002e96:	d00c      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x246>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	2b60      	cmp	r3, #96	; 0x60
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x246>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	2b70      	cmp	r3, #112	; 0x70
 8002ea6:	d004      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x246>
 8002ea8:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 8002eac:	4843      	ldr	r0, [pc, #268]	; (8002fbc <HAL_RCC_ClockConfig+0x350>)
 8002eae:	f7fd ff18 	bl	8000ce2 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002eb2:	4b41      	ldr	r3, [pc, #260]	; (8002fb8 <HAL_RCC_ClockConfig+0x34c>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	493e      	ldr	r1, [pc, #248]	; (8002fb8 <HAL_RCC_ClockConfig+0x34c>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d039      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x2d8>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <HAL_RCC_ClockConfig+0x34c>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d931      	bls.n	8002f44 <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d024      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x2c6>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d020      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x2c6>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b09      	cmp	r3, #9
 8002ef6:	d01c      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x2c6>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b0a      	cmp	r3, #10
 8002efe:	d018      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x2c6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b0b      	cmp	r3, #11
 8002f06:	d014      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x2c6>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b0c      	cmp	r3, #12
 8002f0e:	d010      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x2c6>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b0d      	cmp	r3, #13
 8002f16:	d00c      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x2c6>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b0e      	cmp	r3, #14
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x2c6>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b0f      	cmp	r3, #15
 8002f26:	d004      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x2c6>
 8002f28:	f240 31eb 	movw	r1, #1003	; 0x3eb
 8002f2c:	4823      	ldr	r0, [pc, #140]	; (8002fbc <HAL_RCC_ClockConfig+0x350>)
 8002f2e:	f7fd fed8 	bl	8000ce2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f32:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <HAL_RCC_ClockConfig+0x34c>)
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f023 020f 	bic.w	r2, r3, #15
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	491e      	ldr	r1, [pc, #120]	; (8002fb8 <HAL_RCC_ClockConfig+0x34c>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80a2 	beq.w	8003096 <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d032      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x354>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f62:	d02d      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x354>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8002f6c:	d028      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x354>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002f76:	d023      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x354>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8002f80:	d01e      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x354>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f8a:	d019      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x354>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8002f94:	d014      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x354>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8002f9e:	d00f      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x354>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x354>
 8002faa:	f240 31fb 	movw	r1, #1019	; 0x3fb
 8002fae:	4803      	ldr	r0, [pc, #12]	; (8002fbc <HAL_RCC_ClockConfig+0x350>)
 8002fb0:	f7fd fe97 	bl	8000ce2 <assert_failed>
 8002fb4:	e004      	b.n	8002fc0 <HAL_RCC_ClockConfig+0x354>
 8002fb6:	bf00      	nop
 8002fb8:	58024400 	.word	0x58024400
 8002fbc:	0800912c 	.word	0x0800912c
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d010      	beq.n	8002fea <HAL_RCC_ClockConfig+0x37e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00c      	beq.n	8002fea <HAL_RCC_ClockConfig+0x37e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d008      	beq.n	8002fea <HAL_RCC_ClockConfig+0x37e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d004      	beq.n	8002fea <HAL_RCC_ClockConfig+0x37e>
 8002fe0:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8002fe4:	4858      	ldr	r0, [pc, #352]	; (8003148 <HAL_RCC_ClockConfig+0x4dc>)
 8002fe6:	f7fd fe7c 	bl	8000ce2 <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fea:	4b58      	ldr	r3, [pc, #352]	; (800314c <HAL_RCC_ClockConfig+0x4e0>)
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	4955      	ldr	r1, [pc, #340]	; (800314c <HAL_RCC_ClockConfig+0x4e0>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d107      	bne.n	8003014 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003004:	4b51      	ldr	r3, [pc, #324]	; (800314c <HAL_RCC_ClockConfig+0x4e0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d121      	bne.n	8003054 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e18a      	b.n	800332a <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d107      	bne.n	800302c <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800301c:	4b4b      	ldr	r3, [pc, #300]	; (800314c <HAL_RCC_ClockConfig+0x4e0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d115      	bne.n	8003054 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e17e      	b.n	800332a <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d107      	bne.n	8003044 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003034:	4b45      	ldr	r3, [pc, #276]	; (800314c <HAL_RCC_ClockConfig+0x4e0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e172      	b.n	800332a <HAL_RCC_ClockConfig+0x6be>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003044:	4b41      	ldr	r3, [pc, #260]	; (800314c <HAL_RCC_ClockConfig+0x4e0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e16a      	b.n	800332a <HAL_RCC_ClockConfig+0x6be>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003054:	4b3d      	ldr	r3, [pc, #244]	; (800314c <HAL_RCC_ClockConfig+0x4e0>)
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f023 0207 	bic.w	r2, r3, #7
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	493a      	ldr	r1, [pc, #232]	; (800314c <HAL_RCC_ClockConfig+0x4e0>)
 8003062:	4313      	orrs	r3, r2
 8003064:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003066:	f7fe f9cb 	bl	8001400 <HAL_GetTick>
 800306a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306c:	e00a      	b.n	8003084 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306e:	f7fe f9c7 	bl	8001400 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f241 3288 	movw	r2, #5000	; 0x1388
 800307c:	4293      	cmp	r3, r2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e152      	b.n	800332a <HAL_RCC_ClockConfig+0x6be>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003084:	4b31      	ldr	r3, [pc, #196]	; (800314c <HAL_RCC_ClockConfig+0x4e0>)
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	429a      	cmp	r2, r3
 8003094:	d1eb      	bne.n	800306e <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d039      	beq.n	8003116 <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	4b29      	ldr	r3, [pc, #164]	; (800314c <HAL_RCC_ClockConfig+0x4e0>)
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d231      	bcs.n	8003116 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d024      	beq.n	8003104 <HAL_RCC_ClockConfig+0x498>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d020      	beq.n	8003104 <HAL_RCC_ClockConfig+0x498>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	2b09      	cmp	r3, #9
 80030c8:	d01c      	beq.n	8003104 <HAL_RCC_ClockConfig+0x498>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b0a      	cmp	r3, #10
 80030d0:	d018      	beq.n	8003104 <HAL_RCC_ClockConfig+0x498>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b0b      	cmp	r3, #11
 80030d8:	d014      	beq.n	8003104 <HAL_RCC_ClockConfig+0x498>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2b0c      	cmp	r3, #12
 80030e0:	d010      	beq.n	8003104 <HAL_RCC_ClockConfig+0x498>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b0d      	cmp	r3, #13
 80030e8:	d00c      	beq.n	8003104 <HAL_RCC_ClockConfig+0x498>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b0e      	cmp	r3, #14
 80030f0:	d008      	beq.n	8003104 <HAL_RCC_ClockConfig+0x498>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b0f      	cmp	r3, #15
 80030f8:	d004      	beq.n	8003104 <HAL_RCC_ClockConfig+0x498>
 80030fa:	f240 413d 	movw	r1, #1085	; 0x43d
 80030fe:	4812      	ldr	r0, [pc, #72]	; (8003148 <HAL_RCC_ClockConfig+0x4dc>)
 8003100:	f7fd fdef 	bl	8000ce2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_RCC_ClockConfig+0x4e0>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f023 020f 	bic.w	r2, r3, #15
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	490e      	ldr	r1, [pc, #56]	; (800314c <HAL_RCC_ClockConfig+0x4e0>)
 8003112:	4313      	orrs	r3, r2
 8003114:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <HAL_RCC_ClockConfig+0x4e4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d217      	bcs.n	8003154 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <HAL_RCC_ClockConfig+0x4e4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f023 020f 	bic.w	r2, r3, #15
 800312c:	4908      	ldr	r1, [pc, #32]	; (8003150 <HAL_RCC_ClockConfig+0x4e4>)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	4313      	orrs	r3, r2
 8003132:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_RCC_ClockConfig+0x4e4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d008      	beq.n	8003154 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e0f1      	b.n	800332a <HAL_RCC_ClockConfig+0x6be>
 8003146:	bf00      	nop
 8003148:	0800912c 	.word	0x0800912c
 800314c:	58024400 	.word	0x58024400
 8003150:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d029      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x548>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	4b73      	ldr	r3, [pc, #460]	; (8003334 <HAL_RCC_ClockConfig+0x6c8>)
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800316c:	429a      	cmp	r2, r3
 800316e:	d221      	bcs.n	80031b4 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d014      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x536>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b40      	cmp	r3, #64	; 0x40
 800317e:	d010      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x536>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b50      	cmp	r3, #80	; 0x50
 8003186:	d00c      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x536>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b60      	cmp	r3, #96	; 0x60
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x536>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	2b70      	cmp	r3, #112	; 0x70
 8003196:	d004      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x536>
 8003198:	f240 415e 	movw	r1, #1118	; 0x45e
 800319c:	4866      	ldr	r0, [pc, #408]	; (8003338 <HAL_RCC_ClockConfig+0x6cc>)
 800319e:	f7fd fda0 	bl	8000ce2 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031a2:	4b64      	ldr	r3, [pc, #400]	; (8003334 <HAL_RCC_ClockConfig+0x6c8>)
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	4961      	ldr	r1, [pc, #388]	; (8003334 <HAL_RCC_ClockConfig+0x6c8>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d029      	beq.n	8003214 <HAL_RCC_ClockConfig+0x5a8>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	4b5b      	ldr	r3, [pc, #364]	; (8003334 <HAL_RCC_ClockConfig+0x6c8>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d221      	bcs.n	8003214 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d014      	beq.n	8003202 <HAL_RCC_ClockConfig+0x596>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d010      	beq.n	8003202 <HAL_RCC_ClockConfig+0x596>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	2b50      	cmp	r3, #80	; 0x50
 80031e6:	d00c      	beq.n	8003202 <HAL_RCC_ClockConfig+0x596>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	2b60      	cmp	r3, #96	; 0x60
 80031ee:	d008      	beq.n	8003202 <HAL_RCC_ClockConfig+0x596>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	2b70      	cmp	r3, #112	; 0x70
 80031f6:	d004      	beq.n	8003202 <HAL_RCC_ClockConfig+0x596>
 80031f8:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80031fc:	484e      	ldr	r0, [pc, #312]	; (8003338 <HAL_RCC_ClockConfig+0x6cc>)
 80031fe:	f7fd fd70 	bl	8000ce2 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003202:	4b4c      	ldr	r3, [pc, #304]	; (8003334 <HAL_RCC_ClockConfig+0x6c8>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	4949      	ldr	r1, [pc, #292]	; (8003334 <HAL_RCC_ClockConfig+0x6c8>)
 8003210:	4313      	orrs	r3, r2
 8003212:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b00      	cmp	r3, #0
 800321e:	d02d      	beq.n	800327c <HAL_RCC_ClockConfig+0x610>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699a      	ldr	r2, [r3, #24]
 8003224:	4b43      	ldr	r3, [pc, #268]	; (8003334 <HAL_RCC_ClockConfig+0x6c8>)
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800322c:	429a      	cmp	r2, r3
 800322e:	d225      	bcs.n	800327c <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d018      	beq.n	800326a <HAL_RCC_ClockConfig+0x5fe>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003240:	d013      	beq.n	800326a <HAL_RCC_ClockConfig+0x5fe>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800324a:	d00e      	beq.n	800326a <HAL_RCC_ClockConfig+0x5fe>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003254:	d009      	beq.n	800326a <HAL_RCC_ClockConfig+0x5fe>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800325e:	d004      	beq.n	800326a <HAL_RCC_ClockConfig+0x5fe>
 8003260:	f240 4182 	movw	r1, #1154	; 0x482
 8003264:	4834      	ldr	r0, [pc, #208]	; (8003338 <HAL_RCC_ClockConfig+0x6cc>)
 8003266:	f7fd fd3c 	bl	8000ce2 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800326a:	4b32      	ldr	r3, [pc, #200]	; (8003334 <HAL_RCC_ClockConfig+0x6c8>)
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	492f      	ldr	r1, [pc, #188]	; (8003334 <HAL_RCC_ClockConfig+0x6c8>)
 8003278:	4313      	orrs	r3, r2
 800327a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d029      	beq.n	80032dc <HAL_RCC_ClockConfig+0x670>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69da      	ldr	r2, [r3, #28]
 800328c:	4b29      	ldr	r3, [pc, #164]	; (8003334 <HAL_RCC_ClockConfig+0x6c8>)
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003294:	429a      	cmp	r2, r3
 8003296:	d221      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d014      	beq.n	80032ca <HAL_RCC_ClockConfig+0x65e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d010      	beq.n	80032ca <HAL_RCC_ClockConfig+0x65e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	2b50      	cmp	r3, #80	; 0x50
 80032ae:	d00c      	beq.n	80032ca <HAL_RCC_ClockConfig+0x65e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	2b60      	cmp	r3, #96	; 0x60
 80032b6:	d008      	beq.n	80032ca <HAL_RCC_ClockConfig+0x65e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	2b70      	cmp	r3, #112	; 0x70
 80032be:	d004      	beq.n	80032ca <HAL_RCC_ClockConfig+0x65e>
 80032c0:	f240 4194 	movw	r1, #1172	; 0x494
 80032c4:	481c      	ldr	r0, [pc, #112]	; (8003338 <HAL_RCC_ClockConfig+0x6cc>)
 80032c6:	f7fd fd0c 	bl	8000ce2 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032ca:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <HAL_RCC_ClockConfig+0x6c8>)
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	4917      	ldr	r1, [pc, #92]	; (8003334 <HAL_RCC_ClockConfig+0x6c8>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032dc:	f000 f836 	bl	800334c <HAL_RCC_GetSysClockFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b14      	ldr	r3, [pc, #80]	; (8003334 <HAL_RCC_ClockConfig+0x6c8>)
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	4913      	ldr	r1, [pc, #76]	; (800333c <HAL_RCC_ClockConfig+0x6d0>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
 80032f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <HAL_RCC_ClockConfig+0x6c8>)
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	4a0e      	ldr	r2, [pc, #56]	; (800333c <HAL_RCC_ClockConfig+0x6d0>)
 8003304:	5cd3      	ldrb	r3, [r2, r3]
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
 8003310:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <HAL_RCC_ClockConfig+0x6d4>)
 8003312:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003314:	4a0b      	ldr	r2, [pc, #44]	; (8003344 <HAL_RCC_ClockConfig+0x6d8>)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800331a:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_ClockConfig+0x6dc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe f824 	bl	800136c <HAL_InitTick>
 8003324:	4603      	mov	r3, r0
 8003326:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003328:	7bfb      	ldrb	r3, [r7, #15]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	58024400 	.word	0x58024400
 8003338:	0800912c 	.word	0x0800912c
 800333c:	08009250 	.word	0x08009250
 8003340:	20000004 	.word	0x20000004
 8003344:	20000000 	.word	0x20000000
 8003348:	20000008 	.word	0x20000008

0800334c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003352:	4bb3      	ldr	r3, [pc, #716]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800335a:	2b18      	cmp	r3, #24
 800335c:	f200 8155 	bhi.w	800360a <HAL_RCC_GetSysClockFreq+0x2be>
 8003360:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003366:	bf00      	nop
 8003368:	080033cd 	.word	0x080033cd
 800336c:	0800360b 	.word	0x0800360b
 8003370:	0800360b 	.word	0x0800360b
 8003374:	0800360b 	.word	0x0800360b
 8003378:	0800360b 	.word	0x0800360b
 800337c:	0800360b 	.word	0x0800360b
 8003380:	0800360b 	.word	0x0800360b
 8003384:	0800360b 	.word	0x0800360b
 8003388:	080033f3 	.word	0x080033f3
 800338c:	0800360b 	.word	0x0800360b
 8003390:	0800360b 	.word	0x0800360b
 8003394:	0800360b 	.word	0x0800360b
 8003398:	0800360b 	.word	0x0800360b
 800339c:	0800360b 	.word	0x0800360b
 80033a0:	0800360b 	.word	0x0800360b
 80033a4:	0800360b 	.word	0x0800360b
 80033a8:	080033f9 	.word	0x080033f9
 80033ac:	0800360b 	.word	0x0800360b
 80033b0:	0800360b 	.word	0x0800360b
 80033b4:	0800360b 	.word	0x0800360b
 80033b8:	0800360b 	.word	0x0800360b
 80033bc:	0800360b 	.word	0x0800360b
 80033c0:	0800360b 	.word	0x0800360b
 80033c4:	0800360b 	.word	0x0800360b
 80033c8:	080033ff 	.word	0x080033ff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033cc:	4b94      	ldr	r3, [pc, #592]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d009      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033d8:	4b91      	ldr	r3, [pc, #580]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	08db      	lsrs	r3, r3, #3
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	4a90      	ldr	r2, [pc, #576]	; (8003624 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
 80033e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80033ea:	e111      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033ec:	4b8d      	ldr	r3, [pc, #564]	; (8003624 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033ee:	61bb      	str	r3, [r7, #24]
    break;
 80033f0:	e10e      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80033f2:	4b8d      	ldr	r3, [pc, #564]	; (8003628 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033f4:	61bb      	str	r3, [r7, #24]
    break;
 80033f6:	e10b      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80033f8:	4b8c      	ldr	r3, [pc, #560]	; (800362c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033fa:	61bb      	str	r3, [r7, #24]
    break;
 80033fc:	e108      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033fe:	4b88      	ldr	r3, [pc, #544]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003408:	4b85      	ldr	r3, [pc, #532]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003412:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003414:	4b82      	ldr	r3, [pc, #520]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800341e:	4b80      	ldr	r3, [pc, #512]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003422:	08db      	lsrs	r3, r3, #3
 8003424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003436:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80e1 	beq.w	8003604 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b02      	cmp	r3, #2
 8003446:	f000 8083 	beq.w	8003550 <HAL_RCC_GetSysClockFreq+0x204>
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b02      	cmp	r3, #2
 800344e:	f200 80a1 	bhi.w	8003594 <HAL_RCC_GetSysClockFreq+0x248>
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x114>
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d056      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x1c0>
 800345e:	e099      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003460:	4b6f      	ldr	r3, [pc, #444]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b00      	cmp	r3, #0
 800346a:	d02d      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800346c:	4b6c      	ldr	r3, [pc, #432]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	08db      	lsrs	r3, r3, #3
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	4a6b      	ldr	r2, [pc, #428]	; (8003624 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
 800347c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003496:	4b62      	ldr	r3, [pc, #392]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349e:	ee07 3a90 	vmov	s15, r3
 80034a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80034c6:	e087      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003634 <HAL_RCC_GetSysClockFreq+0x2e8>
 80034d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034da:	4b51      	ldr	r3, [pc, #324]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800350a:	e065      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003516:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003638 <HAL_RCC_GetSysClockFreq+0x2ec>
 800351a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800351e:	4b40      	ldr	r3, [pc, #256]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003532:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800353a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800353e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800354e:	e043      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800363c <HAL_RCC_GetSysClockFreq+0x2f0>
 800355e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003562:	4b2f      	ldr	r3, [pc, #188]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003572:	ed97 6a02 	vldr	s12, [r7, #8]
 8003576:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2e4>
 800357a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800357e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800358a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003592:	e021      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003638 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035d6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80035d8:	4b11      	ldr	r3, [pc, #68]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035e2:	3301      	adds	r3, #1
 80035e4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	ee07 3a90 	vmov	s15, r3
 80035ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80035f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035fc:	ee17 3a90 	vmov	r3, s15
 8003600:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003602:	e005      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	61bb      	str	r3, [r7, #24]
    break;
 8003608:	e002      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800360a:	4b07      	ldr	r3, [pc, #28]	; (8003628 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800360c:	61bb      	str	r3, [r7, #24]
    break;
 800360e:	bf00      	nop
  }

  return sysclockfreq;
 8003610:	69bb      	ldr	r3, [r7, #24]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3724      	adds	r7, #36	; 0x24
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	58024400 	.word	0x58024400
 8003624:	03d09000 	.word	0x03d09000
 8003628:	003d0900 	.word	0x003d0900
 800362c:	017d7840 	.word	0x017d7840
 8003630:	46000000 	.word	0x46000000
 8003634:	4c742400 	.word	0x4c742400
 8003638:	4a742400 	.word	0x4a742400
 800363c:	4bbebc20 	.word	0x4bbebc20

08003640 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003648:	2300      	movs	r3, #0
 800364a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800364c:	2300      	movs	r3, #0
 800364e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d03f      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003660:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003664:	d02a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003666:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800366a:	d824      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800366c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003670:	d018      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003672:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003676:	d81e      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800367c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003680:	d007      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003682:	e018      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003684:	4bab      	ldr	r3, [pc, #684]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	4aaa      	ldr	r2, [pc, #680]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800368a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800368e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003690:	e015      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
 8003696:	2102      	movs	r1, #2
 8003698:	4618      	mov	r0, r3
 800369a:	f001 f9dd 	bl	8004a58 <RCCEx_PLL2_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036a2:	e00c      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3324      	adds	r3, #36	; 0x24
 80036a8:	2102      	movs	r1, #2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 faf6 	bl	8004c9c <RCCEx_PLL3_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036b4:	e003      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	75fb      	strb	r3, [r7, #23]
      break;
 80036ba:	e000      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036be:	7dfb      	ldrb	r3, [r7, #23]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d109      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036c4:	4b9b      	ldr	r3, [pc, #620]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d0:	4998      	ldr	r1, [pc, #608]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	650b      	str	r3, [r1, #80]	; 0x50
 80036d6:	e001      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
 80036da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d03d      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d826      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036f0:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80036f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f6:	bf00      	nop
 80036f8:	0800370d 	.word	0x0800370d
 80036fc:	0800371b 	.word	0x0800371b
 8003700:	0800372d 	.word	0x0800372d
 8003704:	08003745 	.word	0x08003745
 8003708:	08003745 	.word	0x08003745
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800370c:	4b89      	ldr	r3, [pc, #548]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	4a88      	ldr	r2, [pc, #544]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003716:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003718:	e015      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3304      	adds	r3, #4
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f001 f999 	bl	8004a58 <RCCEx_PLL2_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800372a:	e00c      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3324      	adds	r3, #36	; 0x24
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f001 fab2 	bl	8004c9c <RCCEx_PLL3_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800373c:	e003      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
      break;
 8003742:	e000      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d109      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800374c:	4b79      	ldr	r3, [pc, #484]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800374e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003750:	f023 0207 	bic.w	r2, r3, #7
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003758:	4976      	ldr	r1, [pc, #472]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800375a:	4313      	orrs	r3, r2
 800375c:	650b      	str	r3, [r1, #80]	; 0x50
 800375e:	e001      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800376c:	2b00      	cmp	r3, #0
 800376e:	d042      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003778:	d02b      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800377a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377e:	d825      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003780:	2bc0      	cmp	r3, #192	; 0xc0
 8003782:	d028      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003784:	2bc0      	cmp	r3, #192	; 0xc0
 8003786:	d821      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003788:	2b80      	cmp	r3, #128	; 0x80
 800378a:	d016      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d81d      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003794:	2b40      	cmp	r3, #64	; 0x40
 8003796:	d007      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003798:	e018      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800379a:	4b66      	ldr	r3, [pc, #408]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379e:	4a65      	ldr	r2, [pc, #404]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037a6:	e017      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3304      	adds	r3, #4
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 f952 	bl	8004a58 <RCCEx_PLL2_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037b8:	e00e      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3324      	adds	r3, #36	; 0x24
 80037be:	2100      	movs	r1, #0
 80037c0:	4618      	mov	r0, r3
 80037c2:	f001 fa6b 	bl	8004c9c <RCCEx_PLL3_Config>
 80037c6:	4603      	mov	r3, r0
 80037c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037ca:	e005      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	75fb      	strb	r3, [r7, #23]
      break;
 80037d0:	e002      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80037d2:	bf00      	nop
 80037d4:	e000      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80037d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037de:	4b55      	ldr	r3, [pc, #340]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ea:	4952      	ldr	r1, [pc, #328]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	650b      	str	r3, [r1, #80]	; 0x50
 80037f0:	e001      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
 80037f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d049      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003808:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800380c:	d030      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800380e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003812:	d82a      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003814:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003818:	d02c      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800381a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800381e:	d824      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003824:	d018      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800382a:	d81e      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003830:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003834:	d007      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003836:	e018      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003838:	4b3e      	ldr	r3, [pc, #248]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	4a3d      	ldr	r2, [pc, #244]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800383e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003842:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003844:	e017      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f001 f903 	bl	8004a58 <RCCEx_PLL2_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003856:	e00e      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3324      	adds	r3, #36	; 0x24
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f001 fa1c 	bl	8004c9c <RCCEx_PLL3_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003868:	e005      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	75fb      	strb	r3, [r7, #23]
      break;
 800386e:	e002      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003870:	bf00      	nop
 8003872:	e000      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10a      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800387c:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003880:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800388a:	492a      	ldr	r1, [pc, #168]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800388c:	4313      	orrs	r3, r2
 800388e:	658b      	str	r3, [r1, #88]	; 0x58
 8003890:	e001      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d04c      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038ac:	d030      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80038ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038b2:	d82a      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80038b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038b8:	d02c      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80038ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038be:	d824      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80038c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038c4:	d018      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80038c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038ca:	d81e      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80038d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d4:	d007      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80038d6:	e018      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d8:	4b16      	ldr	r3, [pc, #88]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	4a15      	ldr	r2, [pc, #84]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038e4:	e017      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3304      	adds	r3, #4
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 f8b3 	bl	8004a58 <RCCEx_PLL2_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80038f6:	e00e      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3324      	adds	r3, #36	; 0x24
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f001 f9cc 	bl	8004c9c <RCCEx_PLL3_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003908:	e005      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	75fb      	strb	r3, [r7, #23]
      break;
 800390e:	e002      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003910:	bf00      	nop
 8003912:	e000      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003916:	7dfb      	ldrb	r3, [r7, #23]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10d      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800392a:	4902      	ldr	r1, [pc, #8]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800392c:	4313      	orrs	r3, r2
 800392e:	658b      	str	r3, [r1, #88]	; 0x58
 8003930:	e004      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003932:	bf00      	nop
 8003934:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	7dfb      	ldrb	r3, [r7, #23]
 800393a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d032      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394c:	2b30      	cmp	r3, #48	; 0x30
 800394e:	d01c      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003950:	2b30      	cmp	r3, #48	; 0x30
 8003952:	d817      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003954:	2b20      	cmp	r3, #32
 8003956:	d00c      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003958:	2b20      	cmp	r3, #32
 800395a:	d813      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d016      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003960:	2b10      	cmp	r3, #16
 8003962:	d10f      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003964:	4baf      	ldr	r3, [pc, #700]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	4aae      	ldr	r2, [pc, #696]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800396a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003970:	e00e      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3304      	adds	r3, #4
 8003976:	2102      	movs	r1, #2
 8003978:	4618      	mov	r0, r3
 800397a:	f001 f86d 	bl	8004a58 <RCCEx_PLL2_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003982:	e005      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	75fb      	strb	r3, [r7, #23]
      break;
 8003988:	e002      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800398a:	bf00      	nop
 800398c:	e000      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800398e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003990:	7dfb      	ldrb	r3, [r7, #23]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003996:	4ba3      	ldr	r3, [pc, #652]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a2:	49a0      	ldr	r1, [pc, #640]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039a8:	e001      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d047      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039c2:	d030      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80039c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039c8:	d82a      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039ce:	d02c      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80039d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039d4:	d824      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039da:	d018      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80039dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e0:	d81e      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80039e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ea:	d007      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80039ec:	e018      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ee:	4b8d      	ldr	r3, [pc, #564]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	4a8c      	ldr	r2, [pc, #560]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039fa:	e017      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	2100      	movs	r1, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 f828 	bl	8004a58 <RCCEx_PLL2_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a0c:	e00e      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3324      	adds	r3, #36	; 0x24
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f001 f941 	bl	8004c9c <RCCEx_PLL3_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a1e:	e005      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	75fb      	strb	r3, [r7, #23]
      break;
 8003a24:	e002      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003a2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a32:	4b7c      	ldr	r3, [pc, #496]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a36:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	4979      	ldr	r1, [pc, #484]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	650b      	str	r3, [r1, #80]	; 0x50
 8003a44:	e001      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a46:	7dfb      	ldrb	r3, [r7, #23]
 8003a48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d049      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a5e:	d02e      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a64:	d828      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a6a:	d02a      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003a6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a70:	d822      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a76:	d026      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003a78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a7c:	d81c      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a82:	d010      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a88:	d816      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01d      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a92:	d111      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	2101      	movs	r1, #1
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 ffdc 	bl	8004a58 <RCCEx_PLL2_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003aa4:	e012      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3324      	adds	r3, #36	; 0x24
 8003aaa:	2101      	movs	r1, #1
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 f8f5 	bl	8004c9c <RCCEx_PLL3_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003ab6:	e009      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
      break;
 8003abc:	e006      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e004      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e002      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ad2:	4b54      	ldr	r3, [pc, #336]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ade:	4951      	ldr	r1, [pc, #324]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	650b      	str	r3, [r1, #80]	; 0x50
 8003ae4:	e001      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d04b      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b00:	d02e      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b06:	d828      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0c:	d02a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b12:	d822      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b18:	d026      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003b1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b1e:	d81c      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b24:	d010      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b2a:	d816      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01d      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b34:	d111      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 ff8b 	bl	8004a58 <RCCEx_PLL2_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b46:	e012      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3324      	adds	r3, #36	; 0x24
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f001 f8a4 	bl	8004c9c <RCCEx_PLL3_Config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b58:	e009      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b5e:	e006      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003b60:	bf00      	nop
 8003b62:	e004      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003b64:	bf00      	nop
 8003b66:	e002      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003b68:	bf00      	nop
 8003b6a:	e000      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003b6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b74:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b82:	4928      	ldr	r1, [pc, #160]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	658b      	str	r3, [r1, #88]	; 0x58
 8003b88:	e001      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
 8003b8c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d02f      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ba2:	d00e      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ba8:	d814      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d015      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003bae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bb2:	d10f      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb4:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003bc0:	e00c      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 ff45 	bl	8004a58 <RCCEx_PLL2_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003bd2:	e003      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd8:	e000      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003be2:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bee:	490d      	ldr	r1, [pc, #52]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	650b      	str	r3, [r1, #80]	; 0x50
 8003bf4:	e001      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
 8003bf8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d036      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x634>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d81c      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c4f 	.word	0x08003c4f
 8003c18:	08003c29 	.word	0x08003c29
 8003c1c:	08003c37 	.word	0x08003c37
 8003c20:	08003c4f 	.word	0x08003c4f
 8003c24:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c28:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	4a0f      	ldr	r2, [pc, #60]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c34:	e00c      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 ff0b 	bl	8004a58 <RCCEx_PLL2_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c46:	e003      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c4c:	e000      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x630>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c56:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5a:	f023 0203 	bic.w	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	4902      	ldr	r1, [pc, #8]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c68:	e004      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003c6a:	bf00      	nop
 8003c6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
 8003c72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 829b 	beq.w	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xb78>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8c:	f000 81a9 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c9a:	f000 81a2 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ca4:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8003ca8:	f000 819b 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cb2:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8003cb6:	f000 8194 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cc0:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8003cc4:	f000 818d 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cce:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 8003cd2:	f000 8186 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cdc:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8003ce0:	f000 817f 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cea:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 8003cee:	f000 8178 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cf8:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8003cfc:	f000 8171 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d06:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8003d0a:	f000 816a 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d14:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8003d18:	f000 8163 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d22:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 8003d26:	f000 815c 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d30:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 8003d34:	f000 8155 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d3e:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 8003d42:	f000 814e 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d4c:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 8003d50:	f000 8147 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d5a:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 8003d5e:	f000 8140 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d68:	4aa8      	ldr	r2, [pc, #672]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	f000 8139 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d76:	4aa6      	ldr	r2, [pc, #664]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	f000 8132 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d84:	4aa3      	ldr	r2, [pc, #652]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	f000 812b 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d92:	4aa1      	ldr	r2, [pc, #644]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	f000 8124 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003da0:	4a9e      	ldr	r2, [pc, #632]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	f000 811d 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dae:	4a9c      	ldr	r2, [pc, #624]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	f000 8116 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dbc:	4a99      	ldr	r2, [pc, #612]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	f000 810f 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dca:	4a97      	ldr	r2, [pc, #604]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	f000 8108 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dd8:	4a94      	ldr	r2, [pc, #592]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	f000 8101 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003de6:	4a92      	ldr	r2, [pc, #584]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	f000 80fa 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003df4:	4a8f      	ldr	r2, [pc, #572]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	f000 80f3 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e02:	4a8d      	ldr	r2, [pc, #564]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	f000 80ec 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e10:	4a8a      	ldr	r2, [pc, #552]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	f000 80e5 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e1e:	4a88      	ldr	r2, [pc, #544]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	f000 80de 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e2c:	4a85      	ldr	r2, [pc, #532]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	f000 80d7 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e3a:	4a83      	ldr	r2, [pc, #524]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	f000 80d0 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e48:	4a80      	ldr	r2, [pc, #512]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	f000 80c9 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e56:	4a7e      	ldr	r2, [pc, #504]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	f000 80c2 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e64:	4a7b      	ldr	r2, [pc, #492]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	f000 80bb 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e72:	4a79      	ldr	r2, [pc, #484]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	f000 80b4 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e80:	4a76      	ldr	r2, [pc, #472]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	f000 80ad 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e8e:	4a74      	ldr	r2, [pc, #464]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	f000 80a6 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e9c:	4a71      	ldr	r2, [pc, #452]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	f000 809f 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eaa:	4a6f      	ldr	r2, [pc, #444]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	f000 8098 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eb8:	4a6c      	ldr	r2, [pc, #432]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	f000 8091 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ec6:	4a6a      	ldr	r2, [pc, #424]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	f000 808a 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ed4:	4a67      	ldr	r2, [pc, #412]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	f000 8083 	beq.w	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ee2:	4a65      	ldr	r2, [pc, #404]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d07c      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eee:	4a63      	ldr	r2, [pc, #396]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d076      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003efa:	4a61      	ldr	r2, [pc, #388]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d070      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f06:	4a5f      	ldr	r2, [pc, #380]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d06a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f12:	4a5d      	ldr	r2, [pc, #372]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d064      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f1e:	4a5b      	ldr	r2, [pc, #364]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d05e      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f2a:	4a59      	ldr	r2, [pc, #356]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0xa50>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d058      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f36:	4a57      	ldr	r2, [pc, #348]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0xa54>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d052      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f42:	4a55      	ldr	r2, [pc, #340]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d04c      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f4e:	4a53      	ldr	r2, [pc, #332]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0xa5c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d046      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f5a:	4a51      	ldr	r2, [pc, #324]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d040      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f66:	4a4f      	ldr	r2, [pc, #316]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0xa64>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d03a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f72:	4a4d      	ldr	r2, [pc, #308]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xa68>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d034      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f7e:	4a4b      	ldr	r2, [pc, #300]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xa6c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d02e      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f8a:	4a49      	ldr	r2, [pc, #292]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0xa70>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d028      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f96:	4a47      	ldr	r2, [pc, #284]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d022      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fa2:	4a45      	ldr	r2, [pc, #276]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d01c      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fae:	4a43      	ldr	r2, [pc, #268]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d016      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fba:	4a41      	ldr	r2, [pc, #260]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d010      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fc6:	4a3f      	ldr	r2, [pc, #252]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xa84>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fd2:	4a3d      	ldr	r2, [pc, #244]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d004      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003fd8:	f240 317f 	movw	r1, #895	; 0x37f
 8003fdc:	483b      	ldr	r0, [pc, #236]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 8003fde:	f7fc fe80 	bl	8000ce2 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe2:	4b3b      	ldr	r3, [pc, #236]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a3a      	ldr	r2, [pc, #232]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 8003fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fee:	f7fd fa07 	bl	8001400 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ff4:	e06e      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xa94>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff6:	f7fd fa03 	bl	8001400 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b64      	cmp	r3, #100	; 0x64
 8004002:	d967      	bls.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xa94>
      {
        ret = HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	75fb      	strb	r3, [r7, #23]
        break;
 8004008:	e06a      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 800400a:	bf00      	nop
 800400c:	00010300 	.word	0x00010300
 8004010:	00011300 	.word	0x00011300
 8004014:	00012300 	.word	0x00012300
 8004018:	00013300 	.word	0x00013300
 800401c:	00014300 	.word	0x00014300
 8004020:	00015300 	.word	0x00015300
 8004024:	00016300 	.word	0x00016300
 8004028:	00017300 	.word	0x00017300
 800402c:	00018300 	.word	0x00018300
 8004030:	00019300 	.word	0x00019300
 8004034:	0001a300 	.word	0x0001a300
 8004038:	0001b300 	.word	0x0001b300
 800403c:	0001c300 	.word	0x0001c300
 8004040:	0001d300 	.word	0x0001d300
 8004044:	0001e300 	.word	0x0001e300
 8004048:	0001f300 	.word	0x0001f300
 800404c:	00020300 	.word	0x00020300
 8004050:	00021300 	.word	0x00021300
 8004054:	00022300 	.word	0x00022300
 8004058:	00023300 	.word	0x00023300
 800405c:	00024300 	.word	0x00024300
 8004060:	00025300 	.word	0x00025300
 8004064:	00026300 	.word	0x00026300
 8004068:	00027300 	.word	0x00027300
 800406c:	00028300 	.word	0x00028300
 8004070:	00029300 	.word	0x00029300
 8004074:	0002a300 	.word	0x0002a300
 8004078:	0002b300 	.word	0x0002b300
 800407c:	0002c300 	.word	0x0002c300
 8004080:	0002d300 	.word	0x0002d300
 8004084:	0002e300 	.word	0x0002e300
 8004088:	0002f300 	.word	0x0002f300
 800408c:	00030300 	.word	0x00030300
 8004090:	00031300 	.word	0x00031300
 8004094:	00032300 	.word	0x00032300
 8004098:	00033300 	.word	0x00033300
 800409c:	00034300 	.word	0x00034300
 80040a0:	00035300 	.word	0x00035300
 80040a4:	00036300 	.word	0x00036300
 80040a8:	00037300 	.word	0x00037300
 80040ac:	00038300 	.word	0x00038300
 80040b0:	00039300 	.word	0x00039300
 80040b4:	0003a300 	.word	0x0003a300
 80040b8:	0003b300 	.word	0x0003b300
 80040bc:	0003c300 	.word	0x0003c300
 80040c0:	0003d300 	.word	0x0003d300
 80040c4:	0003e300 	.word	0x0003e300
 80040c8:	0003f300 	.word	0x0003f300
 80040cc:	08009164 	.word	0x08009164
 80040d0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040d4:	4bb9      	ldr	r3, [pc, #740]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d08a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
      }
    }

    if(ret == HAL_OK)
 80040e0:	7dfb      	ldrb	r3, [r7, #23]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d166      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80040e6:	4bb6      	ldr	r3, [pc, #728]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80040e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040f0:	4053      	eors	r3, r2
 80040f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d013      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xae2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040fa:	4bb1      	ldr	r3, [pc, #708]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004102:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004104:	4bae      	ldr	r3, [pc, #696]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	4aad      	ldr	r2, [pc, #692]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800410a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800410e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004110:	4bab      	ldr	r3, [pc, #684]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004114:	4aaa      	ldr	r2, [pc, #680]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800411c:	4aa8      	ldr	r2, [pc, #672]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412c:	d115      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412e:	f7fd f967 	bl	8001400 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004134:	e00b      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fd f963 	bl	8001400 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d902      	bls.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
          {
            ret = HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	75fb      	strb	r3, [r7, #23]
            break;
 800414c:	e005      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800414e:	4b9c      	ldr	r3, [pc, #624]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0ed      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
          }
        }
      }

      if(ret == HAL_OK)
 800415a:	7dfb      	ldrb	r3, [r7, #23]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d126      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xb6e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800416e:	d10d      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004170:	4b93      	ldr	r3, [pc, #588]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800417e:	0919      	lsrs	r1, r3, #4
 8004180:	4b90      	ldr	r3, [pc, #576]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0xd84>)
 8004182:	400b      	ands	r3, r1
 8004184:	498e      	ldr	r1, [pc, #568]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004186:	4313      	orrs	r3, r2
 8004188:	610b      	str	r3, [r1, #16]
 800418a:	e005      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 800418c:	4b8c      	ldr	r3, [pc, #560]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	4a8b      	ldr	r2, [pc, #556]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004192:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004196:	6113      	str	r3, [r2, #16]
 8004198:	4b89      	ldr	r3, [pc, #548]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800419a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a6:	4986      	ldr	r1, [pc, #536]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	670b      	str	r3, [r1, #112]	; 0x70
 80041ac:	e004      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xb78>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
 80041b0:	75bb      	strb	r3, [r7, #22]
 80041b2:	e001      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xb78>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
 80041b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d07e      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xc82>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041c8:	2b28      	cmp	r3, #40	; 0x28
 80041ca:	d867      	bhi.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80041cc:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <HAL_RCCEx_PeriphCLKConfig+0xb94>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	080042a3 	.word	0x080042a3
 80041d8:	0800429d 	.word	0x0800429d
 80041dc:	0800429d 	.word	0x0800429d
 80041e0:	0800429d 	.word	0x0800429d
 80041e4:	0800429d 	.word	0x0800429d
 80041e8:	0800429d 	.word	0x0800429d
 80041ec:	0800429d 	.word	0x0800429d
 80041f0:	0800429d 	.word	0x0800429d
 80041f4:	08004279 	.word	0x08004279
 80041f8:	0800429d 	.word	0x0800429d
 80041fc:	0800429d 	.word	0x0800429d
 8004200:	0800429d 	.word	0x0800429d
 8004204:	0800429d 	.word	0x0800429d
 8004208:	0800429d 	.word	0x0800429d
 800420c:	0800429d 	.word	0x0800429d
 8004210:	0800429d 	.word	0x0800429d
 8004214:	0800428b 	.word	0x0800428b
 8004218:	0800429d 	.word	0x0800429d
 800421c:	0800429d 	.word	0x0800429d
 8004220:	0800429d 	.word	0x0800429d
 8004224:	0800429d 	.word	0x0800429d
 8004228:	0800429d 	.word	0x0800429d
 800422c:	0800429d 	.word	0x0800429d
 8004230:	0800429d 	.word	0x0800429d
 8004234:	080042a3 	.word	0x080042a3
 8004238:	0800429d 	.word	0x0800429d
 800423c:	0800429d 	.word	0x0800429d
 8004240:	0800429d 	.word	0x0800429d
 8004244:	0800429d 	.word	0x0800429d
 8004248:	0800429d 	.word	0x0800429d
 800424c:	0800429d 	.word	0x0800429d
 8004250:	0800429d 	.word	0x0800429d
 8004254:	080042a3 	.word	0x080042a3
 8004258:	0800429d 	.word	0x0800429d
 800425c:	0800429d 	.word	0x0800429d
 8004260:	0800429d 	.word	0x0800429d
 8004264:	0800429d 	.word	0x0800429d
 8004268:	0800429d 	.word	0x0800429d
 800426c:	0800429d 	.word	0x0800429d
 8004270:	0800429d 	.word	0x0800429d
 8004274:	080042a3 	.word	0x080042a3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	2101      	movs	r1, #1
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fbea 	bl	8004a58 <RCCEx_PLL2_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004288:	e00c      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3324      	adds	r3, #36	; 0x24
 800428e:	2101      	movs	r1, #1
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fd03 	bl	8004c9c <RCCEx_PLL3_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800429a:	e003      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	75fb      	strb	r3, [r7, #23]
      break;
 80042a0:	e000      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
      break;
 80042a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xc7e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80042aa:	4b45      	ldr	r3, [pc, #276]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80042ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042b6:	4942      	ldr	r1, [pc, #264]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	654b      	str	r3, [r1, #84]	; 0x54
 80042bc:	e001      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042be:	7dfb      	ldrb	r3, [r7, #23]
 80042c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d037      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d2:	2b05      	cmp	r3, #5
 80042d4:	d820      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xcd8>
 80042d6:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042dc:	0800431f 	.word	0x0800431f
 80042e0:	080042f5 	.word	0x080042f5
 80042e4:	08004307 	.word	0x08004307
 80042e8:	0800431f 	.word	0x0800431f
 80042ec:	0800431f 	.word	0x0800431f
 80042f0:	0800431f 	.word	0x0800431f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3304      	adds	r3, #4
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fbac 	bl	8004a58 <RCCEx_PLL2_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004304:	e00c      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xce0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3324      	adds	r3, #36	; 0x24
 800430a:	2101      	movs	r1, #1
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fcc5 	bl	8004c9c <RCCEx_PLL3_Config>
 8004312:	4603      	mov	r3, r0
 8004314:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004316:	e003      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xce0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	75fb      	strb	r3, [r7, #23]
      break;
 800431c:	e000      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xce0>
      break;
 800431e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004320:	7dfb      	ldrb	r3, [r7, #23]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004326:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	f023 0207 	bic.w	r2, r3, #7
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004332:	4923      	ldr	r1, [pc, #140]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8004334:	4313      	orrs	r3, r2
 8004336:	654b      	str	r3, [r1, #84]	; 0x54
 8004338:	e001      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d040      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004350:	2b05      	cmp	r3, #5
 8004352:	d821      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <HAL_RCCEx_PeriphCLKConfig+0xd1c>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	0800439f 	.word	0x0800439f
 8004360:	08004375 	.word	0x08004375
 8004364:	08004387 	.word	0x08004387
 8004368:	0800439f 	.word	0x0800439f
 800436c:	0800439f 	.word	0x0800439f
 8004370:	0800439f 	.word	0x0800439f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	2101      	movs	r1, #1
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fb6c 	bl	8004a58 <RCCEx_PLL2_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004384:	e00c      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd60>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3324      	adds	r3, #36	; 0x24
 800438a:	2101      	movs	r1, #1
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fc85 	bl	8004c9c <RCCEx_PLL3_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004396:	e003      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	75fb      	strb	r3, [r7, #23]
      break;
 800439c:	e000      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      break;
 800439e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d110      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xd88>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	f023 0207 	bic.w	r2, r3, #7
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b4:	4902      	ldr	r1, [pc, #8]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	658b      	str	r3, [r1, #88]	; 0x58
 80043ba:	e007      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80043bc:	58024800 	.word	0x58024800
 80043c0:	58024400 	.word	0x58024400
 80043c4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
 80043ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d04b      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043e2:	d02e      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xe02>
 80043e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043e8:	d828      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 80043ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ee:	d02a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xe06>
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f4:	d822      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 80043f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043fa:	d026      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
 80043fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004400:	d81c      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 8004402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004406:	d010      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xdea>
 8004408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800440c:	d816      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d01d      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 8004412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004416:	d111      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xdfc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3304      	adds	r3, #4
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fb1a 	bl	8004a58 <RCCEx_PLL2_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004428:	e012      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xe10>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3324      	adds	r3, #36	; 0x24
 800442e:	2102      	movs	r1, #2
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fc33 	bl	8004c9c <RCCEx_PLL3_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800443a:	e009      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	75fb      	strb	r3, [r7, #23]
      break;
 8004440:	e006      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 8004442:	bf00      	nop
 8004444:	e004      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 8004446:	bf00      	nop
 8004448:	e002      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 800444a:	bf00      	nop
 800444c:	e000      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 800444e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004450:	7dfb      	ldrb	r3, [r7, #23]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10a      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xe2c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004456:	4bb2      	ldr	r3, [pc, #712]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004464:	49ae      	ldr	r1, [pc, #696]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004466:	4313      	orrs	r3, r2
 8004468:	654b      	str	r3, [r1, #84]	; 0x54
 800446a:	e001      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xe30>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446c:	7dfb      	ldrb	r3, [r7, #23]
 800446e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b00      	cmp	r3, #0
 800447a:	d04b      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xed4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004482:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004486:	d02e      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xea6>
 8004488:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800448c:	d828      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800448e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004492:	d02a      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xeaa>
 8004494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004498:	d822      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800449a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800449e:	d026      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xeae>
 80044a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044a4:	d81c      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80044a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044aa:	d010      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xe8e>
 80044ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b0:	d816      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01d      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xeb2>
 80044b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ba:	d111      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3304      	adds	r3, #4
 80044c0:	2100      	movs	r1, #0
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fac8 	bl	8004a58 <RCCEx_PLL2_Config>
 80044c8:	4603      	mov	r3, r0
 80044ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80044cc:	e012      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xeb4>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3324      	adds	r3, #36	; 0x24
 80044d2:	2102      	movs	r1, #2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fbe1 	bl	8004c9c <RCCEx_PLL3_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80044de:	e009      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	75fb      	strb	r3, [r7, #23]
      break;
 80044e4:	e006      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 80044e6:	bf00      	nop
 80044e8:	e004      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 80044ea:	bf00      	nop
 80044ec:	e002      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 80044ee:	bf00      	nop
 80044f0:	e000      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 80044f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10a      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xed0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044fa:	4b89      	ldr	r3, [pc, #548]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004508:	4985      	ldr	r1, [pc, #532]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800450a:	4313      	orrs	r3, r2
 800450c:	658b      	str	r3, [r1, #88]	; 0x58
 800450e:	e001      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004510:	7dfb      	ldrb	r3, [r7, #23]
 8004512:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451c:	2b00      	cmp	r3, #0
 800451e:	d04b      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xf78>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004526:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800452a:	d02e      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 800452c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004530:	d828      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xf44>
 8004532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004536:	d02a      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xf4e>
 8004538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800453c:	d822      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xf44>
 800453e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004542:	d026      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xf52>
 8004544:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004548:	d81c      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xf44>
 800454a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800454e:	d010      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xf32>
 8004550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004554:	d816      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xf44>
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01d      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xf56>
 800455a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800455e:	d111      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xf44>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	2100      	movs	r1, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fa76 	bl	8004a58 <RCCEx_PLL2_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004570:	e012      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xf58>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3324      	adds	r3, #36	; 0x24
 8004576:	2102      	movs	r1, #2
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fb8f 	bl	8004c9c <RCCEx_PLL3_Config>
 800457e:	4603      	mov	r3, r0
 8004580:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004582:	e009      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	75fb      	strb	r3, [r7, #23]
      break;
 8004588:	e006      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 800458a:	bf00      	nop
 800458c:	e004      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 800458e:	bf00      	nop
 8004590:	e002      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 8004592:	bf00      	nop
 8004594:	e000      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 8004596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004598:	7dfb      	ldrb	r3, [r7, #23]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xf74>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800459e:	4b60      	ldr	r3, [pc, #384]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ac:	495c      	ldr	r1, [pc, #368]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	658b      	str	r3, [r1, #88]	; 0x58
 80045b2:	e001      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xf78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b4:	7dfb      	ldrb	r3, [r7, #23]
 80045b6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d036      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xff2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ce:	d015      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045da:	d00f      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045f0:	d004      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 80045f2:	f240 510f 	movw	r1, #1295	; 0x50f
 80045f6:	484b      	ldr	r0, [pc, #300]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
 80045f8:	f7fc fb73 	bl	8000ce2 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004606:	d10a      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xfde>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3324      	adds	r3, #36	; 0x24
 800460c:	2102      	movs	r1, #2
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fb44 	bl	8004c9c <RCCEx_PLL3_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xfde>
        {
          status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800461e:	4b40      	ldr	r3, [pc, #256]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004622:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800462c:	493c      	ldr	r1, [pc, #240]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800462e:	4313      	orrs	r3, r2
 8004630:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b00      	cmp	r3, #0
 800463c:	d036      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004648:	d015      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004654:	d00f      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004666:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800466a:	d004      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 800466c:	f240 5122 	movw	r1, #1314	; 0x522
 8004670:	482c      	ldr	r0, [pc, #176]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
 8004672:	f7fc fb36 	bl	8000ce2 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004680:	d10a      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1058>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3324      	adds	r3, #36	; 0x24
 8004686:	2102      	movs	r1, #2
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fb07 	bl	8004c9c <RCCEx_PLL3_Config>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1058>
      {
        status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004698:	4b21      	ldr	r3, [pc, #132]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800469a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a6:	491e      	ldr	r1, [pc, #120]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d039      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x10ec>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046c2:	d01d      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80046c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046c8:	d817      	bhi.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1096>
 80046ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d2:	d009      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 80046d4:	e011      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3304      	adds	r3, #4
 80046da:	2100      	movs	r1, #0
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 f9bb 	bl	8004a58 <RCCEx_PLL2_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80046e6:	e00c      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x10c2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3324      	adds	r3, #36	; 0x24
 80046ec:	2102      	movs	r1, #2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fad4 	bl	8004c9c <RCCEx_PLL3_Config>
 80046f4:	4603      	mov	r3, r0
 80046f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80046f8:	e003      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	75fb      	strb	r3, [r7, #23]
      break;
 80046fe:	e000      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      break;
 8004700:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004702:	7dfb      	ldrb	r3, [r7, #23]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10f      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x10e8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800470a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004716:	4902      	ldr	r1, [pc, #8]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004718:	4313      	orrs	r3, r2
 800471a:	658b      	str	r3, [r1, #88]	; 0x58
 800471c:	e006      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x10ec>
 800471e:	bf00      	nop
 8004720:	58024400 	.word	0x58024400
 8004724:	08009164 	.word	0x08009164
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d033      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1160>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004742:	d01c      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x113e>
 8004744:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004748:	d816      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x1138>
 800474a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800474e:	d003      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x1118>
 8004750:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004754:	d007      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x1126>
 8004756:	e00f      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x1138>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004758:	4b53      	ldr	r3, [pc, #332]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	4a52      	ldr	r2, [pc, #328]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800475e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004764:	e00c      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3324      	adds	r3, #36	; 0x24
 800476a:	2101      	movs	r1, #1
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fa95 	bl	8004c9c <RCCEx_PLL3_Config>
 8004772:	4603      	mov	r3, r0
 8004774:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004776:	e003      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1140>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	75fb      	strb	r3, [r7, #23]
      break;
 800477c:	e000      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1140>
      break;
 800477e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004780:	7dfb      	ldrb	r3, [r7, #23]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x115c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004786:	4b48      	ldr	r3, [pc, #288]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004794:	4944      	ldr	r1, [pc, #272]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004796:	4313      	orrs	r3, r2
 8004798:	654b      	str	r3, [r1, #84]	; 0x54
 800479a:	e001      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1160>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	7dfb      	ldrb	r3, [r7, #23]
 800479e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d037      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047bc:	d004      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80047be:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 80047c2:	483a      	ldr	r0, [pc, #232]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x126c>)
 80047c4:	f7fc fa8d 	bl	8000ce2 <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1198>
 80047d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d4:	d007      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x11a6>
 80047d6:	e00f      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x11b8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047d8:	4b33      	ldr	r3, [pc, #204]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	4a32      	ldr	r2, [pc, #200]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 80047de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80047e4:	e00b      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x11be>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3304      	adds	r3, #4
 80047ea:	2102      	movs	r1, #2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 f933 	bl	8004a58 <RCCEx_PLL2_Config>
 80047f2:	4603      	mov	r3, r0
 80047f4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80047f6:	e002      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x11be>

    default:
      ret = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	75fb      	strb	r3, [r7, #23]
      break;
 80047fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d109      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x11d8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004804:	4b28      	ldr	r3, [pc, #160]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004808:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004810:	4925      	ldr	r1, [pc, #148]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004812:	4313      	orrs	r3, r2
 8004814:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004816:	e001      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004818:	7dfb      	ldrb	r3, [r7, #23]
 800481a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x11fe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3324      	adds	r3, #36	; 0x24
 800482c:	2102      	movs	r1, #2
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fa34 	bl	8004c9c <RCCEx_PLL3_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x11fe>
    {
      status=HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d034      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1274>
  {

    switch(PeriphClkInit->RngClockSelection)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800484e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004852:	d017      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1244>
 8004854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004858:	d811      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x123e>
 800485a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800485e:	d013      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1248>
 8004860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004864:	d80b      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x123e>
 8004866:	2b00      	cmp	r3, #0
 8004868:	d010      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800486a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800486e:	d106      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x123e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004870:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	4a0c      	ldr	r2, [pc, #48]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800487a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800487c:	e007      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x124e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	75fb      	strb	r3, [r7, #23]
      break;
 8004882:	e004      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x124e>
      break;
 8004884:	bf00      	nop
 8004886:	e002      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x124e>
      break;
 8004888:	bf00      	nop
 800488a:	e000      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x124e>
      break;
 800488c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800488e:	7dfb      	ldrb	r3, [r7, #23]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10d      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8004896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048a0:	4901      	ldr	r1, [pc, #4]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	654b      	str	r3, [r1, #84]	; 0x54
 80048a6:	e005      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1274>
 80048a8:	58024400 	.word	0x58024400
 80048ac:	08009164 	.word	0x08009164
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
 80048b2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d016      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x12ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d009      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x129c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048d0:	d004      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x129c>
 80048d2:	f240 51e7 	movw	r1, #1511	; 0x5e7
 80048d6:	485e      	ldr	r0, [pc, #376]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048d8:	f7fc fa03 	bl	8000ce2 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048dc:	4b5d      	ldr	r3, [pc, #372]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80048de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e8:	495a      	ldr	r1, [pc, #360]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d019      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x12ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x12da>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800490a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800490e:	d004      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x12da>
 8004910:	f240 51f1 	movw	r1, #1521	; 0x5f1
 8004914:	484e      	ldr	r0, [pc, #312]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004916:	f7fc f9e4 	bl	8000ce2 <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800491a:	4b4e      	ldr	r3, [pc, #312]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004928:	494a      	ldr	r1, [pc, #296]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800492a:	4313      	orrs	r3, r2
 800492c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d016      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800493e:	2b00      	cmp	r3, #0
 8004940:	d009      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004946:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800494a:	d004      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 800494c:	f240 51fb 	movw	r1, #1531	; 0x5fb
 8004950:	483f      	ldr	r0, [pc, #252]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004952:	f7fc f9c6 	bl	8000ce2 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004956:	4b3f      	ldr	r3, [pc, #252]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004962:	493c      	ldr	r1, [pc, #240]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004964:	4313      	orrs	r3, r2
 8004966:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01d      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x1354>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004988:	d004      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x1354>
 800498a:	f240 6111 	movw	r1, #1553	; 0x611
 800498e:	4830      	ldr	r0, [pc, #192]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004990:	f7fc f9a7 	bl	8000ce2 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004994:	4b2f      	ldr	r3, [pc, #188]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	4a2e      	ldr	r2, [pc, #184]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800499a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800499e:	6113      	str	r3, [r2, #16]
 80049a0:	4b2c      	ldr	r3, [pc, #176]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80049aa:	492a      	ldr	r1, [pc, #168]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	da1b      	bge.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x13b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00e      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x139e>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049c8:	d009      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x139e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d2:	d004      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x139e>
 80049d4:	f240 611b 	movw	r1, #1563	; 0x61b
 80049d8:	481d      	ldr	r0, [pc, #116]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049da:	f7fc f982 	bl	8000ce2 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049de:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80049e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ea:	491a      	ldr	r1, [pc, #104]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01f      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x13fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d010      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a10:	d00a      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a1c:	d004      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004a1e:	f240 6125 	movw	r1, #1573	; 0x625
 8004a22:	480b      	ldr	r0, [pc, #44]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a24:	f7fc f95d 	bl	8000ce2 <assert_failed>

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a36:	4907      	ldr	r1, [pc, #28]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004a3c:	7dbb      	ldrb	r3, [r7, #22]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x1406>
  {
    return HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e000      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1408>
  }
  return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	08009164 	.word	0x08009164
 8004a54:	58024400 	.word	0x58024400

08004a58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <RCCEx_PLL2_Config+0x1e>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b3f      	cmp	r3, #63	; 0x3f
 8004a74:	d904      	bls.n	8004a80 <RCCEx_PLL2_Config+0x28>
 8004a76:	f640 51c2 	movw	r1, #3522	; 0xdc2
 8004a7a:	4885      	ldr	r0, [pc, #532]	; (8004c90 <RCCEx_PLL2_Config+0x238>)
 8004a7c:	f7fc f931 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d904      	bls.n	8004a92 <RCCEx_PLL2_Config+0x3a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a90:	d904      	bls.n	8004a9c <RCCEx_PLL2_Config+0x44>
 8004a92:	f640 51c3 	movw	r1, #3523	; 0xdc3
 8004a96:	487e      	ldr	r0, [pc, #504]	; (8004c90 <RCCEx_PLL2_Config+0x238>)
 8004a98:	f7fc f923 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <RCCEx_PLL2_Config+0x54>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b80      	cmp	r3, #128	; 0x80
 8004aaa:	d904      	bls.n	8004ab6 <RCCEx_PLL2_Config+0x5e>
 8004aac:	f640 51c4 	movw	r1, #3524	; 0xdc4
 8004ab0:	4877      	ldr	r0, [pc, #476]	; (8004c90 <RCCEx_PLL2_Config+0x238>)
 8004ab2:	f7fc f916 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <RCCEx_PLL2_Config+0x6e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	2b80      	cmp	r3, #128	; 0x80
 8004ac4:	d904      	bls.n	8004ad0 <RCCEx_PLL2_Config+0x78>
 8004ac6:	f640 51c5 	movw	r1, #3525	; 0xdc5
 8004aca:	4871      	ldr	r0, [pc, #452]	; (8004c90 <RCCEx_PLL2_Config+0x238>)
 8004acc:	f7fc f909 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <RCCEx_PLL2_Config+0x88>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	2b80      	cmp	r3, #128	; 0x80
 8004ade:	d904      	bls.n	8004aea <RCCEx_PLL2_Config+0x92>
 8004ae0:	f640 51c6 	movw	r1, #3526	; 0xdc6
 8004ae4:	486a      	ldr	r0, [pc, #424]	; (8004c90 <RCCEx_PLL2_Config+0x238>)
 8004ae6:	f7fc f8fc 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d010      	beq.n	8004b14 <RCCEx_PLL2_Config+0xbc>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	2b40      	cmp	r3, #64	; 0x40
 8004af8:	d00c      	beq.n	8004b14 <RCCEx_PLL2_Config+0xbc>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	2b80      	cmp	r3, #128	; 0x80
 8004b00:	d008      	beq.n	8004b14 <RCCEx_PLL2_Config+0xbc>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	2bc0      	cmp	r3, #192	; 0xc0
 8004b08:	d004      	beq.n	8004b14 <RCCEx_PLL2_Config+0xbc>
 8004b0a:	f640 51c7 	movw	r1, #3527	; 0xdc7
 8004b0e:	4860      	ldr	r0, [pc, #384]	; (8004c90 <RCCEx_PLL2_Config+0x238>)
 8004b10:	f7fc f8e7 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <RCCEx_PLL2_Config+0xd6>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d004      	beq.n	8004b2e <RCCEx_PLL2_Config+0xd6>
 8004b24:	f640 51c8 	movw	r1, #3528	; 0xdc8
 8004b28:	4859      	ldr	r0, [pc, #356]	; (8004c90 <RCCEx_PLL2_Config+0x238>)
 8004b2a:	f7fc f8da 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b36:	d304      	bcc.n	8004b42 <RCCEx_PLL2_Config+0xea>
 8004b38:	f640 51c9 	movw	r1, #3529	; 0xdc9
 8004b3c:	4854      	ldr	r0, [pc, #336]	; (8004c90 <RCCEx_PLL2_Config+0x238>)
 8004b3e:	f7fc f8d0 	bl	8000ce2 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b42:	4b54      	ldr	r3, [pc, #336]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d101      	bne.n	8004b52 <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e099      	b.n	8004c86 <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b52:	4b50      	ldr	r3, [pc, #320]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a4f      	ldr	r2, [pc, #316]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004b58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5e:	f7fc fc4f 	bl	8001400 <HAL_GetTick>
 8004b62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b64:	e008      	b.n	8004b78 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b66:	f7fc fc4b 	bl	8001400 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e086      	b.n	8004c86 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b78:	4b46      	ldr	r3, [pc, #280]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b84:	4b43      	ldr	r3, [pc, #268]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	031b      	lsls	r3, r3, #12
 8004b92:	4940      	ldr	r1, [pc, #256]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	628b      	str	r3, [r1, #40]	; 0x28
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	025b      	lsls	r3, r3, #9
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	041b      	lsls	r3, r3, #16
 8004bb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	061b      	lsls	r3, r3, #24
 8004bc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bc8:	4932      	ldr	r1, [pc, #200]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004bce:	4b31      	ldr	r3, [pc, #196]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	492e      	ldr	r1, [pc, #184]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004be0:	4b2c      	ldr	r3, [pc, #176]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be4:	f023 0220 	bic.w	r2, r3, #32
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	4929      	ldr	r1, [pc, #164]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004bf2:	4b28      	ldr	r3, [pc, #160]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	4a27      	ldr	r2, [pc, #156]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004bf8:	f023 0310 	bic.w	r3, r3, #16
 8004bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004bfe:	4b25      	ldr	r3, [pc, #148]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c02:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <RCCEx_PLL2_Config+0x240>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	69d2      	ldr	r2, [r2, #28]
 8004c0a:	00d2      	lsls	r2, r2, #3
 8004c0c:	4921      	ldr	r1, [pc, #132]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c12:	4b20      	ldr	r3, [pc, #128]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c16:	4a1f      	ldr	r2, [pc, #124]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004c18:	f043 0310 	orr.w	r3, r3, #16
 8004c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c24:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	4a1a      	ldr	r2, [pc, #104]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004c2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c30:	e00f      	b.n	8004c52 <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d106      	bne.n	8004c46 <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c38:	4b16      	ldr	r3, [pc, #88]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c44:	e005      	b.n	8004c52 <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c46:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	4a12      	ldr	r2, [pc, #72]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004c4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c52:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a0f      	ldr	r2, [pc, #60]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004c58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5e:	f7fc fbcf 	bl	8001400 <HAL_GetTick>
 8004c62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c64:	e008      	b.n	8004c78 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c66:	f7fc fbcb 	bl	8001400 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e006      	b.n	8004c86 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c78:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <RCCEx_PLL2_Config+0x23c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	08009164 	.word	0x08009164
 8004c94:	58024400 	.word	0x58024400
 8004c98:	ffff0007 	.word	0xffff0007

08004c9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <RCCEx_PLL3_Config+0x1e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b3f      	cmp	r3, #63	; 0x3f
 8004cb8:	d904      	bls.n	8004cc4 <RCCEx_PLL3_Config+0x28>
 8004cba:	f640 612a 	movw	r1, #3626	; 0xe2a
 8004cbe:	4887      	ldr	r0, [pc, #540]	; (8004edc <RCCEx_PLL3_Config+0x240>)
 8004cc0:	f7fc f80f 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d904      	bls.n	8004cd6 <RCCEx_PLL3_Config+0x3a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd4:	d904      	bls.n	8004ce0 <RCCEx_PLL3_Config+0x44>
 8004cd6:	f640 612b 	movw	r1, #3627	; 0xe2b
 8004cda:	4880      	ldr	r0, [pc, #512]	; (8004edc <RCCEx_PLL3_Config+0x240>)
 8004cdc:	f7fc f801 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <RCCEx_PLL3_Config+0x54>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b80      	cmp	r3, #128	; 0x80
 8004cee:	d904      	bls.n	8004cfa <RCCEx_PLL3_Config+0x5e>
 8004cf0:	f640 612c 	movw	r1, #3628	; 0xe2c
 8004cf4:	4879      	ldr	r0, [pc, #484]	; (8004edc <RCCEx_PLL3_Config+0x240>)
 8004cf6:	f7fb fff4 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <RCCEx_PLL3_Config+0x6e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b80      	cmp	r3, #128	; 0x80
 8004d08:	d904      	bls.n	8004d14 <RCCEx_PLL3_Config+0x78>
 8004d0a:	f640 612d 	movw	r1, #3629	; 0xe2d
 8004d0e:	4873      	ldr	r0, [pc, #460]	; (8004edc <RCCEx_PLL3_Config+0x240>)
 8004d10:	f7fb ffe7 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <RCCEx_PLL3_Config+0x88>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2b80      	cmp	r3, #128	; 0x80
 8004d22:	d904      	bls.n	8004d2e <RCCEx_PLL3_Config+0x92>
 8004d24:	f640 612e 	movw	r1, #3630	; 0xe2e
 8004d28:	486c      	ldr	r0, [pc, #432]	; (8004edc <RCCEx_PLL3_Config+0x240>)
 8004d2a:	f7fb ffda 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d013      	beq.n	8004d5e <RCCEx_PLL3_Config+0xc2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3e:	d00e      	beq.n	8004d5e <RCCEx_PLL3_Config+0xc2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d48:	d009      	beq.n	8004d5e <RCCEx_PLL3_Config+0xc2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d52:	d004      	beq.n	8004d5e <RCCEx_PLL3_Config+0xc2>
 8004d54:	f640 612f 	movw	r1, #3631	; 0xe2f
 8004d58:	4860      	ldr	r0, [pc, #384]	; (8004edc <RCCEx_PLL3_Config+0x240>)
 8004d5a:	f7fb ffc2 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <RCCEx_PLL3_Config+0xde>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d6e:	d004      	beq.n	8004d7a <RCCEx_PLL3_Config+0xde>
 8004d70:	f44f 6163 	mov.w	r1, #3632	; 0xe30
 8004d74:	4859      	ldr	r0, [pc, #356]	; (8004edc <RCCEx_PLL3_Config+0x240>)
 8004d76:	f7fb ffb4 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d82:	d304      	bcc.n	8004d8e <RCCEx_PLL3_Config+0xf2>
 8004d84:	f640 6131 	movw	r1, #3633	; 0xe31
 8004d88:	4854      	ldr	r0, [pc, #336]	; (8004edc <RCCEx_PLL3_Config+0x240>)
 8004d8a:	f7fb ffaa 	bl	8000ce2 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d8e:	4b54      	ldr	r3, [pc, #336]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d101      	bne.n	8004d9e <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e099      	b.n	8004ed2 <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d9e:	4b50      	ldr	r3, [pc, #320]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a4f      	ldr	r2, [pc, #316]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004daa:	f7fc fb29 	bl	8001400 <HAL_GetTick>
 8004dae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004db0:	e008      	b.n	8004dc4 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004db2:	f7fc fb25 	bl	8001400 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e086      	b.n	8004ed2 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dc4:	4b46      	ldr	r3, [pc, #280]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f0      	bne.n	8004db2 <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004dd0:	4b43      	ldr	r3, [pc, #268]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	051b      	lsls	r3, r3, #20
 8004dde:	4940      	ldr	r1, [pc, #256]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	628b      	str	r3, [r1, #40]	; 0x28
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	025b      	lsls	r3, r3, #9
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	041b      	lsls	r3, r3, #16
 8004e02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	061b      	lsls	r3, r3, #24
 8004e10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e14:	4932      	ldr	r1, [pc, #200]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e1a:	4b31      	ldr	r3, [pc, #196]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	492e      	ldr	r1, [pc, #184]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e2c:	4b2c      	ldr	r3, [pc, #176]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	4929      	ldr	r1, [pc, #164]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e3e:	4b28      	ldr	r3, [pc, #160]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	4a27      	ldr	r2, [pc, #156]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e4a:	4b25      	ldr	r3, [pc, #148]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e4e:	4b25      	ldr	r3, [pc, #148]	; (8004ee4 <RCCEx_PLL3_Config+0x248>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	69d2      	ldr	r2, [r2, #28]
 8004e56:	00d2      	lsls	r2, r2, #3
 8004e58:	4921      	ldr	r1, [pc, #132]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e5e:	4b20      	ldr	r3, [pc, #128]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	4a1f      	ldr	r2, [pc, #124]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d106      	bne.n	8004e7e <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e70:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	4a1a      	ldr	r2, [pc, #104]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e7c:	e00f      	b.n	8004e9e <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d106      	bne.n	8004e92 <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e84:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e90:	e005      	b.n	8004e9e <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e92:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004e98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e9e:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a0f      	ldr	r2, [pc, #60]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eaa:	f7fc faa9 	bl	8001400 <HAL_GetTick>
 8004eae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004eb0:	e008      	b.n	8004ec4 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004eb2:	f7fc faa5 	bl	8001400 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e006      	b.n	8004ed2 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ec4:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <RCCEx_PLL3_Config+0x244>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0f0      	beq.n	8004eb2 <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	08009164 	.word	0x08009164
 8004ee0:	58024400 	.word	0x58024400
 8004ee4:	ffff0007 	.word	0xffff0007

08004ee8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e292      	b.n	8005424 <HAL_SPI_Init+0x53c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a97      	ldr	r2, [pc, #604]	; (8005160 <HAL_SPI_Init+0x278>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d01c      	beq.n	8004f42 <HAL_SPI_Init+0x5a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a95      	ldr	r2, [pc, #596]	; (8005164 <HAL_SPI_Init+0x27c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d017      	beq.n	8004f42 <HAL_SPI_Init+0x5a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a94      	ldr	r2, [pc, #592]	; (8005168 <HAL_SPI_Init+0x280>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d012      	beq.n	8004f42 <HAL_SPI_Init+0x5a>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a92      	ldr	r2, [pc, #584]	; (800516c <HAL_SPI_Init+0x284>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00d      	beq.n	8004f42 <HAL_SPI_Init+0x5a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a91      	ldr	r2, [pc, #580]	; (8005170 <HAL_SPI_Init+0x288>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d008      	beq.n	8004f42 <HAL_SPI_Init+0x5a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a8f      	ldr	r2, [pc, #572]	; (8005174 <HAL_SPI_Init+0x28c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d003      	beq.n	8004f42 <HAL_SPI_Init+0x5a>
 8004f3a:	21fb      	movs	r1, #251	; 0xfb
 8004f3c:	488e      	ldr	r0, [pc, #568]	; (8005178 <HAL_SPI_Init+0x290>)
 8004f3e:	f7fb fed0 	bl	8000ce2 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <HAL_SPI_Init+0x74>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f52:	d003      	beq.n	8004f5c <HAL_SPI_Init+0x74>
 8004f54:	21fc      	movs	r1, #252	; 0xfc
 8004f56:	4888      	ldr	r0, [pc, #544]	; (8005178 <HAL_SPI_Init+0x290>)
 8004f58:	f7fb fec3 	bl	8000ce2 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d012      	beq.n	8004f8a <HAL_SPI_Init+0xa2>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f6c:	d00d      	beq.n	8004f8a <HAL_SPI_Init+0xa2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004f76:	d008      	beq.n	8004f8a <HAL_SPI_Init+0xa2>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f80:	d003      	beq.n	8004f8a <HAL_SPI_Init+0xa2>
 8004f82:	21fd      	movs	r1, #253	; 0xfd
 8004f84:	487c      	ldr	r0, [pc, #496]	; (8005178 <HAL_SPI_Init+0x290>)
 8004f86:	f7fb feac 	bl	8000ce2 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	2b1f      	cmp	r3, #31
 8004f90:	d077      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b1e      	cmp	r3, #30
 8004f98:	d073      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	2b1d      	cmp	r3, #29
 8004fa0:	d06f      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	2b1c      	cmp	r3, #28
 8004fa8:	d06b      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b1b      	cmp	r3, #27
 8004fb0:	d067      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	2b1a      	cmp	r3, #26
 8004fb8:	d063      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	2b19      	cmp	r3, #25
 8004fc0:	d05f      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	2b18      	cmp	r3, #24
 8004fc8:	d05b      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	2b17      	cmp	r3, #23
 8004fd0:	d057      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b16      	cmp	r3, #22
 8004fd8:	d053      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	2b15      	cmp	r3, #21
 8004fe0:	d04f      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	2b14      	cmp	r3, #20
 8004fe8:	d04b      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	2b13      	cmp	r3, #19
 8004ff0:	d047      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	2b15      	cmp	r3, #21
 8004ff8:	d043      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	2b12      	cmp	r3, #18
 8005000:	d03f      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	2b11      	cmp	r3, #17
 8005008:	d03b      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2b10      	cmp	r3, #16
 8005010:	d037      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	2b0f      	cmp	r3, #15
 8005018:	d033      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	2b0e      	cmp	r3, #14
 8005020:	d02f      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	2b0d      	cmp	r3, #13
 8005028:	d02b      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	2b0c      	cmp	r3, #12
 8005030:	d027      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	2b0b      	cmp	r3, #11
 8005038:	d023      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	2b0a      	cmp	r3, #10
 8005040:	d01f      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	2b09      	cmp	r3, #9
 8005048:	d01b      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	2b08      	cmp	r3, #8
 8005050:	d017      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	2b07      	cmp	r3, #7
 8005058:	d013      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	2b06      	cmp	r3, #6
 8005060:	d00f      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	2b05      	cmp	r3, #5
 8005068:	d00b      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	2b04      	cmp	r3, #4
 8005070:	d007      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2b03      	cmp	r3, #3
 8005078:	d003      	beq.n	8005082 <HAL_SPI_Init+0x19a>
 800507a:	21fe      	movs	r1, #254	; 0xfe
 800507c:	483e      	ldr	r0, [pc, #248]	; (8005178 <HAL_SPI_Init+0x290>)
 800507e:	f7fb fe30 	bl	8000ce2 <assert_failed>
  assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005086:	2b00      	cmp	r3, #0
 8005088:	d047      	beq.n	800511a <HAL_SPI_Init+0x232>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508e:	2b20      	cmp	r3, #32
 8005090:	d043      	beq.n	800511a <HAL_SPI_Init+0x232>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	2b40      	cmp	r3, #64	; 0x40
 8005098:	d03f      	beq.n	800511a <HAL_SPI_Init+0x232>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509e:	2b60      	cmp	r3, #96	; 0x60
 80050a0:	d03b      	beq.n	800511a <HAL_SPI_Init+0x232>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a6:	2b80      	cmp	r3, #128	; 0x80
 80050a8:	d037      	beq.n	800511a <HAL_SPI_Init+0x232>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ae:	2ba0      	cmp	r3, #160	; 0xa0
 80050b0:	d033      	beq.n	800511a <HAL_SPI_Init+0x232>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b6:	2bc0      	cmp	r3, #192	; 0xc0
 80050b8:	d02f      	beq.n	800511a <HAL_SPI_Init+0x232>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050be:	2be0      	cmp	r3, #224	; 0xe0
 80050c0:	d02b      	beq.n	800511a <HAL_SPI_Init+0x232>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ca:	d026      	beq.n	800511a <HAL_SPI_Init+0x232>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80050d4:	d021      	beq.n	800511a <HAL_SPI_Init+0x232>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050da:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80050de:	d01c      	beq.n	800511a <HAL_SPI_Init+0x232>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e4:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 80050e8:	d017      	beq.n	800511a <HAL_SPI_Init+0x232>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80050f2:	d012      	beq.n	800511a <HAL_SPI_Init+0x232>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f8:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 80050fc:	d00d      	beq.n	800511a <HAL_SPI_Init+0x232>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005102:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8005106:	d008      	beq.n	800511a <HAL_SPI_Init+0x232>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8005110:	d003      	beq.n	800511a <HAL_SPI_Init+0x232>
 8005112:	21ff      	movs	r1, #255	; 0xff
 8005114:	4818      	ldr	r0, [pc, #96]	; (8005178 <HAL_SPI_Init+0x290>)
 8005116:	f7fb fde4 	bl	8000ce2 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005122:	d00d      	beq.n	8005140 <HAL_SPI_Init+0x258>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d009      	beq.n	8005140 <HAL_SPI_Init+0x258>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005134:	d004      	beq.n	8005140 <HAL_SPI_Init+0x258>
 8005136:	f44f 7180 	mov.w	r1, #256	; 0x100
 800513a:	480f      	ldr	r0, [pc, #60]	; (8005178 <HAL_SPI_Init+0x290>)
 800513c:	f7fb fdd1 	bl	8000ce2 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005148:	d018      	beq.n	800517c <HAL_SPI_Init+0x294>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514e:	2b00      	cmp	r3, #0
 8005150:	d014      	beq.n	800517c <HAL_SPI_Init+0x294>
 8005152:	f240 1101 	movw	r1, #257	; 0x101
 8005156:	4808      	ldr	r0, [pc, #32]	; (8005178 <HAL_SPI_Init+0x290>)
 8005158:	f7fb fdc3 	bl	8000ce2 <assert_failed>
 800515c:	e00e      	b.n	800517c <HAL_SPI_Init+0x294>
 800515e:	bf00      	nop
 8005160:	40013000 	.word	0x40013000
 8005164:	40003800 	.word	0x40003800
 8005168:	40003c00 	.word	0x40003c00
 800516c:	40013400 	.word	0x40013400
 8005170:	40015000 	.word	0x40015000
 8005174:	58001400 	.word	0x58001400
 8005178:	080091a0 	.word	0x080091a0
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d027      	beq.n	80051d4 <HAL_SPI_Init+0x2ec>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800518c:	d022      	beq.n	80051d4 <HAL_SPI_Init+0x2ec>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005196:	d01d      	beq.n	80051d4 <HAL_SPI_Init+0x2ec>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051a0:	d018      	beq.n	80051d4 <HAL_SPI_Init+0x2ec>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051aa:	d013      	beq.n	80051d4 <HAL_SPI_Init+0x2ec>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051b4:	d00e      	beq.n	80051d4 <HAL_SPI_Init+0x2ec>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80051be:	d009      	beq.n	80051d4 <HAL_SPI_Init+0x2ec>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	f1b3 4fe0 	cmp.w	r3, #1879048192	; 0x70000000
 80051c8:	d004      	beq.n	80051d4 <HAL_SPI_Init+0x2ec>
 80051ca:	f44f 7181 	mov.w	r1, #258	; 0x102
 80051ce:	4897      	ldr	r0, [pc, #604]	; (800542c <HAL_SPI_Init+0x544>)
 80051d0:	f7fb fd87 	bl	8000ce2 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d009      	beq.n	80051f0 <HAL_SPI_Init+0x308>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051e4:	d004      	beq.n	80051f0 <HAL_SPI_Init+0x308>
 80051e6:	f240 1103 	movw	r1, #259	; 0x103
 80051ea:	4890      	ldr	r0, [pc, #576]	; (800542c <HAL_SPI_Init+0x544>)
 80051ec:	f7fb fd79 	bl	8000ce2 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d009      	beq.n	800520c <HAL_SPI_Init+0x324>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005200:	d004      	beq.n	800520c <HAL_SPI_Init+0x324>
 8005202:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005206:	4889      	ldr	r0, [pc, #548]	; (800542c <HAL_SPI_Init+0x544>)
 8005208:	f7fb fd6b 	bl	8000ce2 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	2b00      	cmp	r3, #0
 8005212:	d11b      	bne.n	800524c <HAL_SPI_Init+0x364>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d009      	beq.n	8005230 <HAL_SPI_Init+0x348>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005224:	d004      	beq.n	8005230 <HAL_SPI_Init+0x348>
 8005226:	f240 1107 	movw	r1, #263	; 0x107
 800522a:	4880      	ldr	r0, [pc, #512]	; (800542c <HAL_SPI_Init+0x544>)
 800522c:	f7fb fd59 	bl	8000ce2 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d009      	beq.n	800524c <HAL_SPI_Init+0x364>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005240:	d004      	beq.n	800524c <HAL_SPI_Init+0x364>
 8005242:	f44f 7184 	mov.w	r1, #264	; 0x108
 8005246:	4879      	ldr	r0, [pc, #484]	; (800542c <HAL_SPI_Init+0x544>)
 8005248:	f7fb fd4b 	bl	8000ce2 <assert_failed>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a76      	ldr	r2, [pc, #472]	; (8005430 <HAL_SPI_Init+0x548>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00f      	beq.n	800527c <HAL_SPI_Init+0x394>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a74      	ldr	r2, [pc, #464]	; (8005434 <HAL_SPI_Init+0x54c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00a      	beq.n	800527c <HAL_SPI_Init+0x394>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a73      	ldr	r2, [pc, #460]	; (8005438 <HAL_SPI_Init+0x550>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d005      	beq.n	800527c <HAL_SPI_Init+0x394>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	2b0f      	cmp	r3, #15
 8005276:	d901      	bls.n	800527c <HAL_SPI_Init+0x394>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e0d3      	b.n	8005424 <HAL_SPI_Init+0x53c>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fbb1 	bl	80059e4 <SPI_GetPacketSize>
 8005282:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a69      	ldr	r2, [pc, #420]	; (8005430 <HAL_SPI_Init+0x548>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00c      	beq.n	80052a8 <HAL_SPI_Init+0x3c0>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a68      	ldr	r2, [pc, #416]	; (8005434 <HAL_SPI_Init+0x54c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d007      	beq.n	80052a8 <HAL_SPI_Init+0x3c0>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a66      	ldr	r2, [pc, #408]	; (8005438 <HAL_SPI_Init+0x550>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d002      	beq.n	80052a8 <HAL_SPI_Init+0x3c0>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d811      	bhi.n	80052cc <HAL_SPI_Init+0x3e4>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80052ac:	4a60      	ldr	r2, [pc, #384]	; (8005430 <HAL_SPI_Init+0x548>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d009      	beq.n	80052c6 <HAL_SPI_Init+0x3de>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a5f      	ldr	r2, [pc, #380]	; (8005434 <HAL_SPI_Init+0x54c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d004      	beq.n	80052c6 <HAL_SPI_Init+0x3de>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a5d      	ldr	r2, [pc, #372]	; (8005438 <HAL_SPI_Init+0x550>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d104      	bne.n	80052d0 <HAL_SPI_Init+0x3e8>
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d901      	bls.n	80052d0 <HAL_SPI_Init+0x3e8>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0a9      	b.n	8005424 <HAL_SPI_Init+0x53c>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <HAL_SPI_Init+0x402>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7fb fd5f 	bl	8000da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0201 	bic.w	r2, r2, #1
 8005300:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800530a:	d119      	bne.n	8005340 <HAL_SPI_Init+0x458>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005314:	d103      	bne.n	800531e <HAL_SPI_Init+0x436>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	2b00      	cmp	r3, #0
 800531c:	d008      	beq.n	8005330 <HAL_SPI_Init+0x448>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10c      	bne.n	8005340 <HAL_SPI_Init+0x458>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800532e:	d107      	bne.n	8005340 <HAL_SPI_Init+0x458>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800533e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	431a      	orrs	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005352:	ea42 0103 	orr.w	r1, r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a0:	ea42 0103 	orr.w	r1, r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d113      	bne.n	80053e0 <HAL_SPI_Init+0x4f8>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ca:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053de:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <HAL_SPI_Init+0x52a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	080091a0 	.word	0x080091a0
 8005430:	40013000 	.word	0x40013000
 8005434:	40003800 	.word	0x40003800
 8005438:	40003c00 	.word	0x40003c00

0800543c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	; 0x28
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	4613      	mov	r3, r2
 800544a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3320      	adds	r3, #32
 8005452:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00e      	beq.n	800547e <HAL_SPI_Transmit+0x42>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005468:	d009      	beq.n	800547e <HAL_SPI_Transmit+0x42>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005472:	d004      	beq.n	800547e <HAL_SPI_Transmit+0x42>
 8005474:	f240 311e 	movw	r1, #798	; 0x31e
 8005478:	4899      	ldr	r0, [pc, #612]	; (80056e0 <HAL_SPI_Transmit+0x2a4>)
 800547a:	f7fb fc32 	bl	8000ce2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_SPI_Transmit+0x50>
 8005488:	2302      	movs	r3, #2
 800548a:	e1d8      	b.n	800583e <HAL_SPI_Transmit+0x402>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005494:	f7fb ffb4 	bl	8001400 <HAL_GetTick>
 8005498:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d007      	beq.n	80054b6 <HAL_SPI_Transmit+0x7a>
  {
    errorcode = HAL_BUSY;
 80054a6:	2302      	movs	r3, #2
 80054a8:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80054b2:	7efb      	ldrb	r3, [r7, #27]
 80054b4:	e1c3      	b.n	800583e <HAL_SPI_Transmit+0x402>
  }

  if ((pData == NULL) || (Size == 0UL))
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_SPI_Transmit+0x86>
 80054bc:	88fb      	ldrh	r3, [r7, #6]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d107      	bne.n	80054d2 <HAL_SPI_Transmit+0x96>
  {
    errorcode = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80054ce:	7efb      	ldrb	r3, [r7, #27]
 80054d0:	e1b5      	b.n	800583e <HAL_SPI_Transmit+0x402>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2203      	movs	r2, #3
 80054d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	88fa      	ldrh	r2, [r7, #6]
 80054ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	88fa      	ldrh	r2, [r7, #6]
 80054f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005522:	d107      	bne.n	8005534 <HAL_SPI_Transmit+0xf8>
  {
    SPI_1LINE_TX(hspi);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005532:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	4b6a      	ldr	r3, [pc, #424]	; (80056e4 <HAL_SPI_Transmit+0x2a8>)
 800553c:	4013      	ands	r3, r2
 800553e:	88f9      	ldrh	r1, [r7, #6]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	6812      	ldr	r2, [r2, #0]
 8005544:	430b      	orrs	r3, r1
 8005546:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005560:	d107      	bne.n	8005572 <HAL_SPI_Transmit+0x136>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005570:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	2b0f      	cmp	r3, #15
 8005578:	d947      	bls.n	800560a <HAL_SPI_Transmit+0x1ce>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800557a:	e03f      	b.n	80055fc <HAL_SPI_Transmit+0x1c0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b02      	cmp	r3, #2
 8005588:	d114      	bne.n	80055b4 <HAL_SPI_Transmit+0x178>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6812      	ldr	r2, [r2, #0]
 8005594:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559a:	1d1a      	adds	r2, r3, #4
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80055b2:	e023      	b.n	80055fc <HAL_SPI_Transmit+0x1c0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055b4:	f7fb ff24 	bl	8001400 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d803      	bhi.n	80055cc <HAL_SPI_Transmit+0x190>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ca:	d102      	bne.n	80055d2 <HAL_SPI_Transmit+0x196>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d114      	bne.n	80055fc <HAL_SPI_Transmit+0x1c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 f938 	bl	8005848 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e120      	b.n	800583e <HAL_SPI_Transmit+0x402>
    while (hspi->TxXferCount > 0UL)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1b9      	bne.n	800557c <HAL_SPI_Transmit+0x140>
 8005608:	e0f3      	b.n	80057f2 <HAL_SPI_Transmit+0x3b6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	2b07      	cmp	r3, #7
 8005610:	f240 80e8 	bls.w	80057e4 <HAL_SPI_Transmit+0x3a8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005614:	e05d      	b.n	80056d2 <HAL_SPI_Transmit+0x296>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b02      	cmp	r3, #2
 8005622:	d132      	bne.n	800568a <HAL_SPI_Transmit+0x24e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b01      	cmp	r3, #1
 800562e:	d918      	bls.n	8005662 <HAL_SPI_Transmit+0x226>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d014      	beq.n	8005662 <HAL_SPI_Transmit+0x226>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6812      	ldr	r2, [r2, #0]
 8005642:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005648:	1d1a      	adds	r2, r3, #4
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005654:	b29b      	uxth	r3, r3
 8005656:	3b02      	subs	r3, #2
 8005658:	b29a      	uxth	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005660:	e037      	b.n	80056d2 <HAL_SPI_Transmit+0x296>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005666:	881a      	ldrh	r2, [r3, #0]
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005670:	1c9a      	adds	r2, r3, #2
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005688:	e023      	b.n	80056d2 <HAL_SPI_Transmit+0x296>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800568a:	f7fb feb9 	bl	8001400 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d803      	bhi.n	80056a2 <HAL_SPI_Transmit+0x266>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056a0:	d102      	bne.n	80056a8 <HAL_SPI_Transmit+0x26c>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d114      	bne.n	80056d2 <HAL_SPI_Transmit+0x296>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f8cd 	bl	8005848 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e0b5      	b.n	800583e <HAL_SPI_Transmit+0x402>
    while (hspi->TxXferCount > 0UL)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d19b      	bne.n	8005616 <HAL_SPI_Transmit+0x1da>
 80056de:	e088      	b.n	80057f2 <HAL_SPI_Transmit+0x3b6>
 80056e0:	080091a0 	.word	0x080091a0
 80056e4:	ffff0000 	.word	0xffff0000
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d152      	bne.n	800579c <HAL_SPI_Transmit+0x360>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d918      	bls.n	8005734 <HAL_SPI_Transmit+0x2f8>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005706:	2b40      	cmp	r3, #64	; 0x40
 8005708:	d914      	bls.n	8005734 <HAL_SPI_Transmit+0x2f8>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571a:	1d1a      	adds	r2, r3, #4
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b04      	subs	r3, #4
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005732:	e057      	b.n	80057e4 <HAL_SPI_Transmit+0x3a8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b01      	cmp	r3, #1
 800573e:	d917      	bls.n	8005770 <HAL_SPI_Transmit+0x334>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d013      	beq.n	8005770 <HAL_SPI_Transmit+0x334>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800574c:	881a      	ldrh	r2, [r3, #0]
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005756:	1c9a      	adds	r2, r3, #2
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b02      	subs	r3, #2
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800576e:	e039      	b.n	80057e4 <HAL_SPI_Transmit+0x3a8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3320      	adds	r3, #32
 800577a:	7812      	ldrb	r2, [r2, #0]
 800577c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800579a:	e023      	b.n	80057e4 <HAL_SPI_Transmit+0x3a8>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800579c:	f7fb fe30 	bl	8001400 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d803      	bhi.n	80057b4 <HAL_SPI_Transmit+0x378>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057b2:	d102      	bne.n	80057ba <HAL_SPI_Transmit+0x37e>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d114      	bne.n	80057e4 <HAL_SPI_Transmit+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 f844 	bl	8005848 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e02c      	b.n	800583e <HAL_SPI_Transmit+0x402>
    while (hspi->TxXferCount > 0UL)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f47f af7b 	bne.w	80056e8 <HAL_SPI_Transmit+0x2ac>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2200      	movs	r2, #0
 80057fa:	2108      	movs	r1, #8
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f8c3 	bl	8005988 <SPI_WaitOnFlagUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d007      	beq.n	8005818 <HAL_SPI_Transmit+0x3dc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800580e:	f043 0220 	orr.w	r2, r3, #32
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f815 	bl	8005848 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <HAL_SPI_Transmit+0x400>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <HAL_SPI_Transmit+0x402>
  }
  return errorcode;
 800583c:	7efb      	ldrb	r3, [r7, #27]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3720      	adds	r7, #32
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop

08005848 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0208 	orr.w	r2, r2, #8
 8005866:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0210 	orr.w	r2, r2, #16
 8005876:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0201 	bic.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6919      	ldr	r1, [r3, #16]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	4b3c      	ldr	r3, [pc, #240]	; (8005984 <SPI_CloseTransfer+0x13c>)
 8005894:	400b      	ands	r3, r1
 8005896:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80058a6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d014      	beq.n	80058de <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00f      	beq.n	80058de <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699a      	ldr	r2, [r3, #24]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0220 	orr.w	r2, r2, #32
 80058dc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d014      	beq.n	8005914 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00f      	beq.n	8005914 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058fa:	f043 0204 	orr.w	r2, r3, #4
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005912:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00f      	beq.n	800593e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005924:	f043 0201 	orr.w	r2, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	699a      	ldr	r2, [r3, #24]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800593c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00f      	beq.n	8005968 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800594e:	f043 0208 	orr.w	r2, r3, #8
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005966:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005978:	bf00      	nop
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	fffffc90 	.word	0xfffffc90

08005988 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	603b      	str	r3, [r7, #0]
 8005994:	4613      	mov	r3, r2
 8005996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005998:	e010      	b.n	80059bc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800599a:	f7fb fd31 	bl	8001400 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d803      	bhi.n	80059b2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059b0:	d102      	bne.n	80059b8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e00f      	b.n	80059dc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695a      	ldr	r2, [r3, #20]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	4013      	ands	r3, r2
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	bf0c      	ite	eq
 80059cc:	2301      	moveq	r3, #1
 80059ce:	2300      	movne	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	461a      	mov	r2, r3
 80059d4:	79fb      	ldrb	r3, [r7, #7]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d0df      	beq.n	800599a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f0:	095b      	lsrs	r3, r3, #5
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	3301      	adds	r3, #1
 80059fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	3307      	adds	r3, #7
 8005a02:	08db      	lsrs	r3, r3, #3
 8005a04:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <_ZSt4ceilf>:
  { return __builtin_ceilf(__x); }
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	ed87 0a01 	vstr	s0, [r7, #4]
 8005a24:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a28:	fefa 7a67 	vrintp.f32	s15, s15
 8005a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	ed87 0a01 	vstr	s0, [r7, #4]
 8005a44:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a48:	fefb 7a67 	vrintm.f32	s15, s15
 8005a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
	...

08005a5c <_ZN6CanvasC1ER7Displaybb>:
#include <math.h>

#define ABS(v) ((v >= 0) ? v : -v)
#define PI 3.14159265359

Canvas::Canvas(Display &display, bool transparency, bool anti_aliasing)
 8005a5c:	b590      	push	{r4, r7, lr}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	4611      	mov	r1, r2
 8005a68:	461a      	mov	r2, r3
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	71fb      	strb	r3, [r7, #7]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	71bb      	strb	r3, [r7, #6]
 8005a72:	4a64      	ldr	r2, [pc, #400]	; (8005c04 <_ZN6CanvasC1ER7Displaybb+0x1a8>)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	601a      	str	r2, [r3, #0]
{
	this->display = &display;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	605a      	str	r2, [r3, #4]
	this->anti_aliasing = anti_aliasing;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	79ba      	ldrb	r2, [r7, #6]
 8005a82:	721a      	strb	r2, [r3, #8]
	this->transparency = transparency;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	79fa      	ldrb	r2, [r7, #7]
 8005a88:	725a      	strb	r2, [r3, #9]

	this->w = display.getWidth();
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3304      	adds	r3, #4
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68b8      	ldr	r0, [r7, #8]
 8005a94:	4798      	blx	r3
 8005a96:	4603      	mov	r3, r0
 8005a98:	461a      	mov	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	619a      	str	r2, [r3, #24]
	this->h = display.getHeight();
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3308      	adds	r3, #8
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68b8      	ldr	r0, [r7, #8]
 8005aa8:	4798      	blx	r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	461a      	mov	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	61da      	str	r2, [r3, #28]

	if(anti_aliasing or transparency)
 8005ab2:	79bb      	ldrb	r3, [r7, #6]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <_ZN6CanvasC1ER7Displaybb+0x64>
 8005ab8:	79fb      	ldrb	r3, [r7, #7]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 809d 	beq.w	8005bfa <_ZN6CanvasC1ER7Displaybb+0x19e>
	{
		this->r_buffer = new float[display.getWidth()*display.getHeight()];
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68b8      	ldr	r0, [r7, #8]
 8005aca:	4798      	blx	r3
 8005acc:	4604      	mov	r4, r0
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68b8      	ldr	r0, [r7, #8]
 8005ad8:	4798      	blx	r3
 8005ada:	4603      	mov	r3, r0
 8005adc:	fb03 f304 	mul.w	r3, r3, r4
 8005ae0:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d201      	bcs.n	8005aec <_ZN6CanvasC1ER7Displaybb+0x90>
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	e001      	b.n	8005af0 <_ZN6CanvasC1ER7Displaybb+0x94>
 8005aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005af0:	4618      	mov	r0, r3
 8005af2:	f002 f99c 	bl	8007e2e <_Znaj>
 8005af6:	4603      	mov	r3, r0
 8005af8:	461a      	mov	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	60da      	str	r2, [r3, #12]
		this->g_buffer = new float[display.getWidth()*display.getHeight()];
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3304      	adds	r3, #4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68b8      	ldr	r0, [r7, #8]
 8005b08:	4798      	blx	r3
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3308      	adds	r3, #8
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68b8      	ldr	r0, [r7, #8]
 8005b16:	4798      	blx	r3
 8005b18:	4603      	mov	r3, r0
 8005b1a:	fb03 f304 	mul.w	r3, r3, r4
 8005b1e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d201      	bcs.n	8005b2a <_ZN6CanvasC1ER7Displaybb+0xce>
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	e001      	b.n	8005b2e <_ZN6CanvasC1ER7Displaybb+0xd2>
 8005b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f002 f97d 	bl	8007e2e <_Znaj>
 8005b34:	4603      	mov	r3, r0
 8005b36:	461a      	mov	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	611a      	str	r2, [r3, #16]
		this->b_buffer = new float[display.getWidth()*display.getHeight()];
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3304      	adds	r3, #4
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68b8      	ldr	r0, [r7, #8]
 8005b46:	4798      	blx	r3
 8005b48:	4604      	mov	r4, r0
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3308      	adds	r3, #8
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68b8      	ldr	r0, [r7, #8]
 8005b54:	4798      	blx	r3
 8005b56:	4603      	mov	r3, r0
 8005b58:	fb03 f304 	mul.w	r3, r3, r4
 8005b5c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d201      	bcs.n	8005b68 <_ZN6CanvasC1ER7Displaybb+0x10c>
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	e001      	b.n	8005b6c <_ZN6CanvasC1ER7Displaybb+0x110>
 8005b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f002 f95e 	bl	8007e2e <_Znaj>
 8005b72:	4603      	mov	r3, r0
 8005b74:	461a      	mov	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	615a      	str	r2, [r3, #20]

		for(int i = 0; i < this->w; i++)
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	da38      	bge.n	8005bfa <_ZN6CanvasC1ER7Displaybb+0x19e>
		{
			for(int j = 0; j < this->h; j++)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	da2d      	bge.n	8005bf2 <_ZN6CanvasC1ER7Displaybb+0x196>
			{
				this->r_buffer[i*this->w + j] = 0;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	6979      	ldr	r1, [r7, #20]
 8005ba0:	fb01 f103 	mul.w	r1, r1, r3
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	440b      	add	r3, r1
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]
				this->g_buffer[i*this->w + j] = 0;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	691a      	ldr	r2, [r3, #16]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	6979      	ldr	r1, [r7, #20]
 8005bbc:	fb01 f103 	mul.w	r1, r1, r3
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	440b      	add	r3, r1
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]
				this->b_buffer[i*this->w + j] = 0;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	695a      	ldr	r2, [r3, #20]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	6979      	ldr	r1, [r7, #20]
 8005bd8:	fb01 f103 	mul.w	r1, r1, r3
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	440b      	add	r3, r1
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
			for(int j = 0; j < this->h; j++)
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	3301      	adds	r3, #1
 8005bee:	613b      	str	r3, [r7, #16]
 8005bf0:	e7cc      	b.n	8005b8c <_ZN6CanvasC1ER7Displaybb+0x130>
		for(int i = 0; i < this->w; i++)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	e7c1      	b.n	8005b7e <_ZN6CanvasC1ER7Displaybb+0x122>
			}
		}
	}
}
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd90      	pop	{r4, r7, pc}
 8005c04:	08009268 	.word	0x08009268

08005c08 <_ZN6CanvasD1Ev>:

Canvas::~Canvas()
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	4a0f      	ldr	r2, [pc, #60]	; (8005c50 <_ZN6CanvasD1Ev+0x48>)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	601a      	str	r2, [r3, #0]
{
	delete this->r_buffer;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <_ZN6CanvasD1Ev+0x1e>
 8005c1e:	2104      	movs	r1, #4
 8005c20:	4618      	mov	r0, r3
 8005c22:	f002 f8f1 	bl	8007e08 <_ZdlPvj>
	delete this->g_buffer;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <_ZN6CanvasD1Ev+0x2e>
 8005c2e:	2104      	movs	r1, #4
 8005c30:	4618      	mov	r0, r3
 8005c32:	f002 f8e9 	bl	8007e08 <_ZdlPvj>
	delete this->b_buffer;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <_ZN6CanvasD1Ev+0x3e>
 8005c3e:	2104      	movs	r1, #4
 8005c40:	4618      	mov	r0, r3
 8005c42:	f002 f8e1 	bl	8007e08 <_ZdlPvj>
}
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	08009268 	.word	0x08009268

08005c54 <_ZN6CanvasD0Ev>:
Canvas::~Canvas()
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
}
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff ffd3 	bl	8005c08 <_ZN6CanvasD1Ev>
 8005c62:	2120      	movs	r1, #32
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f002 f8cf 	bl	8007e08 <_ZdlPvj>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <_ZN6Canvas9drawPixelEff5Color>:

void Canvas::drawPixel(float x, float y, Color color)
{
 8005c74:	b590      	push	{r4, r7, lr}
 8005c76:	b097      	sub	sp, #92	; 0x5c
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005c80:	edc7 0a01 	vstr	s1, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
	if(this->anti_aliasing and this->transparency)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	7a1b      	ldrb	r3, [r3, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 8417 	beq.w	80064be <_ZN6Canvas9drawPixelEff5Color+0x84a>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	7a5b      	ldrb	r3, [r3, #9]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 8412 	beq.w	80064be <_ZN6Canvas9drawPixelEff5Color+0x84a>
	{
		int px = x;
 8005c9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ca2:	ee17 3a90 	vmov	r3, s15
 8005ca6:	657b      	str	r3, [r7, #84]	; 0x54
		int nx = ceil(x);
 8005ca8:	ed97 0a02 	vldr	s0, [r7, #8]
 8005cac:	f7ff feb5 	bl	8005a1a <_ZSt4ceilf>
 8005cb0:	eef0 7a40 	vmov.f32	s15, s0
 8005cb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cb8:	ee17 3a90 	vmov	r3, s15
 8005cbc:	653b      	str	r3, [r7, #80]	; 0x50
		int py = y;
 8005cbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cc6:	ee17 3a90 	vmov	r3, s15
 8005cca:	64fb      	str	r3, [r7, #76]	; 0x4c
		int ny = ceil(y);
 8005ccc:	ed97 0a01 	vldr	s0, [r7, #4]
 8005cd0:	f7ff fea3 	bl	8005a1a <_ZSt4ceilf>
 8005cd4:	eef0 7a40 	vmov.f32	s15, s0
 8005cd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cdc:	ee17 3a90 	vmov	r3, s15
 8005ce0:	64bb      	str	r3, [r7, #72]	; 0x48

		float apx = x-floor(x);
 8005ce2:	ed97 0a02 	vldr	s0, [r7, #8]
 8005ce6:	f7ff fea8 	bl	8005a3a <_ZSt5floorf>
 8005cea:	eeb0 7a40 	vmov.f32	s14, s0
 8005cee:	edd7 7a02 	vldr	s15, [r7, #8]
 8005cf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005cf6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		float anx = ceil(x)-x;
 8005cfa:	ed97 0a02 	vldr	s0, [r7, #8]
 8005cfe:	f7ff fe8c 	bl	8005a1a <_ZSt4ceilf>
 8005d02:	eeb0 7a40 	vmov.f32	s14, s0
 8005d06:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d0e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		float apy = y-floor(y);
 8005d12:	ed97 0a01 	vldr	s0, [r7, #4]
 8005d16:	f7ff fe90 	bl	8005a3a <_ZSt5floorf>
 8005d1a:	eeb0 7a40 	vmov.f32	s14, s0
 8005d1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d26:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		float any = ceil(y)-y;
 8005d2a:	ed97 0a01 	vldr	s0, [r7, #4]
 8005d2e:	f7ff fe74 	bl	8005a1a <_ZSt4ceilf>
 8005d32:	eeb0 7a40 	vmov.f32	s14, s0
 8005d36:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d3e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		this->r_buffer[px*this->w + py] = apx*apy*color.a*color.r - (1-apx*apy*color.a)*this->r_buffer[px*this->w + py];
 8005d42:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005d46:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005d4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d62:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005d66:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005d6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d7c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d8a:	fb01 f103 	mul.w	r1, r1, r3
 8005d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d90:	440b      	add	r3, r1
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	edd3 7a00 	vldr	s15, [r3]
 8005d9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005da8:	fb01 f103 	mul.w	r1, r1, r3
 8005dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dae:	440b      	add	r3, r1
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005db8:	edc3 7a00 	vstr	s15, [r3]
		this->r_buffer[nx*this->w + py] = anx*apy*color.a*color.r - (1-anx*apy*color.a)*this->r_buffer[nx*this->w + py];
 8005dbc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005dc0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8005dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ddc:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005de0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005de4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005df6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e04:	fb01 f103 	mul.w	r1, r1, r3
 8005e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e0a:	440b      	add	r3, r1
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	edd3 7a00 	vldr	s15, [r3]
 8005e14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e22:	fb01 f103 	mul.w	r1, r1, r3
 8005e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e28:	440b      	add	r3, r1
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e32:	edc3 7a00 	vstr	s15, [r3]
		this->r_buffer[px*this->w + ny] = apx*any*color.a*color.r - (1-apx*any*color.a)*this->r_buffer[px*this->w + ny];
 8005e36:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005e3a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e56:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005e5a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005e5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e7e:	fb01 f103 	mul.w	r1, r1, r3
 8005e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e84:	440b      	add	r3, r1
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	edd3 7a00 	vldr	s15, [r3]
 8005e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e9c:	fb01 f103 	mul.w	r1, r1, r3
 8005ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea2:	440b      	add	r3, r1
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eac:	edc3 7a00 	vstr	s15, [r3]
		this->r_buffer[nx*this->w + ny] = anx*any*color.a*color.r - (1-anx*any*color.a)*this->r_buffer[nx*this->w + ny];
 8005eb0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005eb4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ec2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ecc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ed0:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005ed4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005ed8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ef8:	fb01 f103 	mul.w	r1, r1, r3
 8005efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005efe:	440b      	add	r3, r1
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	edd3 7a00 	vldr	s15, [r3]
 8005f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f16:	fb01 f103 	mul.w	r1, r1, r3
 8005f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f1c:	440b      	add	r3, r1
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f26:	edc3 7a00 	vstr	s15, [r3]

		this->g_buffer[px*this->w + py] = apx*apy*color.a*color.g - (1-apx*apy*color.a)*this->g_buffer[px*this->w + py];
 8005f2a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005f2e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005f32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	edd3 7a01 	vldr	s15, [r3, #4]
 8005f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f4a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005f4e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005f52:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	edd3 7a01 	vldr	s15, [r3, #4]
 8005f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f64:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f72:	fb01 f103 	mul.w	r1, r1, r3
 8005f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f78:	440b      	add	r3, r1
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	edd3 7a00 	vldr	s15, [r3]
 8005f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f90:	fb01 f103 	mul.w	r1, r1, r3
 8005f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f96:	440b      	add	r3, r1
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fa0:	edc3 7a00 	vstr	s15, [r3]
		this->g_buffer[nx*this->w + py] = anx*apy*color.a*color.g - (1-anx*apy*color.a)*this->g_buffer[nx*this->w + py];
 8005fa4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005fa8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005fac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8005fb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	edd3 7a03 	vldr	s15, [r3, #12]
 8005fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fc4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005fc8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005fcc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	edd3 7a01 	vldr	s15, [r3, #4]
 8005fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fde:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fec:	fb01 f103 	mul.w	r1, r1, r3
 8005ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff2:	440b      	add	r3, r1
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	edd3 7a00 	vldr	s15, [r3]
 8005ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800600a:	fb01 f103 	mul.w	r1, r1, r3
 800600e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006010:	440b      	add	r3, r1
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800601a:	edc3 7a00 	vstr	s15, [r3]
		this->g_buffer[px*this->w + ny] = apx*any*color.a*color.g - (1-apx*any*color.a)*this->g_buffer[px*this->w + ny];
 800601e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8006022:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006026:	ee27 7a27 	vmul.f32	s14, s14, s15
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006030:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	edd3 7a03 	vldr	s15, [r3, #12]
 800603a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800603e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8006042:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006046:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006058:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006066:	fb01 f103 	mul.w	r1, r1, r3
 800606a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800606c:	440b      	add	r3, r1
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	edd3 7a00 	vldr	s15, [r3]
 8006076:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	691a      	ldr	r2, [r3, #16]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006084:	fb01 f103 	mul.w	r1, r1, r3
 8006088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800608a:	440b      	add	r3, r1
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006094:	edc3 7a00 	vstr	s15, [r3]
		this->g_buffer[nx*this->w + ny] = anx*any*color.a*color.g - (1-anx*any*color.a)*this->g_buffer[nx*this->w + ny];
 8006098:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800609c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80060a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80060aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80060b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060b8:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80060bc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80060c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80060ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	691a      	ldr	r2, [r3, #16]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060e0:	fb01 f103 	mul.w	r1, r1, r3
 80060e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e6:	440b      	add	r3, r1
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	edd3 7a00 	vldr	s15, [r3]
 80060f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060fe:	fb01 f103 	mul.w	r1, r1, r3
 8006102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006104:	440b      	add	r3, r1
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800610e:	edc3 7a00 	vstr	s15, [r3]

		this->b_buffer[px*this->w + py] = apx*apy*color.a*color.b - (1-apx*apy*color.a)*this->b_buffer[px*this->w + py];
 8006112:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8006116:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800611a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	edd3 7a01 	vldr	s15, [r3, #4]
 8006124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	edd3 7a04 	vldr	s15, [r3, #16]
 800612e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006132:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8006136:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800613a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	edd3 7a01 	vldr	s15, [r3, #4]
 8006144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800614c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	695a      	ldr	r2, [r3, #20]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800615a:	fb01 f103 	mul.w	r1, r1, r3
 800615e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006160:	440b      	add	r3, r1
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	edd3 7a00 	vldr	s15, [r3]
 800616a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	695a      	ldr	r2, [r3, #20]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006178:	fb01 f103 	mul.w	r1, r1, r3
 800617c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800617e:	440b      	add	r3, r1
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006188:	edc3 7a00 	vstr	s15, [r3]
		this->b_buffer[nx*this->w + py] = anx*apy*color.a*color.b - (1-anx*apy*color.a)*this->b_buffer[nx*this->w + py];
 800618c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006190:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	edd3 7a01 	vldr	s15, [r3, #4]
 800619e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80061a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061ac:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80061b0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80061b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80061be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061c6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	695a      	ldr	r2, [r3, #20]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061d4:	fb01 f103 	mul.w	r1, r1, r3
 80061d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061da:	440b      	add	r3, r1
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	edd3 7a00 	vldr	s15, [r3]
 80061e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	695a      	ldr	r2, [r3, #20]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061f2:	fb01 f103 	mul.w	r1, r1, r3
 80061f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f8:	440b      	add	r3, r1
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006202:	edc3 7a00 	vstr	s15, [r3]
		this->b_buffer[px*this->w + ny] = apx*any*color.a*color.b - (1-apx*any*color.a)*this->b_buffer[px*this->w + ny];
 8006206:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800620a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800620e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	edd3 7a01 	vldr	s15, [r3, #4]
 8006218:	ee27 7a27 	vmul.f32	s14, s14, s15
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	edd3 7a04 	vldr	s15, [r3, #16]
 8006222:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006226:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800622a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800622e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	edd3 7a01 	vldr	s15, [r3, #4]
 8006238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800623c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006240:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	695a      	ldr	r2, [r3, #20]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800624e:	fb01 f103 	mul.w	r1, r1, r3
 8006252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006254:	440b      	add	r3, r1
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	edd3 7a00 	vldr	s15, [r3]
 800625e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	695a      	ldr	r2, [r3, #20]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800626c:	fb01 f103 	mul.w	r1, r1, r3
 8006270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006272:	440b      	add	r3, r1
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800627c:	edc3 7a00 	vstr	s15, [r3]
		this->b_buffer[nx*this->w + ny] = anx*any*color.a*color.b - (1-anx*any*color.a)*this->b_buffer[nx*this->w + ny];
 8006280:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006284:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006288:	ee27 7a27 	vmul.f32	s14, s14, s15
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	edd3 7a04 	vldr	s15, [r3, #16]
 800629c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062a0:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80062a4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80062a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80062b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	695a      	ldr	r2, [r3, #20]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062c8:	fb01 f103 	mul.w	r1, r1, r3
 80062cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ce:	440b      	add	r3, r1
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	edd3 7a00 	vldr	s15, [r3]
 80062d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	695a      	ldr	r2, [r3, #20]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062e6:	fb01 f103 	mul.w	r1, r1, r3
 80062ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ec:	440b      	add	r3, r1
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062f6:	edc3 7a00 	vstr	s15, [r3]

		this->display->drawPixel(px, py, this->r_buffer[px*this->w + py], this->g_buffer[px*this->w + py], this->b_buffer[px*this->w + py]);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685c      	ldr	r4, [r3, #4]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3334      	adds	r3, #52	; 0x34
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	68d1      	ldr	r1, [r2, #12]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	6992      	ldr	r2, [r2, #24]
 8006310:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006312:	fb00 f002 	mul.w	r0, r0, r2
 8006316:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006318:	4402      	add	r2, r0
 800631a:	0092      	lsls	r2, r2, #2
 800631c:	440a      	add	r2, r1
 800631e:	edd2 7a00 	vldr	s15, [r2]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	6911      	ldr	r1, [r2, #16]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	6992      	ldr	r2, [r2, #24]
 800632a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800632c:	fb00 f002 	mul.w	r0, r0, r2
 8006330:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006332:	4402      	add	r2, r0
 8006334:	0092      	lsls	r2, r2, #2
 8006336:	440a      	add	r2, r1
 8006338:	ed92 7a00 	vldr	s14, [r2]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	6951      	ldr	r1, [r2, #20]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	6992      	ldr	r2, [r2, #24]
 8006344:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006346:	fb00 f002 	mul.w	r0, r0, r2
 800634a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800634c:	4402      	add	r2, r0
 800634e:	0092      	lsls	r2, r2, #2
 8006350:	440a      	add	r2, r1
 8006352:	edd2 6a00 	vldr	s13, [r2]
 8006356:	eeb0 1a66 	vmov.f32	s2, s13
 800635a:	eef0 0a47 	vmov.f32	s1, s14
 800635e:	eeb0 0a67 	vmov.f32	s0, s15
 8006362:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006364:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006366:	4620      	mov	r0, r4
 8006368:	4798      	blx	r3
		this->display->drawPixel(nx, py, this->r_buffer[nx*this->w + py], this->g_buffer[nx*this->w + py], this->b_buffer[nx*this->w + py]);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	685c      	ldr	r4, [r3, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3334      	adds	r3, #52	; 0x34
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	68d1      	ldr	r1, [r2, #12]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	6992      	ldr	r2, [r2, #24]
 8006380:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006382:	fb00 f002 	mul.w	r0, r0, r2
 8006386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006388:	4402      	add	r2, r0
 800638a:	0092      	lsls	r2, r2, #2
 800638c:	440a      	add	r2, r1
 800638e:	edd2 7a00 	vldr	s15, [r2]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	6911      	ldr	r1, [r2, #16]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	6992      	ldr	r2, [r2, #24]
 800639a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800639c:	fb00 f002 	mul.w	r0, r0, r2
 80063a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063a2:	4402      	add	r2, r0
 80063a4:	0092      	lsls	r2, r2, #2
 80063a6:	440a      	add	r2, r1
 80063a8:	ed92 7a00 	vldr	s14, [r2]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	6951      	ldr	r1, [r2, #20]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	6992      	ldr	r2, [r2, #24]
 80063b4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80063b6:	fb00 f002 	mul.w	r0, r0, r2
 80063ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063bc:	4402      	add	r2, r0
 80063be:	0092      	lsls	r2, r2, #2
 80063c0:	440a      	add	r2, r1
 80063c2:	edd2 6a00 	vldr	s13, [r2]
 80063c6:	eeb0 1a66 	vmov.f32	s2, s13
 80063ca:	eef0 0a47 	vmov.f32	s1, s14
 80063ce:	eeb0 0a67 	vmov.f32	s0, s15
 80063d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063d6:	4620      	mov	r0, r4
 80063d8:	4798      	blx	r3
		this->display->drawPixel(px, ny, this->r_buffer[px*this->w + ny], this->g_buffer[px*this->w + ny], this->b_buffer[px*this->w + ny]);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	685c      	ldr	r4, [r3, #4]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3334      	adds	r3, #52	; 0x34
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	68d1      	ldr	r1, [r2, #12]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	6992      	ldr	r2, [r2, #24]
 80063f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80063f2:	fb00 f002 	mul.w	r0, r0, r2
 80063f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063f8:	4402      	add	r2, r0
 80063fa:	0092      	lsls	r2, r2, #2
 80063fc:	440a      	add	r2, r1
 80063fe:	edd2 7a00 	vldr	s15, [r2]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	6911      	ldr	r1, [r2, #16]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	6992      	ldr	r2, [r2, #24]
 800640a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800640c:	fb00 f002 	mul.w	r0, r0, r2
 8006410:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006412:	4402      	add	r2, r0
 8006414:	0092      	lsls	r2, r2, #2
 8006416:	440a      	add	r2, r1
 8006418:	ed92 7a00 	vldr	s14, [r2]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	6951      	ldr	r1, [r2, #20]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	6992      	ldr	r2, [r2, #24]
 8006424:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006426:	fb00 f002 	mul.w	r0, r0, r2
 800642a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800642c:	4402      	add	r2, r0
 800642e:	0092      	lsls	r2, r2, #2
 8006430:	440a      	add	r2, r1
 8006432:	edd2 6a00 	vldr	s13, [r2]
 8006436:	eeb0 1a66 	vmov.f32	s2, s13
 800643a:	eef0 0a47 	vmov.f32	s1, s14
 800643e:	eeb0 0a67 	vmov.f32	s0, s15
 8006442:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006444:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006446:	4620      	mov	r0, r4
 8006448:	4798      	blx	r3
		this->display->drawPixel(nx, ny, this->r_buffer[nx*this->w + ny], this->g_buffer[nx*this->w + ny], this->b_buffer[nx*this->w + ny]);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	685c      	ldr	r4, [r3, #4]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3334      	adds	r3, #52	; 0x34
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	68d1      	ldr	r1, [r2, #12]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	6992      	ldr	r2, [r2, #24]
 8006460:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006462:	fb00 f002 	mul.w	r0, r0, r2
 8006466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006468:	4402      	add	r2, r0
 800646a:	0092      	lsls	r2, r2, #2
 800646c:	440a      	add	r2, r1
 800646e:	edd2 7a00 	vldr	s15, [r2]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	6911      	ldr	r1, [r2, #16]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	6992      	ldr	r2, [r2, #24]
 800647a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800647c:	fb00 f002 	mul.w	r0, r0, r2
 8006480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006482:	4402      	add	r2, r0
 8006484:	0092      	lsls	r2, r2, #2
 8006486:	440a      	add	r2, r1
 8006488:	ed92 7a00 	vldr	s14, [r2]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	6951      	ldr	r1, [r2, #20]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	6992      	ldr	r2, [r2, #24]
 8006494:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006496:	fb00 f002 	mul.w	r0, r0, r2
 800649a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800649c:	4402      	add	r2, r0
 800649e:	0092      	lsls	r2, r2, #2
 80064a0:	440a      	add	r2, r1
 80064a2:	edd2 6a00 	vldr	s13, [r2]
 80064a6:	eeb0 1a66 	vmov.f32	s2, s13
 80064aa:	eef0 0a47 	vmov.f32	s1, s14
 80064ae:	eeb0 0a67 	vmov.f32	s0, s15
 80064b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064b6:	4620      	mov	r0, r4
 80064b8:	4798      	blx	r3
 80064ba:	f000 bca5 	b.w	8006e08 <_ZN6Canvas9drawPixelEff5Color+0x1194>
	}
	else if(this->anti_aliasing and not this->transparency)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	7a1b      	ldrb	r3, [r3, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 83a1 	beq.w	8006c0a <_ZN6Canvas9drawPixelEff5Color+0xf96>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	7a5b      	ldrb	r3, [r3, #9]
 80064cc:	f083 0301 	eor.w	r3, r3, #1
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 8399 	beq.w	8006c0a <_ZN6Canvas9drawPixelEff5Color+0xf96>
	{
		int px = x;
 80064d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80064dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064e0:	ee17 3a90 	vmov	r3, s15
 80064e4:	637b      	str	r3, [r7, #52]	; 0x34
		int nx = ceil(x);
 80064e6:	ed97 0a02 	vldr	s0, [r7, #8]
 80064ea:	f7ff fa96 	bl	8005a1a <_ZSt4ceilf>
 80064ee:	eef0 7a40 	vmov.f32	s15, s0
 80064f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064f6:	ee17 3a90 	vmov	r3, s15
 80064fa:	633b      	str	r3, [r7, #48]	; 0x30
		int py = y;
 80064fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8006500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006504:	ee17 3a90 	vmov	r3, s15
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
		int ny = ceil(y);
 800650a:	ed97 0a01 	vldr	s0, [r7, #4]
 800650e:	f7ff fa84 	bl	8005a1a <_ZSt4ceilf>
 8006512:	eef0 7a40 	vmov.f32	s15, s0
 8006516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800651a:	ee17 3a90 	vmov	r3, s15
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28

		float apx = x-floor(x);
 8006520:	ed97 0a02 	vldr	s0, [r7, #8]
 8006524:	f7ff fa89 	bl	8005a3a <_ZSt5floorf>
 8006528:	eeb0 7a40 	vmov.f32	s14, s0
 800652c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006530:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006534:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float anx = ceil(x)-x;
 8006538:	ed97 0a02 	vldr	s0, [r7, #8]
 800653c:	f7ff fa6d 	bl	8005a1a <_ZSt4ceilf>
 8006540:	eeb0 7a40 	vmov.f32	s14, s0
 8006544:	edd7 7a02 	vldr	s15, [r7, #8]
 8006548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800654c:	edc7 7a08 	vstr	s15, [r7, #32]
		float apy = y-floor(y);
 8006550:	ed97 0a01 	vldr	s0, [r7, #4]
 8006554:	f7ff fa71 	bl	8005a3a <_ZSt5floorf>
 8006558:	eeb0 7a40 	vmov.f32	s14, s0
 800655c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006560:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006564:	edc7 7a07 	vstr	s15, [r7, #28]
		float any = ceil(y)-y;
 8006568:	ed97 0a01 	vldr	s0, [r7, #4]
 800656c:	f7ff fa55 	bl	8005a1a <_ZSt4ceilf>
 8006570:	eeb0 7a40 	vmov.f32	s14, s0
 8006574:	edd7 7a01 	vldr	s15, [r7, #4]
 8006578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800657c:	edc7 7a06 	vstr	s15, [r7, #24]

		this->r_buffer[px*this->w + py] = apx*apy*color.r - (1-apx*apy)*this->r_buffer[px*this->w + py];
 8006580:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006584:	edd7 7a07 	vldr	s15, [r7, #28]
 8006588:	ee27 7a27 	vmul.f32	s14, s14, s15
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006592:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006596:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800659a:	edd7 7a07 	vldr	s15, [r7, #28]
 800659e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065b4:	fb01 f103 	mul.w	r1, r1, r3
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	440b      	add	r3, r1
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	edd3 7a00 	vldr	s15, [r3]
 80065c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	68da      	ldr	r2, [r3, #12]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065d2:	fb01 f103 	mul.w	r1, r1, r3
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	440b      	add	r3, r1
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065e2:	edc3 7a00 	vstr	s15, [r3]
		this->r_buffer[nx*this->w + py] = anx*apy*color.r - (1-anx*apy)*this->r_buffer[nx*this->w + py];
 80065e6:	ed97 7a08 	vldr	s14, [r7, #32]
 80065ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80065ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80065f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065fc:	edd7 6a08 	vldr	s13, [r7, #32]
 8006600:	edd7 7a07 	vldr	s15, [r7, #28]
 8006604:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800660c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800661a:	fb01 f103 	mul.w	r1, r1, r3
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	440b      	add	r3, r1
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	edd3 7a00 	vldr	s15, [r3]
 800662a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006638:	fb01 f103 	mul.w	r1, r1, r3
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	440b      	add	r3, r1
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006648:	edc3 7a00 	vstr	s15, [r3]
		this->r_buffer[px*this->w + ny] = apx*any*color.r - (1-apx*any)*this->r_buffer[px*this->w + ny];
 800664c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006650:	edd7 7a06 	vldr	s15, [r7, #24]
 8006654:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	edd3 7a02 	vldr	s15, [r3, #8]
 800665e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006662:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006666:	edd7 7a06 	vldr	s15, [r7, #24]
 800666a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800666e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006672:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006680:	fb01 f103 	mul.w	r1, r1, r3
 8006684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006686:	440b      	add	r3, r1
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	edd3 7a00 	vldr	s15, [r3]
 8006690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800669e:	fb01 f103 	mul.w	r1, r1, r3
 80066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a4:	440b      	add	r3, r1
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066ae:	edc3 7a00 	vstr	s15, [r3]
		this->r_buffer[nx*this->w + ny] = anx*any*color.r - (1-anx*any)*this->r_buffer[nx*this->w + ny];
 80066b2:	ed97 7a08 	vldr	s14, [r7, #32]
 80066b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80066ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80066c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066c8:	edd7 6a08 	vldr	s13, [r7, #32]
 80066cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80066d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066e6:	fb01 f103 	mul.w	r1, r1, r3
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	440b      	add	r3, r1
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	edd3 7a00 	vldr	s15, [r3]
 80066f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006704:	fb01 f103 	mul.w	r1, r1, r3
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	440b      	add	r3, r1
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006714:	edc3 7a00 	vstr	s15, [r3]

		this->g_buffer[px*this->w + py] = apx*apy*color.g - (1-apx*apy)*this->g_buffer[px*this->w + py];
 8006718:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800671c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006720:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	edd3 7a03 	vldr	s15, [r3, #12]
 800672a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800672e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006732:	edd7 7a07 	vldr	s15, [r7, #28]
 8006736:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800673a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800673e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	691a      	ldr	r2, [r3, #16]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800674c:	fb01 f103 	mul.w	r1, r1, r3
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	440b      	add	r3, r1
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	edd3 7a00 	vldr	s15, [r3]
 800675c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	691a      	ldr	r2, [r3, #16]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800676a:	fb01 f103 	mul.w	r1, r1, r3
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	440b      	add	r3, r1
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800677a:	edc3 7a00 	vstr	s15, [r3]
		this->g_buffer[nx*this->w + py] = anx*apy*color.g - (1-anx*apy)*this->g_buffer[nx*this->w + py];
 800677e:	ed97 7a08 	vldr	s14, [r7, #32]
 8006782:	edd7 7a07 	vldr	s15, [r7, #28]
 8006786:	ee27 7a27 	vmul.f32	s14, s14, s15
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006790:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006794:	edd7 6a08 	vldr	s13, [r7, #32]
 8006798:	edd7 7a07 	vldr	s15, [r7, #28]
 800679c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067b2:	fb01 f103 	mul.w	r1, r1, r3
 80067b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b8:	440b      	add	r3, r1
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	edd3 7a00 	vldr	s15, [r3]
 80067c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067d0:	fb01 f103 	mul.w	r1, r1, r3
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	440b      	add	r3, r1
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067e0:	edc3 7a00 	vstr	s15, [r3]
		this->g_buffer[px*this->w + ny] = apx*any*color.g - (1-apx*any)*this->g_buffer[px*this->w + ny];
 80067e4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80067e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80067ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80067f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067fa:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80067fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8006802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800680a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006818:	fb01 f103 	mul.w	r1, r1, r3
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	440b      	add	r3, r1
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	edd3 7a00 	vldr	s15, [r3]
 8006828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006836:	fb01 f103 	mul.w	r1, r1, r3
 800683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683c:	440b      	add	r3, r1
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006846:	edc3 7a00 	vstr	s15, [r3]
		this->g_buffer[nx*this->w + ny] = anx*any*color.g - (1-anx*any)*this->g_buffer[nx*this->w + ny];
 800684a:	ed97 7a08 	vldr	s14, [r7, #32]
 800684e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006852:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	edd3 7a03 	vldr	s15, [r3, #12]
 800685c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006860:	edd7 6a08 	vldr	s13, [r7, #32]
 8006864:	edd7 7a06 	vldr	s15, [r7, #24]
 8006868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800686c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006870:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	691a      	ldr	r2, [r3, #16]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800687e:	fb01 f103 	mul.w	r1, r1, r3
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	440b      	add	r3, r1
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	edd3 7a00 	vldr	s15, [r3]
 800688e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	691a      	ldr	r2, [r3, #16]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800689c:	fb01 f103 	mul.w	r1, r1, r3
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	440b      	add	r3, r1
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068ac:	edc3 7a00 	vstr	s15, [r3]

		this->b_buffer[px*this->w + py] = apx*apy*color.b - (1-apx*apy)*this->b_buffer[px*this->w + py];
 80068b0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80068b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80068b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	edd3 7a04 	vldr	s15, [r3, #16]
 80068c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068c6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80068ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80068ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068d6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	695a      	ldr	r2, [r3, #20]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068e4:	fb01 f103 	mul.w	r1, r1, r3
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	440b      	add	r3, r1
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	edd3 7a00 	vldr	s15, [r3]
 80068f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	695a      	ldr	r2, [r3, #20]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006902:	fb01 f103 	mul.w	r1, r1, r3
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	440b      	add	r3, r1
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006912:	edc3 7a00 	vstr	s15, [r3]
		this->b_buffer[nx*this->w + py] = anx*apy*color.b - (1-anx*apy)*this->b_buffer[nx*this->w + py];
 8006916:	ed97 7a08 	vldr	s14, [r7, #32]
 800691a:	edd7 7a07 	vldr	s15, [r7, #28]
 800691e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	edd3 7a04 	vldr	s15, [r3, #16]
 8006928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800692c:	edd7 6a08 	vldr	s13, [r7, #32]
 8006930:	edd7 7a07 	vldr	s15, [r7, #28]
 8006934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006938:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800693c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	695a      	ldr	r2, [r3, #20]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800694a:	fb01 f103 	mul.w	r1, r1, r3
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	440b      	add	r3, r1
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	edd3 7a00 	vldr	s15, [r3]
 800695a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	695a      	ldr	r2, [r3, #20]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006968:	fb01 f103 	mul.w	r1, r1, r3
 800696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696e:	440b      	add	r3, r1
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006978:	edc3 7a00 	vstr	s15, [r3]
		this->b_buffer[px*this->w + ny] = apx*any*color.b - (1-apx*any)*this->b_buffer[px*this->w + ny];
 800697c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006980:	edd7 7a06 	vldr	s15, [r7, #24]
 8006984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	edd3 7a04 	vldr	s15, [r3, #16]
 800698e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006992:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006996:	edd7 7a06 	vldr	s15, [r7, #24]
 800699a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800699e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	695a      	ldr	r2, [r3, #20]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80069b0:	fb01 f103 	mul.w	r1, r1, r3
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	440b      	add	r3, r1
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	edd3 7a00 	vldr	s15, [r3]
 80069c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	695a      	ldr	r2, [r3, #20]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80069ce:	fb01 f103 	mul.w	r1, r1, r3
 80069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d4:	440b      	add	r3, r1
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069de:	edc3 7a00 	vstr	s15, [r3]
		this->b_buffer[nx*this->w + ny] = anx*any*color.b - (1-anx*any)*this->b_buffer[nx*this->w + ny];
 80069e2:	ed97 7a08 	vldr	s14, [r7, #32]
 80069e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80069ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80069f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069f8:	edd7 6a08 	vldr	s13, [r7, #32]
 80069fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8006a00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a08:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	695a      	ldr	r2, [r3, #20]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a16:	fb01 f103 	mul.w	r1, r1, r3
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	440b      	add	r3, r1
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	edd3 7a00 	vldr	s15, [r3]
 8006a26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	695a      	ldr	r2, [r3, #20]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a34:	fb01 f103 	mul.w	r1, r1, r3
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	440b      	add	r3, r1
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a44:	edc3 7a00 	vstr	s15, [r3]

		this->display->drawPixel(px, py, this->r_buffer[px*this->w + py], this->g_buffer[px*this->w + py], this->b_buffer[px*this->w + py]);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	685c      	ldr	r4, [r3, #4]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3334      	adds	r3, #52	; 0x34
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	68d1      	ldr	r1, [r2, #12]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	6992      	ldr	r2, [r2, #24]
 8006a5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006a60:	fb00 f002 	mul.w	r0, r0, r2
 8006a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a66:	4402      	add	r2, r0
 8006a68:	0092      	lsls	r2, r2, #2
 8006a6a:	440a      	add	r2, r1
 8006a6c:	edd2 7a00 	vldr	s15, [r2]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	6911      	ldr	r1, [r2, #16]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	6992      	ldr	r2, [r2, #24]
 8006a78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006a7a:	fb00 f002 	mul.w	r0, r0, r2
 8006a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a80:	4402      	add	r2, r0
 8006a82:	0092      	lsls	r2, r2, #2
 8006a84:	440a      	add	r2, r1
 8006a86:	ed92 7a00 	vldr	s14, [r2]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	6951      	ldr	r1, [r2, #20]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	6992      	ldr	r2, [r2, #24]
 8006a92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006a94:	fb00 f002 	mul.w	r0, r0, r2
 8006a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a9a:	4402      	add	r2, r0
 8006a9c:	0092      	lsls	r2, r2, #2
 8006a9e:	440a      	add	r2, r1
 8006aa0:	edd2 6a00 	vldr	s13, [r2]
 8006aa4:	eeb0 1a66 	vmov.f32	s2, s13
 8006aa8:	eef0 0a47 	vmov.f32	s1, s14
 8006aac:	eeb0 0a67 	vmov.f32	s0, s15
 8006ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	4798      	blx	r3
		this->display->drawPixel(nx, py, this->r_buffer[nx*this->w + py], this->g_buffer[nx*this->w + py], this->b_buffer[nx*this->w + py]);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	685c      	ldr	r4, [r3, #4]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3334      	adds	r3, #52	; 0x34
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	68d1      	ldr	r1, [r2, #12]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	6992      	ldr	r2, [r2, #24]
 8006ace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ad0:	fb00 f002 	mul.w	r0, r0, r2
 8006ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad6:	4402      	add	r2, r0
 8006ad8:	0092      	lsls	r2, r2, #2
 8006ada:	440a      	add	r2, r1
 8006adc:	edd2 7a00 	vldr	s15, [r2]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	6911      	ldr	r1, [r2, #16]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	6992      	ldr	r2, [r2, #24]
 8006ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aea:	fb00 f002 	mul.w	r0, r0, r2
 8006aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af0:	4402      	add	r2, r0
 8006af2:	0092      	lsls	r2, r2, #2
 8006af4:	440a      	add	r2, r1
 8006af6:	ed92 7a00 	vldr	s14, [r2]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	6951      	ldr	r1, [r2, #20]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	6992      	ldr	r2, [r2, #24]
 8006b02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b04:	fb00 f002 	mul.w	r0, r0, r2
 8006b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b0a:	4402      	add	r2, r0
 8006b0c:	0092      	lsls	r2, r2, #2
 8006b0e:	440a      	add	r2, r1
 8006b10:	edd2 6a00 	vldr	s13, [r2]
 8006b14:	eeb0 1a66 	vmov.f32	s2, s13
 8006b18:	eef0 0a47 	vmov.f32	s1, s14
 8006b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b24:	4620      	mov	r0, r4
 8006b26:	4798      	blx	r3
		this->display->drawPixel(px, ny, this->r_buffer[px*this->w + ny], this->g_buffer[px*this->w + ny], this->b_buffer[px*this->w + ny]);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	685c      	ldr	r4, [r3, #4]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3334      	adds	r3, #52	; 0x34
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	68d1      	ldr	r1, [r2, #12]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	6992      	ldr	r2, [r2, #24]
 8006b3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006b40:	fb00 f002 	mul.w	r0, r0, r2
 8006b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b46:	4402      	add	r2, r0
 8006b48:	0092      	lsls	r2, r2, #2
 8006b4a:	440a      	add	r2, r1
 8006b4c:	edd2 7a00 	vldr	s15, [r2]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	6911      	ldr	r1, [r2, #16]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	6992      	ldr	r2, [r2, #24]
 8006b58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006b5a:	fb00 f002 	mul.w	r0, r0, r2
 8006b5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b60:	4402      	add	r2, r0
 8006b62:	0092      	lsls	r2, r2, #2
 8006b64:	440a      	add	r2, r1
 8006b66:	ed92 7a00 	vldr	s14, [r2]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	6951      	ldr	r1, [r2, #20]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	6992      	ldr	r2, [r2, #24]
 8006b72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006b74:	fb00 f002 	mul.w	r0, r0, r2
 8006b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b7a:	4402      	add	r2, r0
 8006b7c:	0092      	lsls	r2, r2, #2
 8006b7e:	440a      	add	r2, r1
 8006b80:	edd2 6a00 	vldr	s13, [r2]
 8006b84:	eeb0 1a66 	vmov.f32	s2, s13
 8006b88:	eef0 0a47 	vmov.f32	s1, s14
 8006b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b94:	4620      	mov	r0, r4
 8006b96:	4798      	blx	r3
		this->display->drawPixel(nx, ny, this->r_buffer[nx*this->w + ny], this->g_buffer[nx*this->w + ny], this->b_buffer[nx*this->w + ny]);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	685c      	ldr	r4, [r3, #4]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3334      	adds	r3, #52	; 0x34
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	68d1      	ldr	r1, [r2, #12]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	6992      	ldr	r2, [r2, #24]
 8006bae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bb0:	fb00 f002 	mul.w	r0, r0, r2
 8006bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bb6:	4402      	add	r2, r0
 8006bb8:	0092      	lsls	r2, r2, #2
 8006bba:	440a      	add	r2, r1
 8006bbc:	edd2 7a00 	vldr	s15, [r2]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	6911      	ldr	r1, [r2, #16]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	6992      	ldr	r2, [r2, #24]
 8006bc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bca:	fb00 f002 	mul.w	r0, r0, r2
 8006bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bd0:	4402      	add	r2, r0
 8006bd2:	0092      	lsls	r2, r2, #2
 8006bd4:	440a      	add	r2, r1
 8006bd6:	ed92 7a00 	vldr	s14, [r2]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	6951      	ldr	r1, [r2, #20]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	6992      	ldr	r2, [r2, #24]
 8006be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006be4:	fb00 f002 	mul.w	r0, r0, r2
 8006be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bea:	4402      	add	r2, r0
 8006bec:	0092      	lsls	r2, r2, #2
 8006bee:	440a      	add	r2, r1
 8006bf0:	edd2 6a00 	vldr	s13, [r2]
 8006bf4:	eeb0 1a66 	vmov.f32	s2, s13
 8006bf8:	eef0 0a47 	vmov.f32	s1, s14
 8006bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8006c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c04:	4620      	mov	r0, r4
 8006c06:	4798      	blx	r3
 8006c08:	e0fe      	b.n	8006e08 <_ZN6Canvas9drawPixelEff5Color+0x1194>
	}
	else if(not this->anti_aliasing and this->transparency)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	7a1b      	ldrb	r3, [r3, #8]
 8006c0e:	f083 0301 	eor.w	r3, r3, #1
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 80d3 	beq.w	8006dc0 <_ZN6Canvas9drawPixelEff5Color+0x114c>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	7a5b      	ldrb	r3, [r3, #9]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 80ce 	beq.w	8006dc0 <_ZN6Canvas9drawPixelEff5Color+0x114c>
	{
		int rx = x;
 8006c24:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c2c:	ee17 3a90 	vmov	r3, s15
 8006c30:	617b      	str	r3, [r7, #20]
		int ry = y;
 8006c32:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c3a:	ee17 3a90 	vmov	r3, s15
 8006c3e:	613b      	str	r3, [r7, #16]
		this->r_buffer[rx*this->w + ry] = color.a*color.r - (1-color.a)*this->r_buffer[rx*this->w + ry];
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	ed93 7a01 	vldr	s14, [r3, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	edd3 7a02 	vldr	s15, [r3, #8]
 8006c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	edd3 7a01 	vldr	s15, [r3, #4]
 8006c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c5a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	6979      	ldr	r1, [r7, #20]
 8006c68:	fb01 f103 	mul.w	r1, r1, r3
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	440b      	add	r3, r1
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	edd3 7a00 	vldr	s15, [r3]
 8006c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	6979      	ldr	r1, [r7, #20]
 8006c86:	fb01 f103 	mul.w	r1, r1, r3
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	440b      	add	r3, r1
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c96:	edc3 7a00 	vstr	s15, [r3]
		this->g_buffer[rx*this->w + ry] = color.a*color.g - (1-color.a)*this->g_buffer[rx*this->w + ry];
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	edd3 7a03 	vldr	s15, [r3, #12]
 8006ca6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	edd3 7a01 	vldr	s15, [r3, #4]
 8006cb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cb4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	691a      	ldr	r2, [r3, #16]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	6979      	ldr	r1, [r7, #20]
 8006cc2:	fb01 f103 	mul.w	r1, r1, r3
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	440b      	add	r3, r1
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	edd3 7a00 	vldr	s15, [r3]
 8006cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	691a      	ldr	r2, [r3, #16]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	6979      	ldr	r1, [r7, #20]
 8006ce0:	fb01 f103 	mul.w	r1, r1, r3
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	440b      	add	r3, r1
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cf0:	edc3 7a00 	vstr	s15, [r3]
		this->b_buffer[rx*this->w + ry] = color.a*color.b - (1-color.a)*this->b_buffer[rx*this->w + ry];
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	ed93 7a01 	vldr	s14, [r3, #4]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	edd3 7a01 	vldr	s15, [r3, #4]
 8006d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d0e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	695a      	ldr	r2, [r3, #20]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	6979      	ldr	r1, [r7, #20]
 8006d1c:	fb01 f103 	mul.w	r1, r1, r3
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	440b      	add	r3, r1
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	edd3 7a00 	vldr	s15, [r3]
 8006d2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	695a      	ldr	r2, [r3, #20]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	6979      	ldr	r1, [r7, #20]
 8006d3a:	fb01 f103 	mul.w	r1, r1, r3
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	440b      	add	r3, r1
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d4a:	edc3 7a00 	vstr	s15, [r3]
		this->display->drawPixel(rx, ry, this->r_buffer[rx*this->w + ry], this->g_buffer[rx*this->w + ry], this->b_buffer[rx*this->w + ry]);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	685c      	ldr	r4, [r3, #4]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3334      	adds	r3, #52	; 0x34
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	68d1      	ldr	r1, [r2, #12]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	6992      	ldr	r2, [r2, #24]
 8006d64:	6978      	ldr	r0, [r7, #20]
 8006d66:	fb00 f002 	mul.w	r0, r0, r2
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4402      	add	r2, r0
 8006d6e:	0092      	lsls	r2, r2, #2
 8006d70:	440a      	add	r2, r1
 8006d72:	edd2 7a00 	vldr	s15, [r2]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	6911      	ldr	r1, [r2, #16]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	6992      	ldr	r2, [r2, #24]
 8006d7e:	6978      	ldr	r0, [r7, #20]
 8006d80:	fb00 f002 	mul.w	r0, r0, r2
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4402      	add	r2, r0
 8006d88:	0092      	lsls	r2, r2, #2
 8006d8a:	440a      	add	r2, r1
 8006d8c:	ed92 7a00 	vldr	s14, [r2]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	6951      	ldr	r1, [r2, #20]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	6992      	ldr	r2, [r2, #24]
 8006d98:	6978      	ldr	r0, [r7, #20]
 8006d9a:	fb00 f002 	mul.w	r0, r0, r2
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4402      	add	r2, r0
 8006da2:	0092      	lsls	r2, r2, #2
 8006da4:	440a      	add	r2, r1
 8006da6:	edd2 6a00 	vldr	s13, [r2]
 8006daa:	eeb0 1a66 	vmov.f32	s2, s13
 8006dae:	eef0 0a47 	vmov.f32	s1, s14
 8006db2:	eeb0 0a67 	vmov.f32	s0, s15
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	6979      	ldr	r1, [r7, #20]
 8006dba:	4620      	mov	r0, r4
 8006dbc:	4798      	blx	r3
 8006dbe:	e023      	b.n	8006e08 <_ZN6Canvas9drawPixelEff5Color+0x1194>
	}
	else
	{
		this->display->drawPixel(x, y, color.r, color.g, color.b);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6858      	ldr	r0, [r3, #4]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3334      	adds	r3, #52	; 0x34
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	edd7 7a02 	vldr	s15, [r7, #8]
 8006dd2:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8006dd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006dda:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	edd2 7a02 	vldr	s15, [r2, #8]
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	ed92 7a03 	vldr	s14, [r2, #12]
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	edd2 6a04 	vldr	s13, [r2, #16]
 8006df0:	eeb0 1a66 	vmov.f32	s2, s13
 8006df4:	eef0 0a47 	vmov.f32	s1, s14
 8006df8:	eeb0 0a67 	vmov.f32	s0, s15
 8006dfc:	ee15 2a90 	vmov	r2, s11
 8006e00:	ee16 1a10 	vmov	r1, s12
 8006e04:	4798      	blx	r3
	}
}
 8006e06:	bf00      	nop
 8006e08:	bf00      	nop
 8006e0a:	375c      	adds	r7, #92	; 0x5c
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd90      	pop	{r4, r7, pc}

08006e10 <_ZN5ColorC1ERKS_>:
 */

#ifndef COLOR_HPP_
#define COLOR_HPP_

class Color
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
 8006e1a:	4a0d      	ldr	r2, [pc, #52]	; (8006e50 <_ZN5ColorC1ERKS_+0x40>)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	605a      	str	r2, [r3, #4]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	609a      	str	r2, [r3, #8]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	60da      	str	r2, [r3, #12]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	691a      	ldr	r2, [r3, #16]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	611a      	str	r2, [r3, #16]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4618      	mov	r0, r3
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	08009278 	.word	0x08009278

08006e54 <_ZN6Canvas8drawLineEffff5Color>:

void Canvas::drawLine(float x1, float y1, float x2, float y2, Color color)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	ed2d 8b02 	vpush	{d8}
 8006e5a:	b09a      	sub	sp, #104	; 0x68
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6178      	str	r0, [r7, #20]
 8006e60:	ed87 0a04 	vstr	s0, [r7, #16]
 8006e64:	edc7 0a03 	vstr	s1, [r7, #12]
 8006e68:	ed87 1a02 	vstr	s2, [r7, #8]
 8006e6c:	edc7 1a01 	vstr	s3, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
	float a = (y2-y1)/(x2-x1);
 8006e72:	ed97 7a01 	vldr	s14, [r7, #4]
 8006e76:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e7a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006e7e:	ed97 7a02 	vldr	s14, [r7, #8]
 8006e82:	edd7 7a04 	vldr	s15, [r7, #16]
 8006e86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e8e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	if(ABS(a) < 1)
 8006e92:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e9e:	db02      	blt.n	8006ea6 <_ZN6Canvas8drawLineEffff5Color+0x52>
 8006ea0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006ea4:	e003      	b.n	8006eae <_ZN6Canvas8drawLineEffff5Color+0x5a>
 8006ea6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006eaa:	eef1 7a67 	vneg.f32	s15, s15
 8006eae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eba:	d55d      	bpl.n	8006f78 <_ZN6Canvas8drawLineEffff5Color+0x124>
	{
		float bx = (x1 > x2) ? x1 : x2;
 8006ebc:	ed97 7a04 	vldr	s14, [r7, #16]
 8006ec0:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ecc:	dd01      	ble.n	8006ed2 <_ZN6Canvas8drawLineEffff5Color+0x7e>
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	e000      	b.n	8006ed4 <_ZN6Canvas8drawLineEffff5Color+0x80>
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	64bb      	str	r3, [r7, #72]	; 0x48
		float sx = (x1 > x2) ? x2 : x1;
 8006ed6:	ed97 7a04 	vldr	s14, [r7, #16]
 8006eda:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee6:	dd01      	ble.n	8006eec <_ZN6Canvas8drawLineEffff5Color+0x98>
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	e000      	b.n	8006eee <_ZN6Canvas8drawLineEffff5Color+0x9a>
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	647b      	str	r3, [r7, #68]	; 0x44
		float b = y1 - a*x1;
 8006ef0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006ef4:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efc:	ed97 7a03 	vldr	s14, [r7, #12]
 8006f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f04:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		for(float x = floor(sx); x <= bx; x+=1)
 8006f08:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8006f0c:	f7fe fd95 	bl	8005a3a <_ZSt5floorf>
 8006f10:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
 8006f14:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8006f18:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006f1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f24:	d900      	bls.n	8006f28 <_ZN6Canvas8drawLineEffff5Color+0xd4>
		{
			this->drawPixel(ai*y+bi, y, color);
		}
	}

}
 8006f26:	e095      	b.n	8007054 <_ZN6Canvas8drawLineEffff5Color+0x200>
			this->drawPixel(x, a*x+b, color);
 8006f28:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006f2c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006f30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f34:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006f38:	ee37 8a27 	vadd.f32	s16, s14, s15
 8006f3c:	f107 0318 	add.w	r3, r7, #24
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff ff64 	bl	8006e10 <_ZN5ColorC1ERKS_>
 8006f48:	f107 0318 	add.w	r3, r7, #24
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	eef0 0a48 	vmov.f32	s1, s16
 8006f52:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 8006f56:	6978      	ldr	r0, [r7, #20]
 8006f58:	f7fe fe8c 	bl	8005c74 <_ZN6Canvas9drawPixelEff5Color>
 8006f5c:	f107 0318 	add.w	r3, r7, #24
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fa2f 	bl	80073c4 <_ZN5ColorD1Ev>
		for(float x = floor(sx); x <= bx; x+=1)
 8006f66:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006f6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f72:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
 8006f76:	e7cd      	b.n	8006f14 <_ZN6Canvas8drawLineEffff5Color+0xc0>
		float by = (y1 > y2) ? y1 : y2;
 8006f78:	ed97 7a03 	vldr	s14, [r7, #12]
 8006f7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f88:	dd01      	ble.n	8006f8e <_ZN6Canvas8drawLineEffff5Color+0x13a>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	e000      	b.n	8006f90 <_ZN6Canvas8drawLineEffff5Color+0x13c>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	65bb      	str	r3, [r7, #88]	; 0x58
		float sy = (y1 > y2) ? y2 : y1;
 8006f92:	ed97 7a03 	vldr	s14, [r7, #12]
 8006f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa2:	dd01      	ble.n	8006fa8 <_ZN6Canvas8drawLineEffff5Color+0x154>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	e000      	b.n	8006faa <_ZN6Canvas8drawLineEffff5Color+0x156>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	657b      	str	r3, [r7, #84]	; 0x54
		float ai = (x2-x1)/(y2-y1);
 8006fac:	ed97 7a02 	vldr	s14, [r7, #8]
 8006fb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8006fb4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006fb8:	ed97 7a01 	vldr	s14, [r7, #4]
 8006fbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fc8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		float bi = x1 - ai*y1;
 8006fcc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd8:	ed97 7a04 	vldr	s14, [r7, #16]
 8006fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fe0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		for(float y = floor(sy); y <= by; y+=1)
 8006fe4:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8006fe8:	f7fe fd27 	bl	8005a3a <_ZSt5floorf>
 8006fec:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
 8006ff0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8006ff4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007000:	d900      	bls.n	8007004 <_ZN6Canvas8drawLineEffff5Color+0x1b0>
}
 8007002:	e027      	b.n	8007054 <_ZN6Canvas8drawLineEffff5Color+0x200>
			this->drawPixel(ai*y+bi, y, color);
 8007004:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007008:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800700c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007010:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007014:	ee37 8a27 	vadd.f32	s16, s14, s15
 8007018:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800701c:	6839      	ldr	r1, [r7, #0]
 800701e:	4618      	mov	r0, r3
 8007020:	f7ff fef6 	bl	8006e10 <_ZN5ColorC1ERKS_>
 8007024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007028:	4619      	mov	r1, r3
 800702a:	edd7 0a18 	vldr	s1, [r7, #96]	; 0x60
 800702e:	eeb0 0a48 	vmov.f32	s0, s16
 8007032:	6978      	ldr	r0, [r7, #20]
 8007034:	f7fe fe1e 	bl	8005c74 <_ZN6Canvas9drawPixelEff5Color>
 8007038:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800703c:	4618      	mov	r0, r3
 800703e:	f000 f9c1 	bl	80073c4 <_ZN5ColorD1Ev>
		for(float y = floor(sy); y <= by; y+=1)
 8007042:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800704a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800704e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8007052:	e7cd      	b.n	8006ff0 <_ZN6Canvas8drawLineEffff5Color+0x19c>
}
 8007054:	3768      	adds	r7, #104	; 0x68
 8007056:	46bd      	mov	sp, r7
 8007058:	ecbd 8b02 	vpop	{d8}
 800705c:	bd80      	pop	{r7, pc}

0800705e <_ZN6Canvas13drawRectangleEffff5Color>:

void Canvas::drawRectangle(float x, float y, float w, float h, Color color)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	ed2d 8b04 	vpush	{d8-d9}
 8007064:	b09a      	sub	sp, #104	; 0x68
 8007066:	af00      	add	r7, sp, #0
 8007068:	6178      	str	r0, [r7, #20]
 800706a:	ed87 0a04 	vstr	s0, [r7, #16]
 800706e:	edc7 0a03 	vstr	s1, [r7, #12]
 8007072:	ed87 1a02 	vstr	s2, [r7, #8]
 8007076:	edc7 1a01 	vstr	s3, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
	if(w > 0 and h > 0)
 800707c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007080:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007088:	dc00      	bgt.n	800708c <_ZN6Canvas13drawRectangleEffff5Color+0x2e>

		//Vertical lines
		this->drawLine(x, y, x, y+h, color);
		this->drawLine(x+w, y, x+w, y+h, color);
	}
}
 800708a:	e09b      	b.n	80071c4 <_ZN6Canvas13drawRectangleEffff5Color+0x166>
	if(w > 0 and h > 0)
 800708c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007090:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007098:	dc00      	bgt.n	800709c <_ZN6Canvas13drawRectangleEffff5Color+0x3e>
}
 800709a:	e093      	b.n	80071c4 <_ZN6Canvas13drawRectangleEffff5Color+0x166>
		this->drawLine(x, y, x+w, y, color);
 800709c:	ed97 7a04 	vldr	s14, [r7, #16]
 80070a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80070a4:	ee37 8a27 	vadd.f32	s16, s14, s15
 80070a8:	f107 0318 	add.w	r3, r7, #24
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7ff feae 	bl	8006e10 <_ZN5ColorC1ERKS_>
 80070b4:	f107 0318 	add.w	r3, r7, #24
 80070b8:	4619      	mov	r1, r3
 80070ba:	edd7 1a03 	vldr	s3, [r7, #12]
 80070be:	eeb0 1a48 	vmov.f32	s2, s16
 80070c2:	edd7 0a03 	vldr	s1, [r7, #12]
 80070c6:	ed97 0a04 	vldr	s0, [r7, #16]
 80070ca:	6978      	ldr	r0, [r7, #20]
 80070cc:	f7ff fec2 	bl	8006e54 <_ZN6Canvas8drawLineEffff5Color>
 80070d0:	f107 0318 	add.w	r3, r7, #24
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 f975 	bl	80073c4 <_ZN5ColorD1Ev>
		this->drawLine(x, y+h, x+w, y+h, color);
 80070da:	ed97 7a03 	vldr	s14, [r7, #12]
 80070de:	edd7 7a01 	vldr	s15, [r7, #4]
 80070e2:	ee37 8a27 	vadd.f32	s16, s14, s15
 80070e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80070ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80070ee:	ee77 8a27 	vadd.f32	s17, s14, s15
 80070f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80070f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80070fa:	ee37 9a27 	vadd.f32	s18, s14, s15
 80070fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff fe83 	bl	8006e10 <_ZN5ColorC1ERKS_>
 800710a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800710e:	4619      	mov	r1, r3
 8007110:	eef0 1a49 	vmov.f32	s3, s18
 8007114:	eeb0 1a68 	vmov.f32	s2, s17
 8007118:	eef0 0a48 	vmov.f32	s1, s16
 800711c:	ed97 0a04 	vldr	s0, [r7, #16]
 8007120:	6978      	ldr	r0, [r7, #20]
 8007122:	f7ff fe97 	bl	8006e54 <_ZN6Canvas8drawLineEffff5Color>
 8007126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800712a:	4618      	mov	r0, r3
 800712c:	f000 f94a 	bl	80073c4 <_ZN5ColorD1Ev>
		this->drawLine(x, y, x, y+h, color);
 8007130:	ed97 7a03 	vldr	s14, [r7, #12]
 8007134:	edd7 7a01 	vldr	s15, [r7, #4]
 8007138:	ee37 8a27 	vadd.f32	s16, s14, s15
 800713c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff fe64 	bl	8006e10 <_ZN5ColorC1ERKS_>
 8007148:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800714c:	4619      	mov	r1, r3
 800714e:	eef0 1a48 	vmov.f32	s3, s16
 8007152:	ed97 1a04 	vldr	s2, [r7, #16]
 8007156:	edd7 0a03 	vldr	s1, [r7, #12]
 800715a:	ed97 0a04 	vldr	s0, [r7, #16]
 800715e:	6978      	ldr	r0, [r7, #20]
 8007160:	f7ff fe78 	bl	8006e54 <_ZN6Canvas8drawLineEffff5Color>
 8007164:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007168:	4618      	mov	r0, r3
 800716a:	f000 f92b 	bl	80073c4 <_ZN5ColorD1Ev>
		this->drawLine(x+w, y, x+w, y+h, color);
 800716e:	ed97 7a04 	vldr	s14, [r7, #16]
 8007172:	edd7 7a02 	vldr	s15, [r7, #8]
 8007176:	ee37 8a27 	vadd.f32	s16, s14, s15
 800717a:	ed97 7a04 	vldr	s14, [r7, #16]
 800717e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007182:	ee77 8a27 	vadd.f32	s17, s14, s15
 8007186:	ed97 7a03 	vldr	s14, [r7, #12]
 800718a:	edd7 7a01 	vldr	s15, [r7, #4]
 800718e:	ee37 9a27 	vadd.f32	s18, s14, s15
 8007192:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	4618      	mov	r0, r3
 800719a:	f7ff fe39 	bl	8006e10 <_ZN5ColorC1ERKS_>
 800719e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80071a2:	4619      	mov	r1, r3
 80071a4:	eef0 1a49 	vmov.f32	s3, s18
 80071a8:	eeb0 1a68 	vmov.f32	s2, s17
 80071ac:	edd7 0a03 	vldr	s1, [r7, #12]
 80071b0:	eeb0 0a48 	vmov.f32	s0, s16
 80071b4:	6978      	ldr	r0, [r7, #20]
 80071b6:	f7ff fe4d 	bl	8006e54 <_ZN6Canvas8drawLineEffff5Color>
 80071ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f900 	bl	80073c4 <_ZN5ColorD1Ev>
}
 80071c4:	bf00      	nop
 80071c6:	3768      	adds	r7, #104	; 0x68
 80071c8:	46bd      	mov	sp, r7
 80071ca:	ecbd 8b04 	vpop	{d8-d9}
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <_ZN6Canvas11drawEllipseEfffm5Color>:

void Canvas::drawEllipse(float x, float y, float radius, uint32_t dots, Color color)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b092      	sub	sp, #72	; 0x48
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6178      	str	r0, [r7, #20]
 80071d8:	ed87 0a04 	vstr	s0, [r7, #16]
 80071dc:	edc7 0a03 	vstr	s1, [r7, #12]
 80071e0:	ed87 1a02 	vstr	s2, [r7, #8]
 80071e4:	6079      	str	r1, [r7, #4]
 80071e6:	603a      	str	r2, [r7, #0]
	if(radius > 0 and dots > 2)
 80071e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80071ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f4:	dc00      	bgt.n	80071f8 <_ZN6Canvas11drawEllipseEfffm5Color+0x28>
			this->drawLine(_x_prev, _y_prev, _x, _y, color);
			_x_prev = _x;
			_y_prev = _y;
		}
	}
}
 80071f6:	e075      	b.n	80072e4 <_ZN6Canvas11drawEllipseEfffm5Color+0x114>
	if(radius > 0 and dots > 2)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d972      	bls.n	80072e4 <_ZN6Canvas11drawEllipseEfffm5Color+0x114>
		float interval = 2*PI/(float)dots;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	ee07 3a90 	vmov	s15, r3
 8007204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007208:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800720c:	ed9f 5b38 	vldr	d5, [pc, #224]	; 80072f0 <_ZN6Canvas11drawEllipseEfffm5Color+0x120>
 8007210:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007214:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007218:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		float _x_prev = x + radius;
 800721c:	ed97 7a04 	vldr	s14, [r7, #16]
 8007220:	edd7 7a02 	vldr	s15, [r7, #8]
 8007224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007228:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		float _y_prev = y;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	643b      	str	r3, [r7, #64]	; 0x40
		for(float theta = interval; theta < 2*PI + interval; theta += interval)
 8007230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007234:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007238:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800723c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007240:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007244:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80072f0 <_ZN6Canvas11drawEllipseEfffm5Color+0x120>
 8007248:	ee37 7b05 	vadd.f64	d7, d7, d5
 800724c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007254:	d400      	bmi.n	8007258 <_ZN6Canvas11drawEllipseEfffm5Color+0x88>
}
 8007256:	e045      	b.n	80072e4 <_ZN6Canvas11drawEllipseEfffm5Color+0x114>
			float _x = x + radius*cos(theta);
 8007258:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800725c:	f7f9 f9f8 	bl	8000650 <_ZSt3cosf>
 8007260:	eeb0 7a40 	vmov.f32	s14, s0
 8007264:	edd7 7a02 	vldr	s15, [r7, #8]
 8007268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726c:	ed97 7a04 	vldr	s14, [r7, #16]
 8007270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007274:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			float _y = y + radius*sin(theta);
 8007278:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800727c:	f7f9 f9f8 	bl	8000670 <_ZSt3sinf>
 8007280:	eeb0 7a40 	vmov.f32	s14, s0
 8007284:	edd7 7a02 	vldr	s15, [r7, #8]
 8007288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728c:	ed97 7a03 	vldr	s14, [r7, #12]
 8007290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007294:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			this->drawLine(_x_prev, _y_prev, _x, _y, color);
 8007298:	f107 031c 	add.w	r3, r7, #28
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff fdb6 	bl	8006e10 <_ZN5ColorC1ERKS_>
 80072a4:	f107 031c 	add.w	r3, r7, #28
 80072a8:	4619      	mov	r1, r3
 80072aa:	edd7 1a0c 	vldr	s3, [r7, #48]	; 0x30
 80072ae:	ed97 1a0d 	vldr	s2, [r7, #52]	; 0x34
 80072b2:	edd7 0a10 	vldr	s1, [r7, #64]	; 0x40
 80072b6:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80072ba:	6978      	ldr	r0, [r7, #20]
 80072bc:	f7ff fdca 	bl	8006e54 <_ZN6Canvas8drawLineEffff5Color>
 80072c0:	f107 031c 	add.w	r3, r7, #28
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 f87d 	bl	80073c4 <_ZN5ColorD1Ev>
			_x_prev = _x;
 80072ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072cc:	647b      	str	r3, [r7, #68]	; 0x44
			_y_prev = _y;
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	643b      	str	r3, [r7, #64]	; 0x40
		for(float theta = interval; theta < 2*PI + interval; theta += interval)
 80072d2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80072d6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80072da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072de:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80072e2:	e7a7      	b.n	8007234 <_ZN6Canvas11drawEllipseEfffm5Color+0x64>
}
 80072e4:	bf00      	nop
 80072e6:	3748      	adds	r7, #72	; 0x48
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	f3af 8000 	nop.w
 80072f0:	54442eea 	.word	0x54442eea
 80072f4:	401921fb 	.word	0x401921fb

080072f8 <_ZN5ColorC1Efff>:
	this->r = 0;
	this->g = 0;
	this->b = 0;
}

Color::Color(float r, float g, float b)
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	ed87 0a02 	vstr	s0, [r7, #8]
 8007304:	edc7 0a01 	vstr	s1, [r7, #4]
 8007308:	ed87 1a00 	vstr	s2, [r7]
 800730c:	4a2c      	ldr	r2, [pc, #176]	; (80073c0 <_ZN5ColorC1Efff+0xc8>)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	601a      	str	r2, [r3, #0]
{
	this->a = 1;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007318:	605a      	str	r2, [r3, #4]
	this->r = CLIPVALUE(r, 0, 1);
 800731a:	edd7 7a02 	vldr	s15, [r7, #8]
 800731e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007326:	d502      	bpl.n	800732e <_ZN5ColorC1Efff+0x36>
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	e00c      	b.n	8007348 <_ZN5ColorC1Efff+0x50>
 800732e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007332:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800733a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733e:	dd02      	ble.n	8007346 <_ZN5ColorC1Efff+0x4e>
 8007340:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007344:	e000      	b.n	8007348 <_ZN5ColorC1Efff+0x50>
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	6093      	str	r3, [r2, #8]
	this->g = CLIPVALUE(g, 0, 1);
 800734c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007358:	d502      	bpl.n	8007360 <_ZN5ColorC1Efff+0x68>
 800735a:	f04f 0300 	mov.w	r3, #0
 800735e:	e00c      	b.n	800737a <_ZN5ColorC1Efff+0x82>
 8007360:	edd7 7a01 	vldr	s15, [r7, #4]
 8007364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800736c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007370:	dd02      	ble.n	8007378 <_ZN5ColorC1Efff+0x80>
 8007372:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007376:	e000      	b.n	800737a <_ZN5ColorC1Efff+0x82>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	60d3      	str	r3, [r2, #12]
	this->b = CLIPVALUE(b, 0, 1);
 800737e:	edd7 7a00 	vldr	s15, [r7]
 8007382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800738a:	d502      	bpl.n	8007392 <_ZN5ColorC1Efff+0x9a>
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	e00c      	b.n	80073ac <_ZN5ColorC1Efff+0xb4>
 8007392:	edd7 7a00 	vldr	s15, [r7]
 8007396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800739a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800739e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a2:	dd02      	ble.n	80073aa <_ZN5ColorC1Efff+0xb2>
 80073a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80073a8:	e000      	b.n	80073ac <_ZN5ColorC1Efff+0xb4>
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	6113      	str	r3, [r2, #16]
}
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	08009278 	.word	0x08009278

080073c4 <_ZN5ColorD1Ev>:
	this->r = CLIPVALUE(r, 0, 1);
	this->g = CLIPVALUE(g, 0, 1);
	this->b = CLIPVALUE(b, 0, 1);
}

Color::~Color()
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	4a04      	ldr	r2, [pc, #16]	; (80073e0 <_ZN5ColorD1Ev+0x1c>)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	08009278 	.word	0x08009278

080073e4 <_ZN5ColorD0Ev>:
Color::~Color()
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
}
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff ffe9 	bl	80073c4 <_ZN5ColorD1Ev>
 80073f2:	2114      	movs	r1, #20
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fd07 	bl	8007e08 <_ZdlPvj>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <_ZN7DisplayC1Ev>:
 * V = Vertical
 * H = Horizontal
 */
enum class Orientation {V, H};

class Display
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	4a04      	ldr	r2, [pc, #16]	; (8007420 <_ZN7DisplayC1Ev+0x1c>)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	080092f8 	.word	0x080092f8

08007424 <_ZN6ST7735C1Ev>:

#define ST7735_COLOR565(r, g, b) (((r & 0x1F) << 11) | ((g & 0x3F) << 5) | ((b & 0x1F)))

#define CLIPVALUE(v, min, max) ((v < min) ? min : ((v > max) ? max : v))

ST7735::ST7735()
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff ffe8 	bl	8007404 <_ZN7DisplayC1Ev>
 8007434:	4a0b      	ldr	r2, [pc, #44]	; (8007464 <_ZN6ST7735C1Ev+0x40>)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	601a      	str	r2, [r3, #0]
{
	//1.8 inch display dimensions
	this->orientation = Orientation::V;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	605a      	str	r2, [r3, #4]
	this->v_width_dots = 128;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2280      	movs	r2, #128	; 0x80
 8007444:	609a      	str	r2, [r3, #8]
	this->v_height_dots = 160;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	22a0      	movs	r2, #160	; 0xa0
 800744a:	60da      	str	r2, [r3, #12]
	this->v_width_mm = 28.03;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a06      	ldr	r2, [pc, #24]	; (8007468 <_ZN6ST7735C1Ev+0x44>)
 8007450:	611a      	str	r2, [r3, #16]
	this->v_height_mm = 35.04;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a05      	ldr	r2, [pc, #20]	; (800746c <_ZN6ST7735C1Ev+0x48>)
 8007456:	615a      	str	r2, [r3, #20]
}
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4618      	mov	r0, r3
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	08009288 	.word	0x08009288
 8007468:	41e03d71 	.word	0x41e03d71
 800746c:	420c28f6 	.word	0x420c28f6

08007470 <_ZN6ST7735D1Ev>:

ST7735::~ST7735()
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	4a05      	ldr	r2, [pc, #20]	; (8007490 <_ZN6ST7735D1Ev+0x20>)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fcb1 	bl	8007de8 <_ZN7DisplayD1Ev>
{
	// TODO Auto-generated destructor stub
}
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	08009288 	.word	0x08009288

08007494 <_ZN6ST773511sendCommandEh>:

void ST7735::sendCommand(uint8_t cmd)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	70fb      	strb	r3, [r7, #3]
	this->dcPinReset();
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3354      	adds	r3, #84	; 0x54
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	4798      	blx	r3
	this->sendByte(cmd);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3360      	adds	r3, #96	; 0x60
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	78fa      	ldrb	r2, [r7, #3]
 80074b6:	4611      	mov	r1, r2
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4798      	blx	r3
}
 80074bc:	bf00      	nop
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <_ZN6ST77358sendDataEh>:

void ST7735::sendData(uint8_t data)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	70fb      	strb	r3, [r7, #3]
	this->dcPinSet();
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3350      	adds	r3, #80	; 0x50
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	4798      	blx	r3
	this->sendByte(data);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3360      	adds	r3, #96	; 0x60
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	78fa      	ldrb	r2, [r7, #3]
 80074e6:	4611      	mov	r1, r2
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	4798      	blx	r3
}
 80074ec:	bf00      	nop
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <_ZN6ST77354initEv>:

void ST7735::init()
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
	this->initIO();
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3344      	adds	r3, #68	; 0x44
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	4798      	blx	r3
	this->reset();
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3328      	adds	r3, #40	; 0x28
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	4798      	blx	r3
}
 8007514:	bf00      	nop
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <_ZN6ST773512initCommand1Ev>:

void ST7735::initCommand1()
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
	this->sendCommand(ST7735_SWRESET); //1: Software reset
 8007524:	2101      	movs	r1, #1
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7ff ffb4 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->delay(150);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3364      	adds	r3, #100	; 0x64
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2196      	movs	r1, #150	; 0x96
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	4798      	blx	r3
	this->sendCommand(ST7735_SLPOUT); //2: Out of sleep mode
 800753a:	2111      	movs	r1, #17
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff ffa9 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->delay(500);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3364      	adds	r3, #100	; 0x64
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	21f4      	movs	r1, #244	; 0xf4
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	4798      	blx	r3
	this->sendCommand(ST7735_FRMCTR1); //3: Frame rate ctrl - normal mode
 8007550:	21b1      	movs	r1, #177	; 0xb1
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7ff ff9e 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0x01); //Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8007558:	2101      	movs	r1, #1
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff ffb2 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x2C);
 8007560:	212c      	movs	r1, #44	; 0x2c
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7ff ffae 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 8007568:	212d      	movs	r1, #45	; 0x2d
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7ff ffaa 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_FRMCTR2); //4: Frame rate control - idle mode
 8007570:	21b2      	movs	r1, #178	; 0xb2
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff ff8e 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0x01); //Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8007578:	2101      	movs	r1, #1
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff ffa2 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x2C);
 8007580:	212c      	movs	r1, #44	; 0x2c
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff ff9e 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 8007588:	212d      	movs	r1, #45	; 0x2d
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7ff ff9a 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_FRMCTR3); //5: Frame rate ctrl - partial mode
 8007590:	21b3      	movs	r1, #179	; 0xb3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff ff7e 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0x01); //Dot inversion mode
 8007598:	2101      	movs	r1, #1
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f7ff ff92 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x2C);
 80075a0:	212c      	movs	r1, #44	; 0x2c
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7ff ff8e 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 80075a8:	212d      	movs	r1, #45	; 0x2d
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7ff ff8a 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x01); //Line inversion mode
 80075b0:	2101      	movs	r1, #1
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7ff ff86 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x2C);
 80075b8:	212c      	movs	r1, #44	; 0x2c
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff ff82 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 80075c0:	212d      	movs	r1, #45	; 0x2d
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff ff7e 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_INVCTR); //6: Display inversion ctrl
 80075c8:	21b4      	movs	r1, #180	; 0xb4
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7ff ff62 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0x07); //No inversion
 80075d0:	2107      	movs	r1, #7
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff ff76 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_PWCTR1); //7: Power control
 80075d8:	21c0      	movs	r1, #192	; 0xc0
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff ff5a 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0xA2);
 80075e0:	21a2      	movs	r1, #162	; 0xa2
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7ff ff6e 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x02); // -4.6V
 80075e8:	2102      	movs	r1, #2
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7ff ff6a 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x84); // AUTO mode
 80075f0:	2184      	movs	r1, #132	; 0x84
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff ff66 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_PWCTR2); // 8: Power control
 80075f8:	21c1      	movs	r1, #193	; 0xc1
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7ff ff4a 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0xC5); // VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 8007600:	21c5      	movs	r1, #197	; 0xc5
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff ff5e 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_PWCTR3); // 9: Power control
 8007608:	21c2      	movs	r1, #194	; 0xc2
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff ff42 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0x0A); // Opamp current small
 8007610:	210a      	movs	r1, #10
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff ff56 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x00); // Boost frequency
 8007618:	2100      	movs	r1, #0
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7ff ff52 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_PWCTR4); // 10: Power control
 8007620:	21c3      	movs	r1, #195	; 0xc3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff ff36 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0x8A); // BCLK/2, Opamp current small & Medium low
 8007628:	218a      	movs	r1, #138	; 0x8a
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7ff ff4a 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x2A);
 8007630:	212a      	movs	r1, #42	; 0x2a
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff ff46 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_PWCTR5); // 11: Power control
 8007638:	21c4      	movs	r1, #196	; 0xc4
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff ff2a 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0x8A);
 8007640:	218a      	movs	r1, #138	; 0x8a
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7ff ff3e 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0xEE);
 8007648:	21ee      	movs	r1, #238	; 0xee
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7ff ff3a 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_VMCTR1); // 12: Power control
 8007650:	21c5      	movs	r1, #197	; 0xc5
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff ff1e 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0x0E);
 8007658:	210e      	movs	r1, #14
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff ff32 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_INVOFF); // 13: Don't invert display
 8007660:	2120      	movs	r1, #32
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7ff ff16 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendCommand(ST7735_MADCTL); // 14: Memory access control (directions)
 8007668:	2136      	movs	r1, #54	; 0x36
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7ff ff12 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(ST7735_ROTATION); // row addr/col addr, bottom to top refresh
 8007670:	21c0      	movs	r1, #192	; 0xc0
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7ff ff26 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_COLMOD); // 15: set color mode
 8007678:	213a      	movs	r1, #58	; 0x3a
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff ff0a 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0x05); // 16-bit color
 8007680:	2105      	movs	r1, #5
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7ff ff1e 	bl	80074c4 <_ZN6ST77358sendDataEh>
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <_ZN6ST773512initCommand2Ev>:

void ST7735::initCommand2()
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
	this->sendCommand(ST7735_CASET); // 1: Column addr set
 8007698:	212a      	movs	r1, #42	; 0x2a
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7ff fefa 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0x00); // XSTART = 0
 80076a0:	2100      	movs	r1, #0
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7ff ff0e 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 80076a8:	2100      	movs	r1, #0
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7ff ff0a 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x00); // XEND = 127
 80076b0:	2100      	movs	r1, #0
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7ff ff06 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x7F);
 80076b8:	217f      	movs	r1, #127	; 0x7f
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7ff ff02 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_RASET); // 2: Row addr set
 80076c0:	212b      	movs	r1, #43	; 0x2b
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff fee6 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0x00); // XSTART = 0
 80076c8:	2100      	movs	r1, #0
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7ff fefa 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 80076d0:	2100      	movs	r1, #0
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7ff fef6 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x00); // XEND = 127
 80076d8:	2100      	movs	r1, #0
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff fef2 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x7F);
 80076e0:	217f      	movs	r1, #127	; 0x7f
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7ff feee 	bl	80074c4 <_ZN6ST77358sendDataEh>
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <_ZN6ST773512initCommand3Ev>:

void ST7735::initCommand3()
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
	this->sendCommand(ST7735_GMCTRP1); // 1: Magical unicorn dust
 80076f8:	21e0      	movs	r1, #224	; 0xe0
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7ff feca 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0x02);
 8007700:	2102      	movs	r1, #2
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7ff fede 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x1C);
 8007708:	211c      	movs	r1, #28
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7ff feda 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x07);
 8007710:	2107      	movs	r1, #7
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff fed6 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x12);
 8007718:	2112      	movs	r1, #18
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff fed2 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x37);
 8007720:	2137      	movs	r1, #55	; 0x37
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7ff fece 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x32);
 8007728:	2132      	movs	r1, #50	; 0x32
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7ff feca 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x29);
 8007730:	2129      	movs	r1, #41	; 0x29
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff fec6 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 8007738:	212d      	movs	r1, #45	; 0x2d
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff fec2 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x29);
 8007740:	2129      	movs	r1, #41	; 0x29
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff febe 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x25);
 8007748:	2125      	movs	r1, #37	; 0x25
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7ff feba 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x2B);
 8007750:	212b      	movs	r1, #43	; 0x2b
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff feb6 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x39);
 8007758:	2139      	movs	r1, #57	; 0x39
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7ff feb2 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 8007760:	2100      	movs	r1, #0
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff feae 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x01);
 8007768:	2101      	movs	r1, #1
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7ff feaa 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x03);
 8007770:	2103      	movs	r1, #3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff fea6 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x10);
 8007778:	2110      	movs	r1, #16
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7ff fea2 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_GMCTRN1); // 2: Sparkles and rainbows
 8007780:	21e1      	movs	r1, #225	; 0xe1
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7ff fe86 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0x03);
 8007788:	2103      	movs	r1, #3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7ff fe9a 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x1D);
 8007790:	211d      	movs	r1, #29
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff fe96 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x07);
 8007798:	2107      	movs	r1, #7
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff fe92 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x06);
 80077a0:	2106      	movs	r1, #6
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7ff fe8e 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x2E);
 80077a8:	212e      	movs	r1, #46	; 0x2e
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7ff fe8a 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x2C);
 80077b0:	212c      	movs	r1, #44	; 0x2c
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7ff fe86 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x29);
 80077b8:	2129      	movs	r1, #41	; 0x29
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff fe82 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x2D);
 80077c0:	212d      	movs	r1, #45	; 0x2d
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7ff fe7e 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x2E);
 80077c8:	212e      	movs	r1, #46	; 0x2e
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7ff fe7a 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x2E);
 80077d0:	212e      	movs	r1, #46	; 0x2e
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7ff fe76 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x37);
 80077d8:	2137      	movs	r1, #55	; 0x37
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7ff fe72 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x3F);
 80077e0:	213f      	movs	r1, #63	; 0x3f
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff fe6e 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 80077e8:	2100      	movs	r1, #0
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff fe6a 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 80077f0:	2100      	movs	r1, #0
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff fe66 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x02);
 80077f8:	2102      	movs	r1, #2
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7ff fe62 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x10);
 8007800:	2110      	movs	r1, #16
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7ff fe5e 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendCommand(ST7735_NORON);
 8007808:	2113      	movs	r1, #19
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7ff fe42 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->delay(10);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3364      	adds	r3, #100	; 0x64
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	210a      	movs	r1, #10
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	4798      	blx	r3
	this->sendCommand(ST7735_DISPON);
 800781e:	2129      	movs	r1, #41	; 0x29
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7ff fe37 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->delay(100);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3364      	adds	r3, #100	; 0x64
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2164      	movs	r1, #100	; 0x64
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	4798      	blx	r3
}
 8007834:	bf00      	nop
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <_ZN6ST77357getNameEv>:

const char *ST7735::getName()
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
	return "ST7735";
 8007844:	4b03      	ldr	r3, [pc, #12]	; (8007854 <_ZN6ST77357getNameEv+0x18>)
}
 8007846:	4618      	mov	r0, r3
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	080091d8 	.word	0x080091d8

08007858 <_ZN6ST77358getWidthEv>:

uint32_t ST7735::getWidth()
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
	if(this->orientation == Orientation::V)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d102      	bne.n	800786e <_ZN6ST77358getWidthEv+0x16>
		return this->v_width_dots;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	e001      	b.n	8007872 <_ZN6ST77358getWidthEv+0x1a>
	else
		return this->v_height_dots;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
}
 8007872:	4618      	mov	r0, r3
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <_ZN6ST77359getHeightEv>:

uint32_t ST7735::getHeight()
{
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
	if(this->orientation == Orientation::V)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d102      	bne.n	8007894 <_ZN6ST77359getHeightEv+0x16>
		return this->v_height_dots;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	e001      	b.n	8007898 <_ZN6ST77359getHeightEv+0x1a>
	else
		return this->v_width_dots;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
}
 8007898:	4618      	mov	r0, r3
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <_ZN6ST77358getDPMMXEv>:

float ST7735::getDPMMX()
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
	if(this->orientation == Orientation::V)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10b      	bne.n	80078cc <_ZN6ST77358getDPMMXEv+0x28>
		return (float)this->v_width_dots/this->v_width_mm;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	ee07 3a90 	vmov	s15, r3
 80078bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	ed93 7a04 	vldr	s14, [r3, #16]
 80078c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ca:	e00a      	b.n	80078e2 <_ZN6ST77358getDPMMXEv+0x3e>
	else
		return (float)this->v_height_dots/this->v_height_mm;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	ee07 3a90 	vmov	s15, r3
 80078d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	ed93 7a05 	vldr	s14, [r3, #20]
 80078de:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 80078e2:	eeb0 0a67 	vmov.f32	s0, s15
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <_ZN6ST77358getDPMMYEv>:

float ST7735::getDPMMY()
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
	if(this->orientation == Orientation::V)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10b      	bne.n	8007918 <_ZN6ST77358getDPMMYEv+0x28>
		return (float)this->v_height_dots/this->v_height_mm;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	ee07 3a90 	vmov	s15, r3
 8007908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	ed93 7a05 	vldr	s14, [r3, #20]
 8007912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007916:	e00a      	b.n	800792e <_ZN6ST77358getDPMMYEv+0x3e>
	else
		return (float)this->v_width_dots/this->v_width_mm;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	ee07 3a90 	vmov	s15, r3
 8007920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	ed93 7a04 	vldr	s14, [r3, #16]
 800792a:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 800792e:	eeb0 0a67 	vmov.f32	s0, s15
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <_ZN6ST773513setBrightnessEf>:

void ST7735::setBrightness(float v)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	ed87 0a00 	vstr	s0, [r7]
	//TODO
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <_ZN6ST773513getBrightnessEv>:

float ST7735::getBrightness()
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
	//TODO
	return 1;
 800795c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007960:	ee07 3a90 	vmov	s15, r3
}
 8007964:	eeb0 0a67 	vmov.f32	s0, s15
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <_ZN6ST773514setOrientationE11Orientation>:

void ST7735::setOrientation(Orientation orientation)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	6039      	str	r1, [r7, #0]
	this->orientation = orientation;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	605a      	str	r2, [r3, #4]
}
 8007982:	bf00      	nop
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <_ZN6ST773514getOrientationEv>:

Orientation ST7735::getOrientation()
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
	return this->orientation;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
}
 800799a:	4618      	mov	r0, r3
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <_ZN6ST77355resetEv>:

void ST7735::reset()
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b082      	sub	sp, #8
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
	//select
	this->csPinReset();
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	335c      	adds	r3, #92	; 0x5c
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3

	//reset
	this->rstPinReset();
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	334c      	adds	r3, #76	; 0x4c
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	4798      	blx	r3
	this->delay(7);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3364      	adds	r3, #100	; 0x64
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2107      	movs	r1, #7
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	4798      	blx	r3
	this->rstPinSet();
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3348      	adds	r3, #72	; 0x48
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	4798      	blx	r3

	//configure
	this->initCommand1();
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff fd9b 	bl	800751c <_ZN6ST773512initCommand1Ev>
	this->initCommand2();
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff fe52 	bl	8007690 <_ZN6ST773512initCommand2Ev>
	this->initCommand3();
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff fe7f 	bl	80076f0 <_ZN6ST773512initCommand3Ev>

	//unselect
	this->csPinSet();
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3358      	adds	r3, #88	; 0x58
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	4798      	blx	r3
}
 80079fe:	bf00      	nop
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <_ZN6ST77356selectEv>:

void ST7735::select()
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b082      	sub	sp, #8
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
	this->selected = true;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	761a      	strb	r2, [r3, #24]
	this->csPinReset();
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	335c      	adds	r3, #92	; 0x5c
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	4798      	blx	r3
}
 8007a20:	bf00      	nop
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <_ZN6ST77358unselectEv>:

void ST7735::unselect()
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
	this->selected = false;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	761a      	strb	r2, [r3, #24]
	this->csPinSet();
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3358      	adds	r3, #88	; 0x58
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	4798      	blx	r3
}
 8007a42:	bf00      	nop
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <_ZN6ST773516setAddressWindowEhhhh>:

void ST7735::setAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	4608      	mov	r0, r1
 8007a54:	4611      	mov	r1, r2
 8007a56:	461a      	mov	r2, r3
 8007a58:	4603      	mov	r3, r0
 8007a5a:	70fb      	strb	r3, [r7, #3]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	70bb      	strb	r3, [r7, #2]
 8007a60:	4613      	mov	r3, r2
 8007a62:	707b      	strb	r3, [r7, #1]
    this->sendCommand(ST7735_CASET); // Column addr set
 8007a64:	212a      	movs	r1, #42	; 0x2a
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff fd14 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0x00);            // XS15 ~ XS8
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7ff fd28 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(x0+ST7735_XSTART);     // XSTART       XS7 ~ XS0
 8007a74:	78fb      	ldrb	r3, [r7, #3]
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7ff fd23 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);            // XE15 ~ XE8
 8007a7e:	2100      	movs	r1, #0
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff fd1f 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(x1+ST7735_XSTART);     // XEND         XE7 ~ XE0
 8007a86:	787b      	ldrb	r3, [r7, #1]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff fd1a 	bl	80074c4 <_ZN6ST77358sendDataEh>

	this->sendCommand(ST7735_RASET); // Row addr set
 8007a90:	212b      	movs	r1, #43	; 0x2b
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7ff fcfe 	bl	8007494 <_ZN6ST773511sendCommandEh>
	this->sendData(0x00);
 8007a98:	2100      	movs	r1, #0
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7ff fd12 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(y0+ST7735_YSTART);     // YSTART
 8007aa0:	78bb      	ldrb	r3, [r7, #2]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7ff fd0d 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(0x00);
 8007aaa:	2100      	movs	r1, #0
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff fd09 	bl	80074c4 <_ZN6ST77358sendDataEh>
	this->sendData(y1+ST7735_YSTART);     // YEND
 8007ab2:	7c3b      	ldrb	r3, [r7, #16]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7ff fd04 	bl	80074c4 <_ZN6ST77358sendDataEh>

	this->sendCommand(ST7735_RAMWR);
 8007abc:	212c      	movs	r1, #44	; 0x2c
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff fce8 	bl	8007494 <_ZN6ST773511sendCommandEh>
}
 8007ac4:	bf00      	nop
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <_ZN6ST773512convertColorEfff>:

uint16_t ST7735::convertColor(float r, float g, float b)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	ed87 0a03 	vstr	s0, [r7, #12]
 8007ad6:	edc7 0a02 	vstr	s1, [r7, #8]
 8007ada:	ed87 1a01 	vstr	s2, [r7, #4]
	r = CLIPVALUE(r, 0, 1);
 8007ade:	edd7 7a03 	vldr	s15, [r7, #12]
 8007ae2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aea:	d502      	bpl.n	8007af2 <_ZN6ST773512convertColorEfff+0x26>
 8007aec:	f04f 0300 	mov.w	r3, #0
 8007af0:	e00c      	b.n	8007b0c <_ZN6ST773512convertColorEfff+0x40>
 8007af2:	edd7 7a03 	vldr	s15, [r7, #12]
 8007af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b02:	dd02      	ble.n	8007b0a <_ZN6ST773512convertColorEfff+0x3e>
 8007b04:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007b08:	e000      	b.n	8007b0c <_ZN6ST773512convertColorEfff+0x40>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	60fb      	str	r3, [r7, #12]
	g = CLIPVALUE(g, 0, 1);
 8007b0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1a:	d502      	bpl.n	8007b22 <_ZN6ST773512convertColorEfff+0x56>
 8007b1c:	f04f 0300 	mov.w	r3, #0
 8007b20:	e00c      	b.n	8007b3c <_ZN6ST773512convertColorEfff+0x70>
 8007b22:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b32:	dd02      	ble.n	8007b3a <_ZN6ST773512convertColorEfff+0x6e>
 8007b34:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007b38:	e000      	b.n	8007b3c <_ZN6ST773512convertColorEfff+0x70>
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	60bb      	str	r3, [r7, #8]
	b = CLIPVALUE(b, 0, 1);
 8007b3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007b42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b4a:	d502      	bpl.n	8007b52 <_ZN6ST773512convertColorEfff+0x86>
 8007b4c:	f04f 0300 	mov.w	r3, #0
 8007b50:	e00c      	b.n	8007b6c <_ZN6ST773512convertColorEfff+0xa0>
 8007b52:	edd7 7a01 	vldr	s15, [r7, #4]
 8007b56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b62:	dd02      	ble.n	8007b6a <_ZN6ST773512convertColorEfff+0x9e>
 8007b64:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007b68:	e000      	b.n	8007b6c <_ZN6ST773512convertColorEfff+0xa0>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	607b      	str	r3, [r7, #4]
	uint8_t R = 0x1F * r;
 8007b6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b72:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8007b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b7e:	edc7 7a00 	vstr	s15, [r7]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	75fb      	strb	r3, [r7, #23]
	uint8_t G = 0x3F * g;
 8007b86:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b8a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007bec <_ZN6ST773512convertColorEfff+0x120>
 8007b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b96:	edc7 7a00 	vstr	s15, [r7]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	75bb      	strb	r3, [r7, #22]
	uint8_t B = 0x1F * b;
 8007b9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ba2:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8007ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bae:	edc7 7a00 	vstr	s15, [r7]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	757b      	strb	r3, [r7, #21]
	uint16_t color = ST7735_COLOR565(R,G,B);
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	02db      	lsls	r3, r3, #11
 8007bba:	b21a      	sxth	r2, r3
 8007bbc:	7dbb      	ldrb	r3, [r7, #22]
 8007bbe:	015b      	lsls	r3, r3, #5
 8007bc0:	b21b      	sxth	r3, r3
 8007bc2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8007bc6:	b21b      	sxth	r3, r3
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	b21a      	sxth	r2, r3
 8007bcc:	7d7b      	ldrb	r3, [r7, #21]
 8007bce:	b21b      	sxth	r3, r3
 8007bd0:	f003 031f 	and.w	r3, r3, #31
 8007bd4:	b21b      	sxth	r3, r3
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	b21b      	sxth	r3, r3
 8007bda:	827b      	strh	r3, [r7, #18]
	return color;
 8007bdc:	8a7b      	ldrh	r3, [r7, #18]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	427c0000 	.word	0x427c0000

08007bf0 <_ZN6ST77359drawPixelEiifff>:


bool ST7735::drawPixel(int x, int y, float r, float g, float b)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08a      	sub	sp, #40	; 0x28
 8007bf4:	af02      	add	r7, sp, #8
 8007bf6:	6178      	str	r0, [r7, #20]
 8007bf8:	6139      	str	r1, [r7, #16]
 8007bfa:	60fa      	str	r2, [r7, #12]
 8007bfc:	ed87 0a02 	vstr	s0, [r7, #8]
 8007c00:	edc7 0a01 	vstr	s1, [r7, #4]
 8007c04:	ed87 1a00 	vstr	s2, [r7]
    if(this->selected)
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	7e1b      	ldrb	r3, [r3, #24]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d04a      	beq.n	8007ca6 <_ZN6ST77359drawPixelEiifff+0xb6>
    {
    	if(x >= this->getWidth() or y >= this->getHeight() or x < 0 or y < 0)
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3304      	adds	r3, #4
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6978      	ldr	r0, [r7, #20]
 8007c1a:	4798      	blx	r3
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d90f      	bls.n	8007c44 <_ZN6ST77359drawPixelEiifff+0x54>
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3308      	adds	r3, #8
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6978      	ldr	r0, [r7, #20]
 8007c2e:	4798      	blx	r3
 8007c30:	4602      	mov	r2, r0
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d905      	bls.n	8007c44 <_ZN6ST77359drawPixelEiifff+0x54>
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	db02      	blt.n	8007c44 <_ZN6ST77359drawPixelEiifff+0x54>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	da01      	bge.n	8007c48 <_ZN6ST77359drawPixelEiifff+0x58>
 8007c44:	2301      	movs	r3, #1
 8007c46:	e000      	b.n	8007c4a <_ZN6ST77359drawPixelEiifff+0x5a>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <_ZN6ST77359drawPixelEiifff+0x62>
    		return false;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e02a      	b.n	8007ca8 <_ZN6ST77359drawPixelEiifff+0xb8>

    	uint16_t color = ST7735::convertColor(r, g, b);
 8007c52:	ed97 1a00 	vldr	s2, [r7]
 8007c56:	edd7 0a01 	vldr	s1, [r7, #4]
 8007c5a:	ed97 0a02 	vldr	s0, [r7, #8]
 8007c5e:	f7ff ff35 	bl	8007acc <_ZN6ST773512convertColorEfff>
 8007c62:	4603      	mov	r3, r0
 8007c64:	83fb      	strh	r3, [r7, #30]
    	this->setAddressWindow(x, y, x+1, y+1);
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	b2d9      	uxtb	r1, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	3301      	adds	r3, #1
 8007c74:	b2d8      	uxtb	r0, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	4603      	mov	r3, r0
 8007c82:	6978      	ldr	r0, [r7, #20]
 8007c84:	f7ff fee1 	bl	8007a4a <_ZN6ST773516setAddressWindowEhhhh>
    	uint8_t data[2];
    	this->sendData(color >> 8);
 8007c88:	8bfb      	ldrh	r3, [r7, #30]
 8007c8a:	121b      	asrs	r3, r3, #8
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6978      	ldr	r0, [r7, #20]
 8007c92:	f7ff fc17 	bl	80074c4 <_ZN6ST77358sendDataEh>
    	this->sendData(color & 0xFF);
 8007c96:	8bfb      	ldrh	r3, [r7, #30]
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6978      	ldr	r0, [r7, #20]
 8007c9e:	f7ff fc11 	bl	80074c4 <_ZN6ST77358sendDataEh>
    	return true;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <_ZN6ST77359drawPixelEiifff+0xb8>
    }
    else
    {
    	return false;
 8007ca6:	2300      	movs	r3, #0
    }
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3720      	adds	r7, #32
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <_ZN6ST77358drawAreaEiiiifff>:

bool ST7735::drawArea(int x1, int y1, int x2, int y2, float r, float g, float b)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b090      	sub	sp, #64	; 0x40
 8007cb4:	af02      	add	r7, sp, #8
 8007cb6:	61f8      	str	r0, [r7, #28]
 8007cb8:	61b9      	str	r1, [r7, #24]
 8007cba:	617a      	str	r2, [r7, #20]
 8007cbc:	613b      	str	r3, [r7, #16]
 8007cbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8007cc2:	edc7 0a02 	vstr	s1, [r7, #8]
 8007cc6:	ed87 1a01 	vstr	s2, [r7, #4]
    if(this->selected)
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	7e1b      	ldrb	r3, [r3, #24]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 8084 	beq.w	8007ddc <_ZN6ST77358drawAreaEiiiifff+0x12c>
    {
    	uint32_t w = this->getWidth();
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	69f8      	ldr	r0, [r7, #28]
 8007cde:	4798      	blx	r3
 8007ce0:	62f8      	str	r0, [r7, #44]	; 0x2c
    	uint32_t h = this->getHeight();
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69f8      	ldr	r0, [r7, #28]
 8007cec:	4798      	blx	r3
 8007cee:	62b8      	str	r0, [r7, #40]	; 0x28

    	if(x1 >= w or y1 >= h or x1 >= x2 or y1 >= y2)
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d90b      	bls.n	8007d10 <_ZN6ST77358drawAreaEiiiifff+0x60>
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d907      	bls.n	8007d10 <_ZN6ST77358drawAreaEiiiifff+0x60>
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	da03      	bge.n	8007d10 <_ZN6ST77358drawAreaEiiiifff+0x60>
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	db01      	blt.n	8007d14 <_ZN6ST77358drawAreaEiiiifff+0x64>
    		return false;
 8007d10:	2300      	movs	r3, #0
 8007d12:	e064      	b.n	8007dde <_ZN6ST77358drawAreaEiiiifff+0x12e>

    	x1 = (x1 < 0) ? 0 : x1;
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007d1a:	61bb      	str	r3, [r7, #24]
    	y1 = (y1 < 0) ? 0 : y1;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007d22:	617b      	str	r3, [r7, #20]
    	x2 = CLIPVALUE(x2, x1, w);
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	db07      	blt.n	8007d3c <_ZN6ST77358drawAreaEiiiifff+0x8c>
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d201      	bcs.n	8007d38 <_ZN6ST77358drawAreaEiiiifff+0x88>
 8007d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d36:	e002      	b.n	8007d3e <_ZN6ST77358drawAreaEiiiifff+0x8e>
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	e000      	b.n	8007d3e <_ZN6ST77358drawAreaEiiiifff+0x8e>
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	613b      	str	r3, [r7, #16]
    	y2 = CLIPVALUE(y2, y1, h);
 8007d40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	db07      	blt.n	8007d58 <_ZN6ST77358drawAreaEiiiifff+0xa8>
 8007d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d201      	bcs.n	8007d54 <_ZN6ST77358drawAreaEiiiifff+0xa4>
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	e002      	b.n	8007d5a <_ZN6ST77358drawAreaEiiiifff+0xaa>
 8007d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d56:	e000      	b.n	8007d5a <_ZN6ST77358drawAreaEiiiifff+0xaa>
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	643b      	str	r3, [r7, #64]	; 0x40

    	uint16_t color = ST7735::convertColor(r, g, b);
 8007d5c:	ed97 1a01 	vldr	s2, [r7, #4]
 8007d60:	edd7 0a02 	vldr	s1, [r7, #8]
 8007d64:	ed97 0a03 	vldr	s0, [r7, #12]
 8007d68:	f7ff feb0 	bl	8007acc <_ZN6ST773512convertColorEfff>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	84fb      	strh	r3, [r7, #38]	; 0x26
    	this->setAddressWindow(x1, y1, x2, y2);
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	b2d9      	uxtb	r1, r3
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	b2d8      	uxtb	r0, r3
 8007d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	4603      	mov	r3, r0
 8007d84:	69f8      	ldr	r0, [r7, #28]
 8007d86:	f7ff fe60 	bl	8007a4a <_ZN6ST773516setAddressWindowEhhhh>
    	this->dcPinSet();
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3350      	adds	r3, #80	; 0x50
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69f8      	ldr	r0, [r7, #28]
 8007d94:	4798      	blx	r3

    	for(int i = x1; i <= x2; i += 1 )
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	637b      	str	r3, [r7, #52]	; 0x34
 8007d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	dc1a      	bgt.n	8007dd8 <_ZN6ST77358drawAreaEiiiifff+0x128>
    	{
    		for(int j = y1; j <= y2; j += 1)
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	633b      	str	r3, [r7, #48]	; 0x30
 8007da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007daa:	429a      	cmp	r2, r3
 8007dac:	dc10      	bgt.n	8007dd0 <_ZN6ST77358drawAreaEiiiifff+0x120>
    		{
    			this->sendData(color >> 8);
 8007dae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007db0:	121b      	asrs	r3, r3, #8
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	4619      	mov	r1, r3
 8007db6:	69f8      	ldr	r0, [r7, #28]
 8007db8:	f7ff fb84 	bl	80074c4 <_ZN6ST77358sendDataEh>
    			this->sendData(color & 0xFF);
 8007dbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	69f8      	ldr	r0, [r7, #28]
 8007dc4:	f7ff fb7e 	bl	80074c4 <_ZN6ST77358sendDataEh>
    		for(int j = y1; j <= y2; j += 1)
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dca:	3301      	adds	r3, #1
 8007dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8007dce:	e7ea      	b.n	8007da6 <_ZN6ST77358drawAreaEiiiifff+0xf6>
    	for(int i = x1; i <= x2; i += 1 )
 8007dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8007dd6:	e7e0      	b.n	8007d9a <_ZN6ST77358drawAreaEiiiifff+0xea>
    		}
    	}

    	return true;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e000      	b.n	8007dde <_ZN6ST77358drawAreaEiiiifff+0x12e>
    }
    else
    {
    	return false;
 8007ddc:	2300      	movs	r3, #0
    }
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3738      	adds	r7, #56	; 0x38
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <_ZN7DisplayD1Ev>:
 *      Author: Filipe Chagas
 */

#include "display.hpp"

Display::~Display()
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	4a04      	ldr	r2, [pc, #16]	; (8007e04 <_ZN7DisplayD1Ev+0x1c>)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	080092f8 	.word	0x080092f8

08007e08 <_ZdlPvj>:
 8007e08:	f000 b816 	b.w	8007e38 <_ZdlPv>

08007e0c <_Znwj>:
 8007e0c:	2801      	cmp	r0, #1
 8007e0e:	bf38      	it	cc
 8007e10:	2001      	movcc	r0, #1
 8007e12:	b510      	push	{r4, lr}
 8007e14:	4604      	mov	r4, r0
 8007e16:	4620      	mov	r0, r4
 8007e18:	f000 ffe2 	bl	8008de0 <malloc>
 8007e1c:	b930      	cbnz	r0, 8007e2c <_Znwj+0x20>
 8007e1e:	f000 f81f 	bl	8007e60 <_ZSt15get_new_handlerv>
 8007e22:	b908      	cbnz	r0, 8007e28 <_Znwj+0x1c>
 8007e24:	f000 ffaa 	bl	8008d7c <abort>
 8007e28:	4780      	blx	r0
 8007e2a:	e7f4      	b.n	8007e16 <_Znwj+0xa>
 8007e2c:	bd10      	pop	{r4, pc}

08007e2e <_Znaj>:
 8007e2e:	f7ff bfed 	b.w	8007e0c <_Znwj>

08007e32 <__cxa_pure_virtual>:
 8007e32:	b508      	push	{r3, lr}
 8007e34:	f000 f80e 	bl	8007e54 <_ZSt9terminatev>

08007e38 <_ZdlPv>:
 8007e38:	f000 bfda 	b.w	8008df0 <free>

08007e3c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007e3c:	b508      	push	{r3, lr}
 8007e3e:	4780      	blx	r0
 8007e40:	f000 ff9c 	bl	8008d7c <abort>

08007e44 <_ZSt13get_terminatev>:
 8007e44:	4b02      	ldr	r3, [pc, #8]	; (8007e50 <_ZSt13get_terminatev+0xc>)
 8007e46:	6818      	ldr	r0, [r3, #0]
 8007e48:	f3bf 8f5b 	dmb	ish
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	20000010 	.word	0x20000010

08007e54 <_ZSt9terminatev>:
 8007e54:	b508      	push	{r3, lr}
 8007e56:	f7ff fff5 	bl	8007e44 <_ZSt13get_terminatev>
 8007e5a:	f7ff ffef 	bl	8007e3c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08007e60 <_ZSt15get_new_handlerv>:
 8007e60:	4b02      	ldr	r3, [pc, #8]	; (8007e6c <_ZSt15get_new_handlerv+0xc>)
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	f3bf 8f5b 	dmb	ish
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	20000098 	.word	0x20000098

08007e70 <sinf_poly>:
 8007e70:	07cb      	lsls	r3, r1, #31
 8007e72:	d412      	bmi.n	8007e9a <sinf_poly+0x2a>
 8007e74:	ee21 6b00 	vmul.f64	d6, d1, d0
 8007e78:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 8007e7c:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8007e80:	eea5 7b01 	vfma.f64	d7, d5, d1
 8007e84:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 8007e88:	ee21 1b06 	vmul.f64	d1, d1, d6
 8007e8c:	eea5 0b06 	vfma.f64	d0, d5, d6
 8007e90:	eea7 0b01 	vfma.f64	d0, d7, d1
 8007e94:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007e98:	4770      	bx	lr
 8007e9a:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 8007e9e:	ee21 6b01 	vmul.f64	d6, d1, d1
 8007ea2:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8007ea6:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8007eaa:	eea1 7b05 	vfma.f64	d7, d1, d5
 8007eae:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 8007eb2:	eea1 0b05 	vfma.f64	d0, d1, d5
 8007eb6:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 8007eba:	ee21 1b06 	vmul.f64	d1, d1, d6
 8007ebe:	eea6 0b05 	vfma.f64	d0, d6, d5
 8007ec2:	e7e5      	b.n	8007e90 <sinf_poly+0x20>
 8007ec4:	0000      	movs	r0, r0
	...

08007ec8 <cosf>:
 8007ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eca:	ee10 4a10 	vmov	r4, s0
 8007ece:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8007ed2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8007ed6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8007eda:	d20c      	bcs.n	8007ef6 <cosf+0x2e>
 8007edc:	ee26 1b06 	vmul.f64	d1, d6, d6
 8007ee0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8007ee4:	d378      	bcc.n	8007fd8 <cosf+0x110>
 8007ee6:	eeb0 0b46 	vmov.f64	d0, d6
 8007eea:	483f      	ldr	r0, [pc, #252]	; (8007fe8 <cosf+0x120>)
 8007eec:	2101      	movs	r1, #1
 8007eee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ef2:	f7ff bfbd 	b.w	8007e70 <sinf_poly>
 8007ef6:	f240 422e 	movw	r2, #1070	; 0x42e
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d826      	bhi.n	8007f4c <cosf+0x84>
 8007efe:	4b3a      	ldr	r3, [pc, #232]	; (8007fe8 <cosf+0x120>)
 8007f00:	ed93 7b08 	vldr	d7, [r3, #32]
 8007f04:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007f08:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007f0c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8007f10:	ee17 1a90 	vmov	r1, s15
 8007f14:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8007f18:	1609      	asrs	r1, r1, #24
 8007f1a:	ee07 1a90 	vmov	s15, r1
 8007f1e:	f001 0203 	and.w	r2, r1, #3
 8007f22:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8007f26:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8007f2a:	ed92 0b00 	vldr	d0, [r2]
 8007f2e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8007f32:	f011 0f02 	tst.w	r1, #2
 8007f36:	eea5 6b47 	vfms.f64	d6, d5, d7
 8007f3a:	f081 0101 	eor.w	r1, r1, #1
 8007f3e:	bf08      	it	eq
 8007f40:	4618      	moveq	r0, r3
 8007f42:	ee26 1b06 	vmul.f64	d1, d6, d6
 8007f46:	ee20 0b06 	vmul.f64	d0, d0, d6
 8007f4a:	e7d0      	b.n	8007eee <cosf+0x26>
 8007f4c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8007f50:	d23e      	bcs.n	8007fd0 <cosf+0x108>
 8007f52:	4b26      	ldr	r3, [pc, #152]	; (8007fec <cosf+0x124>)
 8007f54:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8007f58:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8007f5c:	f3c4 0116 	ubfx	r1, r4, #0, #23
 8007f60:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8007f64:	6a06      	ldr	r6, [r0, #32]
 8007f66:	6900      	ldr	r0, [r0, #16]
 8007f68:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007f6c:	40a9      	lsls	r1, r5
 8007f6e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8007f72:	fba1 6706 	umull	r6, r7, r1, r6
 8007f76:	fb05 f301 	mul.w	r3, r5, r1
 8007f7a:	463a      	mov	r2, r7
 8007f7c:	fbe0 2301 	umlal	r2, r3, r0, r1
 8007f80:	1c11      	adds	r1, r2, #0
 8007f82:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 8007f86:	2000      	movs	r0, #0
 8007f88:	1a10      	subs	r0, r2, r0
 8007f8a:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 8007f8e:	eb63 0101 	sbc.w	r1, r3, r1
 8007f92:	f7f8 fb2f 	bl	80005f4 <__aeabi_l2d>
 8007f96:	0fb5      	lsrs	r5, r6, #30
 8007f98:	4b13      	ldr	r3, [pc, #76]	; (8007fe8 <cosf+0x120>)
 8007f9a:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8007f9e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8007fe0 <cosf+0x118>
 8007fa2:	ec41 0b17 	vmov	d7, r0, r1
 8007fa6:	f004 0203 	and.w	r2, r4, #3
 8007faa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8007fae:	ee27 0b00 	vmul.f64	d0, d7, d0
 8007fb2:	ed92 7b00 	vldr	d7, [r2]
 8007fb6:	ee20 1b00 	vmul.f64	d1, d0, d0
 8007fba:	f014 0f02 	tst.w	r4, #2
 8007fbe:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8007fc2:	f085 0101 	eor.w	r1, r5, #1
 8007fc6:	bf08      	it	eq
 8007fc8:	4618      	moveq	r0, r3
 8007fca:	ee27 0b00 	vmul.f64	d0, d7, d0
 8007fce:	e78e      	b.n	8007eee <cosf+0x26>
 8007fd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007fd4:	f000 b817 	b.w	8008006 <__math_invalidf>
 8007fd8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	54442d18 	.word	0x54442d18
 8007fe4:	3c1921fb 	.word	0x3c1921fb
 8007fe8:	080093a0 	.word	0x080093a0
 8007fec:	0800933c 	.word	0x0800933c

08007ff0 <with_errnof>:
 8007ff0:	b513      	push	{r0, r1, r4, lr}
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007ff8:	f000 fec8 	bl	8008d8c <__errno>
 8007ffc:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008000:	6004      	str	r4, [r0, #0]
 8008002:	b002      	add	sp, #8
 8008004:	bd10      	pop	{r4, pc}

08008006 <__math_invalidf>:
 8008006:	eef0 7a40 	vmov.f32	s15, s0
 800800a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800800e:	eef4 7a67 	vcmp.f32	s15, s15
 8008012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008016:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800801a:	d602      	bvs.n	8008022 <__math_invalidf+0x1c>
 800801c:	2021      	movs	r0, #33	; 0x21
 800801e:	f7ff bfe7 	b.w	8007ff0 <with_errnof>
 8008022:	4770      	bx	lr
 8008024:	0000      	movs	r0, r0
	...

08008028 <sin>:
 8008028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800802a:	eeb0 7b40 	vmov.f64	d7, d0
 800802e:	ee17 3a90 	vmov	r3, s15
 8008032:	4a1f      	ldr	r2, [pc, #124]	; (80080b0 <sin+0x88>)
 8008034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008038:	4293      	cmp	r3, r2
 800803a:	dc05      	bgt.n	8008048 <sin+0x20>
 800803c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80080a8 <sin+0x80>
 8008040:	2000      	movs	r0, #0
 8008042:	f000 fd31 	bl	8008aa8 <__kernel_sin>
 8008046:	e004      	b.n	8008052 <sin+0x2a>
 8008048:	4a1a      	ldr	r2, [pc, #104]	; (80080b4 <sin+0x8c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	dd04      	ble.n	8008058 <sin+0x30>
 800804e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8008052:	b005      	add	sp, #20
 8008054:	f85d fb04 	ldr.w	pc, [sp], #4
 8008058:	4668      	mov	r0, sp
 800805a:	f000 f8f9 	bl	8008250 <__ieee754_rem_pio2>
 800805e:	f000 0003 	and.w	r0, r0, #3
 8008062:	2801      	cmp	r0, #1
 8008064:	d008      	beq.n	8008078 <sin+0x50>
 8008066:	2802      	cmp	r0, #2
 8008068:	d00d      	beq.n	8008086 <sin+0x5e>
 800806a:	b9b0      	cbnz	r0, 800809a <sin+0x72>
 800806c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008070:	ed9d 0b00 	vldr	d0, [sp]
 8008074:	2001      	movs	r0, #1
 8008076:	e7e4      	b.n	8008042 <sin+0x1a>
 8008078:	ed9d 1b02 	vldr	d1, [sp, #8]
 800807c:	ed9d 0b00 	vldr	d0, [sp]
 8008080:	f000 fa26 	bl	80084d0 <__kernel_cos>
 8008084:	e7e5      	b.n	8008052 <sin+0x2a>
 8008086:	ed9d 1b02 	vldr	d1, [sp, #8]
 800808a:	ed9d 0b00 	vldr	d0, [sp]
 800808e:	2001      	movs	r0, #1
 8008090:	f000 fd0a 	bl	8008aa8 <__kernel_sin>
 8008094:	eeb1 0b40 	vneg.f64	d0, d0
 8008098:	e7db      	b.n	8008052 <sin+0x2a>
 800809a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800809e:	ed9d 0b00 	vldr	d0, [sp]
 80080a2:	f000 fa15 	bl	80084d0 <__kernel_cos>
 80080a6:	e7f5      	b.n	8008094 <sin+0x6c>
	...
 80080b0:	3fe921fb 	.word	0x3fe921fb
 80080b4:	7fefffff 	.word	0x7fefffff

080080b8 <sinf_poly>:
 80080b8:	07cb      	lsls	r3, r1, #31
 80080ba:	d412      	bmi.n	80080e2 <sinf_poly+0x2a>
 80080bc:	ee21 6b00 	vmul.f64	d6, d1, d0
 80080c0:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 80080c4:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 80080c8:	eea5 7b01 	vfma.f64	d7, d5, d1
 80080cc:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 80080d0:	ee21 1b06 	vmul.f64	d1, d1, d6
 80080d4:	eea5 0b06 	vfma.f64	d0, d5, d6
 80080d8:	eea7 0b01 	vfma.f64	d0, d7, d1
 80080dc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80080e0:	4770      	bx	lr
 80080e2:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 80080e6:	ee21 6b01 	vmul.f64	d6, d1, d1
 80080ea:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 80080ee:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 80080f2:	eea1 7b05 	vfma.f64	d7, d1, d5
 80080f6:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 80080fa:	eea1 0b05 	vfma.f64	d0, d1, d5
 80080fe:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 8008102:	ee21 1b06 	vmul.f64	d1, d1, d6
 8008106:	eea6 0b05 	vfma.f64	d0, d6, d5
 800810a:	e7e5      	b.n	80080d8 <sinf_poly+0x20>
 800810c:	0000      	movs	r0, r0
	...

08008110 <sinf>:
 8008110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008112:	ee10 4a10 	vmov	r4, s0
 8008116:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800811a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800811e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8008122:	eef0 7a40 	vmov.f32	s15, s0
 8008126:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800812a:	d218      	bcs.n	800815e <sinf+0x4e>
 800812c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8008130:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8008134:	d20a      	bcs.n	800814c <sinf+0x3c>
 8008136:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800813a:	d103      	bne.n	8008144 <sinf+0x34>
 800813c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8008140:	ed8d 1a01 	vstr	s2, [sp, #4]
 8008144:	eeb0 0a67 	vmov.f32	s0, s15
 8008148:	b003      	add	sp, #12
 800814a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800814c:	483e      	ldr	r0, [pc, #248]	; (8008248 <sinf+0x138>)
 800814e:	eeb0 0b46 	vmov.f64	d0, d6
 8008152:	2100      	movs	r1, #0
 8008154:	b003      	add	sp, #12
 8008156:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800815a:	f7ff bfad 	b.w	80080b8 <sinf_poly>
 800815e:	f240 422e 	movw	r2, #1070	; 0x42e
 8008162:	4293      	cmp	r3, r2
 8008164:	d824      	bhi.n	80081b0 <sinf+0xa0>
 8008166:	4b38      	ldr	r3, [pc, #224]	; (8008248 <sinf+0x138>)
 8008168:	ed93 7b08 	vldr	d7, [r3, #32]
 800816c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008170:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008174:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8008178:	ee17 1a90 	vmov	r1, s15
 800817c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8008180:	1609      	asrs	r1, r1, #24
 8008182:	ee07 1a90 	vmov	s15, r1
 8008186:	f001 0203 	and.w	r2, r1, #3
 800818a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800818e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8008192:	ed92 0b00 	vldr	d0, [r2]
 8008196:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800819a:	f011 0f02 	tst.w	r1, #2
 800819e:	eea5 6b47 	vfms.f64	d6, d5, d7
 80081a2:	bf08      	it	eq
 80081a4:	4618      	moveq	r0, r3
 80081a6:	ee26 1b06 	vmul.f64	d1, d6, d6
 80081aa:	ee20 0b06 	vmul.f64	d0, d0, d6
 80081ae:	e7d1      	b.n	8008154 <sinf+0x44>
 80081b0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80081b4:	d23d      	bcs.n	8008232 <sinf+0x122>
 80081b6:	4b25      	ldr	r3, [pc, #148]	; (800824c <sinf+0x13c>)
 80081b8:	f3c4 6283 	ubfx	r2, r4, #26, #4
 80081bc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80081c0:	f3c4 0116 	ubfx	r1, r4, #0, #23
 80081c4:	6a06      	ldr	r6, [r0, #32]
 80081c6:	6900      	ldr	r0, [r0, #16]
 80081c8:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80081cc:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80081d0:	40a9      	lsls	r1, r5
 80081d2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80081d6:	fba1 6706 	umull	r6, r7, r1, r6
 80081da:	fb05 f301 	mul.w	r3, r5, r1
 80081de:	463a      	mov	r2, r7
 80081e0:	fbe0 2301 	umlal	r2, r3, r0, r1
 80081e4:	1c11      	adds	r1, r2, #0
 80081e6:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 80081ea:	2000      	movs	r0, #0
 80081ec:	1a10      	subs	r0, r2, r0
 80081ee:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 80081f2:	eb63 0101 	sbc.w	r1, r3, r1
 80081f6:	f7f8 f9fd 	bl	80005f4 <__aeabi_l2d>
 80081fa:	0fb5      	lsrs	r5, r6, #30
 80081fc:	4a12      	ldr	r2, [pc, #72]	; (8008248 <sinf+0x138>)
 80081fe:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 8008202:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8008240 <sinf+0x130>
 8008206:	ec41 0b17 	vmov	d7, r0, r1
 800820a:	f003 0103 	and.w	r1, r3, #3
 800820e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8008212:	ee27 0b00 	vmul.f64	d0, d7, d0
 8008216:	ed91 7b00 	vldr	d7, [r1]
 800821a:	ee20 1b00 	vmul.f64	d1, d0, d0
 800821e:	f013 0f02 	tst.w	r3, #2
 8008222:	f102 0070 	add.w	r0, r2, #112	; 0x70
 8008226:	4629      	mov	r1, r5
 8008228:	bf08      	it	eq
 800822a:	4610      	moveq	r0, r2
 800822c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8008230:	e790      	b.n	8008154 <sinf+0x44>
 8008232:	b003      	add	sp, #12
 8008234:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008238:	f7ff bee5 	b.w	8008006 <__math_invalidf>
 800823c:	f3af 8000 	nop.w
 8008240:	54442d18 	.word	0x54442d18
 8008244:	3c1921fb 	.word	0x3c1921fb
 8008248:	080093a0 	.word	0x080093a0
 800824c:	0800933c 	.word	0x0800933c

08008250 <__ieee754_rem_pio2>:
 8008250:	b570      	push	{r4, r5, r6, lr}
 8008252:	eeb0 7b40 	vmov.f64	d7, d0
 8008256:	ee17 5a90 	vmov	r5, s15
 800825a:	4b97      	ldr	r3, [pc, #604]	; (80084b8 <__ieee754_rem_pio2+0x268>)
 800825c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008260:	429e      	cmp	r6, r3
 8008262:	b088      	sub	sp, #32
 8008264:	4604      	mov	r4, r0
 8008266:	dc07      	bgt.n	8008278 <__ieee754_rem_pio2+0x28>
 8008268:	2200      	movs	r2, #0
 800826a:	2300      	movs	r3, #0
 800826c:	ed84 0b00 	vstr	d0, [r4]
 8008270:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008274:	2000      	movs	r0, #0
 8008276:	e01b      	b.n	80082b0 <__ieee754_rem_pio2+0x60>
 8008278:	4b90      	ldr	r3, [pc, #576]	; (80084bc <__ieee754_rem_pio2+0x26c>)
 800827a:	429e      	cmp	r6, r3
 800827c:	dc3b      	bgt.n	80082f6 <__ieee754_rem_pio2+0xa6>
 800827e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8008282:	2d00      	cmp	r5, #0
 8008284:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8008478 <__ieee754_rem_pio2+0x228>
 8008288:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800828c:	dd19      	ble.n	80082c2 <__ieee754_rem_pio2+0x72>
 800828e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8008292:	429e      	cmp	r6, r3
 8008294:	d00e      	beq.n	80082b4 <__ieee754_rem_pio2+0x64>
 8008296:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8008480 <__ieee754_rem_pio2+0x230>
 800829a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800829e:	ee37 7b45 	vsub.f64	d7, d7, d5
 80082a2:	ed84 5b00 	vstr	d5, [r4]
 80082a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80082aa:	ed84 7b02 	vstr	d7, [r4, #8]
 80082ae:	2001      	movs	r0, #1
 80082b0:	b008      	add	sp, #32
 80082b2:	bd70      	pop	{r4, r5, r6, pc}
 80082b4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8008488 <__ieee754_rem_pio2+0x238>
 80082b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80082bc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8008490 <__ieee754_rem_pio2+0x240>
 80082c0:	e7eb      	b.n	800829a <__ieee754_rem_pio2+0x4a>
 80082c2:	429e      	cmp	r6, r3
 80082c4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80082c8:	d00e      	beq.n	80082e8 <__ieee754_rem_pio2+0x98>
 80082ca:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8008480 <__ieee754_rem_pio2+0x230>
 80082ce:	ee37 5b06 	vadd.f64	d5, d7, d6
 80082d2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80082d6:	ed84 5b00 	vstr	d5, [r4]
 80082da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80082de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082e2:	ed84 7b02 	vstr	d7, [r4, #8]
 80082e6:	e7e3      	b.n	80082b0 <__ieee754_rem_pio2+0x60>
 80082e8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8008488 <__ieee754_rem_pio2+0x238>
 80082ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80082f0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8008490 <__ieee754_rem_pio2+0x240>
 80082f4:	e7eb      	b.n	80082ce <__ieee754_rem_pio2+0x7e>
 80082f6:	4b72      	ldr	r3, [pc, #456]	; (80084c0 <__ieee754_rem_pio2+0x270>)
 80082f8:	429e      	cmp	r6, r3
 80082fa:	dc6e      	bgt.n	80083da <__ieee754_rem_pio2+0x18a>
 80082fc:	f000 fc2c 	bl	8008b58 <fabs>
 8008300:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008304:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8008498 <__ieee754_rem_pio2+0x248>
 8008308:	eea0 7b06 	vfma.f64	d7, d0, d6
 800830c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008310:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8008314:	ee17 0a90 	vmov	r0, s15
 8008318:	eeb1 4b45 	vneg.f64	d4, d5
 800831c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8008478 <__ieee754_rem_pio2+0x228>
 8008320:	eea5 0b47 	vfms.f64	d0, d5, d7
 8008324:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8008480 <__ieee754_rem_pio2+0x230>
 8008328:	281f      	cmp	r0, #31
 800832a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800832e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008332:	dc08      	bgt.n	8008346 <__ieee754_rem_pio2+0xf6>
 8008334:	4b63      	ldr	r3, [pc, #396]	; (80084c4 <__ieee754_rem_pio2+0x274>)
 8008336:	1e42      	subs	r2, r0, #1
 8008338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800833c:	42b3      	cmp	r3, r6
 800833e:	d002      	beq.n	8008346 <__ieee754_rem_pio2+0xf6>
 8008340:	ed84 6b00 	vstr	d6, [r4]
 8008344:	e024      	b.n	8008390 <__ieee754_rem_pio2+0x140>
 8008346:	ee16 3a90 	vmov	r3, s13
 800834a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800834e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8008352:	2b10      	cmp	r3, #16
 8008354:	ea4f 5226 	mov.w	r2, r6, asr #20
 8008358:	ddf2      	ble.n	8008340 <__ieee754_rem_pio2+0xf0>
 800835a:	eeb0 6b40 	vmov.f64	d6, d0
 800835e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8008488 <__ieee754_rem_pio2+0x238>
 8008362:	eea4 6b03 	vfma.f64	d6, d4, d3
 8008366:	ee30 7b46 	vsub.f64	d7, d0, d6
 800836a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800836e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8008490 <__ieee754_rem_pio2+0x240>
 8008372:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8008376:	ee36 3b47 	vsub.f64	d3, d6, d7
 800837a:	ee13 3a90 	vmov	r3, s7
 800837e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	2b31      	cmp	r3, #49	; 0x31
 8008386:	dc17      	bgt.n	80083b8 <__ieee754_rem_pio2+0x168>
 8008388:	eeb0 0b46 	vmov.f64	d0, d6
 800838c:	ed84 3b00 	vstr	d3, [r4]
 8008390:	ed94 6b00 	vldr	d6, [r4]
 8008394:	2d00      	cmp	r5, #0
 8008396:	ee30 0b46 	vsub.f64	d0, d0, d6
 800839a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800839e:	ed84 7b02 	vstr	d7, [r4, #8]
 80083a2:	da85      	bge.n	80082b0 <__ieee754_rem_pio2+0x60>
 80083a4:	eeb1 6b46 	vneg.f64	d6, d6
 80083a8:	ed84 6b00 	vstr	d6, [r4]
 80083ac:	eeb1 7b47 	vneg.f64	d7, d7
 80083b0:	4240      	negs	r0, r0
 80083b2:	ed84 7b02 	vstr	d7, [r4, #8]
 80083b6:	e77b      	b.n	80082b0 <__ieee754_rem_pio2+0x60>
 80083b8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80084a0 <__ieee754_rem_pio2+0x250>
 80083bc:	eeb0 0b46 	vmov.f64	d0, d6
 80083c0:	eea4 0b03 	vfma.f64	d0, d4, d3
 80083c4:	ee36 7b40 	vsub.f64	d7, d6, d0
 80083c8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80084a8 <__ieee754_rem_pio2+0x258>
 80083cc:	eea4 7b03 	vfma.f64	d7, d4, d3
 80083d0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80083d4:	ee30 6b47 	vsub.f64	d6, d0, d7
 80083d8:	e7b2      	b.n	8008340 <__ieee754_rem_pio2+0xf0>
 80083da:	4b3b      	ldr	r3, [pc, #236]	; (80084c8 <__ieee754_rem_pio2+0x278>)
 80083dc:	429e      	cmp	r6, r3
 80083de:	dd06      	ble.n	80083ee <__ieee754_rem_pio2+0x19e>
 80083e0:	ee30 7b40 	vsub.f64	d7, d0, d0
 80083e4:	ed80 7b02 	vstr	d7, [r0, #8]
 80083e8:	ed80 7b00 	vstr	d7, [r0]
 80083ec:	e742      	b.n	8008274 <__ieee754_rem_pio2+0x24>
 80083ee:	1532      	asrs	r2, r6, #20
 80083f0:	ee10 0a10 	vmov	r0, s0
 80083f4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80083f8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80083fc:	ec41 0b17 	vmov	d7, r0, r1
 8008400:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008404:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80084b0 <__ieee754_rem_pio2+0x260>
 8008408:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800840c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008410:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008414:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008418:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800841c:	a902      	add	r1, sp, #8
 800841e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008422:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008426:	ed8d 6b04 	vstr	d6, [sp, #16]
 800842a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800842e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008432:	2603      	movs	r6, #3
 8008434:	4608      	mov	r0, r1
 8008436:	ed91 7b04 	vldr	d7, [r1, #16]
 800843a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800843e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008442:	4633      	mov	r3, r6
 8008444:	f1a1 0108 	sub.w	r1, r1, #8
 8008448:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800844c:	d0f3      	beq.n	8008436 <__ieee754_rem_pio2+0x1e6>
 800844e:	491f      	ldr	r1, [pc, #124]	; (80084cc <__ieee754_rem_pio2+0x27c>)
 8008450:	9101      	str	r1, [sp, #4]
 8008452:	2102      	movs	r1, #2
 8008454:	9100      	str	r1, [sp, #0]
 8008456:	4621      	mov	r1, r4
 8008458:	f000 f8a6 	bl	80085a8 <__kernel_rem_pio2>
 800845c:	2d00      	cmp	r5, #0
 800845e:	f6bf af27 	bge.w	80082b0 <__ieee754_rem_pio2+0x60>
 8008462:	ed94 7b00 	vldr	d7, [r4]
 8008466:	eeb1 7b47 	vneg.f64	d7, d7
 800846a:	ed84 7b00 	vstr	d7, [r4]
 800846e:	ed94 7b02 	vldr	d7, [r4, #8]
 8008472:	e79b      	b.n	80083ac <__ieee754_rem_pio2+0x15c>
 8008474:	f3af 8000 	nop.w
 8008478:	54400000 	.word	0x54400000
 800847c:	3ff921fb 	.word	0x3ff921fb
 8008480:	1a626331 	.word	0x1a626331
 8008484:	3dd0b461 	.word	0x3dd0b461
 8008488:	1a600000 	.word	0x1a600000
 800848c:	3dd0b461 	.word	0x3dd0b461
 8008490:	2e037073 	.word	0x2e037073
 8008494:	3ba3198a 	.word	0x3ba3198a
 8008498:	6dc9c883 	.word	0x6dc9c883
 800849c:	3fe45f30 	.word	0x3fe45f30
 80084a0:	2e000000 	.word	0x2e000000
 80084a4:	3ba3198a 	.word	0x3ba3198a
 80084a8:	252049c1 	.word	0x252049c1
 80084ac:	397b839a 	.word	0x397b839a
 80084b0:	00000000 	.word	0x00000000
 80084b4:	41700000 	.word	0x41700000
 80084b8:	3fe921fb 	.word	0x3fe921fb
 80084bc:	4002d97b 	.word	0x4002d97b
 80084c0:	413921fb 	.word	0x413921fb
 80084c4:	08009480 	.word	0x08009480
 80084c8:	7fefffff 	.word	0x7fefffff
 80084cc:	08009500 	.word	0x08009500

080084d0 <__kernel_cos>:
 80084d0:	ee10 1a90 	vmov	r1, s1
 80084d4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80084d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80084dc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80084e0:	da05      	bge.n	80084ee <__kernel_cos+0x1e>
 80084e2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80084e6:	ee17 3a90 	vmov	r3, s15
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d03d      	beq.n	800856a <__kernel_cos+0x9a>
 80084ee:	ee20 3b00 	vmul.f64	d3, d0, d0
 80084f2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8008570 <__kernel_cos+0xa0>
 80084f6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008578 <__kernel_cos+0xa8>
 80084fa:	eea3 6b07 	vfma.f64	d6, d3, d7
 80084fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008580 <__kernel_cos+0xb0>
 8008502:	eea6 7b03 	vfma.f64	d7, d6, d3
 8008506:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008588 <__kernel_cos+0xb8>
 800850a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800850e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008590 <__kernel_cos+0xc0>
 8008512:	4b23      	ldr	r3, [pc, #140]	; (80085a0 <__kernel_cos+0xd0>)
 8008514:	eea6 7b03 	vfma.f64	d7, d6, d3
 8008518:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8008598 <__kernel_cos+0xc8>
 800851c:	4299      	cmp	r1, r3
 800851e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8008522:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008526:	ee26 5b03 	vmul.f64	d5, d6, d3
 800852a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800852e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8008532:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008536:	dc04      	bgt.n	8008542 <__kernel_cos+0x72>
 8008538:	ee37 6b46 	vsub.f64	d6, d7, d6
 800853c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8008540:	4770      	bx	lr
 8008542:	4b18      	ldr	r3, [pc, #96]	; (80085a4 <__kernel_cos+0xd4>)
 8008544:	4299      	cmp	r1, r3
 8008546:	dc0d      	bgt.n	8008564 <__kernel_cos+0x94>
 8008548:	2200      	movs	r2, #0
 800854a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800854e:	ec43 2b15 	vmov	d5, r2, r3
 8008552:	ee34 0b45 	vsub.f64	d0, d4, d5
 8008556:	ee37 7b45 	vsub.f64	d7, d7, d5
 800855a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800855e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008562:	4770      	bx	lr
 8008564:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8008568:	e7f3      	b.n	8008552 <__kernel_cos+0x82>
 800856a:	eeb0 0b44 	vmov.f64	d0, d4
 800856e:	4770      	bx	lr
 8008570:	be8838d4 	.word	0xbe8838d4
 8008574:	bda8fae9 	.word	0xbda8fae9
 8008578:	bdb4b1c4 	.word	0xbdb4b1c4
 800857c:	3e21ee9e 	.word	0x3e21ee9e
 8008580:	809c52ad 	.word	0x809c52ad
 8008584:	be927e4f 	.word	0xbe927e4f
 8008588:	19cb1590 	.word	0x19cb1590
 800858c:	3efa01a0 	.word	0x3efa01a0
 8008590:	16c15177 	.word	0x16c15177
 8008594:	bf56c16c 	.word	0xbf56c16c
 8008598:	5555554c 	.word	0x5555554c
 800859c:	3fa55555 	.word	0x3fa55555
 80085a0:	3fd33332 	.word	0x3fd33332
 80085a4:	3fe90000 	.word	0x3fe90000

080085a8 <__kernel_rem_pio2>:
 80085a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ac:	ed2d 8b06 	vpush	{d8-d10}
 80085b0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80085b4:	469b      	mov	fp, r3
 80085b6:	460f      	mov	r7, r1
 80085b8:	4bcf      	ldr	r3, [pc, #828]	; (80088f8 <__kernel_rem_pio2+0x350>)
 80085ba:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80085bc:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 80085c0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80085c4:	9000      	str	r0, [sp, #0]
 80085c6:	f112 0f14 	cmn.w	r2, #20
 80085ca:	bfa8      	it	ge
 80085cc:	2318      	movge	r3, #24
 80085ce:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 80085d2:	bfb8      	it	lt
 80085d4:	2300      	movlt	r3, #0
 80085d6:	f06f 0417 	mvn.w	r4, #23
 80085da:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 80088e0 <__kernel_rem_pio2+0x338>
 80085de:	bfa4      	itt	ge
 80085e0:	f1a2 0a03 	subge.w	sl, r2, #3
 80085e4:	fb9a f3f3 	sdivge	r3, sl, r3
 80085e8:	fb03 4404 	mla	r4, r3, r4, r4
 80085ec:	1a5d      	subs	r5, r3, r1
 80085ee:	4414      	add	r4, r2
 80085f0:	eb09 0601 	add.w	r6, r9, r1
 80085f4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80085f8:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 80085fc:	2200      	movs	r2, #0
 80085fe:	42b2      	cmp	r2, r6
 8008600:	dd12      	ble.n	8008628 <__kernel_rem_pio2+0x80>
 8008602:	aa18      	add	r2, sp, #96	; 0x60
 8008604:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8008608:	460e      	mov	r6, r1
 800860a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800860e:	f1cb 0a01 	rsb	sl, fp, #1
 8008612:	eb0a 0006 	add.w	r0, sl, r6
 8008616:	4581      	cmp	r9, r0
 8008618:	db25      	blt.n	8008666 <__kernel_rem_pio2+0xbe>
 800861a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 80088e0 <__kernel_rem_pio2+0x338>
 800861e:	f8dd e000 	ldr.w	lr, [sp]
 8008622:	4615      	mov	r5, r2
 8008624:	2000      	movs	r0, #0
 8008626:	e015      	b.n	8008654 <__kernel_rem_pio2+0xac>
 8008628:	42d5      	cmn	r5, r2
 800862a:	d409      	bmi.n	8008640 <__kernel_rem_pio2+0x98>
 800862c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8008630:	ee07 0a90 	vmov	s15, r0
 8008634:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008638:	eca8 7b02 	vstmia	r8!, {d7}
 800863c:	3201      	adds	r2, #1
 800863e:	e7de      	b.n	80085fe <__kernel_rem_pio2+0x56>
 8008640:	eeb0 7b46 	vmov.f64	d7, d6
 8008644:	e7f8      	b.n	8008638 <__kernel_rem_pio2+0x90>
 8008646:	ecbe 5b02 	vldmia	lr!, {d5}
 800864a:	ed95 6b00 	vldr	d6, [r5]
 800864e:	3001      	adds	r0, #1
 8008650:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008654:	4288      	cmp	r0, r1
 8008656:	f1a5 0508 	sub.w	r5, r5, #8
 800865a:	ddf4      	ble.n	8008646 <__kernel_rem_pio2+0x9e>
 800865c:	eca8 7b02 	vstmia	r8!, {d7}
 8008660:	3208      	adds	r2, #8
 8008662:	3601      	adds	r6, #1
 8008664:	e7d5      	b.n	8008612 <__kernel_rem_pio2+0x6a>
 8008666:	aa04      	add	r2, sp, #16
 8008668:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 80088e8 <__kernel_rem_pio2+0x340>
 800866c:	ed9f aba0 	vldr	d10, [pc, #640]	; 80088f0 <__kernel_rem_pio2+0x348>
 8008670:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8008674:	9201      	str	r2, [sp, #4]
 8008676:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800867a:	464e      	mov	r6, r9
 800867c:	ab90      	add	r3, sp, #576	; 0x240
 800867e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008682:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8008686:	ab04      	add	r3, sp, #16
 8008688:	4618      	mov	r0, r3
 800868a:	4632      	mov	r2, r6
 800868c:	2a00      	cmp	r2, #0
 800868e:	dc4e      	bgt.n	800872e <__kernel_rem_pio2+0x186>
 8008690:	4620      	mov	r0, r4
 8008692:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8008696:	f000 fadf 	bl	8008c58 <scalbn>
 800869a:	eeb0 8b40 	vmov.f64	d8, d0
 800869e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80086a2:	ee28 0b00 	vmul.f64	d0, d8, d0
 80086a6:	f000 fa63 	bl	8008b70 <floor>
 80086aa:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80086ae:	eea0 8b47 	vfms.f64	d8, d0, d7
 80086b2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80086b6:	2c00      	cmp	r4, #0
 80086b8:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80086bc:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80086c0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80086c4:	ee17 8a90 	vmov	r8, s15
 80086c8:	dd46      	ble.n	8008758 <__kernel_rem_pio2+0x1b0>
 80086ca:	1e70      	subs	r0, r6, #1
 80086cc:	aa04      	add	r2, sp, #16
 80086ce:	f1c4 0c18 	rsb	ip, r4, #24
 80086d2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 80086d6:	fa45 f20c 	asr.w	r2, r5, ip
 80086da:	4490      	add	r8, r2
 80086dc:	fa02 f20c 	lsl.w	r2, r2, ip
 80086e0:	1aad      	subs	r5, r5, r2
 80086e2:	aa04      	add	r2, sp, #16
 80086e4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 80086e8:	f1c4 0217 	rsb	r2, r4, #23
 80086ec:	4115      	asrs	r5, r2
 80086ee:	2d00      	cmp	r5, #0
 80086f0:	dd41      	ble.n	8008776 <__kernel_rem_pio2+0x1ce>
 80086f2:	f04f 0c00 	mov.w	ip, #0
 80086f6:	f108 0801 	add.w	r8, r8, #1
 80086fa:	4660      	mov	r0, ip
 80086fc:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8008700:	4566      	cmp	r6, ip
 8008702:	dc69      	bgt.n	80087d8 <__kernel_rem_pio2+0x230>
 8008704:	2c00      	cmp	r4, #0
 8008706:	dd03      	ble.n	8008710 <__kernel_rem_pio2+0x168>
 8008708:	2c01      	cmp	r4, #1
 800870a:	d076      	beq.n	80087fa <__kernel_rem_pio2+0x252>
 800870c:	2c02      	cmp	r4, #2
 800870e:	d07f      	beq.n	8008810 <__kernel_rem_pio2+0x268>
 8008710:	2d02      	cmp	r5, #2
 8008712:	d130      	bne.n	8008776 <__kernel_rem_pio2+0x1ce>
 8008714:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008718:	ee30 8b48 	vsub.f64	d8, d0, d8
 800871c:	b358      	cbz	r0, 8008776 <__kernel_rem_pio2+0x1ce>
 800871e:	4620      	mov	r0, r4
 8008720:	9102      	str	r1, [sp, #8]
 8008722:	f000 fa99 	bl	8008c58 <scalbn>
 8008726:	9902      	ldr	r1, [sp, #8]
 8008728:	ee38 8b40 	vsub.f64	d8, d8, d0
 800872c:	e023      	b.n	8008776 <__kernel_rem_pio2+0x1ce>
 800872e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8008732:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008736:	3a01      	subs	r2, #1
 8008738:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800873c:	ad68      	add	r5, sp, #416	; 0x1a0
 800873e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8008742:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008746:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800874a:	eca0 0a01 	vstmia	r0!, {s0}
 800874e:	ed95 0b00 	vldr	d0, [r5]
 8008752:	ee37 0b00 	vadd.f64	d0, d7, d0
 8008756:	e799      	b.n	800868c <__kernel_rem_pio2+0xe4>
 8008758:	d105      	bne.n	8008766 <__kernel_rem_pio2+0x1be>
 800875a:	1e72      	subs	r2, r6, #1
 800875c:	a804      	add	r0, sp, #16
 800875e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8008762:	15ed      	asrs	r5, r5, #23
 8008764:	e7c3      	b.n	80086ee <__kernel_rem_pio2+0x146>
 8008766:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800876a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800876e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008772:	da2f      	bge.n	80087d4 <__kernel_rem_pio2+0x22c>
 8008774:	2500      	movs	r5, #0
 8008776:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800877a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800877e:	f040 8087 	bne.w	8008890 <__kernel_rem_pio2+0x2e8>
 8008782:	1e73      	subs	r3, r6, #1
 8008784:	4618      	mov	r0, r3
 8008786:	f04f 0c00 	mov.w	ip, #0
 800878a:	4548      	cmp	r0, r9
 800878c:	da47      	bge.n	800881e <__kernel_rem_pio2+0x276>
 800878e:	f1bc 0f00 	cmp.w	ip, #0
 8008792:	d070      	beq.n	8008876 <__kernel_rem_pio2+0x2ce>
 8008794:	aa04      	add	r2, sp, #16
 8008796:	3c18      	subs	r4, #24
 8008798:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800879c:	2a00      	cmp	r2, #0
 800879e:	d075      	beq.n	800888c <__kernel_rem_pio2+0x2e4>
 80087a0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80087a4:	4620      	mov	r0, r4
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	f000 fa56 	bl	8008c58 <scalbn>
 80087ac:	9b00      	ldr	r3, [sp, #0]
 80087ae:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80088e8 <__kernel_rem_pio2+0x340>
 80087b2:	461a      	mov	r2, r3
 80087b4:	2a00      	cmp	r2, #0
 80087b6:	f280 80ac 	bge.w	8008912 <__kernel_rem_pio2+0x36a>
 80087ba:	4619      	mov	r1, r3
 80087bc:	2000      	movs	r0, #0
 80087be:	2900      	cmp	r1, #0
 80087c0:	f2c0 80cd 	blt.w	800895e <__kernel_rem_pio2+0x3b6>
 80087c4:	aa68      	add	r2, sp, #416	; 0x1a0
 80087c6:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 80087ca:	ed9f 7b45 	vldr	d7, [pc, #276]	; 80088e0 <__kernel_rem_pio2+0x338>
 80087ce:	4e4b      	ldr	r6, [pc, #300]	; (80088fc <__kernel_rem_pio2+0x354>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	e0b8      	b.n	8008946 <__kernel_rem_pio2+0x39e>
 80087d4:	2502      	movs	r5, #2
 80087d6:	e78c      	b.n	80086f2 <__kernel_rem_pio2+0x14a>
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	b948      	cbnz	r0, 80087f0 <__kernel_rem_pio2+0x248>
 80087dc:	b11a      	cbz	r2, 80087e6 <__kernel_rem_pio2+0x23e>
 80087de:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f10c 0c01 	add.w	ip, ip, #1
 80087ea:	3304      	adds	r3, #4
 80087ec:	4610      	mov	r0, r2
 80087ee:	e787      	b.n	8008700 <__kernel_rem_pio2+0x158>
 80087f0:	ebae 0202 	sub.w	r2, lr, r2
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	4602      	mov	r2, r0
 80087f8:	e7f5      	b.n	80087e6 <__kernel_rem_pio2+0x23e>
 80087fa:	1e72      	subs	r2, r6, #1
 80087fc:	ab04      	add	r3, sp, #16
 80087fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008802:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008806:	f10d 0c10 	add.w	ip, sp, #16
 800880a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800880e:	e77f      	b.n	8008710 <__kernel_rem_pio2+0x168>
 8008810:	1e72      	subs	r2, r6, #1
 8008812:	ab04      	add	r3, sp, #16
 8008814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008818:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800881c:	e7f3      	b.n	8008806 <__kernel_rem_pio2+0x25e>
 800881e:	aa04      	add	r2, sp, #16
 8008820:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8008824:	3801      	subs	r0, #1
 8008826:	ea4c 0c02 	orr.w	ip, ip, r2
 800882a:	e7ae      	b.n	800878a <__kernel_rem_pio2+0x1e2>
 800882c:	3001      	adds	r0, #1
 800882e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008832:	2a00      	cmp	r2, #0
 8008834:	d0fa      	beq.n	800882c <__kernel_rem_pio2+0x284>
 8008836:	eb06 020b 	add.w	r2, r6, fp
 800883a:	ad18      	add	r5, sp, #96	; 0x60
 800883c:	1c73      	adds	r3, r6, #1
 800883e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8008842:	4406      	add	r6, r0
 8008844:	429e      	cmp	r6, r3
 8008846:	f6ff af19 	blt.w	800867c <__kernel_rem_pio2+0xd4>
 800884a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800884e:	9d00      	ldr	r5, [sp, #0]
 8008850:	ee07 0a90 	vmov	s15, r0
 8008854:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008858:	2000      	movs	r0, #0
 800885a:	eca2 7b02 	vstmia	r2!, {d7}
 800885e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80088e0 <__kernel_rem_pio2+0x338>
 8008862:	4694      	mov	ip, r2
 8008864:	4288      	cmp	r0, r1
 8008866:	dd09      	ble.n	800887c <__kernel_rem_pio2+0x2d4>
 8008868:	a868      	add	r0, sp, #416	; 0x1a0
 800886a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800886e:	ed80 7b00 	vstr	d7, [r0]
 8008872:	3301      	adds	r3, #1
 8008874:	e7e6      	b.n	8008844 <__kernel_rem_pio2+0x29c>
 8008876:	9b01      	ldr	r3, [sp, #4]
 8008878:	2001      	movs	r0, #1
 800887a:	e7d8      	b.n	800882e <__kernel_rem_pio2+0x286>
 800887c:	ecb5 5b02 	vldmia	r5!, {d5}
 8008880:	ed3c 6b02 	vldmdb	ip!, {d6}
 8008884:	3001      	adds	r0, #1
 8008886:	eea5 7b06 	vfma.f64	d7, d5, d6
 800888a:	e7eb      	b.n	8008864 <__kernel_rem_pio2+0x2bc>
 800888c:	3b01      	subs	r3, #1
 800888e:	e781      	b.n	8008794 <__kernel_rem_pio2+0x1ec>
 8008890:	4260      	negs	r0, r4
 8008892:	eeb0 0b48 	vmov.f64	d0, d8
 8008896:	f000 f9df 	bl	8008c58 <scalbn>
 800889a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80088f0 <__kernel_rem_pio2+0x348>
 800889e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80088a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a6:	db2b      	blt.n	8008900 <__kernel_rem_pio2+0x358>
 80088a8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80088e8 <__kernel_rem_pio2+0x340>
 80088ac:	ee20 7b07 	vmul.f64	d7, d0, d7
 80088b0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80088b4:	aa04      	add	r2, sp, #16
 80088b6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80088ba:	eea5 0b46 	vfms.f64	d0, d5, d6
 80088be:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80088c2:	a904      	add	r1, sp, #16
 80088c4:	ee10 3a10 	vmov	r3, s0
 80088c8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80088cc:	ee17 2a10 	vmov	r2, s14
 80088d0:	1c73      	adds	r3, r6, #1
 80088d2:	3418      	adds	r4, #24
 80088d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80088d8:	e762      	b.n	80087a0 <__kernel_rem_pio2+0x1f8>
 80088da:	bf00      	nop
 80088dc:	f3af 8000 	nop.w
	...
 80088ec:	3e700000 	.word	0x3e700000
 80088f0:	00000000 	.word	0x00000000
 80088f4:	41700000 	.word	0x41700000
 80088f8:	08009648 	.word	0x08009648
 80088fc:	08009608 	.word	0x08009608
 8008900:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008904:	aa04      	add	r2, sp, #16
 8008906:	ee10 3a10 	vmov	r3, s0
 800890a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800890e:	4633      	mov	r3, r6
 8008910:	e746      	b.n	80087a0 <__kernel_rem_pio2+0x1f8>
 8008912:	a804      	add	r0, sp, #16
 8008914:	a968      	add	r1, sp, #416	; 0x1a0
 8008916:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800891a:	9000      	str	r0, [sp, #0]
 800891c:	ee07 0a90 	vmov	s15, r0
 8008920:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008924:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008928:	3a01      	subs	r2, #1
 800892a:	ee27 7b00 	vmul.f64	d7, d7, d0
 800892e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8008932:	ed81 7b00 	vstr	d7, [r1]
 8008936:	e73d      	b.n	80087b4 <__kernel_rem_pio2+0x20c>
 8008938:	ecb6 5b02 	vldmia	r6!, {d5}
 800893c:	ecb4 6b02 	vldmia	r4!, {d6}
 8008940:	3201      	adds	r2, #1
 8008942:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008946:	454a      	cmp	r2, r9
 8008948:	dc01      	bgt.n	800894e <__kernel_rem_pio2+0x3a6>
 800894a:	4290      	cmp	r0, r2
 800894c:	daf4      	bge.n	8008938 <__kernel_rem_pio2+0x390>
 800894e:	aa40      	add	r2, sp, #256	; 0x100
 8008950:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008954:	ed82 7b00 	vstr	d7, [r2]
 8008958:	3901      	subs	r1, #1
 800895a:	3001      	adds	r0, #1
 800895c:	e72f      	b.n	80087be <__kernel_rem_pio2+0x216>
 800895e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8008960:	2a02      	cmp	r2, #2
 8008962:	dc0a      	bgt.n	800897a <__kernel_rem_pio2+0x3d2>
 8008964:	2a00      	cmp	r2, #0
 8008966:	dc5a      	bgt.n	8008a1e <__kernel_rem_pio2+0x476>
 8008968:	d039      	beq.n	80089de <__kernel_rem_pio2+0x436>
 800896a:	f008 0007 	and.w	r0, r8, #7
 800896e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8008972:	ecbd 8b06 	vpop	{d8-d10}
 8008976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800897c:	2a03      	cmp	r2, #3
 800897e:	d1f4      	bne.n	800896a <__kernel_rem_pio2+0x3c2>
 8008980:	aa40      	add	r2, sp, #256	; 0x100
 8008982:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008986:	4611      	mov	r1, r2
 8008988:	4618      	mov	r0, r3
 800898a:	2800      	cmp	r0, #0
 800898c:	f1a1 0108 	sub.w	r1, r1, #8
 8008990:	dc52      	bgt.n	8008a38 <__kernel_rem_pio2+0x490>
 8008992:	4619      	mov	r1, r3
 8008994:	2901      	cmp	r1, #1
 8008996:	f1a2 0208 	sub.w	r2, r2, #8
 800899a:	dc5d      	bgt.n	8008a58 <__kernel_rem_pio2+0x4b0>
 800899c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8008aa0 <__kernel_rem_pio2+0x4f8>
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	dc69      	bgt.n	8008a78 <__kernel_rem_pio2+0x4d0>
 80089a4:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 80089a8:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 80089ac:	2d00      	cmp	r5, #0
 80089ae:	d16c      	bne.n	8008a8a <__kernel_rem_pio2+0x4e2>
 80089b0:	ed87 5b00 	vstr	d5, [r7]
 80089b4:	ed87 6b02 	vstr	d6, [r7, #8]
 80089b8:	ed87 7b04 	vstr	d7, [r7, #16]
 80089bc:	e7d5      	b.n	800896a <__kernel_rem_pio2+0x3c2>
 80089be:	aa40      	add	r2, sp, #256	; 0x100
 80089c0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80089c4:	ed92 6b00 	vldr	d6, [r2]
 80089c8:	3b01      	subs	r3, #1
 80089ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	daf5      	bge.n	80089be <__kernel_rem_pio2+0x416>
 80089d2:	b10d      	cbz	r5, 80089d8 <__kernel_rem_pio2+0x430>
 80089d4:	eeb1 7b47 	vneg.f64	d7, d7
 80089d8:	ed87 7b00 	vstr	d7, [r7]
 80089dc:	e7c5      	b.n	800896a <__kernel_rem_pio2+0x3c2>
 80089de:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8008aa0 <__kernel_rem_pio2+0x4f8>
 80089e2:	e7f4      	b.n	80089ce <__kernel_rem_pio2+0x426>
 80089e4:	a940      	add	r1, sp, #256	; 0x100
 80089e6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80089ea:	ed91 7b00 	vldr	d7, [r1]
 80089ee:	3a01      	subs	r2, #1
 80089f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80089f4:	2a00      	cmp	r2, #0
 80089f6:	daf5      	bge.n	80089e4 <__kernel_rem_pio2+0x43c>
 80089f8:	b1ad      	cbz	r5, 8008a26 <__kernel_rem_pio2+0x47e>
 80089fa:	eeb1 7b46 	vneg.f64	d7, d6
 80089fe:	ed87 7b00 	vstr	d7, [r7]
 8008a02:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8008a06:	a942      	add	r1, sp, #264	; 0x108
 8008a08:	2201      	movs	r2, #1
 8008a0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	da0c      	bge.n	8008a2c <__kernel_rem_pio2+0x484>
 8008a12:	b10d      	cbz	r5, 8008a18 <__kernel_rem_pio2+0x470>
 8008a14:	eeb1 7b47 	vneg.f64	d7, d7
 8008a18:	ed87 7b02 	vstr	d7, [r7, #8]
 8008a1c:	e7a5      	b.n	800896a <__kernel_rem_pio2+0x3c2>
 8008a1e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008aa0 <__kernel_rem_pio2+0x4f8>
 8008a22:	461a      	mov	r2, r3
 8008a24:	e7e6      	b.n	80089f4 <__kernel_rem_pio2+0x44c>
 8008a26:	eeb0 7b46 	vmov.f64	d7, d6
 8008a2a:	e7e8      	b.n	80089fe <__kernel_rem_pio2+0x456>
 8008a2c:	ecb1 6b02 	vldmia	r1!, {d6}
 8008a30:	3201      	adds	r2, #1
 8008a32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008a36:	e7ea      	b.n	8008a0e <__kernel_rem_pio2+0x466>
 8008a38:	ed91 7b00 	vldr	d7, [r1]
 8008a3c:	ed91 5b02 	vldr	d5, [r1, #8]
 8008a40:	3801      	subs	r0, #1
 8008a42:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008a46:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008a4a:	ed81 6b00 	vstr	d6, [r1]
 8008a4e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008a52:	ed81 7b02 	vstr	d7, [r1, #8]
 8008a56:	e798      	b.n	800898a <__kernel_rem_pio2+0x3e2>
 8008a58:	ed92 7b00 	vldr	d7, [r2]
 8008a5c:	ed92 5b02 	vldr	d5, [r2, #8]
 8008a60:	3901      	subs	r1, #1
 8008a62:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008a66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008a6a:	ed82 6b00 	vstr	d6, [r2]
 8008a6e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008a72:	ed82 7b02 	vstr	d7, [r2, #8]
 8008a76:	e78d      	b.n	8008994 <__kernel_rem_pio2+0x3ec>
 8008a78:	aa40      	add	r2, sp, #256	; 0x100
 8008a7a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008a7e:	ed92 6b00 	vldr	d6, [r2]
 8008a82:	3b01      	subs	r3, #1
 8008a84:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008a88:	e78a      	b.n	80089a0 <__kernel_rem_pio2+0x3f8>
 8008a8a:	eeb1 5b45 	vneg.f64	d5, d5
 8008a8e:	eeb1 6b46 	vneg.f64	d6, d6
 8008a92:	ed87 5b00 	vstr	d5, [r7]
 8008a96:	eeb1 7b47 	vneg.f64	d7, d7
 8008a9a:	ed87 6b02 	vstr	d6, [r7, #8]
 8008a9e:	e78b      	b.n	80089b8 <__kernel_rem_pio2+0x410>
	...

08008aa8 <__kernel_sin>:
 8008aa8:	ee10 3a90 	vmov	r3, s1
 8008aac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ab0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008ab4:	da04      	bge.n	8008ac0 <__kernel_sin+0x18>
 8008ab6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008aba:	ee17 3a90 	vmov	r3, s15
 8008abe:	b35b      	cbz	r3, 8008b18 <__kernel_sin+0x70>
 8008ac0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8008ac4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8008ac8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8008b20 <__kernel_sin+0x78>
 8008acc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008b28 <__kernel_sin+0x80>
 8008ad0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008ad4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008b30 <__kernel_sin+0x88>
 8008ad8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008adc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008b38 <__kernel_sin+0x90>
 8008ae0:	eea7 4b06 	vfma.f64	d4, d7, d6
 8008ae4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008b40 <__kernel_sin+0x98>
 8008ae8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008aec:	b930      	cbnz	r0, 8008afc <__kernel_sin+0x54>
 8008aee:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008b48 <__kernel_sin+0xa0>
 8008af2:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008af6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8008afa:	4770      	bx	lr
 8008afc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8008b00:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008b04:	eea1 7b04 	vfma.f64	d7, d1, d4
 8008b08:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8008b0c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008b50 <__kernel_sin+0xa8>
 8008b10:	eea5 1b07 	vfma.f64	d1, d5, d7
 8008b14:	ee30 0b41 	vsub.f64	d0, d0, d1
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	f3af 8000 	nop.w
 8008b20:	5acfd57c 	.word	0x5acfd57c
 8008b24:	3de5d93a 	.word	0x3de5d93a
 8008b28:	8a2b9ceb 	.word	0x8a2b9ceb
 8008b2c:	be5ae5e6 	.word	0xbe5ae5e6
 8008b30:	57b1fe7d 	.word	0x57b1fe7d
 8008b34:	3ec71de3 	.word	0x3ec71de3
 8008b38:	19c161d5 	.word	0x19c161d5
 8008b3c:	bf2a01a0 	.word	0xbf2a01a0
 8008b40:	1110f8a6 	.word	0x1110f8a6
 8008b44:	3f811111 	.word	0x3f811111
 8008b48:	55555549 	.word	0x55555549
 8008b4c:	bfc55555 	.word	0xbfc55555
 8008b50:	55555549 	.word	0x55555549
 8008b54:	3fc55555 	.word	0x3fc55555

08008b58 <fabs>:
 8008b58:	ec51 0b10 	vmov	r0, r1, d0
 8008b5c:	ee10 2a10 	vmov	r2, s0
 8008b60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b64:	ec43 2b10 	vmov	d0, r2, r3
 8008b68:	4770      	bx	lr
 8008b6a:	0000      	movs	r0, r0
 8008b6c:	0000      	movs	r0, r0
	...

08008b70 <floor>:
 8008b70:	ee10 1a90 	vmov	r1, s1
 8008b74:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008b78:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8008b7c:	2b13      	cmp	r3, #19
 8008b7e:	b530      	push	{r4, r5, lr}
 8008b80:	ee10 0a10 	vmov	r0, s0
 8008b84:	ee10 5a10 	vmov	r5, s0
 8008b88:	dc31      	bgt.n	8008bee <floor+0x7e>
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	da15      	bge.n	8008bba <floor+0x4a>
 8008b8e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008c48 <floor+0xd8>
 8008b92:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008b96:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b9e:	dd07      	ble.n	8008bb0 <floor+0x40>
 8008ba0:	2900      	cmp	r1, #0
 8008ba2:	da4e      	bge.n	8008c42 <floor+0xd2>
 8008ba4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ba8:	4318      	orrs	r0, r3
 8008baa:	d001      	beq.n	8008bb0 <floor+0x40>
 8008bac:	4928      	ldr	r1, [pc, #160]	; (8008c50 <floor+0xe0>)
 8008bae:	2000      	movs	r0, #0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	ec43 2b10 	vmov	d0, r2, r3
 8008bb8:	e020      	b.n	8008bfc <floor+0x8c>
 8008bba:	4a26      	ldr	r2, [pc, #152]	; (8008c54 <floor+0xe4>)
 8008bbc:	411a      	asrs	r2, r3
 8008bbe:	ea01 0402 	and.w	r4, r1, r2
 8008bc2:	4304      	orrs	r4, r0
 8008bc4:	d01a      	beq.n	8008bfc <floor+0x8c>
 8008bc6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008c48 <floor+0xd8>
 8008bca:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008bce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd6:	ddeb      	ble.n	8008bb0 <floor+0x40>
 8008bd8:	2900      	cmp	r1, #0
 8008bda:	bfbe      	ittt	lt
 8008bdc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8008be0:	fa40 f303 	asrlt.w	r3, r0, r3
 8008be4:	18c9      	addlt	r1, r1, r3
 8008be6:	ea21 0102 	bic.w	r1, r1, r2
 8008bea:	2000      	movs	r0, #0
 8008bec:	e7e0      	b.n	8008bb0 <floor+0x40>
 8008bee:	2b33      	cmp	r3, #51	; 0x33
 8008bf0:	dd05      	ble.n	8008bfe <floor+0x8e>
 8008bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bf6:	d101      	bne.n	8008bfc <floor+0x8c>
 8008bf8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008bfc:	bd30      	pop	{r4, r5, pc}
 8008bfe:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8008c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c06:	40e2      	lsrs	r2, r4
 8008c08:	4202      	tst	r2, r0
 8008c0a:	d0f7      	beq.n	8008bfc <floor+0x8c>
 8008c0c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8008c48 <floor+0xd8>
 8008c10:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008c14:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c1c:	ddc8      	ble.n	8008bb0 <floor+0x40>
 8008c1e:	2900      	cmp	r1, #0
 8008c20:	da02      	bge.n	8008c28 <floor+0xb8>
 8008c22:	2b14      	cmp	r3, #20
 8008c24:	d103      	bne.n	8008c2e <floor+0xbe>
 8008c26:	3101      	adds	r1, #1
 8008c28:	ea20 0002 	bic.w	r0, r0, r2
 8008c2c:	e7c0      	b.n	8008bb0 <floor+0x40>
 8008c2e:	2401      	movs	r4, #1
 8008c30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008c34:	fa04 f303 	lsl.w	r3, r4, r3
 8008c38:	4418      	add	r0, r3
 8008c3a:	42a8      	cmp	r0, r5
 8008c3c:	bf38      	it	cc
 8008c3e:	1909      	addcc	r1, r1, r4
 8008c40:	e7f2      	b.n	8008c28 <floor+0xb8>
 8008c42:	2000      	movs	r0, #0
 8008c44:	4601      	mov	r1, r0
 8008c46:	e7b3      	b.n	8008bb0 <floor+0x40>
 8008c48:	8800759c 	.word	0x8800759c
 8008c4c:	7e37e43c 	.word	0x7e37e43c
 8008c50:	bff00000 	.word	0xbff00000
 8008c54:	000fffff 	.word	0x000fffff

08008c58 <scalbn>:
 8008c58:	b082      	sub	sp, #8
 8008c5a:	ed8d 0b00 	vstr	d0, [sp]
 8008c5e:	9b01      	ldr	r3, [sp, #4]
 8008c60:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008c64:	b9a2      	cbnz	r2, 8008c90 <scalbn+0x38>
 8008c66:	9a00      	ldr	r2, [sp, #0]
 8008c68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	d03a      	beq.n	8008ce6 <scalbn+0x8e>
 8008c70:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8008d48 <scalbn+0xf0>
 8008c74:	4b40      	ldr	r3, [pc, #256]	; (8008d78 <scalbn+0x120>)
 8008c76:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008c7a:	4298      	cmp	r0, r3
 8008c7c:	ed8d 7b00 	vstr	d7, [sp]
 8008c80:	da11      	bge.n	8008ca6 <scalbn+0x4e>
 8008c82:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8008d50 <scalbn+0xf8>
 8008c86:	ed9d 6b00 	vldr	d6, [sp]
 8008c8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c8e:	e007      	b.n	8008ca0 <scalbn+0x48>
 8008c90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008c94:	428a      	cmp	r2, r1
 8008c96:	d10a      	bne.n	8008cae <scalbn+0x56>
 8008c98:	ed9d 7b00 	vldr	d7, [sp]
 8008c9c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008ca0:	ed8d 7b00 	vstr	d7, [sp]
 8008ca4:	e01f      	b.n	8008ce6 <scalbn+0x8e>
 8008ca6:	9b01      	ldr	r3, [sp, #4]
 8008ca8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008cac:	3a36      	subs	r2, #54	; 0x36
 8008cae:	4402      	add	r2, r0
 8008cb0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008cb4:	428a      	cmp	r2, r1
 8008cb6:	dd0a      	ble.n	8008cce <scalbn+0x76>
 8008cb8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8008d58 <scalbn+0x100>
 8008cbc:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8008d60 <scalbn+0x108>
 8008cc0:	eeb0 6b47 	vmov.f64	d6, d7
 8008cc4:	9b01      	ldr	r3, [sp, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	fe27 7b05 	vselge.f64	d7, d7, d5
 8008ccc:	e7dd      	b.n	8008c8a <scalbn+0x32>
 8008cce:	2a00      	cmp	r2, #0
 8008cd0:	dd0d      	ble.n	8008cee <scalbn+0x96>
 8008cd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008cda:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008cde:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008ce2:	e9cd 0100 	strd	r0, r1, [sp]
 8008ce6:	ed9d 0b00 	vldr	d0, [sp]
 8008cea:	b002      	add	sp, #8
 8008cec:	4770      	bx	lr
 8008cee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008cf2:	da18      	bge.n	8008d26 <scalbn+0xce>
 8008cf4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008cf8:	4298      	cmp	r0, r3
 8008cfa:	9b01      	ldr	r3, [sp, #4]
 8008cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d00:	dd09      	ble.n	8008d16 <scalbn+0xbe>
 8008d02:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8008d58 <scalbn+0x100>
 8008d06:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8008d60 <scalbn+0x108>
 8008d0a:	eeb0 6b47 	vmov.f64	d6, d7
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8008d14:	e7b9      	b.n	8008c8a <scalbn+0x32>
 8008d16:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8008d50 <scalbn+0xf8>
 8008d1a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8008d68 <scalbn+0x110>
 8008d1e:	eeb0 6b47 	vmov.f64	d6, d7
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	e7f4      	b.n	8008d10 <scalbn+0xb8>
 8008d26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d2e:	3236      	adds	r2, #54	; 0x36
 8008d30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d34:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008d38:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8008d70 <scalbn+0x118>
 8008d3c:	ec41 0b17 	vmov	d7, r0, r1
 8008d40:	e7a3      	b.n	8008c8a <scalbn+0x32>
 8008d42:	bf00      	nop
 8008d44:	f3af 8000 	nop.w
 8008d48:	00000000 	.word	0x00000000
 8008d4c:	43500000 	.word	0x43500000
 8008d50:	c2f8f359 	.word	0xc2f8f359
 8008d54:	01a56e1f 	.word	0x01a56e1f
 8008d58:	8800759c 	.word	0x8800759c
 8008d5c:	7e37e43c 	.word	0x7e37e43c
 8008d60:	8800759c 	.word	0x8800759c
 8008d64:	fe37e43c 	.word	0xfe37e43c
 8008d68:	c2f8f359 	.word	0xc2f8f359
 8008d6c:	81a56e1f 	.word	0x81a56e1f
 8008d70:	00000000 	.word	0x00000000
 8008d74:	3c900000 	.word	0x3c900000
 8008d78:	ffff3cb0 	.word	0xffff3cb0

08008d7c <abort>:
 8008d7c:	b508      	push	{r3, lr}
 8008d7e:	2006      	movs	r0, #6
 8008d80:	f000 f928 	bl	8008fd4 <raise>
 8008d84:	2001      	movs	r0, #1
 8008d86:	f7f8 f9be 	bl	8001106 <_exit>
	...

08008d8c <__errno>:
 8008d8c:	4b01      	ldr	r3, [pc, #4]	; (8008d94 <__errno+0x8>)
 8008d8e:	6818      	ldr	r0, [r3, #0]
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	20000014 	.word	0x20000014

08008d98 <__libc_init_array>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	4d0d      	ldr	r5, [pc, #52]	; (8008dd0 <__libc_init_array+0x38>)
 8008d9c:	4c0d      	ldr	r4, [pc, #52]	; (8008dd4 <__libc_init_array+0x3c>)
 8008d9e:	1b64      	subs	r4, r4, r5
 8008da0:	10a4      	asrs	r4, r4, #2
 8008da2:	2600      	movs	r6, #0
 8008da4:	42a6      	cmp	r6, r4
 8008da6:	d109      	bne.n	8008dbc <__libc_init_array+0x24>
 8008da8:	4d0b      	ldr	r5, [pc, #44]	; (8008dd8 <__libc_init_array+0x40>)
 8008daa:	4c0c      	ldr	r4, [pc, #48]	; (8008ddc <__libc_init_array+0x44>)
 8008dac:	f000 f93c 	bl	8009028 <_init>
 8008db0:	1b64      	subs	r4, r4, r5
 8008db2:	10a4      	asrs	r4, r4, #2
 8008db4:	2600      	movs	r6, #0
 8008db6:	42a6      	cmp	r6, r4
 8008db8:	d105      	bne.n	8008dc6 <__libc_init_array+0x2e>
 8008dba:	bd70      	pop	{r4, r5, r6, pc}
 8008dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc0:	4798      	blx	r3
 8008dc2:	3601      	adds	r6, #1
 8008dc4:	e7ee      	b.n	8008da4 <__libc_init_array+0xc>
 8008dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dca:	4798      	blx	r3
 8008dcc:	3601      	adds	r6, #1
 8008dce:	e7f2      	b.n	8008db6 <__libc_init_array+0x1e>
 8008dd0:	08009658 	.word	0x08009658
 8008dd4:	08009658 	.word	0x08009658
 8008dd8:	08009658 	.word	0x08009658
 8008ddc:	0800965c 	.word	0x0800965c

08008de0 <malloc>:
 8008de0:	4b02      	ldr	r3, [pc, #8]	; (8008dec <malloc+0xc>)
 8008de2:	4601      	mov	r1, r0
 8008de4:	6818      	ldr	r0, [r3, #0]
 8008de6:	f000 b863 	b.w	8008eb0 <_malloc_r>
 8008dea:	bf00      	nop
 8008dec:	20000014 	.word	0x20000014

08008df0 <free>:
 8008df0:	4b02      	ldr	r3, [pc, #8]	; (8008dfc <free+0xc>)
 8008df2:	4601      	mov	r1, r0
 8008df4:	6818      	ldr	r0, [r3, #0]
 8008df6:	f000 b80b 	b.w	8008e10 <_free_r>
 8008dfa:	bf00      	nop
 8008dfc:	20000014 	.word	0x20000014

08008e00 <memset>:
 8008e00:	4402      	add	r2, r0
 8008e02:	4603      	mov	r3, r0
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d100      	bne.n	8008e0a <memset+0xa>
 8008e08:	4770      	bx	lr
 8008e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e0e:	e7f9      	b.n	8008e04 <memset+0x4>

08008e10 <_free_r>:
 8008e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e12:	2900      	cmp	r1, #0
 8008e14:	d048      	beq.n	8008ea8 <_free_r+0x98>
 8008e16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e1a:	9001      	str	r0, [sp, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f1a1 0404 	sub.w	r4, r1, #4
 8008e22:	bfb8      	it	lt
 8008e24:	18e4      	addlt	r4, r4, r3
 8008e26:	f000 f8f1 	bl	800900c <__malloc_lock>
 8008e2a:	4a20      	ldr	r2, [pc, #128]	; (8008eac <_free_r+0x9c>)
 8008e2c:	9801      	ldr	r0, [sp, #4]
 8008e2e:	6813      	ldr	r3, [r2, #0]
 8008e30:	4615      	mov	r5, r2
 8008e32:	b933      	cbnz	r3, 8008e42 <_free_r+0x32>
 8008e34:	6063      	str	r3, [r4, #4]
 8008e36:	6014      	str	r4, [r2, #0]
 8008e38:	b003      	add	sp, #12
 8008e3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e3e:	f000 b8eb 	b.w	8009018 <__malloc_unlock>
 8008e42:	42a3      	cmp	r3, r4
 8008e44:	d90b      	bls.n	8008e5e <_free_r+0x4e>
 8008e46:	6821      	ldr	r1, [r4, #0]
 8008e48:	1862      	adds	r2, r4, r1
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	bf04      	itt	eq
 8008e4e:	681a      	ldreq	r2, [r3, #0]
 8008e50:	685b      	ldreq	r3, [r3, #4]
 8008e52:	6063      	str	r3, [r4, #4]
 8008e54:	bf04      	itt	eq
 8008e56:	1852      	addeq	r2, r2, r1
 8008e58:	6022      	streq	r2, [r4, #0]
 8008e5a:	602c      	str	r4, [r5, #0]
 8008e5c:	e7ec      	b.n	8008e38 <_free_r+0x28>
 8008e5e:	461a      	mov	r2, r3
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	b10b      	cbz	r3, 8008e68 <_free_r+0x58>
 8008e64:	42a3      	cmp	r3, r4
 8008e66:	d9fa      	bls.n	8008e5e <_free_r+0x4e>
 8008e68:	6811      	ldr	r1, [r2, #0]
 8008e6a:	1855      	adds	r5, r2, r1
 8008e6c:	42a5      	cmp	r5, r4
 8008e6e:	d10b      	bne.n	8008e88 <_free_r+0x78>
 8008e70:	6824      	ldr	r4, [r4, #0]
 8008e72:	4421      	add	r1, r4
 8008e74:	1854      	adds	r4, r2, r1
 8008e76:	42a3      	cmp	r3, r4
 8008e78:	6011      	str	r1, [r2, #0]
 8008e7a:	d1dd      	bne.n	8008e38 <_free_r+0x28>
 8008e7c:	681c      	ldr	r4, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	6053      	str	r3, [r2, #4]
 8008e82:	4421      	add	r1, r4
 8008e84:	6011      	str	r1, [r2, #0]
 8008e86:	e7d7      	b.n	8008e38 <_free_r+0x28>
 8008e88:	d902      	bls.n	8008e90 <_free_r+0x80>
 8008e8a:	230c      	movs	r3, #12
 8008e8c:	6003      	str	r3, [r0, #0]
 8008e8e:	e7d3      	b.n	8008e38 <_free_r+0x28>
 8008e90:	6825      	ldr	r5, [r4, #0]
 8008e92:	1961      	adds	r1, r4, r5
 8008e94:	428b      	cmp	r3, r1
 8008e96:	bf04      	itt	eq
 8008e98:	6819      	ldreq	r1, [r3, #0]
 8008e9a:	685b      	ldreq	r3, [r3, #4]
 8008e9c:	6063      	str	r3, [r4, #4]
 8008e9e:	bf04      	itt	eq
 8008ea0:	1949      	addeq	r1, r1, r5
 8008ea2:	6021      	streq	r1, [r4, #0]
 8008ea4:	6054      	str	r4, [r2, #4]
 8008ea6:	e7c7      	b.n	8008e38 <_free_r+0x28>
 8008ea8:	b003      	add	sp, #12
 8008eaa:	bd30      	pop	{r4, r5, pc}
 8008eac:	2000009c 	.word	0x2000009c

08008eb0 <_malloc_r>:
 8008eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb2:	1ccd      	adds	r5, r1, #3
 8008eb4:	f025 0503 	bic.w	r5, r5, #3
 8008eb8:	3508      	adds	r5, #8
 8008eba:	2d0c      	cmp	r5, #12
 8008ebc:	bf38      	it	cc
 8008ebe:	250c      	movcc	r5, #12
 8008ec0:	2d00      	cmp	r5, #0
 8008ec2:	4606      	mov	r6, r0
 8008ec4:	db01      	blt.n	8008eca <_malloc_r+0x1a>
 8008ec6:	42a9      	cmp	r1, r5
 8008ec8:	d903      	bls.n	8008ed2 <_malloc_r+0x22>
 8008eca:	230c      	movs	r3, #12
 8008ecc:	6033      	str	r3, [r6, #0]
 8008ece:	2000      	movs	r0, #0
 8008ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ed2:	f000 f89b 	bl	800900c <__malloc_lock>
 8008ed6:	4921      	ldr	r1, [pc, #132]	; (8008f5c <_malloc_r+0xac>)
 8008ed8:	680a      	ldr	r2, [r1, #0]
 8008eda:	4614      	mov	r4, r2
 8008edc:	b99c      	cbnz	r4, 8008f06 <_malloc_r+0x56>
 8008ede:	4f20      	ldr	r7, [pc, #128]	; (8008f60 <_malloc_r+0xb0>)
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	b923      	cbnz	r3, 8008eee <_malloc_r+0x3e>
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f000 f83c 	bl	8008f64 <_sbrk_r>
 8008eec:	6038      	str	r0, [r7, #0]
 8008eee:	4629      	mov	r1, r5
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	f000 f837 	bl	8008f64 <_sbrk_r>
 8008ef6:	1c43      	adds	r3, r0, #1
 8008ef8:	d123      	bne.n	8008f42 <_malloc_r+0x92>
 8008efa:	230c      	movs	r3, #12
 8008efc:	6033      	str	r3, [r6, #0]
 8008efe:	4630      	mov	r0, r6
 8008f00:	f000 f88a 	bl	8009018 <__malloc_unlock>
 8008f04:	e7e3      	b.n	8008ece <_malloc_r+0x1e>
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	1b5b      	subs	r3, r3, r5
 8008f0a:	d417      	bmi.n	8008f3c <_malloc_r+0x8c>
 8008f0c:	2b0b      	cmp	r3, #11
 8008f0e:	d903      	bls.n	8008f18 <_malloc_r+0x68>
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	441c      	add	r4, r3
 8008f14:	6025      	str	r5, [r4, #0]
 8008f16:	e004      	b.n	8008f22 <_malloc_r+0x72>
 8008f18:	6863      	ldr	r3, [r4, #4]
 8008f1a:	42a2      	cmp	r2, r4
 8008f1c:	bf0c      	ite	eq
 8008f1e:	600b      	streq	r3, [r1, #0]
 8008f20:	6053      	strne	r3, [r2, #4]
 8008f22:	4630      	mov	r0, r6
 8008f24:	f000 f878 	bl	8009018 <__malloc_unlock>
 8008f28:	f104 000b 	add.w	r0, r4, #11
 8008f2c:	1d23      	adds	r3, r4, #4
 8008f2e:	f020 0007 	bic.w	r0, r0, #7
 8008f32:	1ac2      	subs	r2, r0, r3
 8008f34:	d0cc      	beq.n	8008ed0 <_malloc_r+0x20>
 8008f36:	1a1b      	subs	r3, r3, r0
 8008f38:	50a3      	str	r3, [r4, r2]
 8008f3a:	e7c9      	b.n	8008ed0 <_malloc_r+0x20>
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	6864      	ldr	r4, [r4, #4]
 8008f40:	e7cc      	b.n	8008edc <_malloc_r+0x2c>
 8008f42:	1cc4      	adds	r4, r0, #3
 8008f44:	f024 0403 	bic.w	r4, r4, #3
 8008f48:	42a0      	cmp	r0, r4
 8008f4a:	d0e3      	beq.n	8008f14 <_malloc_r+0x64>
 8008f4c:	1a21      	subs	r1, r4, r0
 8008f4e:	4630      	mov	r0, r6
 8008f50:	f000 f808 	bl	8008f64 <_sbrk_r>
 8008f54:	3001      	adds	r0, #1
 8008f56:	d1dd      	bne.n	8008f14 <_malloc_r+0x64>
 8008f58:	e7cf      	b.n	8008efa <_malloc_r+0x4a>
 8008f5a:	bf00      	nop
 8008f5c:	2000009c 	.word	0x2000009c
 8008f60:	200000a0 	.word	0x200000a0

08008f64 <_sbrk_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4d06      	ldr	r5, [pc, #24]	; (8008f80 <_sbrk_r+0x1c>)
 8008f68:	2300      	movs	r3, #0
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	602b      	str	r3, [r5, #0]
 8008f70:	f7f8 f8d4 	bl	800111c <_sbrk>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d102      	bne.n	8008f7e <_sbrk_r+0x1a>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	b103      	cbz	r3, 8008f7e <_sbrk_r+0x1a>
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	20000144 	.word	0x20000144

08008f84 <_raise_r>:
 8008f84:	291f      	cmp	r1, #31
 8008f86:	b538      	push	{r3, r4, r5, lr}
 8008f88:	4604      	mov	r4, r0
 8008f8a:	460d      	mov	r5, r1
 8008f8c:	d904      	bls.n	8008f98 <_raise_r+0x14>
 8008f8e:	2316      	movs	r3, #22
 8008f90:	6003      	str	r3, [r0, #0]
 8008f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f96:	bd38      	pop	{r3, r4, r5, pc}
 8008f98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f9a:	b112      	cbz	r2, 8008fa2 <_raise_r+0x1e>
 8008f9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fa0:	b94b      	cbnz	r3, 8008fb6 <_raise_r+0x32>
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 f830 	bl	8009008 <_getpid_r>
 8008fa8:	462a      	mov	r2, r5
 8008faa:	4601      	mov	r1, r0
 8008fac:	4620      	mov	r0, r4
 8008fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fb2:	f000 b817 	b.w	8008fe4 <_kill_r>
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d00a      	beq.n	8008fd0 <_raise_r+0x4c>
 8008fba:	1c59      	adds	r1, r3, #1
 8008fbc:	d103      	bne.n	8008fc6 <_raise_r+0x42>
 8008fbe:	2316      	movs	r3, #22
 8008fc0:	6003      	str	r3, [r0, #0]
 8008fc2:	2001      	movs	r0, #1
 8008fc4:	e7e7      	b.n	8008f96 <_raise_r+0x12>
 8008fc6:	2400      	movs	r4, #0
 8008fc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fcc:	4628      	mov	r0, r5
 8008fce:	4798      	blx	r3
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	e7e0      	b.n	8008f96 <_raise_r+0x12>

08008fd4 <raise>:
 8008fd4:	4b02      	ldr	r3, [pc, #8]	; (8008fe0 <raise+0xc>)
 8008fd6:	4601      	mov	r1, r0
 8008fd8:	6818      	ldr	r0, [r3, #0]
 8008fda:	f7ff bfd3 	b.w	8008f84 <_raise_r>
 8008fde:	bf00      	nop
 8008fe0:	20000014 	.word	0x20000014

08008fe4 <_kill_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d07      	ldr	r5, [pc, #28]	; (8009004 <_kill_r+0x20>)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4604      	mov	r4, r0
 8008fec:	4608      	mov	r0, r1
 8008fee:	4611      	mov	r1, r2
 8008ff0:	602b      	str	r3, [r5, #0]
 8008ff2:	f7f8 f878 	bl	80010e6 <_kill>
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	d102      	bne.n	8009000 <_kill_r+0x1c>
 8008ffa:	682b      	ldr	r3, [r5, #0]
 8008ffc:	b103      	cbz	r3, 8009000 <_kill_r+0x1c>
 8008ffe:	6023      	str	r3, [r4, #0]
 8009000:	bd38      	pop	{r3, r4, r5, pc}
 8009002:	bf00      	nop
 8009004:	20000144 	.word	0x20000144

08009008 <_getpid_r>:
 8009008:	f7f8 b865 	b.w	80010d6 <_getpid>

0800900c <__malloc_lock>:
 800900c:	4801      	ldr	r0, [pc, #4]	; (8009014 <__malloc_lock+0x8>)
 800900e:	f000 b809 	b.w	8009024 <__retarget_lock_acquire_recursive>
 8009012:	bf00      	nop
 8009014:	2000014c 	.word	0x2000014c

08009018 <__malloc_unlock>:
 8009018:	4801      	ldr	r0, [pc, #4]	; (8009020 <__malloc_unlock+0x8>)
 800901a:	f000 b804 	b.w	8009026 <__retarget_lock_release_recursive>
 800901e:	bf00      	nop
 8009020:	2000014c 	.word	0x2000014c

08009024 <__retarget_lock_acquire_recursive>:
 8009024:	4770      	bx	lr

08009026 <__retarget_lock_release_recursive>:
 8009026:	4770      	bx	lr

08009028 <_init>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	bf00      	nop
 800902c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902e:	bc08      	pop	{r3}
 8009030:	469e      	mov	lr, r3
 8009032:	4770      	bx	lr

08009034 <_fini>:
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	bf00      	nop
 8009038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903a:	bc08      	pop	{r3}
 800903c:	469e      	mov	lr, r3
 800903e:	4770      	bx	lr
